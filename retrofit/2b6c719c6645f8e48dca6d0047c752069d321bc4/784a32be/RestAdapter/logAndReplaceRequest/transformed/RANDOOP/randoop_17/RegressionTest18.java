import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest18 {

    public static boolean debug = false;

    @Test
    public void test09001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09001");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor26);
        retrofit.client.Client.Provider provider29 = null;
        builder28.clientProvider = provider29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter33.requestInterceptor = requestInterceptor35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        restAdapter33.log = log45;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter33.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = restAdapter33.log;
        retrofit.RestAdapter.Builder builder52 = builder31.setLog(log51);
        retrofit.RequestInterceptor requestInterceptor53 = builder31.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor54 = builder31.requestInterceptor;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter56 = null;
        builder55.converter = converter56;
        retrofit.client.Client.Provider provider58 = null;
        builder55.clientProvider = provider58;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        builder55.requestInterceptor = requestInterceptor60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.Profiler profiler67 = null;
        builder66.profiler = profiler67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder69.setLog(log74);
        retrofit.RestAdapter restAdapter76 = builder69.build();
        retrofit.converter.Converter converter77 = null;
        builder69.converter = converter77;
        retrofit.ErrorHandler errorHandler79 = null;
        builder69.errorHandler = errorHandler79;
        retrofit.RequestInterceptor requestInterceptor81 = builder69.requestInterceptor;
        builder66.requestInterceptor = requestInterceptor81;
        retrofit.RestAdapter.Builder builder83 = builder55.setRequestInterceptor(requestInterceptor81);
        retrofit.RestAdapter.Builder builder84 = builder31.setRequestInterceptor(requestInterceptor81);
        retrofit.RestAdapter.LogLevel logLevel85 = builder84.logLevel;
        builder28.logLevel = logLevel85;
        retrofit.converter.Converter converter87 = builder28.converter;
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter87);
    }

    @Test
    public void test09002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09002");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.converter.Converter converter10 = restAdapter0.converter;
        java.util.concurrent.Executor executor11 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter12 = restAdapter0.converter;
        retrofit.Profiler profiler13 = null;
        restAdapter0.profiler = profiler13;
        retrofit.Profiler profiler15 = null;
        restAdapter0.profiler = profiler15;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(converter12);
    }

    @Test
    public void test09003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09003");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getMethod();
        java.lang.String str8 = request6.getMethod();
        retrofit.mime.TypedOutput typedOutput9 = request6.getBody();
        java.util.List<retrofit.client.Header> headerList10 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList11 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList12 = request6.getHeaders();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNotNull(headerList12);
    }

    @Test
    public void test09004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09004");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.converter.Converter converter10 = restAdapter0.converter;
        java.util.concurrent.Executor executor11 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor12 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider13 = restAdapter0.clientProvider;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter15 = null;
        restAdapter14.converter = converter15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter14.requestInterceptor = requestInterceptor17;
        retrofit.Profiler profiler19 = restAdapter14.profiler;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean21 = logLevel20.log();
        restAdapter14.logLevel = logLevel20;
        retrofit.Profiler profiler23 = null;
        restAdapter14.profiler = profiler23;
        retrofit.RestAdapter.Log log25 = restAdapter14.log;
        retrofit.Profiler profiler26 = null;
        restAdapter14.profiler = profiler26;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter14.logLevel;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.setLogLevel(logLevel33);
        retrofit.Server server35 = restAdapter29.server;
        retrofit.converter.Converter converter36 = restAdapter29.converter;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter39.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter39.requestInterceptor = requestInterceptor41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        restAdapter39.log = log51;
        retrofit.ErrorHandler errorHandler55 = null;
        restAdapter39.errorHandler = errorHandler55;
        retrofit.RestAdapter.Log log57 = restAdapter39.log;
        retrofit.RestAdapter.Builder builder58 = builder37.setLog(log57);
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder61 = builder37.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter63 = builder62.converter;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor65 = restAdapter64.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        restAdapter64.requestInterceptor = requestInterceptor66;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel77);
        restAdapter64.log = log76;
        retrofit.ErrorHandler errorHandler80 = null;
        restAdapter64.errorHandler = errorHandler80;
        retrofit.RestAdapter.Log log82 = restAdapter64.log;
        retrofit.RestAdapter.Builder builder83 = builder62.setLog(log82);
        retrofit.Profiler profiler84 = builder83.profiler;
        retrofit.client.Client.Provider provider85 = builder83.clientProvider;
        retrofit.RestAdapter.Builder builder87 = builder83.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter88 = builder87.build();
        retrofit.RestAdapter.Log log89 = builder87.log;
        retrofit.client.Client.Provider provider90 = builder87.clientProvider;
        retrofit.RestAdapter.Builder builder91 = builder37.setClient(provider90);
        restAdapter29.clientProvider = provider90;
        restAdapter14.clientProvider = provider90;
        restAdapter0.clientProvider = provider90;
        retrofit.ErrorHandler errorHandler95 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(profiler84);
        org.junit.Assert.assertNull(provider85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNotNull(provider90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(errorHandler95);
    }

    @Test
    public void test09005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09005");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", headerList14, typedOutput15);
        java.lang.String str17 = request16.getMethod();
        retrofit.mime.TypedOutput typedOutput18 = request16.getBody();
        java.util.List<retrofit.client.Header> headerList19 = request16.getHeaders();
        java.util.List<retrofit.client.Header> headerList20 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", headerList20, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", headerList20, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.getHeaders();
        java.lang.String str26 = request24.getMethod();
        java.lang.String str27 = request24.getUrl();
        java.lang.String str28 = request24.getMethod();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test09006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09006");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.converter.Converter converter11 = builder6.converter;
        java.util.concurrent.Executor executor12 = builder6.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder6.setLogLevel(logLevel15);
        java.util.concurrent.Executor executor18 = builder6.httpExecutor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.converter.Converter converter21 = restAdapter19.converter;
        java.util.concurrent.Executor executor22 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.client.Client.Provider provider28 = builder27.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        builder27.logLevel = logLevel29;
        retrofit.RestAdapter restAdapter32 = builder27.build();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        retrofit.converter.Converter converter36 = null;
        restAdapter33.converter = converter36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = builder38.converter;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter40.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter40.requestInterceptor = requestInterceptor42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        restAdapter40.log = log52;
        retrofit.ErrorHandler errorHandler56 = null;
        restAdapter40.errorHandler = errorHandler56;
        retrofit.RestAdapter.Log log58 = restAdapter40.log;
        retrofit.RestAdapter.Builder builder59 = builder38.setLog(log58);
        restAdapter33.log = log58;
        retrofit.RestAdapter.Builder builder61 = builder27.setLog(log58);
        restAdapter19.log = log58;
        retrofit.converter.Converter converter63 = restAdapter19.converter;
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel81);
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter83.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter83.logLevel = logLevel85;
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter83.setLogLevel(logLevel87);
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log80, logLevel87);
        restAdapter19.logLevel = logLevel87;
        retrofit.RestAdapter.Log log91 = restAdapter19.log;
        retrofit.RestAdapter.Builder builder92 = builder6.setLog(log91);
        retrofit.RestAdapter restAdapter93 = builder92.build();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(restAdapter93);
    }

    @Test
    public void test09007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09007");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder0.requestInterceptor = requestInterceptor6;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.Server server11 = null;
        builder0.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = null;
        builder13.converter = converter14;
        retrofit.client.Client.Provider provider16 = null;
        builder13.clientProvider = provider16;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        builder13.requestInterceptor = requestInterceptor18;
        retrofit.Profiler profiler20 = builder13.profiler;
        retrofit.converter.Converter converter21 = builder13.converter;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder26 = builder22.setServer("hi!");
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        builder26.logLevel = logLevel28;
        retrofit.RestAdapter restAdapter31 = builder26.build();
        retrofit.ErrorHandler errorHandler32 = builder26.errorHandler;
        retrofit.RestAdapter.Builder builder33 = builder13.setErrorHandler(errorHandler32);
        retrofit.RestAdapter.Builder builder34 = builder0.setErrorHandler(errorHandler32);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.client.Client.Provider provider38 = null;
        builder35.clientProvider = provider38;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        builder35.requestInterceptor = requestInterceptor40;
        retrofit.Profiler profiler42 = builder35.profiler;
        retrofit.converter.Converter converter43 = builder35.converter;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.client.Client.Provider provider49 = builder48.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean51 = logLevel50.log();
        builder48.logLevel = logLevel50;
        retrofit.RestAdapter restAdapter53 = builder48.build();
        retrofit.ErrorHandler errorHandler54 = builder48.errorHandler;
        retrofit.RestAdapter.Builder builder55 = builder35.setErrorHandler(errorHandler54);
        retrofit.converter.Converter converter56 = builder55.converter;
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.ErrorHandler errorHandler59 = builder55.errorHandler;
        retrofit.RestAdapter.Builder builder60 = builder34.setErrorHandler(errorHandler59);
        java.util.concurrent.Executor executor61 = builder60.httpExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(converter10);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executor61);
    }

    @Test
    public void test09008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09008");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = builder34.setLog(log39);
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter41.logLevel = logLevel43;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter41.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter41.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log39, logLevel47);
        boolean boolean50 = logLevel47.log();
        retrofit.RestAdapter.Builder builder51 = builder25.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider52 = builder51.clientProvider;
        retrofit.RestAdapter.Builder builder54 = builder51.setServer("hi!");
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider56 = null;
        restAdapter55.clientProvider = provider56;
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter60 = builder59.converter;
        retrofit.RestAdapter.LogLevel logLevel61 = builder59.logLevel;
        restAdapter55.logLevel = logLevel61;
        builder54.logLevel = logLevel61;
        retrofit.RequestInterceptor requestInterceptor64 = builder54.requestInterceptor;
        java.util.concurrent.Executor executor65 = builder54.callbackExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(converter60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(executor65);
    }

    @Test
    public void test09009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09009");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor10 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter0.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter0.requestInterceptor = requestInterceptor12;
        retrofit.Profiler profiler14 = restAdapter0.profiler;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(profiler14);
    }

    @Test
    public void test09010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09010");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.RestAdapter.Builder builder20 = builder7.setLogLevel(logLevel18);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.setLogLevel(logLevel25);
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter21.getLogLevel();
        builder20.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = builder29.converter;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter31.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        restAdapter31.requestInterceptor = requestInterceptor33;
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        restAdapter31.log = log43;
        retrofit.ErrorHandler errorHandler47 = null;
        restAdapter31.errorHandler = errorHandler47;
        retrofit.RestAdapter.Log log49 = restAdapter31.log;
        retrofit.RestAdapter.Builder builder50 = builder29.setLog(log49);
        builder20.log = log49;
        retrofit.RestAdapter.Builder builder52 = builder0.setLog(log49);
        retrofit.client.Client.Provider provider53 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter59 = builder58.build();
        retrofit.client.Header[] headerArray62 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList63 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList63, headerArray62);
        retrofit.mime.TypedOutput typedOutput65 = null;
        retrofit.client.Request request66 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList63, typedOutput65);
        java.lang.String str67 = request66.getMethod();
        java.lang.String str68 = request66.getMethod();
        retrofit.client.Request request69 = restAdapter59.logAndReplaceRequest(request66);
        retrofit.RequestInterceptor requestInterceptor70 = restAdapter59.requestInterceptor;
        retrofit.RestAdapter.Builder builder71 = builder0.setRequestInterceptor(requestInterceptor70);
        java.util.concurrent.Executor executor72 = builder71.callbackExecutor;
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(headerArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test09011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09011");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.Server server14 = restAdapter12.server;
        retrofit.Profiler profiler15 = null;
        restAdapter12.profiler = profiler15;
        retrofit.ErrorHandler errorHandler17 = restAdapter12.errorHandler;
        retrofit.client.Client.Provider provider18 = restAdapter12.clientProvider;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.converter.Converter converter22 = null;
        restAdapter19.converter = converter22;
        retrofit.RestAdapter.Log log24 = restAdapter19.log;
        retrofit.ErrorHandler errorHandler25 = restAdapter19.errorHandler;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.client.Client.Provider provider29 = null;
        builder26.clientProvider = provider29;
        retrofit.RestAdapter.Builder builder32 = builder26.setServer("hi!");
        retrofit.Profiler profiler33 = builder26.profiler;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = null;
        builder34.converter = converter35;
        retrofit.client.Client.Provider provider37 = null;
        builder34.clientProvider = provider37;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder34.requestInterceptor = requestInterceptor39;
        retrofit.Profiler profiler41 = builder34.profiler;
        retrofit.Profiler profiler42 = null;
        builder34.profiler = profiler42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor46 = builder44.requestInterceptor;
        java.util.concurrent.Executor executor47 = builder44.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel48 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.Profiler profiler54 = null;
        builder53.profiler = profiler54;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        builder53.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter restAdapter58 = builder53.build();
        retrofit.converter.Converter converter59 = null;
        builder53.converter = converter59;
        retrofit.client.Client.Provider provider61 = builder53.clientProvider;
        retrofit.RestAdapter.Builder builder62 = builder44.setClient(provider61);
        retrofit.RestAdapter.Builder builder63 = builder34.setClient(provider61);
        retrofit.client.Client.Provider provider64 = builder63.clientProvider;
        builder26.clientProvider = provider64;
        restAdapter19.clientProvider = provider64;
        restAdapter12.clientProvider = provider64;
        builder0.clientProvider = provider64;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder69.logLevel = logLevel74;
        retrofit.converter.Converter converter76 = null;
        builder69.converter = converter76;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor79 = restAdapter78.requestInterceptor;
        retrofit.converter.Converter converter80 = restAdapter78.converter;
        java.util.concurrent.Executor executor81 = null;
        restAdapter78.callbackExecutor = executor81;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor84 = null;
        restAdapter83.httpExecutor = executor84;
        retrofit.RequestInterceptor requestInterceptor86 = null;
        restAdapter83.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter.Log log88 = restAdapter83.log;
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter83.logLevel = logLevel89;
        restAdapter78.logLevel = logLevel89;
        retrofit.RestAdapter.Builder builder92 = builder69.setLogLevel(logLevel89);
        retrofit.Server server93 = builder92.server;
        retrofit.RestAdapter.Builder builder94 = builder0.setServer(server93);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(provider61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(provider64);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor79);
        org.junit.Assert.assertNull(converter80);
        org.junit.Assert.assertNull(log88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(server93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test09012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09012");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider8 = null;
        restAdapter0.clientProvider = provider8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.client.Client.Provider provider13 = null;
        builder10.clientProvider = provider13;
        retrofit.client.Client.Provider provider15 = builder10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log40, logLevel44);
        retrofit.RestAdapter.Builder builder47 = builder18.setLog(log40);
        retrofit.Server server48 = builder47.server;
        retrofit.ErrorHandler errorHandler49 = null;
        builder47.errorHandler = errorHandler49;
        retrofit.Profiler profiler51 = null;
        builder47.profiler = profiler51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = builder53.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor55 = builder53.requestInterceptor;
        java.util.concurrent.Executor executor56 = builder53.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel57 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.Profiler profiler63 = null;
        builder62.profiler = profiler63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        builder62.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter restAdapter67 = builder62.build();
        retrofit.converter.Converter converter68 = null;
        builder62.converter = converter68;
        retrofit.client.Client.Provider provider70 = builder62.clientProvider;
        retrofit.RestAdapter.Builder builder71 = builder53.setClient(provider70);
        builder47.clientProvider = provider70;
        builder17.clientProvider = provider70;
        restAdapter0.clientProvider = provider70;
        retrofit.Profiler profiler75 = null;
        restAdapter0.profiler = profiler75;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(provider70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test09013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09013");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider10 = builder9.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean12 = logLevel11.log();
        builder9.logLevel = logLevel11;
        builder0.logLevel = logLevel11;
        retrofit.RestAdapter.Log log15 = builder0.log;
        retrofit.converter.Converter converter16 = builder0.converter;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder17.setLog(log22);
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        builder17.logLevel = logLevel33;
        retrofit.converter.Converter converter36 = builder17.converter;
        retrofit.ErrorHandler errorHandler37 = builder17.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel38 = builder17.logLevel;
        retrofit.Server server39 = builder17.server;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = builder40.converter;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter42.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter42.requestInterceptor = requestInterceptor44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        restAdapter42.log = log54;
        retrofit.ErrorHandler errorHandler58 = null;
        restAdapter42.errorHandler = errorHandler58;
        retrofit.RestAdapter.Log log60 = restAdapter42.log;
        retrofit.RestAdapter.Builder builder61 = builder40.setLog(log60);
        retrofit.RequestInterceptor requestInterceptor62 = builder40.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor63 = builder40.requestInterceptor;
        retrofit.RestAdapter.Log log64 = builder40.log;
        builder17.log = log64;
        retrofit.RestAdapter restAdapter66 = builder17.build();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.client.Client.Provider provider70 = null;
        builder67.clientProvider = provider70;
        retrofit.RestAdapter.Builder builder73 = builder67.setServer("hi!");
        java.util.concurrent.Executor executor74 = builder67.callbackExecutor;
        java.util.concurrent.Executor executor75 = builder67.callbackExecutor;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.client.Client.Provider provider81 = builder80.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean83 = logLevel82.log();
        builder80.logLevel = logLevel82;
        retrofit.RestAdapter restAdapter85 = builder80.build();
        retrofit.ErrorHandler errorHandler86 = builder80.errorHandler;
        retrofit.RestAdapter.Builder builder87 = builder67.setErrorHandler(errorHandler86);
        retrofit.RestAdapter.Builder builder88 = builder17.setErrorHandler(errorHandler86);
        retrofit.Server server89 = builder17.server;
        builder0.server = server89;
        retrofit.Profiler profiler91 = null;
        builder0.profiler = profiler91;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server39);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(provider81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(server89);
    }

    @Test
    public void test09014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09014");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.client.Client.Provider provider8 = null;
        builder5.clientProvider = provider8;
        retrofit.client.Client.Provider provider10 = builder5.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.Profiler profiler18 = null;
        builder17.profiler = profiler18;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder17.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = builder17.build();
        retrofit.converter.Converter converter23 = restAdapter22.converter;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        log24.log("");
        restAdapter22.log = log24;
        retrofit.RestAdapter.Builder builder28 = builder5.setLog(log24);
        restAdapter0.log = log24;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler31 = null;
        restAdapter0.profiler = profiler31;
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(converter23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test09015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09015");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.Profiler profiler9 = null;
        restAdapter7.profiler = profiler9;
        java.util.concurrent.Executor executor11 = restAdapter7.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter7.logLevel;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = builder17.build();
        retrofit.client.Header[] headerArray21 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList22 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList22, headerArray21);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList22, typedOutput24);
        java.lang.String str26 = request25.getMethod();
        java.lang.String str27 = request25.getMethod();
        retrofit.client.Request request28 = restAdapter18.logAndReplaceRequest(request25);
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter18.logLevel;
        restAdapter7.setLogLevel(logLevel29);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(headerArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09016");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = null;
        builder24.converter = converter25;
        retrofit.client.Client.Provider provider27 = null;
        builder24.clientProvider = provider27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        builder24.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter restAdapter45 = builder38.build();
        retrofit.converter.Converter converter46 = null;
        builder38.converter = converter46;
        retrofit.ErrorHandler errorHandler48 = null;
        builder38.errorHandler = errorHandler48;
        retrofit.RequestInterceptor requestInterceptor50 = builder38.requestInterceptor;
        builder35.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.Builder builder52 = builder24.setRequestInterceptor(requestInterceptor50);
        retrofit.RestAdapter.Builder builder53 = builder0.setRequestInterceptor(requestInterceptor50);
        retrofit.Server server54 = builder0.server;
        retrofit.converter.Converter converter55 = builder0.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertNull(converter55);
    }

    @Test
    public void test09017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09017");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.Server server8 = null;
        restAdapter0.server = server8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = builder10.converter;
        retrofit.Profiler profiler12 = null;
        builder10.profiler = profiler12;
        retrofit.ErrorHandler errorHandler14 = null;
        builder10.errorHandler = errorHandler14;
        retrofit.RestAdapter.Builder builder17 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor23 = null;
        builder18.httpExecutor = executor23;
        retrofit.RestAdapter restAdapter25 = builder18.build();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.ErrorHandler errorHandler44 = null;
        restAdapter28.errorHandler = errorHandler44;
        retrofit.RestAdapter.Log log46 = restAdapter28.log;
        retrofit.RestAdapter.Builder builder47 = builder26.setLog(log46);
        retrofit.Profiler profiler48 = builder47.profiler;
        retrofit.Profiler profiler49 = builder47.profiler;
        java.util.concurrent.Executor executor50 = builder47.callbackExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("hi!");
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder51.setLog(log56);
        retrofit.RestAdapter restAdapter58 = builder51.build();
        java.util.concurrent.Executor executor59 = restAdapter58.httpExecutor;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.client.Client.Provider provider63 = null;
        builder60.clientProvider = provider63;
        retrofit.RestAdapter.Builder builder66 = builder60.setServer("hi!");
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder73 = builder67.setLog(log72);
        retrofit.RestAdapter restAdapter74 = builder67.build();
        java.util.concurrent.Executor executor75 = restAdapter74.httpExecutor;
        builder66.callbackExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = builder47.setExecutors(executor59, executor75);
        restAdapter25.httpExecutor = executor59;
        retrofit.Server server79 = null;
        retrofit.client.Client.Provider provider80 = null;
        java.util.concurrent.Executor executor81 = null;
        java.util.concurrent.Executor executor82 = null;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        retrofit.converter.Converter converter84 = null;
        retrofit.Profiler profiler85 = null;
        retrofit.ErrorHandler errorHandler86 = null;
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server79, provider80, executor81, executor82, requestInterceptor83, converter84, profiler85, errorHandler86, log87, logLevel88);
        restAdapter25.logLevel = logLevel88;
        retrofit.ErrorHandler errorHandler91 = restAdapter25.errorHandler;
        builder10.errorHandler = errorHandler91;
        restAdapter0.errorHandler = errorHandler91;
        retrofit.RestAdapter.Log log94 = restAdapter0.log;
        retrofit.client.Client.Provider provider95 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel96 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor97 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Log log98 = restAdapter0.log;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(executor75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNull(log94);
        org.junit.Assert.assertNull(provider95);
        org.junit.Assert.assertNull(logLevel96);
        org.junit.Assert.assertNull(requestInterceptor97);
        org.junit.Assert.assertNull(log98);
    }

    @Test
    public void test09018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09018");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log5 = restAdapter4.log;
        java.util.concurrent.Executor executor6 = restAdapter4.callbackExecutor;
        retrofit.Profiler profiler7 = restAdapter4.profiler;
        retrofit.Profiler profiler8 = null;
        restAdapter4.profiler = profiler8;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter4.requestInterceptor = requestInterceptor10;
        retrofit.client.Client.Provider provider12 = restAdapter4.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter4.requestInterceptor;
        retrofit.ErrorHandler errorHandler14 = restAdapter4.errorHandler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.client.Client.Provider provider20 = builder19.clientProvider;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = builder21.setLog(log26);
        retrofit.RestAdapter restAdapter28 = builder21.build();
        java.util.concurrent.Executor executor29 = restAdapter28.httpExecutor;
        retrofit.Profiler profiler30 = null;
        restAdapter28.profiler = profiler30;
        java.util.concurrent.Executor executor32 = restAdapter28.callbackExecutor;
        builder19.httpExecutor = executor32;
        restAdapter4.callbackExecutor = executor32;
        restAdapter0.httpExecutor = executor32;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor37 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertNull(executor37);
    }

    @Test
    public void test09019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09019");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.ErrorHandler errorHandler31 = null;
        builder29.errorHandler = errorHandler31;
        retrofit.Profiler profiler33 = null;
        builder29.profiler = profiler33;
        retrofit.ErrorHandler errorHandler35 = builder29.errorHandler;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.Server server38 = restAdapter36.server;
        retrofit.client.Client.Provider provider39 = null;
        restAdapter36.clientProvider = provider39;
        retrofit.Server server41 = null;
        restAdapter36.server = server41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter44 = null;
        restAdapter43.converter = converter44;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter43.requestInterceptor = requestInterceptor46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log49 = restAdapter48.log;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        restAdapter48.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.LogLevel logLevel52 = null;
        restAdapter48.logLevel = logLevel52;
        retrofit.ErrorHandler errorHandler54 = restAdapter48.errorHandler;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.Profiler profiler60 = null;
        builder59.profiler = profiler60;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        builder59.requestInterceptor = requestInterceptor62;
        retrofit.RestAdapter restAdapter64 = builder59.build();
        retrofit.converter.Converter converter65 = restAdapter64.converter;
        restAdapter48.converter = converter65;
        restAdapter43.converter = converter65;
        restAdapter36.converter = converter65;
        retrofit.converter.Converter converter69 = restAdapter36.converter;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor71 = restAdapter70.requestInterceptor;
        java.util.concurrent.Executor executor72 = restAdapter70.callbackExecutor;
        retrofit.converter.Converter converter73 = null;
        restAdapter70.converter = converter73;
        retrofit.RestAdapter.Log log75 = restAdapter70.log;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.client.Client.Provider provider79 = null;
        builder76.clientProvider = provider79;
        retrofit.RestAdapter.Builder builder82 = builder76.setServer("hi!");
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor84 = null;
        builder83.httpExecutor = executor84;
        retrofit.RestAdapter.Builder builder87 = builder83.setServer("hi!");
        retrofit.RestAdapter.Log log88 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder89 = builder83.setLog(log88);
        retrofit.RestAdapter restAdapter90 = builder83.build();
        java.util.concurrent.Executor executor91 = restAdapter90.httpExecutor;
        builder82.callbackExecutor = executor91;
        restAdapter70.httpExecutor = executor91;
        restAdapter36.callbackExecutor = executor91;
        builder29.callbackExecutor = executor91;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter96 = builder29.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(converter65);
        org.junit.Assert.assertNotNull(converter69);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertNull(log75);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(restAdapter90);
        org.junit.Assert.assertNotNull(executor91);
    }

    @Test
    public void test09020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09020");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", headerList16, typedOutput17);
        java.lang.String str19 = request18.getMethod();
        retrofit.mime.TypedOutput typedOutput20 = request18.getBody();
        java.util.List<retrofit.client.Header> headerList21 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("hi!", "hi!", headerList21, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("Retrofit-Idle", "", headerList21, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("Retrofit-Idle", "", headerList21, typedOutput26);
        java.util.List<retrofit.client.Header> headerList28 = request27.getHeaders();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNotNull(headerList28);
    }

    @Test
    public void test09021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09021");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        java.util.concurrent.Executor executor26 = restAdapter8.callbackExecutor;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter42.logLevel = logLevel44;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter42.requestInterceptor = requestInterceptor46;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter42.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log40, logLevel48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("hi!");
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder51.setLog(log56);
        restAdapter50.log = log56;
        restAdapter8.log = log56;
        java.util.concurrent.Executor executor60 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.client.Client.Provider provider64 = null;
        builder61.clientProvider = provider64;
        retrofit.client.Client.Provider provider66 = builder61.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder68 = builder61.setLogLevel(logLevel67);
        retrofit.RequestInterceptor requestInterceptor69 = null;
        builder68.requestInterceptor = requestInterceptor69;
        retrofit.Profiler profiler71 = builder68.profiler;
        retrofit.RequestInterceptor requestInterceptor72 = builder68.requestInterceptor;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor74 = restAdapter73.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter73.new RestHandler();
        retrofit.Profiler profiler76 = null;
        restAdapter73.profiler = profiler76;
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.client.Client.Provider provider82 = null;
        builder79.clientProvider = provider82;
        retrofit.client.Client.Provider provider84 = builder79.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel85);
        java.util.concurrent.Executor executor87 = builder86.callbackExecutor;
        builder86.ensureSaneDefaults();
        java.util.concurrent.Executor executor89 = builder86.callbackExecutor;
        restAdapter73.httpExecutor = executor89;
        java.util.concurrent.Executor executor91 = restAdapter73.httpExecutor;
        builder68.httpExecutor = executor91;
        restAdapter8.httpExecutor = executor91;
        restAdapter0.callbackExecutor = executor91;
        java.util.concurrent.Executor executor95 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(provider66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertNull(provider84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(executor87);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNotNull(executor91);
        org.junit.Assert.assertNotNull(executor95);
    }

    @Test
    public void test09022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09022");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log19, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor30 = builder29.httpExecutor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.RestAdapter.LogLevel logLevel38 = builder35.logLevel;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter39.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter39.requestInterceptor = requestInterceptor41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        restAdapter39.log = log51;
        retrofit.ErrorHandler errorHandler55 = null;
        restAdapter39.errorHandler = errorHandler55;
        retrofit.converter.Converter converter57 = null;
        restAdapter39.converter = converter57;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor68 = restAdapter67.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        restAdapter67.requestInterceptor = requestInterceptor69;
        retrofit.Server server71 = null;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel80);
        restAdapter67.log = log79;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean84 = logLevel83.log();
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log79, logLevel83);
        restAdapter39.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder87 = builder35.setLogLevel(logLevel83);
        builder29.logLevel = logLevel83;
        retrofit.ErrorHandler errorHandler89 = builder29.errorHandler;
        retrofit.Profiler profiler90 = null;
        builder29.profiler = profiler90;
        retrofit.Profiler profiler92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder93 = builder29.setProfiler(profiler92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(errorHandler89);
    }

    @Test
    public void test09023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09023");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder0.profiler;
        retrofit.converter.Converter converter23 = null;
        builder0.converter = converter23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = builder25.build();
        java.util.concurrent.Executor executor33 = restAdapter32.httpExecutor;
        retrofit.Profiler profiler34 = null;
        restAdapter32.profiler = profiler34;
        java.util.concurrent.Executor executor36 = restAdapter32.callbackExecutor;
        retrofit.RestAdapter.Log log37 = restAdapter32.log;
        java.util.concurrent.Executor executor38 = restAdapter32.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter32.new RestHandler();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log41 = restAdapter40.log;
        java.util.concurrent.Executor executor42 = restAdapter40.callbackExecutor;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        retrofit.converter.Converter converter45 = restAdapter43.converter;
        java.util.concurrent.Executor executor46 = null;
        restAdapter43.callbackExecutor = executor46;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter43.logLevel = logLevel48;
        restAdapter40.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("hi!");
        java.util.concurrent.Executor executor56 = null;
        builder51.httpExecutor = executor56;
        retrofit.RestAdapter restAdapter58 = builder51.build();
        retrofit.converter.Converter converter59 = restAdapter58.converter;
        retrofit.RequestInterceptor requestInterceptor60 = restAdapter58.requestInterceptor;
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        restAdapter40.log = log61;
        restAdapter32.log = log61;
        builder0.log = log61;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(converter59);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(log61);
    }

    @Test
    public void test09024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09024");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        java.util.concurrent.Executor executor6 = builder4.httpExecutor;
        retrofit.Profiler profiler7 = null;
        builder4.profiler = profiler7;
        retrofit.client.Client.Provider provider9 = builder4.clientProvider;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        java.util.concurrent.Executor executor15 = null;
        builder10.httpExecutor = executor15;
        retrofit.RestAdapter restAdapter17 = builder10.build();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter19 = builder18.converter;
        retrofit.Profiler profiler20 = null;
        builder18.profiler = profiler20;
        retrofit.ErrorHandler errorHandler22 = null;
        builder18.errorHandler = errorHandler22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Log log44 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder45 = builder24.setLog(log44);
        retrofit.RestAdapter.Builder builder46 = builder18.setLog(log44);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = builder47.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor49 = builder47.requestInterceptor;
        retrofit.ErrorHandler errorHandler50 = null;
        builder47.errorHandler = errorHandler50;
        retrofit.converter.Converter converter52 = null;
        builder47.converter = converter52;
        retrofit.ErrorHandler errorHandler54 = null;
        builder47.errorHandler = errorHandler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.Profiler profiler61 = null;
        builder60.profiler = profiler61;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder60.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter restAdapter65 = builder60.build();
        retrofit.converter.Converter converter66 = restAdapter65.converter;
        retrofit.RestAdapter.Builder builder67 = builder47.setConverter(converter66);
        builder46.converter = converter66;
        builder10.converter = converter66;
        retrofit.RestAdapter.Builder builder70 = builder4.setConverter(converter66);
        builder70.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(converter66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test09025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09025");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider4 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(converter6);
    }

    @Test
    public void test09026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09026");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        java.util.concurrent.Executor executor7 = builder0.httpExecutor;
        retrofit.Profiler profiler8 = builder0.profiler;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.converter.Converter converter11 = restAdapter9.converter;
        java.util.concurrent.Executor executor12 = restAdapter9.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider18 = builder17.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        builder17.logLevel = logLevel19;
        retrofit.RestAdapter restAdapter22 = builder17.build();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter23.requestInterceptor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.converter.Converter converter26 = null;
        restAdapter23.converter = converter26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter29 = builder28.converter;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter30.requestInterceptor = requestInterceptor32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        restAdapter30.log = log42;
        retrofit.ErrorHandler errorHandler46 = null;
        restAdapter30.errorHandler = errorHandler46;
        retrofit.RestAdapter.Log log48 = restAdapter30.log;
        retrofit.RestAdapter.Builder builder49 = builder28.setLog(log48);
        restAdapter23.log = log48;
        retrofit.RestAdapter.Builder builder51 = builder17.setLog(log48);
        restAdapter9.log = log48;
        retrofit.converter.Converter converter53 = restAdapter9.converter;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log55 = restAdapter54.log;
        java.util.concurrent.Executor executor56 = restAdapter54.callbackExecutor;
        retrofit.Profiler profiler57 = restAdapter54.profiler;
        retrofit.Profiler profiler58 = null;
        restAdapter54.profiler = profiler58;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        restAdapter54.requestInterceptor = requestInterceptor60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter63 = builder62.converter;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor65 = restAdapter64.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        restAdapter64.requestInterceptor = requestInterceptor66;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel77);
        restAdapter64.log = log76;
        retrofit.ErrorHandler errorHandler80 = null;
        restAdapter64.errorHandler = errorHandler80;
        retrofit.RestAdapter.Log log82 = restAdapter64.log;
        retrofit.RestAdapter.Builder builder83 = builder62.setLog(log82);
        retrofit.RequestInterceptor requestInterceptor84 = builder62.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor85 = builder62.requestInterceptor;
        retrofit.RestAdapter.Log log86 = builder62.log;
        restAdapter54.log = log86;
        restAdapter9.log = log86;
        builder0.log = log86;
        log86.log("hi!");
        log86.log("Retrofit-Idle");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(requestInterceptor84);
        org.junit.Assert.assertNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(log86);
    }

    @Test
    public void test09027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09027");
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        java.lang.String str23 = request22.getUrl();
        java.util.List<retrofit.client.Header> headerList24 = request22.getHeaders();
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", headerList24, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList24, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", headerList24, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList24, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "hi!", headerList24, typedOutput33);
        java.util.List<retrofit.client.Header> headerList35 = request34.getHeaders();
        java.util.List<retrofit.client.Header> headerList36 = request34.getHeaders();
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList36, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "hi!", headerList36, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("", "", headerList36, typedOutput41);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(headerList24);
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertNotNull(headerList36);
    }

    @Test
    public void test09028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09028");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        java.util.concurrent.Executor executor19 = restAdapter18.httpExecutor;
        builder10.callbackExecutor = executor19;
        builder0.callbackExecutor = executor19;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        java.util.concurrent.Executor executor28 = null;
        builder23.httpExecutor = executor28;
        retrofit.RestAdapter restAdapter30 = builder23.build();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.client.Client.Provider provider32 = restAdapter30.clientProvider;
        builder0.clientProvider = provider32;
        java.util.concurrent.Executor executor34 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        retrofit.RestAdapter restAdapter42 = builder35.build();
        retrofit.converter.Converter converter43 = null;
        builder35.converter = converter43;
        retrofit.ErrorHandler errorHandler45 = null;
        builder35.errorHandler = errorHandler45;
        retrofit.RequestInterceptor requestInterceptor47 = builder35.requestInterceptor;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor49 = restAdapter48.requestInterceptor;
        retrofit.converter.Converter converter50 = restAdapter48.converter;
        java.util.concurrent.Executor executor51 = restAdapter48.httpExecutor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.client.Client.Provider provider57 = builder56.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean59 = logLevel58.log();
        builder56.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter61 = builder56.build();
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter62.requestInterceptor;
        java.util.concurrent.Executor executor64 = restAdapter62.callbackExecutor;
        retrofit.converter.Converter converter65 = null;
        restAdapter62.converter = converter65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter68 = builder67.converter;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor70 = restAdapter69.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        restAdapter69.requestInterceptor = requestInterceptor71;
        retrofit.Server server73 = null;
        retrofit.client.Client.Provider provider74 = null;
        java.util.concurrent.Executor executor75 = null;
        java.util.concurrent.Executor executor76 = null;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        retrofit.converter.Converter converter78 = null;
        retrofit.Profiler profiler79 = null;
        retrofit.ErrorHandler errorHandler80 = null;
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server73, provider74, executor75, executor76, requestInterceptor77, converter78, profiler79, errorHandler80, log81, logLevel82);
        restAdapter69.log = log81;
        retrofit.ErrorHandler errorHandler85 = null;
        restAdapter69.errorHandler = errorHandler85;
        retrofit.RestAdapter.Log log87 = restAdapter69.log;
        retrofit.RestAdapter.Builder builder88 = builder67.setLog(log87);
        restAdapter62.log = log87;
        retrofit.RestAdapter.Builder builder90 = builder56.setLog(log87);
        restAdapter48.log = log87;
        builder35.log = log87;
        builder0.log = log87;
        log87.log("Retrofit-Idle");
        log87.log("hi!");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider32);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(converter68);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test09029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09029");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log19, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter30.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter30.getLogLevel();
        builder29.logLevel = logLevel36;
        builder29.ensureSaneDefaults();
        retrofit.Server server39 = builder29.server;
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder29.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log43 = builder29.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
    }

    @Test
    public void test09030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09030");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter.LogLevel logLevel17 = builder15.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder14.setLogLevel(logLevel17);
        retrofit.ErrorHandler errorHandler19 = builder14.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel20 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder0.setLogLevel(logLevel20);
        java.util.concurrent.Executor executor22 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.RestAdapter.LogLevel logLevel32 = builder30.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder29.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = builder34.converter;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter36.requestInterceptor = requestInterceptor38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        restAdapter36.log = log48;
        retrofit.ErrorHandler errorHandler52 = null;
        restAdapter36.errorHandler = errorHandler52;
        retrofit.RestAdapter.Log log54 = restAdapter36.log;
        retrofit.RestAdapter.Builder builder55 = builder34.setLog(log54);
        retrofit.RequestInterceptor requestInterceptor56 = builder34.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor57 = builder34.requestInterceptor;
        retrofit.RestAdapter.Builder builder59 = builder34.setServer("hi!");
        retrofit.Server server60 = builder34.server;
        retrofit.RestAdapter.Builder builder61 = builder29.setServer(server60);
        retrofit.RestAdapter.Builder builder62 = builder21.setServer(server60);
        retrofit.Server server63 = builder62.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(server63);
    }

    @Test
    public void test09031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09031");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(errorHandler7);
    }

    @Test
    public void test09032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09032");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", headerList12, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        java.lang.String str16 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList17 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("", "", headerList17, typedOutput18);
        java.lang.String str20 = request19.getUrl();
        java.lang.String str21 = request19.getMethod();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test09033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09033");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor3 = null;
        builder2.httpExecutor = executor3;
        retrofit.RestAdapter.Builder builder6 = builder2.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel7 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder2.logLevel = logLevel7;
        retrofit.RestAdapter.Log log9 = builder2.log;
        retrofit.RestAdapter restAdapter10 = builder2.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.Profiler profiler33 = builder32.profiler;
        retrofit.Profiler profiler34 = builder32.profiler;
        java.util.concurrent.Executor executor35 = builder32.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.Profiler profiler41 = null;
        builder40.profiler = profiler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder43.setLog(log48);
        retrofit.RestAdapter restAdapter50 = builder43.build();
        retrofit.converter.Converter converter51 = null;
        builder43.converter = converter51;
        retrofit.ErrorHandler errorHandler53 = null;
        builder43.errorHandler = errorHandler53;
        retrofit.RequestInterceptor requestInterceptor55 = builder43.requestInterceptor;
        builder40.requestInterceptor = requestInterceptor55;
        retrofit.RestAdapter.Builder builder57 = builder32.setRequestInterceptor(requestInterceptor55);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter59 = builder58.converter;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor61 = restAdapter60.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        restAdapter60.requestInterceptor = requestInterceptor62;
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel73);
        restAdapter60.log = log72;
        retrofit.ErrorHandler errorHandler76 = null;
        restAdapter60.errorHandler = errorHandler76;
        retrofit.RestAdapter.Log log78 = restAdapter60.log;
        retrofit.RestAdapter.Builder builder79 = builder58.setLog(log78);
        retrofit.RequestInterceptor requestInterceptor80 = builder79.requestInterceptor;
        retrofit.Server server81 = null;
        builder79.server = server81;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor84 = null;
        builder83.httpExecutor = executor84;
        retrofit.RestAdapter.Builder builder87 = builder83.setServer("hi!");
        retrofit.client.Client.Provider provider88 = builder87.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean90 = logLevel89.log();
        builder87.logLevel = logLevel89;
        retrofit.RestAdapter restAdapter92 = builder87.build();
        retrofit.ErrorHandler errorHandler93 = builder87.errorHandler;
        retrofit.RestAdapter.Builder builder94 = builder79.setErrorHandler(errorHandler93);
        builder32.errorHandler = errorHandler93;
        builder2.errorHandler = errorHandler93;
        retrofit.client.Client.Provider provider97 = builder2.clientProvider;
        restAdapter0.clientProvider = provider97;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(provider88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertNotNull(errorHandler93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(provider97);
    }

    @Test
    public void test09034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09034");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter23 = builder22.converter;
        retrofit.RestAdapter.LogLevel logLevel24 = builder22.logLevel;
        builder22.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor26 = builder22.requestInterceptor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.RestAdapter restAdapter34 = builder27.build();
        retrofit.converter.Converter converter35 = null;
        builder27.converter = converter35;
        retrofit.ErrorHandler errorHandler37 = null;
        builder27.errorHandler = errorHandler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter46.logLevel;
        retrofit.converter.Converter converter49 = null;
        restAdapter46.converter = converter49;
        retrofit.ErrorHandler errorHandler51 = restAdapter46.errorHandler;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = null;
        builder52.converter = converter53;
        retrofit.client.Client.Provider provider55 = null;
        builder52.clientProvider = provider55;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        builder52.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.Profiler profiler64 = null;
        builder63.profiler = profiler64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder66.setLog(log71);
        retrofit.RestAdapter restAdapter73 = builder66.build();
        retrofit.converter.Converter converter74 = null;
        builder66.converter = converter74;
        retrofit.ErrorHandler errorHandler76 = null;
        builder66.errorHandler = errorHandler76;
        retrofit.RequestInterceptor requestInterceptor78 = builder66.requestInterceptor;
        builder63.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter.Builder builder80 = builder52.setRequestInterceptor(requestInterceptor78);
        restAdapter46.requestInterceptor = requestInterceptor78;
        builder39.requestInterceptor = requestInterceptor78;
        builder27.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter.LogLevel logLevel84 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder85 = builder22.setLogLevel(logLevel84);
        builder0.logLevel = logLevel84;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel88 = restAdapter87.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter87.logLevel = logLevel89;
        retrofit.Profiler profiler91 = restAdapter87.profiler;
        retrofit.RestAdapter.RestHandler restHandler92 = restAdapter87.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor93 = restAdapter87.requestInterceptor;
        retrofit.Profiler profiler94 = restAdapter87.profiler;
        retrofit.ErrorHandler errorHandler95 = restAdapter87.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel96 = restAdapter87.getLogLevel();
        retrofit.RestAdapter.Builder builder97 = builder0.setLogLevel(logLevel96);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(logLevel88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler91);
        org.junit.Assert.assertNull(requestInterceptor93);
        org.junit.Assert.assertNull(profiler94);
        org.junit.Assert.assertNull(errorHandler95);
        org.junit.Assert.assertTrue("'" + logLevel96 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel96.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test09035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09035");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RequestInterceptor requestInterceptor10 = builder8.requestInterceptor;
        retrofit.Server server11 = builder8.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(server11);
    }

    @Test
    public void test09036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09036");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.converter.Converter converter11 = builder6.converter;
        retrofit.Profiler profiler12 = builder6.profiler;
        java.util.concurrent.Executor executor13 = builder6.httpExecutor;
        retrofit.client.Client client14 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder15 = builder6.setClient(client14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test09037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09037");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter4.logLevel = logLevel6;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.setLogLevel(logLevel8);
        retrofit.Server server10 = restAdapter4.server;
        retrofit.converter.Converter converter11 = restAdapter4.converter;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder33 = builder12.setLog(log32);
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder36 = builder12.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter39.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter39.requestInterceptor = requestInterceptor41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        restAdapter39.log = log51;
        retrofit.ErrorHandler errorHandler55 = null;
        restAdapter39.errorHandler = errorHandler55;
        retrofit.RestAdapter.Log log57 = restAdapter39.log;
        retrofit.RestAdapter.Builder builder58 = builder37.setLog(log57);
        retrofit.Profiler profiler59 = builder58.profiler;
        retrofit.client.Client.Provider provider60 = builder58.clientProvider;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter63 = builder62.build();
        retrofit.RestAdapter.Log log64 = builder62.log;
        retrofit.client.Client.Provider provider65 = builder62.clientProvider;
        retrofit.RestAdapter.Builder builder66 = builder12.setClient(provider65);
        restAdapter4.clientProvider = provider65;
        restAdapter0.clientProvider = provider65;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder69.setLog(log74);
        retrofit.RestAdapter restAdapter76 = builder69.build();
        java.util.concurrent.Executor executor77 = restAdapter76.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.client.Header[] headerArray83 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList84 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList84, headerArray83);
        retrofit.mime.TypedOutput typedOutput86 = null;
        retrofit.client.Request request87 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList84, typedOutput86);
        java.lang.String str88 = request87.getUrl();
        java.util.List<retrofit.client.Header> headerList89 = request87.getHeaders();
        retrofit.mime.TypedOutput typedOutput90 = null;
        retrofit.client.Request request91 = new retrofit.client.Request("hi!", "", headerList89, typedOutput90);
        java.lang.String str92 = request91.getMethod();
        retrofit.mime.TypedOutput typedOutput93 = request91.getBody();
        java.util.List<retrofit.client.Header> headerList94 = request91.getHeaders();
        retrofit.client.Request request95 = restAdapter76.logAndReplaceRequest(request91);
        retrofit.mime.TypedOutput typedOutput96 = request91.getBody();
        java.util.List<retrofit.client.Header> headerList97 = request91.getHeaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request98 = restAdapter0.logAndReplaceRequest(request91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(profiler59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(provider65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(headerArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(headerList89);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "hi!" + "'", str92, "hi!");
        org.junit.Assert.assertNull(typedOutput93);
        org.junit.Assert.assertNotNull(headerList94);
        org.junit.Assert.assertNotNull(request95);
        org.junit.Assert.assertNull(typedOutput96);
        org.junit.Assert.assertNotNull(headerList97);
    }

    @Test
    public void test09038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09038");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter7.requestInterceptor = requestInterceptor13;
        retrofit.Profiler profiler15 = null;
        restAdapter7.profiler = profiler15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.converter.Converter converter19 = restAdapter17.converter;
        java.util.concurrent.Executor executor20 = null;
        restAdapter17.callbackExecutor = executor20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter17.logLevel = logLevel22;
        restAdapter7.setLogLevel(logLevel22);
        builder0.logLevel = logLevel22;
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor27 = builder0.httpExecutor;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log44, logLevel51);
        log44.log("");
        log44.log("hi!");
        log44.log("hi!");
        log44.log("");
        log44.log("hi!");
        retrofit.RestAdapter.Builder builder64 = builder0.setLog(log44);
        retrofit.RestAdapter restAdapter65 = builder64.build();
        retrofit.client.Response response67 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response69 = restAdapter65.logAndReplaceResponse("hi!", response67, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
    }

    @Test
    public void test09039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09039");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        builder8.logLevel = logLevel10;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter17 = null;
        restAdapter14.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        restAdapter14.log = log39;
        retrofit.RestAdapter.Builder builder42 = builder8.setLog(log39);
        restAdapter0.log = log39;
        retrofit.converter.Converter converter44 = restAdapter0.converter;
        retrofit.RestAdapter.Log log45 = restAdapter0.log;
        retrofit.client.Client.Provider provider46 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor47 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler48 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(errorHandler48);
    }

    @Test
    public void test09040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09040");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = null;
        builder9.converter = converter10;
        retrofit.client.Client.Provider provider12 = null;
        builder9.clientProvider = provider12;
        java.util.concurrent.Executor executor14 = builder9.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder9.requestInterceptor = requestInterceptor15;
        retrofit.converter.Converter converter17 = null;
        builder9.converter = converter17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter20 = null;
        restAdapter19.converter = converter20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter19.requestInterceptor = requestInterceptor22;
        retrofit.Profiler profiler24 = restAdapter19.profiler;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        restAdapter19.logLevel = logLevel25;
        java.util.concurrent.Executor executor28 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor31 = builder29.requestInterceptor;
        retrofit.ErrorHandler errorHandler32 = null;
        builder29.errorHandler = errorHandler32;
        retrofit.converter.Converter converter34 = null;
        builder29.converter = converter34;
        retrofit.ErrorHandler errorHandler36 = null;
        builder29.errorHandler = errorHandler36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter38.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        restAdapter38.requestInterceptor = requestInterceptor40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        restAdapter38.log = log50;
        retrofit.ErrorHandler errorHandler54 = null;
        restAdapter38.errorHandler = errorHandler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter57 = builder56.converter;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor59 = restAdapter58.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        restAdapter58.requestInterceptor = requestInterceptor60;
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel71);
        restAdapter58.log = log70;
        retrofit.ErrorHandler errorHandler74 = null;
        restAdapter58.errorHandler = errorHandler74;
        retrofit.RestAdapter.Log log76 = restAdapter58.log;
        retrofit.RestAdapter.Builder builder77 = builder56.setLog(log76);
        retrofit.RequestInterceptor requestInterceptor78 = builder56.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor79 = builder56.requestInterceptor;
        retrofit.RestAdapter.Builder builder81 = builder56.setServer("hi!");
        retrofit.Server server82 = builder56.server;
        restAdapter38.server = server82;
        retrofit.RestAdapter.Builder builder84 = builder29.setServer(server82);
        restAdapter19.server = server82;
        retrofit.RestAdapter.Builder builder86 = builder9.setServer(server82);
        retrofit.Server server87 = builder86.server;
        builder0.server = server87;
        retrofit.ErrorHandler errorHandler89 = builder0.errorHandler;
        retrofit.Profiler profiler90 = null;
        builder0.profiler = profiler90;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(requestInterceptor78);
        org.junit.Assert.assertNull(requestInterceptor79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertNull(errorHandler89);
    }

    @Test
    public void test09041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09041");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.Profiler profiler8 = null;
        builder0.profiler = profiler8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = builder10.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor12 = builder10.requestInterceptor;
        java.util.concurrent.Executor executor13 = builder10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel14 = builder10.logLevel;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        builder19.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.converter.Converter converter25 = null;
        builder19.converter = converter25;
        retrofit.client.Client.Provider provider27 = builder19.clientProvider;
        retrofit.RestAdapter.Builder builder28 = builder10.setClient(provider27);
        retrofit.RestAdapter.Builder builder29 = builder0.setClient(provider27);
        retrofit.client.Client.Provider provider30 = builder29.clientProvider;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = null;
        builder31.converter = converter32;
        retrofit.client.Client.Provider provider34 = null;
        builder31.clientProvider = provider34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder31.requestInterceptor = requestInterceptor36;
        retrofit.Profiler profiler38 = builder31.profiler;
        retrofit.Profiler profiler39 = null;
        builder31.profiler = profiler39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = builder41.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor43 = builder41.requestInterceptor;
        java.util.concurrent.Executor executor44 = builder41.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel45 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.Profiler profiler51 = null;
        builder50.profiler = profiler51;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        builder50.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter restAdapter55 = builder50.build();
        retrofit.converter.Converter converter56 = null;
        builder50.converter = converter56;
        retrofit.client.Client.Provider provider58 = builder50.clientProvider;
        retrofit.RestAdapter.Builder builder59 = builder41.setClient(provider58);
        retrofit.RestAdapter.Builder builder60 = builder31.setClient(provider58);
        retrofit.client.Client.Provider provider61 = builder60.clientProvider;
        builder29.clientProvider = provider61;
        retrofit.RestAdapter.Log log63 = builder29.log;
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(provider27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(provider30);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(provider58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(provider61);
        org.junit.Assert.assertNull(log63);
    }

    @Test
    public void test09042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09042");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder0.requestInterceptor = requestInterceptor6;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.Profiler profiler33 = builder32.profiler;
        retrofit.client.Client.Provider provider34 = builder32.clientProvider;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter37 = builder36.build();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RestAdapter.Builder builder39 = builder0.setRequestInterceptor(requestInterceptor38);
        retrofit.Profiler profiler40 = builder39.profiler;
        retrofit.RestAdapter.Log log41 = builder39.log;
        retrofit.Profiler profiler42 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder43 = builder39.setProfiler(profiler42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(converter10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNotNull(log41);
    }

    @Test
    public void test09043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09043");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.Server server18 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter0.requestInterceptor;
        retrofit.Server server20 = restAdapter0.server;
        retrofit.client.Response response22 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response24 = restAdapter0.logAndReplaceResponse("", response22, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(server20);
    }

    @Test
    public void test09044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09044");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter restAdapter10 = builder0.build();
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter.LogLevel logLevel15 = builder13.logLevel;
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = null;
        restAdapter17.httpExecutor = executor18;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter17.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter.Log log22 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter25.requestInterceptor = requestInterceptor27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        restAdapter25.log = log37;
        retrofit.ErrorHandler errorHandler41 = null;
        restAdapter25.errorHandler = errorHandler41;
        retrofit.RestAdapter.Log log43 = restAdapter25.log;
        retrofit.RestAdapter.Builder builder44 = builder23.setLog(log43);
        retrofit.Profiler profiler45 = builder44.profiler;
        retrofit.RestAdapter.LogLevel logLevel46 = builder44.logLevel;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter47.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        restAdapter47.requestInterceptor = requestInterceptor49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        restAdapter47.log = log59;
        retrofit.ErrorHandler errorHandler63 = null;
        restAdapter47.errorHandler = errorHandler63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter66 = builder65.converter;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor68 = restAdapter67.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        restAdapter67.requestInterceptor = requestInterceptor69;
        retrofit.Server server71 = null;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel80);
        restAdapter67.log = log79;
        retrofit.ErrorHandler errorHandler83 = null;
        restAdapter67.errorHandler = errorHandler83;
        retrofit.RestAdapter.Log log85 = restAdapter67.log;
        retrofit.RestAdapter.Builder builder86 = builder65.setLog(log85);
        retrofit.RequestInterceptor requestInterceptor87 = builder65.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor88 = builder65.requestInterceptor;
        retrofit.RestAdapter.Builder builder90 = builder65.setServer("hi!");
        retrofit.Server server91 = builder65.server;
        restAdapter47.server = server91;
        builder44.server = server91;
        restAdapter17.server = server91;
        builder13.server = server91;
        retrofit.ErrorHandler errorHandler96 = builder13.errorHandler;
        retrofit.RequestInterceptor requestInterceptor97 = builder13.requestInterceptor;
        restAdapter10.requestInterceptor = requestInterceptor97;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(requestInterceptor87);
        org.junit.Assert.assertNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(server91);
        org.junit.Assert.assertNotNull(errorHandler96);
        org.junit.Assert.assertNotNull(requestInterceptor97);
    }

    @Test
    public void test09045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09045");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter7.clientProvider = provider9;
        retrofit.client.Client.Provider provider11 = null;
        restAdapter7.clientProvider = provider11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        builder13.logLevel = logLevel29;
        retrofit.converter.Converter converter32 = builder13.converter;
        retrofit.ErrorHandler errorHandler33 = builder13.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel34 = builder13.logLevel;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        restAdapter7.logLevel = logLevel34;
        java.util.concurrent.Executor executor38 = restAdapter7.httpExecutor;
        retrofit.client.Request request39 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request40 = restAdapter7.logAndReplaceRequest(request39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(executor38);
    }

    @Test
    public void test09046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09046");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.converter.Converter converter10 = null;
        restAdapter7.converter = converter10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder33 = builder12.setLog(log32);
        restAdapter7.log = log32;
        retrofit.RestAdapter.Builder builder35 = builder0.setLog(log32);
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        retrofit.Profiler profiler47 = restAdapter46.profiler;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter55.logLevel;
        retrofit.converter.Converter converter58 = null;
        restAdapter55.converter = converter58;
        retrofit.ErrorHandler errorHandler60 = restAdapter55.errorHandler;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter62 = null;
        builder61.converter = converter62;
        retrofit.client.Client.Provider provider64 = null;
        builder61.clientProvider = provider64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        builder61.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.Profiler profiler73 = null;
        builder72.profiler = profiler73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder75.setLog(log80);
        retrofit.RestAdapter restAdapter82 = builder75.build();
        retrofit.converter.Converter converter83 = null;
        builder75.converter = converter83;
        retrofit.ErrorHandler errorHandler85 = null;
        builder75.errorHandler = errorHandler85;
        retrofit.RequestInterceptor requestInterceptor87 = builder75.requestInterceptor;
        builder72.requestInterceptor = requestInterceptor87;
        retrofit.RestAdapter.Builder builder89 = builder61.setRequestInterceptor(requestInterceptor87);
        restAdapter55.requestInterceptor = requestInterceptor87;
        builder48.requestInterceptor = requestInterceptor87;
        restAdapter46.requestInterceptor = requestInterceptor87;
        builder35.requestInterceptor = requestInterceptor87;
        retrofit.converter.Converter converter94 = null;
        builder35.converter = converter94;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(requestInterceptor87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test09047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09047");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.client.Client.Provider provider24 = null;
        builder21.clientProvider = provider24;
        retrofit.client.Client.Provider provider26 = builder21.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel27);
        retrofit.client.Client.Provider provider29 = builder21.clientProvider;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter30.requestInterceptor = requestInterceptor32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        restAdapter30.log = log42;
        retrofit.ErrorHandler errorHandler46 = null;
        restAdapter30.errorHandler = errorHandler46;
        java.util.concurrent.Executor executor48 = restAdapter30.callbackExecutor;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter50 = builder49.converter;
        retrofit.RestAdapter.LogLevel logLevel51 = builder49.logLevel;
        builder49.ensureSaneDefaults();
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter68.logLevel = logLevel70;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        restAdapter68.requestInterceptor = requestInterceptor72;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter68.logLevel = logLevel74;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log66, logLevel74);
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = null;
        builder77.httpExecutor = executor78;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("hi!");
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder83 = builder77.setLog(log82);
        restAdapter76.log = log82;
        builder49.log = log82;
        java.util.concurrent.Executor executor86 = null;
        builder49.httpExecutor = executor86;
        retrofit.converter.Converter converter88 = null;
        builder49.converter = converter88;
        retrofit.ErrorHandler errorHandler90 = builder49.errorHandler;
        restAdapter30.errorHandler = errorHandler90;
        retrofit.RestAdapter.Builder builder92 = builder21.setErrorHandler(errorHandler90);
        builder0.errorHandler = errorHandler90;
        retrofit.RestAdapter restAdapter94 = builder0.build();
        java.util.concurrent.Executor executor95 = builder0.callbackExecutor;
        java.lang.Class<?> wildcardClass96 = executor95.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertNotNull(executor95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test09048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09048");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.Profiler profiler31 = builder29.profiler;
        java.util.concurrent.Executor executor32 = builder29.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        java.util.concurrent.Executor executor41 = restAdapter40.httpExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.RestAdapter.Builder builder48 = builder42.setServer("hi!");
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        java.util.concurrent.Executor executor57 = restAdapter56.httpExecutor;
        builder48.callbackExecutor = executor57;
        retrofit.RestAdapter.Builder builder59 = builder29.setExecutors(executor41, executor57);
        restAdapter7.httpExecutor = executor41;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter7.logLevel = logLevel70;
        retrofit.ErrorHandler errorHandler73 = restAdapter7.errorHandler;
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter7.getLogLevel();
        retrofit.Server server76 = restAdapter7.server;
        java.util.concurrent.Executor executor77 = restAdapter7.callbackExecutor;
        retrofit.client.Header[] headerArray82 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList83 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList83, headerArray82);
        retrofit.mime.TypedOutput typedOutput85 = null;
        retrofit.client.Request request86 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList83, typedOutput85);
        java.util.List<retrofit.client.Header> headerList87 = request86.getHeaders();
        retrofit.mime.TypedOutput typedOutput88 = null;
        retrofit.client.Request request89 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList87, typedOutput88);
        java.lang.String str90 = request89.getMethod();
        retrofit.client.Request request91 = restAdapter7.logAndReplaceRequest(request89);
        retrofit.mime.TypedOutput typedOutput92 = request89.getBody();
        retrofit.mime.TypedOutput typedOutput93 = request89.getBody();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler73);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(headerArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(headerList87);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi!" + "'", str90, "hi!");
        org.junit.Assert.assertNotNull(request91);
        org.junit.Assert.assertNull(typedOutput92);
        org.junit.Assert.assertNull(typedOutput93);
    }

    @Test
    public void test09049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09049");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        java.lang.String str15 = request12.getMethod();
        java.util.List<retrofit.client.Header> headerList16 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.getBody();
        java.util.List<retrofit.client.Header> headerList20 = request18.getHeaders();
        java.util.List<retrofit.client.Header> headerList21 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList21, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "Retrofit-Idle", headerList21, typedOutput24);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList21);
    }

    @Test
    public void test09050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09050");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter14.logLevel = logLevel16;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.setLogLevel(logLevel18);
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter14.getLogLevel();
        builder13.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter23 = builder22.converter;
        retrofit.RestAdapter.LogLevel logLevel24 = builder22.logLevel;
        builder22.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor26 = builder22.requestInterceptor;
        builder13.requestInterceptor = requestInterceptor26;
        retrofit.Profiler profiler28 = builder13.profiler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNull(profiler28);
    }

    @Test
    public void test09051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09051");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log19, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLogLevel(logLevel26);
        retrofit.ErrorHandler errorHandler30 = null;
        builder29.errorHandler = errorHandler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = builder32.callbackExecutor;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        retrofit.RestAdapter.Builder builder45 = builder32.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder29.setLogLevel(logLevel43);
        builder46.ensureSaneDefaults();
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter56.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        restAdapter56.requestInterceptor = requestInterceptor58;
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel69);
        restAdapter56.log = log68;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean73 = logLevel72.log();
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log68, logLevel72);
        retrofit.RestAdapter.Builder builder75 = builder46.setLog(log68);
        builder46.ensureSaneDefaults();
        retrofit.converter.Converter converter77 = builder46.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(converter77);
    }

    @Test
    public void test09052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09052");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = builder0.server;
        retrofit.converter.Converter converter27 = builder0.converter;
        retrofit.converter.Converter converter28 = builder0.converter;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder29.setLog(log34);
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        builder29.logLevel = logLevel45;
        retrofit.converter.Converter converter48 = builder29.converter;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        builder29.requestInterceptor = requestInterceptor49;
        retrofit.RestAdapter restAdapter51 = builder29.build();
        retrofit.Server server52 = builder29.server;
        retrofit.Profiler profiler53 = null;
        builder29.profiler = profiler53;
        retrofit.Server server55 = builder29.server;
        builder0.server = server55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder57.setLog(log62);
        retrofit.Profiler profiler64 = null;
        builder63.profiler = profiler64;
        retrofit.client.Client.Provider provider66 = builder63.clientProvider;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter68 = null;
        builder67.converter = converter68;
        retrofit.client.Client.Provider provider70 = null;
        builder67.clientProvider = provider70;
        retrofit.RestAdapter.Builder builder73 = builder67.setServer("hi!");
        retrofit.Server server74 = builder67.server;
        retrofit.RestAdapter.Builder builder75 = builder63.setServer(server74);
        builder0.server = server74;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter48);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(provider66);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test09053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09053");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder11.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.converter.Converter converter17 = restAdapter16.converter;
        retrofit.RestAdapter.Builder builder18 = builder0.setConverter(converter17);
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        retrofit.RequestInterceptor requestInterceptor20 = builder18.requestInterceptor;
        retrofit.Profiler profiler21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder18.setProfiler(profiler21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor20);
    }

    @Test
    public void test09054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09054");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log7 = restAdapter6.log;
        retrofit.ErrorHandler errorHandler8 = restAdapter6.errorHandler;
        retrofit.converter.Converter converter9 = null;
        restAdapter6.converter = converter9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter6.requestInterceptor;
        retrofit.ErrorHandler errorHandler12 = null;
        restAdapter6.errorHandler = errorHandler12;
        retrofit.Profiler profiler14 = null;
        restAdapter6.profiler = profiler14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder16.setLog(log21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter23.logLevel;
        retrofit.converter.Converter converter26 = null;
        restAdapter23.converter = converter26;
        retrofit.ErrorHandler errorHandler28 = restAdapter23.errorHandler;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = null;
        builder29.converter = converter30;
        retrofit.client.Client.Provider provider32 = null;
        builder29.clientProvider = provider32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        builder29.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.Profiler profiler41 = null;
        builder40.profiler = profiler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder43.setLog(log48);
        retrofit.RestAdapter restAdapter50 = builder43.build();
        retrofit.converter.Converter converter51 = null;
        builder43.converter = converter51;
        retrofit.ErrorHandler errorHandler53 = null;
        builder43.errorHandler = errorHandler53;
        retrofit.RequestInterceptor requestInterceptor55 = builder43.requestInterceptor;
        builder40.requestInterceptor = requestInterceptor55;
        retrofit.RestAdapter.Builder builder57 = builder29.setRequestInterceptor(requestInterceptor55);
        restAdapter23.requestInterceptor = requestInterceptor55;
        builder16.requestInterceptor = requestInterceptor55;
        retrofit.RequestInterceptor requestInterceptor60 = builder16.requestInterceptor;
        restAdapter6.requestInterceptor = requestInterceptor60;
        restAdapter0.requestInterceptor = requestInterceptor60;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(requestInterceptor60);
    }

    @Test
    public void test09055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09055");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter0.requestInterceptor = requestInterceptor9;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor12 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(profiler13);
    }

    @Test
    public void test09056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09056");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        java.util.concurrent.Executor executor6 = builder4.httpExecutor;
        retrofit.Profiler profiler7 = null;
        builder4.profiler = profiler7;
        retrofit.client.Client.Provider provider9 = builder4.clientProvider;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = builder10.converter;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter12.requestInterceptor = requestInterceptor14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        restAdapter12.log = log24;
        retrofit.ErrorHandler errorHandler28 = null;
        restAdapter12.errorHandler = errorHandler28;
        retrofit.RestAdapter.Log log30 = restAdapter12.log;
        retrofit.RestAdapter.Builder builder31 = builder10.setLog(log30);
        retrofit.RequestInterceptor requestInterceptor32 = builder10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor33 = builder10.requestInterceptor;
        retrofit.RestAdapter.Builder builder35 = builder10.setServer("hi!");
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter51.logLevel = logLevel53;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        restAdapter51.requestInterceptor = requestInterceptor55;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter51.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log49, logLevel57);
        boolean boolean60 = logLevel57.log();
        retrofit.RestAdapter.Builder builder61 = builder35.setLogLevel(logLevel57);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        retrofit.RestAdapter restAdapter69 = builder62.build();
        java.util.concurrent.Executor executor70 = restAdapter69.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter69.new RestHandler();
        retrofit.converter.Converter converter72 = restAdapter69.converter;
        builder61.converter = converter72;
        builder61.ensureSaneDefaults();
        retrofit.converter.Converter converter75 = builder61.converter;
        retrofit.RestAdapter.Builder builder76 = builder4.setConverter(converter75);
        retrofit.Server server77 = builder76.server;
        java.util.concurrent.Executor executor78 = builder76.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(converter72);
        org.junit.Assert.assertNotNull(converter75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertNull(executor78);
    }

    @Test
    public void test09057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09057");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter6.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter6.logLevel = logLevel8;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter6.setLogLevel(logLevel10);
        java.util.concurrent.Executor executor12 = restAdapter6.httpExecutor;
        retrofit.Server server13 = null;
        restAdapter6.server = server13;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter6.logLevel;
        builder0.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter17.getLogLevel();
        retrofit.client.Client.Provider provider22 = null;
        restAdapter17.clientProvider = provider22;
        retrofit.ErrorHandler errorHandler24 = restAdapter17.errorHandler;
        retrofit.Server server25 = null;
        restAdapter17.server = server25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        java.util.concurrent.Executor executor45 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter47 = builder46.converter;
        retrofit.RestAdapter.LogLevel logLevel48 = builder46.logLevel;
        builder46.ensureSaneDefaults();
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder58.setLog(log63);
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter65.logLevel = logLevel67;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        restAdapter65.requestInterceptor = requestInterceptor69;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter65.logLevel = logLevel71;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log63, logLevel71);
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder74.setLog(log79);
        restAdapter73.log = log79;
        builder46.log = log79;
        java.util.concurrent.Executor executor83 = null;
        builder46.httpExecutor = executor83;
        retrofit.converter.Converter converter85 = null;
        builder46.converter = converter85;
        retrofit.ErrorHandler errorHandler87 = builder46.errorHandler;
        restAdapter27.errorHandler = errorHandler87;
        restAdapter17.errorHandler = errorHandler87;
        retrofit.client.Client.Provider provider90 = restAdapter17.clientProvider;
        retrofit.ErrorHandler errorHandler91 = restAdapter17.errorHandler;
        retrofit.RestAdapter.Builder builder92 = builder0.setErrorHandler(errorHandler91);
        retrofit.RestAdapter restAdapter93 = builder0.build();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNull(provider90);
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(restAdapter93);
    }

    @Test
    public void test09058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09058");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor6 = builder5.requestInterceptor;
        retrofit.client.Client.Provider provider7 = builder5.clientProvider;
        retrofit.Profiler profiler8 = builder5.profiler;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        builder5.logLevel = logLevel9;
        retrofit.RestAdapter.Builder builder12 = builder5.setServer("hi!");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test09059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09059");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        builder8.logLevel = logLevel10;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter17 = null;
        restAdapter14.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        restAdapter14.log = log39;
        retrofit.RestAdapter.Builder builder42 = builder8.setLog(log39);
        restAdapter0.log = log39;
        retrofit.converter.Converter converter44 = restAdapter0.converter;
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler46 = null;
        restAdapter0.profiler = profiler46;
        retrofit.ErrorHandler errorHandler48 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor49 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(executor49);
    }

    @Test
    public void test09060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09060");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList16, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", headerList16, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList16, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.getHeaders();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(headerList25);
    }

    @Test
    public void test09061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09061");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder0.setServer("Retrofit-Idle");
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test09062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09062");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.Profiler profiler10 = builder7.profiler;
        retrofit.client.Client.Provider provider11 = builder7.clientProvider;
        java.util.concurrent.Executor executor12 = builder7.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor13 = builder7.requestInterceptor;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter22 = builder21.converter;
        retrofit.RestAdapter.LogLevel logLevel23 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder20.setLogLevel(logLevel23);
        retrofit.Profiler profiler25 = builder20.profiler;
        retrofit.RestAdapter.Log log26 = builder20.log;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = builder31.build();
        retrofit.RestAdapter.LogLevel logLevel33 = null;
        restAdapter32.logLevel = logLevel33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.Server server37 = restAdapter35.server;
        retrofit.client.Client.Provider provider38 = null;
        restAdapter35.clientProvider = provider38;
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter35.requestInterceptor;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter35.log = log49;
        restAdapter32.log = log49;
        builder20.log = log49;
        builder7.log = log49;
        log49.log("");
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test09063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09063");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList16, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", headerList16, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList16, typedOutput23);
        java.lang.Class<?> wildcardClass25 = headerList16.getClass();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test09064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09064");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.client.Client.Provider provider10 = restAdapter9.clientProvider;
        java.util.concurrent.Executor executor11 = restAdapter9.httpExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider13 = null;
        restAdapter12.clientProvider = provider13;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = builder16.logLevel;
        restAdapter12.logLevel = logLevel18;
        boolean boolean20 = logLevel18.log();
        restAdapter9.logLevel = logLevel18;
        retrofit.Server server22 = restAdapter9.server;
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter9.getLogLevel();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(provider10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09065");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter6 = null;
        restAdapter5.converter = converter6;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter5.requestInterceptor = requestInterceptor8;
        retrofit.Profiler profiler10 = restAdapter5.profiler;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean12 = logLevel11.log();
        restAdapter5.logLevel = logLevel11;
        java.util.concurrent.Executor executor14 = restAdapter5.httpExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log16 = restAdapter15.log;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor19 = builder17.requestInterceptor;
        retrofit.ErrorHandler errorHandler20 = null;
        builder17.errorHandler = errorHandler20;
        retrofit.converter.Converter converter22 = null;
        builder17.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder17.errorHandler = errorHandler24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.Profiler profiler31 = null;
        builder30.profiler = profiler31;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        builder30.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter restAdapter35 = builder30.build();
        retrofit.converter.Converter converter36 = restAdapter35.converter;
        retrofit.RestAdapter.Builder builder37 = builder17.setConverter(converter36);
        restAdapter15.converter = converter36;
        restAdapter5.converter = converter36;
        restAdapter0.converter = converter36;
        retrofit.Server server41 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider44 = null;
        restAdapter43.clientProvider = provider44;
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter43.new RestHandler();
        retrofit.converter.Converter converter49 = restAdapter43.converter;
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter43.logLevel;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.client.Client.Provider provider54 = null;
        builder51.clientProvider = provider54;
        retrofit.RestAdapter.Builder builder57 = builder51.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor59 = restAdapter58.requestInterceptor;
        java.util.concurrent.Executor executor60 = restAdapter58.callbackExecutor;
        retrofit.converter.Converter converter61 = null;
        restAdapter58.converter = converter61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter64 = builder63.converter;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor66 = restAdapter65.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        restAdapter65.requestInterceptor = requestInterceptor67;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        restAdapter65.log = log77;
        retrofit.ErrorHandler errorHandler81 = null;
        restAdapter65.errorHandler = errorHandler81;
        retrofit.RestAdapter.Log log83 = restAdapter65.log;
        retrofit.RestAdapter.Builder builder84 = builder63.setLog(log83);
        restAdapter58.log = log83;
        retrofit.RestAdapter.Builder builder86 = builder51.setLog(log83);
        retrofit.RestAdapter.Log log87 = builder51.log;
        restAdapter43.log = log87;
        log87.log("");
        log87.log("hi!");
        restAdapter0.log = log87;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(converter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(converter64);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(log87);
    }

    @Test
    public void test09066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09066");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log6 = builder0.log;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.Profiler profiler20 = restAdapter19.profiler;
        java.util.concurrent.Executor executor21 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter19.getLogLevel();
        restAdapter7.logLevel = logLevel22;
        retrofit.Profiler profiler24 = restAdapter7.profiler;
        retrofit.RestAdapter.LogLevel logLevel25 = null;
        restAdapter7.logLevel = logLevel25;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler24);
    }

    @Test
    public void test09067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09067");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter15.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log13, logLevel21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        restAdapter23.log = log29;
        retrofit.client.Header[] headerArray34 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList35 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList35, headerArray34);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList35, typedOutput37);
        java.lang.String str39 = request38.getUrl();
        java.lang.String str40 = request38.getUrl();
        retrofit.client.Request request41 = restAdapter23.logAndReplaceRequest(request38);
        java.lang.String str42 = request41.getUrl();
        java.lang.String str43 = request41.getMethod();
        retrofit.mime.TypedOutput typedOutput44 = request41.getBody();
        retrofit.mime.TypedOutput typedOutput45 = request41.getBody();
        java.lang.String str46 = request41.getUrl();
        java.lang.String str47 = request41.getUrl();
        retrofit.mime.TypedOutput typedOutput48 = request41.getBody();
        java.util.List<retrofit.client.Header> headerList49 = request41.getHeaders();
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(headerArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(typedOutput44);
        org.junit.Assert.assertNull(typedOutput45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(typedOutput48);
        org.junit.Assert.assertNotNull(headerList49);
    }

    @Test
    public void test09068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09068");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.client.Client.Provider provider5 = restAdapter0.clientProvider;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.client.Client.Provider provider12 = null;
        builder9.clientProvider = provider12;
        retrofit.RestAdapter.Builder builder15 = builder9.setServer("hi!");
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.Profiler profiler21 = null;
        builder20.profiler = profiler21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        builder20.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter restAdapter25 = builder20.build();
        retrofit.converter.Converter converter26 = restAdapter25.converter;
        retrofit.RestAdapter.Builder builder27 = builder9.setConverter(converter26);
        restAdapter0.converter = converter26;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(converter26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test09069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09069");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.Server server8 = null;
        restAdapter0.server = server8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = builder10.converter;
        retrofit.Profiler profiler12 = null;
        builder10.profiler = profiler12;
        retrofit.ErrorHandler errorHandler14 = null;
        builder10.errorHandler = errorHandler14;
        retrofit.RestAdapter.Builder builder17 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor23 = null;
        builder18.httpExecutor = executor23;
        retrofit.RestAdapter restAdapter25 = builder18.build();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.ErrorHandler errorHandler44 = null;
        restAdapter28.errorHandler = errorHandler44;
        retrofit.RestAdapter.Log log46 = restAdapter28.log;
        retrofit.RestAdapter.Builder builder47 = builder26.setLog(log46);
        retrofit.Profiler profiler48 = builder47.profiler;
        retrofit.Profiler profiler49 = builder47.profiler;
        java.util.concurrent.Executor executor50 = builder47.callbackExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("hi!");
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder51.setLog(log56);
        retrofit.RestAdapter restAdapter58 = builder51.build();
        java.util.concurrent.Executor executor59 = restAdapter58.httpExecutor;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.client.Client.Provider provider63 = null;
        builder60.clientProvider = provider63;
        retrofit.RestAdapter.Builder builder66 = builder60.setServer("hi!");
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder73 = builder67.setLog(log72);
        retrofit.RestAdapter restAdapter74 = builder67.build();
        java.util.concurrent.Executor executor75 = restAdapter74.httpExecutor;
        builder66.callbackExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = builder47.setExecutors(executor59, executor75);
        restAdapter25.httpExecutor = executor59;
        retrofit.Server server79 = null;
        retrofit.client.Client.Provider provider80 = null;
        java.util.concurrent.Executor executor81 = null;
        java.util.concurrent.Executor executor82 = null;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        retrofit.converter.Converter converter84 = null;
        retrofit.Profiler profiler85 = null;
        retrofit.ErrorHandler errorHandler86 = null;
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server79, provider80, executor81, executor82, requestInterceptor83, converter84, profiler85, errorHandler86, log87, logLevel88);
        restAdapter25.logLevel = logLevel88;
        retrofit.ErrorHandler errorHandler91 = restAdapter25.errorHandler;
        builder10.errorHandler = errorHandler91;
        restAdapter0.errorHandler = errorHandler91;
        java.util.concurrent.Executor executor94 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor95 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter96 = restAdapter0.converter;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(executor75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNull(executor94);
        org.junit.Assert.assertNull(executor95);
        org.junit.Assert.assertNull(converter96);
    }

    @Test
    public void test09070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09070");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        retrofit.ErrorHandler errorHandler9 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.client.Client.Provider provider13 = null;
        builder10.clientProvider = provider13;
        retrofit.RestAdapter.Builder builder16 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder17.setLog(log22);
        retrofit.RestAdapter restAdapter24 = builder17.build();
        java.util.concurrent.Executor executor25 = restAdapter24.httpExecutor;
        builder16.callbackExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.Profiler profiler49 = builder48.profiler;
        retrofit.Profiler profiler50 = builder48.profiler;
        java.util.concurrent.Executor executor51 = builder48.callbackExecutor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        retrofit.RestAdapter restAdapter59 = builder52.build();
        java.util.concurrent.Executor executor60 = restAdapter59.httpExecutor;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.client.Client.Provider provider64 = null;
        builder61.clientProvider = provider64;
        retrofit.RestAdapter.Builder builder67 = builder61.setServer("hi!");
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder74 = builder68.setLog(log73);
        retrofit.RestAdapter restAdapter75 = builder68.build();
        java.util.concurrent.Executor executor76 = restAdapter75.httpExecutor;
        builder67.callbackExecutor = executor76;
        retrofit.RestAdapter.Builder builder78 = builder48.setExecutors(executor60, executor76);
        builder16.callbackExecutor = executor76;
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter80.logLevel = logLevel82;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.setLogLevel(logLevel84);
        retrofit.RestAdapter.LogLevel logLevel86 = restAdapter80.getLogLevel();
        boolean boolean87 = logLevel86.log();
        retrofit.RestAdapter.Builder builder88 = builder16.setLogLevel(logLevel86);
        java.util.concurrent.Executor executor89 = builder16.callbackExecutor;
        restAdapter0.httpExecutor = executor89;
        retrofit.RestAdapter.Builder builder91 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor92 = builder91.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor93 = builder91.requestInterceptor;
        retrofit.Profiler profiler94 = builder91.profiler;
        retrofit.RestAdapter.LogLevel logLevel95 = builder91.logLevel;
        restAdapter0.logLevel = logLevel95;
        boolean boolean97 = logLevel95.log();
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNull(executor92);
        org.junit.Assert.assertNull(requestInterceptor93);
        org.junit.Assert.assertNull(profiler94);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test09071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09071");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = null;
        restAdapter0.logLevel = logLevel4;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.Profiler profiler9 = null;
        builder7.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.client.Client.Provider provider14 = null;
        builder11.clientProvider = provider14;
        retrofit.RestAdapter.Builder builder17 = builder11.setServer("hi!");
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder18.setLog(log23);
        retrofit.RestAdapter restAdapter25 = builder18.build();
        java.util.concurrent.Executor executor26 = restAdapter25.httpExecutor;
        builder17.callbackExecutor = executor26;
        builder7.callbackExecutor = executor26;
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        java.util.concurrent.Executor executor35 = null;
        builder30.httpExecutor = executor35;
        retrofit.RestAdapter restAdapter37 = builder30.build();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.client.Client.Provider provider39 = restAdapter37.clientProvider;
        builder7.clientProvider = provider39;
        java.util.concurrent.Executor executor41 = builder7.callbackExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.Profiler profiler44 = null;
        builder42.profiler = profiler44;
        retrofit.ErrorHandler errorHandler46 = null;
        builder42.errorHandler = errorHandler46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter50.requestInterceptor = requestInterceptor52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        restAdapter50.log = log62;
        retrofit.ErrorHandler errorHandler66 = null;
        restAdapter50.errorHandler = errorHandler66;
        retrofit.RestAdapter.Log log68 = restAdapter50.log;
        retrofit.RestAdapter.Builder builder69 = builder48.setLog(log68);
        retrofit.RestAdapter.Builder builder70 = builder42.setLog(log68);
        log68.log("hi!");
        builder7.log = log68;
        restAdapter0.log = log68;
        retrofit.Profiler profiler75 = null;
        restAdapter0.profiler = profiler75;
        retrofit.converter.Converter converter77 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler78 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider39);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNull(errorHandler78);
    }

    @Test
    public void test09072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09072");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        retrofit.client.Header[] headerArray19 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList20 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList20, headerArray19);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList20, typedOutput22);
        java.lang.String str24 = request23.getUrl();
        java.util.List<retrofit.client.Header> headerList25 = request23.getHeaders();
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("hi!", "", headerList25, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList25, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList25, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = request31.getBody();
        retrofit.mime.TypedOutput typedOutput33 = request31.getBody();
        java.lang.String str34 = request31.getMethod();
        java.util.List<retrofit.client.Header> headerList35 = request31.getHeaders();
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("hi!", "hi!", headerList35, typedOutput36);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request38 = restAdapter0.logAndReplaceRequest(request37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(headerArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-Idle" + "'", str34, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList35);
    }

    @Test
    public void test09073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09073");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.client.Client.Provider provider8 = null;
        builder5.clientProvider = provider8;
        retrofit.client.Client.Provider provider10 = builder5.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLogLevel(logLevel11);
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder12.requestInterceptor = requestInterceptor13;
        retrofit.client.Client.Provider provider15 = builder12.clientProvider;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = null;
        builder16.converter = converter17;
        retrofit.client.Client.Provider provider19 = null;
        builder16.clientProvider = provider19;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        builder16.requestInterceptor = requestInterceptor21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter25.requestInterceptor = requestInterceptor27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        restAdapter25.log = log37;
        retrofit.ErrorHandler errorHandler41 = null;
        restAdapter25.errorHandler = errorHandler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter44 = builder43.converter;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter45.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter45.requestInterceptor = requestInterceptor47;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel58);
        restAdapter45.log = log57;
        retrofit.ErrorHandler errorHandler61 = null;
        restAdapter45.errorHandler = errorHandler61;
        retrofit.RestAdapter.Log log63 = restAdapter45.log;
        retrofit.RestAdapter.Builder builder64 = builder43.setLog(log63);
        retrofit.RequestInterceptor requestInterceptor65 = builder43.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor66 = builder43.requestInterceptor;
        retrofit.RestAdapter.Builder builder68 = builder43.setServer("hi!");
        retrofit.Server server69 = builder43.server;
        restAdapter25.server = server69;
        builder23.server = server69;
        retrofit.RestAdapter.Builder builder72 = builder16.setServer(server69);
        retrofit.RestAdapter.LogLevel logLevel73 = builder16.logLevel;
        builder12.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder0.setLogLevel(logLevel73);
        java.util.concurrent.Executor executor76 = builder75.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor77 = builder75.requestInterceptor;
        retrofit.Profiler profiler78 = builder75.profiler;
        java.util.concurrent.Executor executor79 = builder75.callbackExecutor;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.httpExecutor = executor81;
        retrofit.RestAdapter.Builder builder84 = builder80.setServer("hi!");
        retrofit.Profiler profiler85 = null;
        builder84.profiler = profiler85;
        retrofit.RequestInterceptor requestInterceptor87 = null;
        builder84.requestInterceptor = requestInterceptor87;
        retrofit.RestAdapter restAdapter89 = builder84.build();
        retrofit.Server server90 = builder84.server;
        retrofit.Server server91 = builder84.server;
        retrofit.ErrorHandler errorHandler92 = builder84.errorHandler;
        retrofit.RestAdapter.Builder builder93 = builder75.setErrorHandler(errorHandler92);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(server69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNull(requestInterceptor77);
        org.junit.Assert.assertNull(profiler78);
        org.junit.Assert.assertNull(executor79);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(server90);
        org.junit.Assert.assertNotNull(server91);
        org.junit.Assert.assertNotNull(errorHandler92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test09074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09074");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor26 = builder25.httpExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log28 = restAdapter27.log;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.Profiler profiler30 = restAdapter27.profiler;
        retrofit.Profiler profiler31 = null;
        restAdapter27.profiler = profiler31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter27.log = log41;
        log41.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder47 = builder25.setLog(log41);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor49 = null;
        restAdapter48.httpExecutor = executor49;
        retrofit.Profiler profiler51 = null;
        restAdapter48.profiler = profiler51;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        restAdapter48.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter56 = builder55.converter;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter57.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter57.requestInterceptor = requestInterceptor59;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter57.log = log69;
        retrofit.ErrorHandler errorHandler73 = null;
        restAdapter57.errorHandler = errorHandler73;
        retrofit.RestAdapter.Log log75 = restAdapter57.log;
        retrofit.RestAdapter.Builder builder76 = builder55.setLog(log75);
        retrofit.RequestInterceptor requestInterceptor77 = builder55.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor78 = builder55.requestInterceptor;
        retrofit.RestAdapter.Builder builder80 = builder55.setServer("hi!");
        retrofit.Server server81 = builder55.server;
        restAdapter48.server = server81;
        builder47.server = server81;
        retrofit.Server server84 = builder47.server;
        retrofit.RequestInterceptor requestInterceptor85 = builder47.requestInterceptor;
        retrofit.Server server86 = builder47.server;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(requestInterceptor77);
        org.junit.Assert.assertNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(server81);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(server86);
    }

    @Test
    public void test09075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09075");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.Server server8 = null;
        restAdapter0.server = server8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = builder10.converter;
        retrofit.Profiler profiler12 = null;
        builder10.profiler = profiler12;
        retrofit.ErrorHandler errorHandler14 = null;
        builder10.errorHandler = errorHandler14;
        retrofit.RestAdapter.Builder builder17 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor23 = null;
        builder18.httpExecutor = executor23;
        retrofit.RestAdapter restAdapter25 = builder18.build();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.ErrorHandler errorHandler44 = null;
        restAdapter28.errorHandler = errorHandler44;
        retrofit.RestAdapter.Log log46 = restAdapter28.log;
        retrofit.RestAdapter.Builder builder47 = builder26.setLog(log46);
        retrofit.Profiler profiler48 = builder47.profiler;
        retrofit.Profiler profiler49 = builder47.profiler;
        java.util.concurrent.Executor executor50 = builder47.callbackExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("hi!");
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder51.setLog(log56);
        retrofit.RestAdapter restAdapter58 = builder51.build();
        java.util.concurrent.Executor executor59 = restAdapter58.httpExecutor;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.client.Client.Provider provider63 = null;
        builder60.clientProvider = provider63;
        retrofit.RestAdapter.Builder builder66 = builder60.setServer("hi!");
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder73 = builder67.setLog(log72);
        retrofit.RestAdapter restAdapter74 = builder67.build();
        java.util.concurrent.Executor executor75 = restAdapter74.httpExecutor;
        builder66.callbackExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = builder47.setExecutors(executor59, executor75);
        restAdapter25.httpExecutor = executor59;
        retrofit.Server server79 = null;
        retrofit.client.Client.Provider provider80 = null;
        java.util.concurrent.Executor executor81 = null;
        java.util.concurrent.Executor executor82 = null;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        retrofit.converter.Converter converter84 = null;
        retrofit.Profiler profiler85 = null;
        retrofit.ErrorHandler errorHandler86 = null;
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server79, provider80, executor81, executor82, requestInterceptor83, converter84, profiler85, errorHandler86, log87, logLevel88);
        restAdapter25.logLevel = logLevel88;
        retrofit.ErrorHandler errorHandler91 = restAdapter25.errorHandler;
        builder10.errorHandler = errorHandler91;
        restAdapter0.errorHandler = errorHandler91;
        java.util.concurrent.Executor executor94 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider95 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(executor75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNull(executor94);
        org.junit.Assert.assertNull(provider95);
    }

    @Test
    public void test09076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09076");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.Profiler profiler11 = restAdapter10.profiler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Profiler profiler14 = restAdapter10.profiler;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider16);
    }

    @Test
    public void test09077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09077");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.httpExecutor = executor4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("hi!");
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder3.setLog(log8);
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        builder3.logLevel = logLevel19;
        retrofit.converter.Converter converter22 = builder3.converter;
        retrofit.ErrorHandler errorHandler23 = builder3.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel24 = builder3.logLevel;
        retrofit.Server server25 = builder3.server;
        builder0.server = server25;
        retrofit.client.Client.Provider provider27 = builder0.clientProvider;
        retrofit.RestAdapter.Log log28 = builder0.log;
        retrofit.Profiler profiler29 = builder0.profiler;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        retrofit.RestAdapter.Log log50 = restAdapter32.log;
        retrofit.RestAdapter.Builder builder51 = builder30.setLog(log50);
        retrofit.Profiler profiler52 = builder51.profiler;
        retrofit.Profiler profiler53 = builder51.profiler;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter55 = builder54.converter;
        retrofit.Profiler profiler56 = null;
        builder54.profiler = profiler56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.client.Client.Provider provider61 = null;
        builder58.clientProvider = provider61;
        retrofit.RestAdapter.Builder builder64 = builder58.setServer("hi!");
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = builder65.build();
        java.util.concurrent.Executor executor73 = restAdapter72.httpExecutor;
        builder64.callbackExecutor = executor73;
        builder54.callbackExecutor = executor73;
        builder51.callbackExecutor = executor73;
        builder0.callbackExecutor = executor73;
        retrofit.RequestInterceptor requestInterceptor78 = builder0.requestInterceptor;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter79.logLevel = logLevel81;
        retrofit.Profiler profiler83 = restAdapter79.profiler;
        retrofit.ErrorHandler errorHandler84 = null;
        restAdapter79.errorHandler = errorHandler84;
        java.util.concurrent.Executor executor86 = restAdapter79.callbackExecutor;
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter88 = builder87.converter;
        retrofit.Profiler profiler89 = null;
        builder87.profiler = profiler89;
        retrofit.RestAdapter.Log log91 = builder87.log;
        builder87.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor93 = null;
        builder87.requestInterceptor = requestInterceptor93;
        retrofit.converter.Converter converter95 = builder87.converter;
        restAdapter79.converter = converter95;
        builder0.converter = converter95;
        retrofit.converter.Converter converter98 = builder0.converter;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNull(requestInterceptor78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler83);
        org.junit.Assert.assertNull(executor86);
        org.junit.Assert.assertNull(converter88);
        org.junit.Assert.assertNull(log91);
        org.junit.Assert.assertNotNull(converter95);
        org.junit.Assert.assertNotNull(converter98);
    }

    @Test
    public void test09078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09078");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter21.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter21.logLevel = logLevel27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log19, logLevel27);
        builder0.logLevel = logLevel27;
        retrofit.client.Client.Provider provider31 = null;
        builder0.clientProvider = provider31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = builder40.converter;
        retrofit.RestAdapter.LogLevel logLevel42 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter45 = builder44.converter;
        retrofit.RestAdapter.LogLevel logLevel46 = builder44.logLevel;
        builder44.ensureSaneDefaults();
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder56.setLog(log61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter63.logLevel = logLevel65;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        restAdapter63.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter63.logLevel = logLevel69;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log61, logLevel69);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("hi!");
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder78 = builder72.setLog(log77);
        restAdapter71.log = log77;
        builder44.log = log77;
        java.util.concurrent.Executor executor81 = null;
        builder44.httpExecutor = executor81;
        retrofit.converter.Converter converter83 = null;
        builder44.converter = converter83;
        retrofit.ErrorHandler errorHandler85 = builder44.errorHandler;
        retrofit.RestAdapter.Builder builder86 = builder39.setErrorHandler(errorHandler85);
        retrofit.RestAdapter.Builder builder87 = builder0.setErrorHandler(errorHandler85);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder89 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(errorHandler85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test09079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09079");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor4);
    }

    @Test
    public void test09080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09080");
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.Profiler profiler13 = restAdapter10.profiler;
        retrofit.Profiler profiler14 = null;
        restAdapter10.profiler = profiler14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        restAdapter10.log = log24;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        builder28.logLevel = logLevel44;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log24, logLevel44);
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder57.setLog(log62);
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter64.logLevel = logLevel66;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        restAdapter64.requestInterceptor = requestInterceptor68;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter64.logLevel = logLevel70;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log62, logLevel70);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder73.setLog(log78);
        restAdapter72.log = log78;
        retrofit.client.Header[] headerArray83 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList84 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList84, headerArray83);
        retrofit.mime.TypedOutput typedOutput86 = null;
        retrofit.client.Request request87 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList84, typedOutput86);
        java.lang.String str88 = request87.getUrl();
        java.lang.String str89 = request87.getUrl();
        retrofit.client.Request request90 = restAdapter72.logAndReplaceRequest(request87);
        retrofit.mime.TypedOutput typedOutput91 = request87.getBody();
        retrofit.client.Request request92 = restAdapter47.logAndReplaceRequest(request87);
        retrofit.mime.TypedOutput typedOutput93 = request87.getBody();
        java.lang.String str94 = request87.getUrl();
        java.lang.String str95 = request87.getUrl();
        java.util.List<retrofit.client.Header> headerList96 = request87.getHeaders();
        retrofit.mime.TypedOutput typedOutput97 = null;
        retrofit.client.Request request98 = new retrofit.client.Request("", "hi!", headerList96, typedOutput97);
        java.lang.String str99 = request98.getMethod();
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(headerArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(request90);
        org.junit.Assert.assertNull(typedOutput91);
        org.junit.Assert.assertNotNull(request92);
        org.junit.Assert.assertNull(typedOutput93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(headerList96);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test09081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09081");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.converter.Converter converter5 = null;
        restAdapter2.converter = converter5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        restAdapter2.log = log27;
        log27.log("");
        log27.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder34 = builder0.setLog(log27);
        builder34.ensureSaneDefaults();
        retrofit.Server server36 = builder34.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(server36);
    }

    @Test
    public void test09082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09082");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        java.lang.String str17 = request16.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList18, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", headerList18, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList18, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", headerList18, typedOutput27);
        java.util.List<retrofit.client.Header> headerList29 = request28.getHeaders();
        retrofit.mime.TypedOutput typedOutput30 = request28.getBody();
        java.lang.String str31 = request28.getUrl();
        retrofit.mime.TypedOutput typedOutput32 = request28.getBody();
        java.util.List<retrofit.client.Header> headerList33 = request28.getHeaders();
        retrofit.mime.TypedOutput typedOutput34 = request28.getBody();
        java.lang.String str35 = request28.getUrl();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertNull(typedOutput34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
    }

    @Test
    public void test09083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09083");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor26);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = builder29.converter;
        retrofit.RestAdapter.LogLevel logLevel31 = builder29.logLevel;
        builder29.ensureSaneDefaults();
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter48.logLevel = logLevel50;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter48.requestInterceptor = requestInterceptor52;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter48.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log46, logLevel54);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder57.setLog(log62);
        restAdapter56.log = log62;
        builder29.log = log62;
        java.util.concurrent.Executor executor66 = null;
        builder29.httpExecutor = executor66;
        retrofit.converter.Converter converter68 = null;
        builder29.converter = converter68;
        retrofit.ErrorHandler errorHandler70 = builder29.errorHandler;
        builder28.errorHandler = errorHandler70;
        retrofit.RequestInterceptor requestInterceptor72 = builder28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        builder28.requestInterceptor = requestInterceptor73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler76 = builder75.errorHandler;
        retrofit.Server server77 = builder75.server;
        retrofit.RestAdapter.LogLevel logLevel78 = builder75.logLevel;
        retrofit.RestAdapter.LogLevel logLevel79 = builder75.logLevel;
        retrofit.Profiler profiler80 = null;
        builder75.profiler = profiler80;
        builder75.ensureSaneDefaults();
        retrofit.Server server83 = builder75.server;
        retrofit.client.Client.Provider provider84 = builder75.clientProvider;
        builder28.clientProvider = provider84;
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(errorHandler70);
        org.junit.Assert.assertNotNull(requestInterceptor72);
        org.junit.Assert.assertNull(errorHandler76);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertNotNull(provider84);
    }

    @Test
    public void test09084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09084");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter.LogLevel logLevel33 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter37.requestInterceptor = requestInterceptor39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter37.log = log49;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter37.errorHandler = errorHandler53;
        retrofit.RestAdapter.Log log55 = restAdapter37.log;
        retrofit.RestAdapter.Builder builder56 = builder35.setLog(log55);
        retrofit.RequestInterceptor requestInterceptor57 = builder35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor58 = builder35.requestInterceptor;
        retrofit.RestAdapter.Builder builder60 = builder35.setServer("hi!");
        retrofit.Server server61 = builder35.server;
        retrofit.RestAdapter.Builder builder62 = builder30.setServer(server61);
        retrofit.RestAdapter.Builder builder63 = builder0.setServer(server61);
        retrofit.Profiler profiler64 = builder0.profiler;
        java.util.concurrent.Executor executor65 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder66.logLevel = logLevel71;
        retrofit.converter.Converter converter73 = null;
        builder66.converter = converter73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder75.setLog(log80);
        retrofit.RestAdapter restAdapter82 = builder75.build();
        retrofit.converter.Converter converter83 = null;
        builder75.converter = converter83;
        retrofit.ErrorHandler errorHandler85 = null;
        builder75.errorHandler = errorHandler85;
        retrofit.RequestInterceptor requestInterceptor87 = builder75.requestInterceptor;
        builder66.requestInterceptor = requestInterceptor87;
        builder0.requestInterceptor = requestInterceptor87;
        retrofit.RestAdapter.Log log90 = builder0.log;
        retrofit.ErrorHandler errorHandler91 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder93 = builder0.setServer("Retrofit-Idle");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(profiler64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(requestInterceptor87);
        org.junit.Assert.assertNotNull(log90);
        org.junit.Assert.assertNull(errorHandler91);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test09085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09085");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", headerList14, typedOutput15);
        java.util.List<retrofit.client.Header> headerList17 = request16.getHeaders();
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        java.util.List<retrofit.client.Header> headerList19 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("", "", headerList19, typedOutput20);
        java.util.List<retrofit.client.Header> headerList22 = request21.getHeaders();
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", headerList22, typedOutput23);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList22);
    }

    @Test
    public void test09086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09086");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.converter.Converter converter10 = restAdapter9.converter;
        java.util.concurrent.Executor executor11 = restAdapter9.callbackExecutor;
        retrofit.client.Client.Provider provider12 = restAdapter9.clientProvider;
        retrofit.RestAdapter.Log log13 = restAdapter9.log;
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter9.requestInterceptor;
        java.util.concurrent.Executor executor15 = restAdapter9.callbackExecutor;
        retrofit.Profiler profiler16 = restAdapter9.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(converter10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(provider12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNull(profiler16);
    }

    @Test
    public void test09087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09087");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = builder26.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor28 = builder26.requestInterceptor;
        retrofit.Profiler profiler29 = builder26.profiler;
        retrofit.RestAdapter.LogLevel logLevel30 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RequestInterceptor requestInterceptor33 = builder31.requestInterceptor;
        java.util.concurrent.Executor executor34 = builder31.callbackExecutor;
        retrofit.ErrorHandler errorHandler35 = builder31.errorHandler;
        builder31.ensureSaneDefaults();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(errorHandler35);
    }

    @Test
    public void test09088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09088");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor22 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter0.getLogLevel();
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList29, typedOutput33);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request35 = restAdapter0.logAndReplaceRequest(request34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test09089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09089");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log7 = restAdapter6.log;
        retrofit.ErrorHandler errorHandler8 = restAdapter6.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter6.new RestHandler();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.Profiler profiler15 = null;
        builder14.profiler = profiler15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder17.setLog(log22);
        retrofit.RestAdapter restAdapter24 = builder17.build();
        retrofit.converter.Converter converter25 = null;
        builder17.converter = converter25;
        retrofit.ErrorHandler errorHandler27 = null;
        builder17.errorHandler = errorHandler27;
        retrofit.RequestInterceptor requestInterceptor29 = builder17.requestInterceptor;
        builder14.requestInterceptor = requestInterceptor29;
        restAdapter6.requestInterceptor = requestInterceptor29;
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter6.requestInterceptor;
        builder5.requestInterceptor = requestInterceptor32;
        retrofit.Profiler profiler34 = builder5.profiler;
        retrofit.RestAdapter restAdapter35 = builder5.build();
        retrofit.RestAdapter restAdapter36 = builder5.build();
        retrofit.Server server37 = restAdapter36.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(server37);
    }

    @Test
    public void test09090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09090");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        java.util.concurrent.Executor executor10 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter11 = builder0.build();
        java.util.concurrent.Executor executor12 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter13 = builder0.build();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.Profiler profiler19 = null;
        builder18.profiler = profiler19;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        builder18.requestInterceptor = requestInterceptor21;
        retrofit.RestAdapter restAdapter23 = builder18.build();
        retrofit.Profiler profiler24 = restAdapter23.profiler;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.Profiler profiler27 = null;
        builder25.profiler = profiler27;
        retrofit.ErrorHandler errorHandler29 = null;
        builder25.errorHandler = errorHandler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter33.requestInterceptor = requestInterceptor35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        restAdapter33.log = log45;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter33.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = restAdapter33.log;
        retrofit.RestAdapter.Builder builder52 = builder31.setLog(log51);
        retrofit.RestAdapter.Builder builder53 = builder25.setLog(log51);
        log51.log("Retrofit-Idle");
        restAdapter23.log = log51;
        restAdapter13.log = log51;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNotNull(executor12);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test09091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09091");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.Server server7 = restAdapter0.server;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        java.util.concurrent.Executor executor12 = restAdapter8.httpExecutor;
        retrofit.converter.Converter converter13 = restAdapter8.converter;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter8.logLevel;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.client.Client.Provider provider20 = builder19.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        builder19.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.ErrorHandler errorHandler25 = builder19.errorHandler;
        restAdapter8.errorHandler = errorHandler25;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter8.logLevel;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        java.util.concurrent.Executor executor30 = restAdapter28.callbackExecutor;
        retrofit.converter.Converter converter31 = null;
        restAdapter28.converter = converter31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter35.requestInterceptor = requestInterceptor37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        restAdapter35.log = log47;
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter35.errorHandler = errorHandler51;
        retrofit.RestAdapter.Log log53 = restAdapter35.log;
        retrofit.RestAdapter.Builder builder54 = builder33.setLog(log53);
        restAdapter28.log = log53;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter57 = builder56.converter;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor59 = restAdapter58.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        restAdapter58.requestInterceptor = requestInterceptor60;
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel71);
        restAdapter58.log = log70;
        retrofit.ErrorHandler errorHandler74 = null;
        restAdapter58.errorHandler = errorHandler74;
        retrofit.RestAdapter.Log log76 = restAdapter58.log;
        retrofit.RestAdapter.Builder builder77 = builder56.setLog(log76);
        retrofit.Profiler profiler78 = builder77.profiler;
        retrofit.client.Client.Provider provider79 = builder77.clientProvider;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter82 = builder81.build();
        retrofit.ErrorHandler errorHandler83 = restAdapter82.errorHandler;
        java.util.concurrent.Executor executor84 = restAdapter82.httpExecutor;
        restAdapter28.httpExecutor = executor84;
        restAdapter8.httpExecutor = executor84;
        restAdapter0.callbackExecutor = executor84;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(profiler78);
        org.junit.Assert.assertNull(provider79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(errorHandler83);
        org.junit.Assert.assertNotNull(executor84);
    }

    @Test
    public void test09092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09092");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.converter.Converter converter7 = builder0.converter;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.Profiler profiler33 = builder32.profiler;
        retrofit.client.Client.Provider provider34 = builder32.clientProvider;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter37 = builder36.build();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        builder0.requestInterceptor = requestInterceptor38;
        java.util.concurrent.Executor executor40 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.Profiler profiler46 = null;
        builder45.profiler = profiler46;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        builder45.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter restAdapter50 = builder45.build();
        retrofit.Server server51 = builder45.server;
        builder0.server = server51;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor54 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(requestInterceptor54);
    }

    @Test
    public void test09093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09093");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter restAdapter10 = builder0.build();
        retrofit.ErrorHandler errorHandler11 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder12.logLevel = logLevel17;
        retrofit.converter.Converter converter19 = null;
        builder12.converter = converter19;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.converter.Converter converter23 = restAdapter21.converter;
        java.util.concurrent.Executor executor24 = null;
        restAdapter21.callbackExecutor = executor24;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor27 = null;
        restAdapter26.httpExecutor = executor27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter26.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.Log log31 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel32;
        restAdapter21.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder35 = builder12.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.Profiler profiler41 = null;
        builder40.profiler = profiler41;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        builder40.requestInterceptor = requestInterceptor43;
        retrofit.RestAdapter restAdapter45 = builder40.build();
        retrofit.converter.Converter converter46 = restAdapter45.converter;
        java.util.concurrent.Executor executor47 = restAdapter45.callbackExecutor;
        builder12.httpExecutor = executor47;
        builder0.callbackExecutor = executor47;
        java.util.concurrent.Executor executor50 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNotNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(converter46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(executor50);
    }

    @Test
    public void test09094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09094");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log40, logLevel44);
        restAdapter0.logLevel = logLevel44;
        retrofit.client.Header[] headerArray52 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList53 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList53, headerArray52);
        retrofit.mime.TypedOutput typedOutput55 = null;
        retrofit.client.Request request56 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList53, typedOutput55);
        java.lang.String str57 = request56.getUrl();
        java.util.List<retrofit.client.Header> headerList58 = request56.getHeaders();
        java.lang.String str59 = request56.getMethod();
        retrofit.mime.TypedOutput typedOutput60 = request56.getBody();
        java.util.List<retrofit.client.Header> headerList61 = request56.getHeaders();
        java.lang.String str62 = request56.getUrl();
        java.lang.String str63 = request56.getUrl();
        java.util.List<retrofit.client.Header> headerList64 = request56.getHeaders();
        java.util.List<retrofit.client.Header> headerList65 = request56.getHeaders();
        retrofit.mime.TypedOutput typedOutput66 = null;
        retrofit.client.Request request67 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList65, typedOutput66);
        java.lang.String str68 = request67.getMethod();
        retrofit.client.Request request69 = restAdapter0.logAndReplaceRequest(request67);
        java.util.List<retrofit.client.Header> headerList70 = request67.getHeaders();
        java.util.List<retrofit.client.Header> headerList71 = request67.getHeaders();
        retrofit.mime.TypedOutput typedOutput72 = request67.getBody();
        java.lang.String str73 = request67.getMethod();
        java.lang.String str74 = request67.getMethod();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(headerArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(headerList58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNull(typedOutput60);
        org.junit.Assert.assertNotNull(headerList61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(headerList64);
        org.junit.Assert.assertNotNull(headerList65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Retrofit-Idle" + "'", str68, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(headerList70);
        org.junit.Assert.assertNotNull(headerList71);
        org.junit.Assert.assertNull(typedOutput72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Retrofit-Idle" + "'", str73, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Retrofit-Idle" + "'", str74, "Retrofit-Idle");
    }

    @Test
    public void test09095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09095");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter19.log = log31;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log31, logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder9.setLog(log31);
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = builder40.callbackExecutor;
        retrofit.RestAdapter.Log log42 = builder40.log;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter62.logLevel = logLevel64;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter62.setLogLevel(logLevel66);
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log59, logLevel66);
        retrofit.RestAdapter.Builder builder69 = builder40.setLogLevel(logLevel66);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter70.logLevel = logLevel72;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter70.setLogLevel(logLevel74);
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter70.getLogLevel();
        builder69.logLevel = logLevel76;
        retrofit.RestAdapter.Builder builder78 = builder38.setLogLevel(logLevel76);
        retrofit.RestAdapter.LogLevel logLevel79 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.httpExecutor = executor81;
        retrofit.RestAdapter.Builder builder84 = builder80.setServer("hi!");
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder86 = builder80.setLog(log85);
        retrofit.RestAdapter restAdapter87 = builder80.build();
        java.util.concurrent.Executor executor88 = restAdapter87.httpExecutor;
        retrofit.client.Client.Provider provider89 = null;
        restAdapter87.clientProvider = provider89;
        retrofit.Profiler profiler91 = restAdapter87.profiler;
        retrofit.Server server92 = restAdapter87.server;
        retrofit.RestAdapter.LogLevel logLevel93 = restAdapter87.logLevel;
        builder38.logLevel = logLevel93;
        restAdapter0.logLevel = logLevel93;
        boolean boolean96 = logLevel93.log();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNull(profiler91);
        org.junit.Assert.assertNotNull(server92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test09096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09096");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log8 = restAdapter0.log;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter0.clientProvider = provider9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.Profiler profiler33 = builder32.profiler;
        retrofit.Profiler profiler34 = builder32.profiler;
        java.util.concurrent.Executor executor35 = builder32.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        builder36.logLevel = logLevel52;
        retrofit.converter.Converter converter55 = builder36.converter;
        retrofit.ErrorHandler errorHandler56 = builder36.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel57 = builder36.logLevel;
        retrofit.Server server58 = builder36.server;
        retrofit.RestAdapter.Builder builder59 = builder32.setServer(server58);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.Profiler profiler65 = null;
        builder64.profiler = profiler65;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        builder64.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter restAdapter69 = builder64.build();
        retrofit.converter.Converter converter70 = null;
        builder64.converter = converter70;
        retrofit.client.Client.Provider provider72 = builder64.clientProvider;
        builder59.clientProvider = provider72;
        retrofit.client.Client.Provider provider74 = builder59.clientProvider;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.Profiler profiler80 = null;
        builder79.profiler = profiler80;
        retrofit.RequestInterceptor requestInterceptor82 = null;
        builder79.requestInterceptor = requestInterceptor82;
        retrofit.RestAdapter restAdapter84 = builder79.build();
        retrofit.Server server85 = builder79.server;
        retrofit.Server server86 = builder79.server;
        retrofit.ErrorHandler errorHandler87 = builder79.errorHandler;
        builder59.errorHandler = errorHandler87;
        restAdapter0.errorHandler = errorHandler87;
        retrofit.RequestInterceptor requestInterceptor90 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(provider72);
        org.junit.Assert.assertNotNull(provider74);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(server85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNull(requestInterceptor90);
    }

    @Test
    public void test09097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09097");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.client.Response response11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response13 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response11, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
    }

    @Test
    public void test09098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09098");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.util.List<retrofit.client.Header> headerList9 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("Retrofit-Idle", "", headerList9, typedOutput10);
        java.lang.String str12 = request11.getMethod();
        java.util.List<retrofit.client.Header> headerList13 = request11.getHeaders();
        retrofit.mime.TypedOutput typedOutput14 = request11.getBody();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(typedOutput14);
    }

    @Test
    public void test09099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09099");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        retrofit.converter.Converter converter3 = builder0.converter;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter7 = null;
        restAdapter6.converter = converter7;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter6.requestInterceptor = requestInterceptor9;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log12 = restAdapter11.log;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter11.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter.LogLevel logLevel15 = null;
        restAdapter11.logLevel = logLevel15;
        retrofit.ErrorHandler errorHandler17 = restAdapter11.errorHandler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.Profiler profiler23 = null;
        builder22.profiler = profiler23;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        builder22.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter restAdapter27 = builder22.build();
        retrofit.converter.Converter converter28 = restAdapter27.converter;
        restAdapter11.converter = converter28;
        restAdapter6.converter = converter28;
        retrofit.RestAdapter.Builder builder31 = builder0.setConverter(converter28);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNotNull(converter28);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test09100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09100");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.Server server5 = restAdapter0.server;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.client.Client.Provider provider7 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(logLevel8);
    }

    @Test
    public void test09101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09101");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = builder9.callbackExecutor;
        retrofit.RestAdapter.Log log11 = builder9.log;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter31.logLevel = logLevel33;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.setLogLevel(logLevel35);
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log28, logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder9.setLogLevel(logLevel35);
        builder4.logLevel = logLevel35;
        java.util.concurrent.Executor executor40 = builder4.httpExecutor;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter42 = null;
        builder41.converter = converter42;
        retrofit.client.Client.Provider provider44 = null;
        builder41.clientProvider = provider44;
        java.util.concurrent.Executor executor46 = builder41.httpExecutor;
        retrofit.Profiler profiler47 = builder41.profiler;
        retrofit.RestAdapter.Log log48 = builder41.log;
        java.util.concurrent.Executor executor49 = builder41.httpExecutor;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder50.logLevel = logLevel55;
        retrofit.RestAdapter.Log log57 = builder50.log;
        retrofit.RestAdapter restAdapter58 = builder50.build();
        retrofit.ErrorHandler errorHandler59 = restAdapter58.errorHandler;
        builder41.errorHandler = errorHandler59;
        builder4.errorHandler = errorHandler59;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(errorHandler59);
    }

    @Test
    public void test09102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09102");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter restAdapter8 = builder0.build();
        retrofit.Profiler profiler9 = null;
        builder0.profiler = profiler9;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(restAdapter8);
    }

    @Test
    public void test09103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09103");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.Profiler profiler10 = builder7.profiler;
        retrofit.client.Client.Provider provider11 = builder7.clientProvider;
        java.util.concurrent.Executor executor12 = builder7.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor13 = builder7.requestInterceptor;
        retrofit.RestAdapter.Builder builder15 = builder7.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder17 = builder15.setRequestInterceptor(requestInterceptor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test09104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09104");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler10 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter11 = builder0.build();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(restAdapter11);
    }

    @Test
    public void test09105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09105");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.lang.String str9 = request6.getMethod();
        retrofit.mime.TypedOutput typedOutput10 = request6.getBody();
        java.util.List<retrofit.client.Header> headerList11 = request6.getHeaders();
        java.lang.String str12 = request6.getUrl();
        java.lang.String str13 = request6.getUrl();
        retrofit.mime.TypedOutput typedOutput14 = request6.getBody();
        java.util.List<retrofit.client.Header> headerList15 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList16 = request6.getHeaders();
        java.lang.Class<?> wildcardClass17 = request6.getClass();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test09106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09106");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        java.util.concurrent.Executor executor19 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder21 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log23 = restAdapter22.log;
        retrofit.ErrorHandler errorHandler24 = restAdapter22.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter22.logLevel;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = builder31.build();
        retrofit.client.Header[] headerArray35 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList36 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList36, headerArray35);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList36, typedOutput38);
        java.lang.String str40 = request39.getMethod();
        java.lang.String str41 = request39.getMethod();
        retrofit.client.Request request42 = restAdapter32.logAndReplaceRequest(request39);
        retrofit.converter.Converter converter43 = restAdapter32.converter;
        restAdapter22.converter = converter43;
        builder21.converter = converter43;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.client.Client.Provider provider51 = builder50.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        builder50.logLevel = logLevel52;
        retrofit.RestAdapter restAdapter55 = builder50.build();
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter56.requestInterceptor;
        java.util.concurrent.Executor executor58 = restAdapter56.callbackExecutor;
        retrofit.converter.Converter converter59 = null;
        restAdapter56.converter = converter59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter62 = builder61.converter;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter63.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter63.requestInterceptor = requestInterceptor65;
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel76);
        restAdapter63.log = log75;
        retrofit.ErrorHandler errorHandler79 = null;
        restAdapter63.errorHandler = errorHandler79;
        retrofit.RestAdapter.Log log81 = restAdapter63.log;
        retrofit.RestAdapter.Builder builder82 = builder61.setLog(log81);
        restAdapter56.log = log81;
        retrofit.RestAdapter.Builder builder84 = builder50.setLog(log81);
        log81.log("hi!");
        log81.log("");
        log81.log("");
        builder21.log = log81;
        log81.log("Retrofit-Idle");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(headerArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(converter43);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(converter62);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test09107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09107");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel6;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.RestAdapter restAdapter16 = builder9.build();
        java.util.concurrent.Executor executor17 = restAdapter16.httpExecutor;
        retrofit.client.Client.Provider provider18 = null;
        restAdapter16.clientProvider = provider18;
        retrofit.Profiler profiler20 = restAdapter16.profiler;
        retrofit.ErrorHandler errorHandler21 = restAdapter16.errorHandler;
        java.util.concurrent.Executor executor22 = restAdapter16.callbackExecutor;
        restAdapter0.httpExecutor = executor22;
        retrofit.converter.Converter converter24 = restAdapter0.converter;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNull(converter24);
    }

    @Test
    public void test09108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09108");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.Profiler profiler10 = restAdapter9.profiler;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.Profiler profiler13 = null;
        builder11.profiler = profiler13;
        retrofit.ErrorHandler errorHandler15 = null;
        builder11.errorHandler = errorHandler15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter18 = builder17.converter;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter19.log = log31;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter19.errorHandler = errorHandler35;
        retrofit.RestAdapter.Log log37 = restAdapter19.log;
        retrofit.RestAdapter.Builder builder38 = builder17.setLog(log37);
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log37);
        log37.log("Retrofit-Idle");
        restAdapter9.log = log37;
        retrofit.client.Header[] headerArray47 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList48 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList48, headerArray47);
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList48, typedOutput50);
        java.lang.String str52 = request51.getUrl();
        java.util.List<retrofit.client.Header> headerList53 = request51.getHeaders();
        retrofit.mime.TypedOutput typedOutput54 = null;
        retrofit.client.Request request55 = new retrofit.client.Request("hi!", "", headerList53, typedOutput54);
        java.util.List<retrofit.client.Header> headerList56 = request55.getHeaders();
        java.util.List<retrofit.client.Header> headerList57 = request55.getHeaders();
        java.lang.String str58 = request55.getMethod();
        retrofit.mime.TypedOutput typedOutput59 = request55.getBody();
        java.lang.String str60 = request55.getMethod();
        retrofit.client.Request request61 = restAdapter9.logAndReplaceRequest(request55);
        java.lang.Class<?> wildcardClass62 = restAdapter9.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(headerArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(headerList53);
        org.junit.Assert.assertNotNull(headerList56);
        org.junit.Assert.assertNotNull(headerList57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNull(typedOutput59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(request61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test09109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09109");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = builder4.build();
        retrofit.RestAdapter.LogLevel logLevel6 = null;
        restAdapter5.logLevel = logLevel6;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter5.logLevel;
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter5.getLogLevel();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(logLevel9);
    }

    @Test
    public void test09110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09110");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter5.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        restAdapter5.requestInterceptor = requestInterceptor7;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        restAdapter5.log = log17;
        retrofit.ErrorHandler errorHandler21 = null;
        restAdapter5.errorHandler = errorHandler21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter25.requestInterceptor = requestInterceptor27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        restAdapter25.log = log37;
        retrofit.ErrorHandler errorHandler41 = null;
        restAdapter25.errorHandler = errorHandler41;
        retrofit.RestAdapter.Log log43 = restAdapter25.log;
        retrofit.RestAdapter.Builder builder44 = builder23.setLog(log43);
        retrofit.RequestInterceptor requestInterceptor45 = builder23.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder48 = builder23.setServer("hi!");
        retrofit.Server server49 = builder23.server;
        restAdapter5.server = server49;
        builder0.server = server49;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = builder52.converter;
        retrofit.Profiler profiler54 = null;
        builder52.profiler = profiler54;
        retrofit.RestAdapter.Log log56 = builder52.log;
        builder52.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor58 = null;
        builder52.requestInterceptor = requestInterceptor58;
        retrofit.ErrorHandler errorHandler60 = null;
        builder52.errorHandler = errorHandler60;
        retrofit.converter.Converter converter62 = builder52.converter;
        retrofit.RestAdapter.Builder builder63 = builder0.setConverter(converter62);
        retrofit.RestAdapter restAdapter64 = builder63.build();
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor66 = restAdapter65.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter65.logLevel;
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.Profiler profiler74 = null;
        builder73.profiler = profiler74;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        builder73.requestInterceptor = requestInterceptor76;
        retrofit.RestAdapter restAdapter78 = builder73.build();
        retrofit.Server server79 = builder73.server;
        retrofit.Server server80 = builder73.server;
        restAdapter65.server = server80;
        retrofit.RestAdapter.Builder builder82 = builder63.setServer(server80);
        java.lang.Class<?> wildcardClass83 = builder82.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertNotNull(converter62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(server79);
        org.junit.Assert.assertNotNull(server80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test09111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09111");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "", headerList10, typedOutput11);
        java.util.List<retrofit.client.Header> headerList13 = request12.getHeaders();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        java.util.List<retrofit.client.Header> headerList15 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput16 = request12.getBody();
        java.lang.String str17 = request12.getMethod();
        java.lang.String str18 = request12.getUrl();
        java.lang.String str19 = request12.getUrl();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test09112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09112");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        restAdapter0.logLevel = logLevel6;
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor12 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter13 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter0.getLogLevel();
        boolean boolean15 = logLevel14.log();
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09113");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter10 = null;
        restAdapter9.converter = converter10;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter9.requestInterceptor = requestInterceptor12;
        retrofit.Profiler profiler14 = restAdapter9.profiler;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean16 = logLevel15.log();
        restAdapter9.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder18.setLog(log23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter25.logLevel;
        retrofit.converter.Converter converter28 = null;
        restAdapter25.converter = converter28;
        retrofit.ErrorHandler errorHandler30 = restAdapter25.errorHandler;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = null;
        builder31.converter = converter32;
        retrofit.client.Client.Provider provider34 = null;
        builder31.clientProvider = provider34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder31.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.Profiler profiler43 = null;
        builder42.profiler = profiler43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter restAdapter52 = builder45.build();
        retrofit.converter.Converter converter53 = null;
        builder45.converter = converter53;
        retrofit.ErrorHandler errorHandler55 = null;
        builder45.errorHandler = errorHandler55;
        retrofit.RequestInterceptor requestInterceptor57 = builder45.requestInterceptor;
        builder42.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.Builder builder59 = builder31.setRequestInterceptor(requestInterceptor57);
        restAdapter25.requestInterceptor = requestInterceptor57;
        builder18.requestInterceptor = requestInterceptor57;
        restAdapter9.requestInterceptor = requestInterceptor57;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor72 = restAdapter71.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        restAdapter71.requestInterceptor = requestInterceptor73;
        retrofit.Server server75 = null;
        retrofit.client.Client.Provider provider76 = null;
        java.util.concurrent.Executor executor77 = null;
        java.util.concurrent.Executor executor78 = null;
        retrofit.RequestInterceptor requestInterceptor79 = null;
        retrofit.converter.Converter converter80 = null;
        retrofit.Profiler profiler81 = null;
        retrofit.ErrorHandler errorHandler82 = null;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server75, provider76, executor77, executor78, requestInterceptor79, converter80, profiler81, errorHandler82, log83, logLevel84);
        restAdapter71.log = log83;
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean88 = logLevel87.log();
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log83, logLevel87);
        log83.log("Retrofit-Idle");
        restAdapter9.log = log83;
        log83.log("");
        restAdapter0.log = log83;
        java.util.concurrent.Executor executor96 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(executor96);
    }

    @Test
    public void test09114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09114");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter10.logLevel = logLevel12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter10.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter10.new RestHandler();
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.converter.Converter converter22 = null;
        restAdapter19.converter = converter22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Log log44 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder45 = builder24.setLog(log44);
        restAdapter19.log = log44;
        retrofit.Profiler profiler47 = null;
        restAdapter19.profiler = profiler47;
        retrofit.converter.Converter converter49 = null;
        restAdapter19.converter = converter49;
        java.util.concurrent.Executor executor51 = restAdapter19.httpExecutor;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor53 = restAdapter52.requestInterceptor;
        java.util.concurrent.Executor executor54 = restAdapter52.callbackExecutor;
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        java.util.concurrent.Executor executor56 = restAdapter52.httpExecutor;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log58 = restAdapter57.log;
        retrofit.ErrorHandler errorHandler59 = restAdapter57.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.Profiler profiler66 = null;
        builder65.profiler = profiler66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder74 = builder68.setLog(log73);
        retrofit.RestAdapter restAdapter75 = builder68.build();
        retrofit.converter.Converter converter76 = null;
        builder68.converter = converter76;
        retrofit.ErrorHandler errorHandler78 = null;
        builder68.errorHandler = errorHandler78;
        retrofit.RequestInterceptor requestInterceptor80 = builder68.requestInterceptor;
        builder65.requestInterceptor = requestInterceptor80;
        restAdapter57.requestInterceptor = requestInterceptor80;
        retrofit.RequestInterceptor requestInterceptor83 = restAdapter57.requestInterceptor;
        restAdapter52.requestInterceptor = requestInterceptor83;
        restAdapter19.requestInterceptor = requestInterceptor83;
        restAdapter10.requestInterceptor = requestInterceptor83;
        retrofit.RequestInterceptor requestInterceptor87 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.Builder builder88 = builder0.setRequestInterceptor(requestInterceptor87);
        java.util.concurrent.Executor executor89 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter90 = builder0.build();
        retrofit.Server server91 = builder0.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(requestInterceptor87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(executor89);
        org.junit.Assert.assertNotNull(restAdapter90);
        org.junit.Assert.assertNotNull(server91);
    }

    @Test
    public void test09115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09115");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(logLevel7);
    }

    @Test
    public void test09116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09116");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.Server server8 = null;
        restAdapter0.server = server8;
        retrofit.client.Client.Provider provider10 = restAdapter0.clientProvider;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter21.errorHandler = errorHandler22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        retrofit.RestAdapter restAdapter31 = builder24.build();
        retrofit.converter.Converter converter32 = null;
        builder24.converter = converter32;
        retrofit.ErrorHandler errorHandler34 = null;
        builder24.errorHandler = errorHandler34;
        retrofit.RequestInterceptor requestInterceptor36 = builder24.requestInterceptor;
        restAdapter21.requestInterceptor = requestInterceptor36;
        restAdapter0.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter.Log log39 = restAdapter0.log;
        retrofit.Profiler profiler40 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log41 = restAdapter0.log;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter42.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter42.requestInterceptor = requestInterceptor44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        restAdapter42.log = log54;
        retrofit.ErrorHandler errorHandler58 = null;
        restAdapter42.errorHandler = errorHandler58;
        java.util.concurrent.Executor executor60 = restAdapter42.callbackExecutor;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder69.setLog(log74);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter76.logLevel = logLevel78;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        restAdapter76.requestInterceptor = requestInterceptor80;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter76.logLevel = logLevel82;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log74, logLevel82);
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor86 = null;
        builder85.httpExecutor = executor86;
        retrofit.RestAdapter.Builder builder89 = builder85.setServer("hi!");
        retrofit.RestAdapter.Log log90 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder91 = builder85.setLog(log90);
        restAdapter84.log = log90;
        restAdapter42.log = log90;
        restAdapter0.log = log90;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(log90);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test09117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09117");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        java.util.concurrent.Executor executor19 = restAdapter18.httpExecutor;
        builder10.callbackExecutor = executor19;
        builder0.callbackExecutor = executor19;
        retrofit.ErrorHandler errorHandler22 = builder0.errorHandler;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Log log44 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder45 = builder24.setLog(log44);
        retrofit.Profiler profiler46 = builder45.profiler;
        java.util.concurrent.Executor executor47 = builder45.callbackExecutor;
        retrofit.ErrorHandler errorHandler48 = null;
        builder45.errorHandler = errorHandler48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.client.Client.Provider provider55 = builder54.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean57 = logLevel56.log();
        builder54.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter59 = builder54.build();
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor61 = restAdapter60.requestInterceptor;
        java.util.concurrent.Executor executor62 = restAdapter60.callbackExecutor;
        retrofit.converter.Converter converter63 = null;
        restAdapter60.converter = converter63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter66 = builder65.converter;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor68 = restAdapter67.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        restAdapter67.requestInterceptor = requestInterceptor69;
        retrofit.Server server71 = null;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel80);
        restAdapter67.log = log79;
        retrofit.ErrorHandler errorHandler83 = null;
        restAdapter67.errorHandler = errorHandler83;
        retrofit.RestAdapter.Log log85 = restAdapter67.log;
        retrofit.RestAdapter.Builder builder86 = builder65.setLog(log85);
        restAdapter60.log = log85;
        retrofit.RestAdapter.Builder builder88 = builder54.setLog(log85);
        retrofit.ErrorHandler errorHandler89 = null;
        builder54.errorHandler = errorHandler89;
        retrofit.client.Client.Provider provider91 = builder54.clientProvider;
        builder45.clientProvider = provider91;
        retrofit.RestAdapter.Builder builder93 = builder0.setClient(provider91);
        retrofit.RequestInterceptor requestInterceptor94 = builder93.requestInterceptor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(provider91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(requestInterceptor94);
    }

    @Test
    public void test09118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09118");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Server server22 = null;
        builder0.server = server22;
        java.util.concurrent.Executor executor24 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder26 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.client.Client.Provider provider30 = null;
        builder27.clientProvider = provider30;
        retrofit.client.Client.Provider provider32 = builder27.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder34 = builder27.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = builder35.errorHandler;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter45.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter45.requestInterceptor = requestInterceptor47;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel58);
        restAdapter45.log = log57;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log57, logLevel61);
        retrofit.RestAdapter.Builder builder64 = builder35.setLog(log57);
        retrofit.Server server65 = builder64.server;
        retrofit.ErrorHandler errorHandler66 = null;
        builder64.errorHandler = errorHandler66;
        retrofit.Profiler profiler68 = null;
        builder64.profiler = profiler68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = builder70.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor72 = builder70.requestInterceptor;
        java.util.concurrent.Executor executor73 = builder70.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel74 = builder70.logLevel;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.Profiler profiler80 = null;
        builder79.profiler = profiler80;
        retrofit.RequestInterceptor requestInterceptor82 = null;
        builder79.requestInterceptor = requestInterceptor82;
        retrofit.RestAdapter restAdapter84 = builder79.build();
        retrofit.converter.Converter converter85 = null;
        builder79.converter = converter85;
        retrofit.client.Client.Provider provider87 = builder79.clientProvider;
        retrofit.RestAdapter.Builder builder88 = builder70.setClient(provider87);
        builder64.clientProvider = provider87;
        builder34.clientProvider = provider87;
        retrofit.RestAdapter.Builder builder91 = builder0.setClient(provider87);
        retrofit.Server server92 = builder91.server;
        java.util.concurrent.Executor executor93 = builder91.httpExecutor;
        retrofit.client.Client client94 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder95 = builder91.setClient(client94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(provider87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(server92);
        org.junit.Assert.assertNull(executor93);
    }

    @Test
    public void test09119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09119");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter19.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter19.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log17, logLevel25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        restAdapter27.log = log33;
        builder0.log = log33;
        java.util.concurrent.Executor executor37 = null;
        builder0.httpExecutor = executor37;
        retrofit.converter.Converter converter39 = null;
        builder0.converter = converter39;
        retrofit.RestAdapter.Builder builder42 = builder0.setServer("hi!");
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = builder42.build();
        retrofit.RestAdapter.LogLevel logLevel45 = builder42.logLevel;
        boolean boolean46 = logLevel45.log();
        boolean boolean47 = logLevel45.log();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test09120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09120");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider24 = builder0.clientProvider;
        retrofit.Profiler profiler25 = null;
        builder0.profiler = profiler25;
        retrofit.RestAdapter.Log log27 = builder0.log;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNotNull(log27);
    }

    @Test
    public void test09121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09121");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter0.requestInterceptor;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter27.logLevel = logLevel29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.setLogLevel(logLevel31);
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log24, logLevel31);
        java.util.concurrent.Executor executor34 = restAdapter33.callbackExecutor;
        retrofit.Profiler profiler35 = null;
        restAdapter33.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = null;
        builder37.converter = converter38;
        retrofit.client.Client.Provider provider40 = null;
        builder37.clientProvider = provider40;
        retrofit.converter.Converter converter42 = null;
        builder37.converter = converter42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        retrofit.Profiler profiler55 = restAdapter54.profiler;
        java.util.concurrent.Executor executor56 = restAdapter54.httpExecutor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter58 = builder57.converter;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor60 = restAdapter59.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        restAdapter59.requestInterceptor = requestInterceptor61;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel72);
        restAdapter59.log = log71;
        retrofit.ErrorHandler errorHandler75 = null;
        restAdapter59.errorHandler = errorHandler75;
        retrofit.RestAdapter.Log log77 = restAdapter59.log;
        retrofit.RestAdapter.Builder builder78 = builder57.setLog(log77);
        retrofit.Profiler profiler79 = builder78.profiler;
        retrofit.client.Client.Provider provider80 = builder78.clientProvider;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter83 = builder82.build();
        retrofit.RestAdapter.Log log84 = builder82.log;
        retrofit.RestAdapter restAdapter85 = builder82.build();
        retrofit.converter.Converter converter86 = null;
        restAdapter85.converter = converter86;
        retrofit.Server server88 = restAdapter85.server;
        restAdapter54.server = server88;
        retrofit.RestAdapter.Builder builder90 = builder37.setServer(server88);
        restAdapter33.server = server88;
        restAdapter0.server = server88;
        retrofit.RestAdapter.LogLevel logLevel93 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler94 = restAdapter0.profiler;
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(profiler79);
        org.junit.Assert.assertNull(provider80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(server88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(logLevel93);
        org.junit.Assert.assertNull(profiler94);
    }

    @Test
    public void test09122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09122");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.converter.Converter converter10 = restAdapter0.converter;
        java.util.concurrent.Executor executor11 = restAdapter0.callbackExecutor;
        retrofit.client.Client.Provider provider12 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor13 = restAdapter0.callbackExecutor;
        retrofit.client.Response response15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response17 = restAdapter0.logAndReplaceResponse("", response15, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test09123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09123");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.client.Request request9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request10 = restAdapter7.logAndReplaceRequest(request9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09124");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.RestAdapter restAdapter16 = builder9.build();
        java.util.concurrent.Executor executor17 = restAdapter16.httpExecutor;
        retrofit.client.Client.Provider provider18 = null;
        restAdapter16.clientProvider = provider18;
        retrofit.client.Client.Provider provider20 = null;
        restAdapter16.clientProvider = provider20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder26 = builder22.setServer("hi!");
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder22.setLog(log27);
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        builder22.logLevel = logLevel38;
        retrofit.converter.Converter converter41 = builder22.converter;
        retrofit.ErrorHandler errorHandler42 = builder22.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel43 = builder22.logLevel;
        boolean boolean44 = logLevel43.log();
        boolean boolean45 = logLevel43.log();
        restAdapter16.logLevel = logLevel43;
        builder0.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter50.requestInterceptor = requestInterceptor52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        restAdapter50.log = log62;
        retrofit.ErrorHandler errorHandler66 = null;
        restAdapter50.errorHandler = errorHandler66;
        retrofit.RestAdapter.Log log68 = restAdapter50.log;
        retrofit.RestAdapter.Builder builder69 = builder48.setLog(log68);
        retrofit.Profiler profiler70 = builder69.profiler;
        retrofit.client.Client.Provider provider71 = builder69.clientProvider;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter74 = builder73.build();
        retrofit.RestAdapter.Log log75 = builder73.log;
        log75.log("hi!");
        retrofit.RestAdapter.Builder builder78 = builder0.setLog(log75);
        retrofit.RestAdapter restAdapter79 = builder78.build();
        retrofit.RestAdapter.Log log80 = builder78.log;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(profiler70);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(log80);
    }

    @Test
    public void test09125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09125");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor24 = builder0.callbackExecutor;
        retrofit.client.Client.Provider provider25 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.Profiler profiler31 = null;
        builder30.profiler = profiler31;
        retrofit.RestAdapter.LogLevel logLevel33 = builder30.logLevel;
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.Profiler profiler40 = null;
        builder39.profiler = profiler40;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        builder39.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter restAdapter44 = builder39.build();
        retrofit.converter.Converter converter45 = restAdapter44.converter;
        retrofit.RestAdapter.Log log46 = restAdapter44.log;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter44.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter44.requestInterceptor;
        retrofit.RestAdapter.Builder builder49 = builder30.setRequestInterceptor(requestInterceptor48);
        retrofit.client.Client.Provider provider50 = builder49.clientProvider;
        builder0.clientProvider = provider50;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(converter45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(provider50);
    }

    @Test
    public void test09126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09126");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor26 = builder25.httpExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter27.logLevel = logLevel29;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter27.requestInterceptor = requestInterceptor31;
        retrofit.RestAdapter.Log log33 = restAdapter27.log;
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = builder36.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor38 = builder36.requestInterceptor;
        retrofit.ErrorHandler errorHandler39 = null;
        builder36.errorHandler = errorHandler39;
        retrofit.Profiler profiler41 = builder36.profiler;
        java.util.concurrent.Executor executor42 = builder36.httpExecutor;
        retrofit.converter.Converter converter43 = builder36.converter;
        retrofit.client.Client.Provider provider44 = builder36.clientProvider;
        retrofit.RestAdapter.Builder builder46 = builder36.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter48 = builder47.converter;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor50 = restAdapter49.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter49.requestInterceptor = requestInterceptor51;
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel62);
        restAdapter49.log = log61;
        retrofit.ErrorHandler errorHandler65 = null;
        restAdapter49.errorHandler = errorHandler65;
        retrofit.RestAdapter.Log log67 = restAdapter49.log;
        retrofit.RestAdapter.Builder builder68 = builder47.setLog(log67);
        retrofit.Profiler profiler69 = builder68.profiler;
        retrofit.client.Client.Provider provider70 = builder68.clientProvider;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter73 = builder72.build();
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter73.requestInterceptor;
        builder36.requestInterceptor = requestInterceptor74;
        retrofit.Server server76 = builder36.server;
        restAdapter27.server = server76;
        builder25.server = server76;
        retrofit.ErrorHandler errorHandler79 = builder25.errorHandler;
        retrofit.ErrorHandler errorHandler80 = builder25.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(converter48);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(profiler69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNull(errorHandler80);
    }

    @Test
    public void test09127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09127");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter21 = builder20.converter;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter22.requestInterceptor = requestInterceptor24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        restAdapter22.log = log34;
        retrofit.ErrorHandler errorHandler38 = null;
        restAdapter22.errorHandler = errorHandler38;
        retrofit.RestAdapter.Log log40 = restAdapter22.log;
        retrofit.RestAdapter.Builder builder41 = builder20.setLog(log40);
        retrofit.RequestInterceptor requestInterceptor42 = builder20.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor43 = builder20.requestInterceptor;
        retrofit.RestAdapter.Builder builder45 = builder20.setServer("hi!");
        retrofit.Server server46 = builder20.server;
        restAdapter2.server = server46;
        builder0.server = server46;
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor50 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel51 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = null;
        builder52.converter = converter53;
        retrofit.client.Client.Provider provider55 = null;
        builder52.clientProvider = provider55;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        builder52.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.Profiler profiler64 = null;
        builder63.profiler = profiler64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder66.setLog(log71);
        retrofit.RestAdapter restAdapter73 = builder66.build();
        retrofit.converter.Converter converter74 = null;
        builder66.converter = converter74;
        retrofit.ErrorHandler errorHandler76 = null;
        builder66.errorHandler = errorHandler76;
        retrofit.RequestInterceptor requestInterceptor78 = builder66.requestInterceptor;
        builder63.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter.Builder builder80 = builder52.setRequestInterceptor(requestInterceptor78);
        java.util.concurrent.Executor executor81 = builder80.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel82 = builder80.logLevel;
        builder0.logLevel = logLevel82;
        boolean boolean84 = logLevel82.log();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test09128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09128");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        java.util.concurrent.Executor executor19 = restAdapter18.httpExecutor;
        builder10.callbackExecutor = executor19;
        builder0.callbackExecutor = executor19;
        retrofit.RestAdapter.Log log22 = builder0.log;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter24 = null;
        restAdapter23.converter = converter24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.Profiler profiler28 = null;
        builder26.profiler = profiler28;
        retrofit.ErrorHandler errorHandler30 = null;
        builder26.errorHandler = errorHandler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        restAdapter34.log = log46;
        retrofit.ErrorHandler errorHandler50 = null;
        restAdapter34.errorHandler = errorHandler50;
        retrofit.RestAdapter.Log log52 = restAdapter34.log;
        retrofit.RestAdapter.Builder builder53 = builder32.setLog(log52);
        retrofit.RestAdapter.Builder builder54 = builder26.setLog(log52);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = builder54.setLogLevel(logLevel57);
        restAdapter23.logLevel = logLevel57;
        builder0.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter62.logLevel = logLevel64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        restAdapter62.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter62.logLevel = logLevel68;
        retrofit.RestAdapter.Builder builder70 = builder0.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("hi!");
        retrofit.client.Client client73 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder74 = builder72.setClient(client73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test09129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09129");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor18 = builder16.requestInterceptor;
        retrofit.ErrorHandler errorHandler19 = null;
        builder16.errorHandler = errorHandler19;
        retrofit.converter.Converter converter21 = null;
        builder16.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder16.errorHandler = errorHandler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.Profiler profiler30 = null;
        builder29.profiler = profiler30;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        builder29.requestInterceptor = requestInterceptor32;
        retrofit.RestAdapter restAdapter34 = builder29.build();
        retrofit.converter.Converter converter35 = restAdapter34.converter;
        retrofit.RestAdapter.Builder builder36 = builder16.setConverter(converter35);
        restAdapter14.converter = converter35;
        builder0.converter = converter35;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.Profiler profiler50 = restAdapter46.profiler;
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter46.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter46.requestInterceptor = requestInterceptor52;
        retrofit.Profiler profiler54 = null;
        restAdapter46.profiler = profiler54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter56.requestInterceptor;
        retrofit.converter.Converter converter58 = restAdapter56.converter;
        java.util.concurrent.Executor executor59 = null;
        restAdapter56.callbackExecutor = executor59;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter56.logLevel = logLevel61;
        restAdapter46.setLogLevel(logLevel61);
        builder39.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder65 = builder0.setLogLevel(logLevel61);
        retrofit.Profiler profiler66 = builder0.profiler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(converter35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(profiler66);
    }

    @Test
    public void test09130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09130");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        builder0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RequestInterceptor requestInterceptor28 = builder6.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = builder6.requestInterceptor;
        retrofit.RestAdapter.Builder builder31 = builder6.setServer("hi!");
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder40.setLog(log45);
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter47.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter47.logLevel = logLevel53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log45, logLevel53);
        boolean boolean56 = logLevel53.log();
        retrofit.RestAdapter.Builder builder57 = builder31.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder58.setLog(log63);
        retrofit.RestAdapter restAdapter65 = builder58.build();
        java.util.concurrent.Executor executor66 = restAdapter65.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.converter.Converter converter68 = restAdapter65.converter;
        builder57.converter = converter68;
        builder57.ensureSaneDefaults();
        retrofit.converter.Converter converter71 = builder57.converter;
        retrofit.RestAdapter.Builder builder72 = builder0.setConverter(converter71);
        retrofit.RequestInterceptor requestInterceptor73 = builder72.requestInterceptor;
        retrofit.Server server74 = builder72.server;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter75 = builder72.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNotNull(converter68);
        org.junit.Assert.assertNotNull(converter71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNull(server74);
    }

    @Test
    public void test09131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09131");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor26);
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter32 = builder31.build();
        retrofit.ErrorHandler errorHandler33 = restAdapter32.errorHandler;
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(errorHandler33);
    }

    @Test
    public void test09132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09132");
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel11);
        retrofit.ErrorHandler errorHandler13 = null;
        restAdapter12.errorHandler = errorHandler13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder15.setLog(log20);
        retrofit.RestAdapter restAdapter22 = builder15.build();
        retrofit.converter.Converter converter23 = null;
        builder15.converter = converter23;
        retrofit.ErrorHandler errorHandler25 = null;
        builder15.errorHandler = errorHandler25;
        retrofit.RequestInterceptor requestInterceptor27 = builder15.requestInterceptor;
        restAdapter12.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.converter.Converter converter47 = null;
        restAdapter29.converter = converter47;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter57.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter57.requestInterceptor = requestInterceptor59;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter57.log = log69;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean74 = logLevel73.log();
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log69, logLevel73);
        restAdapter29.logLevel = logLevel73;
        restAdapter12.setLogLevel(logLevel73);
        retrofit.client.Header[] headerArray80 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList81 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList81, headerArray80);
        retrofit.mime.TypedOutput typedOutput83 = null;
        retrofit.client.Request request84 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList81, typedOutput83);
        java.lang.String str85 = request84.getUrl();
        java.util.List<retrofit.client.Header> headerList86 = request84.getHeaders();
        java.lang.String str87 = request84.getMethod();
        java.util.List<retrofit.client.Header> headerList88 = request84.getHeaders();
        retrofit.client.Request request89 = restAdapter12.logAndReplaceRequest(request84);
        java.util.List<retrofit.client.Header> headerList90 = request89.getHeaders();
        retrofit.mime.TypedOutput typedOutput91 = null;
        retrofit.client.Request request92 = new retrofit.client.Request("hi!", "hi!", headerList90, typedOutput91);
        retrofit.mime.TypedOutput typedOutput93 = request92.getBody();
        java.util.List<retrofit.client.Header> headerList94 = request92.getHeaders();
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(headerArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(headerList86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(headerList88);
        org.junit.Assert.assertNotNull(request89);
        org.junit.Assert.assertNotNull(headerList90);
        org.junit.Assert.assertNull(typedOutput93);
        org.junit.Assert.assertNotNull(headerList94);
    }

    @Test
    public void test09133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09133");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter7.clientProvider = provider9;
        retrofit.client.Client.Provider provider11 = null;
        restAdapter7.clientProvider = provider11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        builder13.logLevel = logLevel29;
        retrofit.converter.Converter converter32 = builder13.converter;
        retrofit.ErrorHandler errorHandler33 = builder13.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel34 = builder13.logLevel;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        restAdapter7.logLevel = logLevel34;
        java.util.concurrent.Executor executor38 = restAdapter7.httpExecutor;
        retrofit.ErrorHandler errorHandler39 = restAdapter7.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(errorHandler39);
    }

    @Test
    public void test09134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09134");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RestAdapter.LogLevel logLevel7 = builder4.logLevel;
        builder4.ensureSaneDefaults();
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        java.util.concurrent.Executor executor20 = null;
        restAdapter19.httpExecutor = executor20;
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.Builder builder23 = builder4.setLog(log22);
        log22.log("Retrofit-Idle");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test09135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09135");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.setLogLevel(logLevel4);
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.Server server7 = null;
        restAdapter0.server = server7;
        java.lang.Throwable throwable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable9, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor6);
    }

    @Test
    public void test09136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09136");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.Profiler profiler5 = null;
        builder3.profiler = profiler5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder3.errorHandler = errorHandler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter11.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter11.requestInterceptor = requestInterceptor13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        restAdapter11.log = log23;
        retrofit.ErrorHandler errorHandler27 = null;
        restAdapter11.errorHandler = errorHandler27;
        retrofit.RestAdapter.Log log29 = restAdapter11.log;
        retrofit.RestAdapter.Builder builder30 = builder9.setLog(log29);
        retrofit.RestAdapter.Builder builder31 = builder3.setLog(log29);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder31.setLogLevel(logLevel34);
        restAdapter0.logLevel = logLevel34;
        boolean boolean38 = logLevel34.log();
        boolean boolean39 = logLevel34.log();
        java.lang.Class<?> wildcardClass40 = logLevel34.getClass();
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test09137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09137");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.ErrorHandler errorHandler10 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(errorHandler10);
    }

    @Test
    public void test09138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09138");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.Server server8 = restAdapter0.server;
        retrofit.client.Response response10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response12 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response10, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(server8);
    }

    @Test
    public void test09139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09139");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder6.setLog(log11);
        retrofit.RestAdapter restAdapter13 = builder6.build();
        retrofit.converter.Converter converter14 = null;
        builder6.converter = converter14;
        retrofit.ErrorHandler errorHandler16 = null;
        builder6.errorHandler = errorHandler16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter19 = builder18.converter;
        retrofit.RestAdapter.LogLevel logLevel20 = builder18.logLevel;
        builder18.ensureSaneDefaults();
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder30.setLog(log35);
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter37.logLevel = logLevel39;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter37.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter37.logLevel = logLevel43;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log35, logLevel43);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        restAdapter45.log = log51;
        builder18.log = log51;
        java.util.concurrent.Executor executor55 = null;
        builder18.httpExecutor = executor55;
        retrofit.converter.Converter converter57 = null;
        builder18.converter = converter57;
        retrofit.ErrorHandler errorHandler59 = builder18.errorHandler;
        retrofit.RestAdapter.Builder builder60 = builder6.setErrorHandler(errorHandler59);
        builder0.errorHandler = errorHandler59;
        java.util.concurrent.Executor executor62 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter63.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter63.requestInterceptor = requestInterceptor65;
        retrofit.ErrorHandler errorHandler67 = null;
        restAdapter63.errorHandler = errorHandler67;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        retrofit.ErrorHandler errorHandler80 = null;
        restAdapter79.errorHandler = errorHandler80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor83 = null;
        builder82.httpExecutor = executor83;
        retrofit.RestAdapter.Builder builder86 = builder82.setServer("hi!");
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder88 = builder82.setLog(log87);
        retrofit.RestAdapter restAdapter89 = builder82.build();
        retrofit.converter.Converter converter90 = null;
        builder82.converter = converter90;
        retrofit.ErrorHandler errorHandler92 = null;
        builder82.errorHandler = errorHandler92;
        retrofit.RequestInterceptor requestInterceptor94 = builder82.requestInterceptor;
        restAdapter79.requestInterceptor = requestInterceptor94;
        restAdapter63.requestInterceptor = requestInterceptor94;
        builder0.requestInterceptor = requestInterceptor94;
        retrofit.client.Client.Provider provider98 = builder0.clientProvider;
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(requestInterceptor94);
        org.junit.Assert.assertNotNull(provider98);
    }

    @Test
    public void test09140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09140");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Log log25 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder26 = builder5.setLog(log25);
        restAdapter0.log = log25;
        retrofit.Profiler profiler28 = null;
        restAdapter0.profiler = profiler28;
        retrofit.converter.Converter converter30 = null;
        restAdapter0.converter = converter30;
        java.util.concurrent.Executor executor32 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log33 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler35 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(requestInterceptor36);
    }

    @Test
    public void test09141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09141");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler9 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = builder10.converter;
        retrofit.RestAdapter.LogLevel logLevel12 = builder10.logLevel;
        builder10.ensureSaneDefaults();
        retrofit.client.Client.Provider provider14 = null;
        builder10.clientProvider = provider14;
        retrofit.Profiler profiler16 = builder10.profiler;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.callbackExecutor;
        retrofit.RestAdapter.Log log19 = builder17.log;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log36, logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder17.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder47.setLog(log52);
        builder17.log = log52;
        retrofit.RestAdapter.Builder builder55 = builder10.setLog(log52);
        java.util.concurrent.Executor executor56 = builder55.httpExecutor;
        restAdapter0.httpExecutor = executor56;
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor59 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor60 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter61 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.httpExecutor = executor64;
        retrofit.client.Client.Provider provider66 = null;
        builder63.clientProvider = provider66;
        retrofit.RestAdapter.Builder builder69 = builder63.setServer("hi!");
        retrofit.RestAdapter.Builder builder71 = builder63.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel72 = builder71.logLevel;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder73.logLevel = logLevel78;
        retrofit.converter.Converter converter80 = null;
        builder73.converter = converter80;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor83 = restAdapter82.requestInterceptor;
        retrofit.converter.Converter converter84 = restAdapter82.converter;
        java.util.concurrent.Executor executor85 = null;
        restAdapter82.callbackExecutor = executor85;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor88 = null;
        restAdapter87.httpExecutor = executor88;
        retrofit.RequestInterceptor requestInterceptor90 = null;
        restAdapter87.requestInterceptor = requestInterceptor90;
        retrofit.RestAdapter.Log log92 = restAdapter87.log;
        retrofit.RestAdapter.LogLevel logLevel93 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter87.logLevel = logLevel93;
        restAdapter82.logLevel = logLevel93;
        retrofit.RestAdapter.Builder builder96 = builder73.setLogLevel(logLevel93);
        retrofit.RestAdapter.Builder builder97 = builder71.setLogLevel(logLevel93);
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor83);
        org.junit.Assert.assertNull(converter84);
        org.junit.Assert.assertNull(log92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test09142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09142");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter19.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter19.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log17, logLevel25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        restAdapter27.log = log33;
        builder0.log = log33;
        java.util.concurrent.Executor executor37 = null;
        builder0.httpExecutor = executor37;
        retrofit.converter.Converter converter39 = null;
        builder0.converter = converter39;
        retrofit.RestAdapter.Builder builder42 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor43 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(executor43);
    }

    @Test
    public void test09143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09143");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.setLogLevel(logLevel4);
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter9.logLevel;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        builder12.logLevel = logLevel28;
        retrofit.converter.Converter converter31 = builder12.converter;
        retrofit.ErrorHandler errorHandler32 = builder12.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel33 = builder12.logLevel;
        retrofit.converter.Converter converter34 = builder12.converter;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.client.Client.Provider provider38 = null;
        builder35.clientProvider = provider38;
        retrofit.converter.Converter converter40 = null;
        builder35.converter = converter40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        retrofit.Profiler profiler53 = restAdapter52.profiler;
        java.util.concurrent.Executor executor54 = restAdapter52.httpExecutor;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter56 = builder55.converter;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter57.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter57.requestInterceptor = requestInterceptor59;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter57.log = log69;
        retrofit.ErrorHandler errorHandler73 = null;
        restAdapter57.errorHandler = errorHandler73;
        retrofit.RestAdapter.Log log75 = restAdapter57.log;
        retrofit.RestAdapter.Builder builder76 = builder55.setLog(log75);
        retrofit.Profiler profiler77 = builder76.profiler;
        retrofit.client.Client.Provider provider78 = builder76.clientProvider;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter81 = builder80.build();
        retrofit.RestAdapter.Log log82 = builder80.log;
        retrofit.RestAdapter restAdapter83 = builder80.build();
        retrofit.converter.Converter converter84 = null;
        restAdapter83.converter = converter84;
        retrofit.Server server86 = restAdapter83.server;
        restAdapter52.server = server86;
        retrofit.RestAdapter.Builder builder88 = builder35.setServer(server86);
        builder12.server = server86;
        restAdapter9.server = server86;
        restAdapter0.server = server86;
        retrofit.RequestInterceptor requestInterceptor92 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler93 = null;
        restAdapter0.profiler = profiler93;
        java.util.concurrent.Executor executor95 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel96 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel97 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(profiler77);
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(requestInterceptor92);
        org.junit.Assert.assertNull(executor95);
        org.junit.Assert.assertTrue("'" + logLevel96 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel96.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel97 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel97.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test09144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09144");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.Server server8 = null;
        restAdapter0.server = server8;
        retrofit.Profiler profiler10 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter12 = restAdapter0.converter;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(converter12);
    }

    @Test
    public void test09145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09145");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getMethod();
        java.lang.String str8 = request6.getUrl();
        retrofit.mime.TypedOutput typedOutput9 = request6.getBody();
        java.lang.String str10 = request6.getMethod();
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        java.util.List<retrofit.client.Header> headerList12 = request6.getHeaders();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNotNull(headerList12);
    }

    @Test
    public void test09146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09146");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.converter.Converter converter9 = builder0.converter;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.Server server11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder12 = builder0.setServer(server11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(converter10);
    }

    @Test
    public void test09147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09147");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        retrofit.Profiler profiler29 = builder28.profiler;
        retrofit.Profiler profiler30 = builder28.profiler;
        java.util.concurrent.Executor executor31 = builder28.callbackExecutor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder32.setLog(log37);
        retrofit.RestAdapter restAdapter39 = builder32.build();
        java.util.concurrent.Executor executor40 = restAdapter39.httpExecutor;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.client.Client.Provider provider44 = null;
        builder41.clientProvider = provider44;
        retrofit.RestAdapter.Builder builder47 = builder41.setServer("hi!");
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.RestAdapter restAdapter55 = builder48.build();
        java.util.concurrent.Executor executor56 = restAdapter55.httpExecutor;
        builder47.callbackExecutor = executor56;
        retrofit.RestAdapter.Builder builder58 = builder28.setExecutors(executor40, executor56);
        builder58.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.client.Client.Provider provider63 = null;
        builder60.clientProvider = provider63;
        retrofit.RestAdapter.Builder builder66 = builder60.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor67 = builder66.requestInterceptor;
        retrofit.Server server68 = builder66.server;
        retrofit.Server server69 = builder66.server;
        retrofit.RestAdapter.Builder builder70 = builder58.setServer(server69);
        builder0.server = server69;
        java.util.concurrent.Executor executor72 = builder0.httpExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(executor40);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(server68);
        org.junit.Assert.assertNotNull(server69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(executor72);
    }

    @Test
    public void test09148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09148");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter11.logLevel = logLevel13;
        retrofit.Profiler profiler15 = restAdapter11.profiler;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter11.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter11.requestInterceptor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log19 = restAdapter18.log;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.Profiler profiler21 = restAdapter18.profiler;
        retrofit.Profiler profiler22 = null;
        restAdapter18.profiler = profiler22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        restAdapter18.log = log32;
        restAdapter11.log = log32;
        restAdapter8.log = log32;
        retrofit.RestAdapter.Builder builder38 = builder0.setLog(log32);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter40 = null;
        restAdapter39.converter = converter40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.Profiler profiler44 = null;
        builder42.profiler = profiler44;
        retrofit.ErrorHandler errorHandler46 = null;
        builder42.errorHandler = errorHandler46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter50.requestInterceptor = requestInterceptor52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        restAdapter50.log = log62;
        retrofit.ErrorHandler errorHandler66 = null;
        restAdapter50.errorHandler = errorHandler66;
        retrofit.RestAdapter.Log log68 = restAdapter50.log;
        retrofit.RestAdapter.Builder builder69 = builder48.setLog(log68);
        retrofit.RestAdapter.Builder builder70 = builder42.setLog(log68);
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter71.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder70.setLogLevel(logLevel73);
        restAdapter39.logLevel = logLevel73;
        boolean boolean77 = logLevel73.log();
        retrofit.RestAdapter.Builder builder78 = builder0.setLogLevel(logLevel73);
        retrofit.RestAdapter restAdapter79 = builder78.build();
        retrofit.client.Header[] headerArray82 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList83 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList83, headerArray82);
        retrofit.mime.TypedOutput typedOutput85 = null;
        retrofit.client.Request request86 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList83, typedOutput85);
        java.lang.String str87 = request86.getUrl();
        java.util.List<retrofit.client.Header> headerList88 = request86.getHeaders();
        java.lang.String str89 = request86.getMethod();
        retrofit.mime.TypedOutput typedOutput90 = request86.getBody();
        java.util.List<retrofit.client.Header> headerList91 = request86.getHeaders();
        java.lang.String str92 = request86.getUrl();
        java.lang.String str93 = request86.getUrl();
        java.util.List<retrofit.client.Header> headerList94 = request86.getHeaders();
        java.lang.String str95 = request86.getMethod();
        java.lang.String str96 = request86.getMethod();
        java.util.List<retrofit.client.Header> headerList97 = request86.getHeaders();
        retrofit.client.Request request98 = restAdapter79.logAndReplaceRequest(request86);
        retrofit.RestAdapter.RestHandler restHandler99 = restAdapter79.new RestHandler();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(headerArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(headerList88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNull(typedOutput90);
        org.junit.Assert.assertNotNull(headerList91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(headerList94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertNotNull(headerList97);
        org.junit.Assert.assertNotNull(request98);
    }

    @Test
    public void test09149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09149");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = builder10.callbackExecutor;
        retrofit.RestAdapter.Log log12 = builder10.log;
        retrofit.Server server13 = builder10.server;
        retrofit.converter.Converter converter14 = builder10.converter;
        retrofit.RestAdapter.Log log15 = builder10.log;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log17 = restAdapter16.log;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = builder18.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor20 = builder18.requestInterceptor;
        retrofit.ErrorHandler errorHandler21 = null;
        builder18.errorHandler = errorHandler21;
        retrofit.converter.Converter converter23 = null;
        builder18.converter = converter23;
        retrofit.ErrorHandler errorHandler25 = null;
        builder18.errorHandler = errorHandler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.Profiler profiler32 = null;
        builder31.profiler = profiler32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        builder31.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter restAdapter36 = builder31.build();
        retrofit.converter.Converter converter37 = restAdapter36.converter;
        retrofit.RestAdapter.Builder builder38 = builder18.setConverter(converter37);
        restAdapter16.converter = converter37;
        builder10.converter = converter37;
        builder0.converter = converter37;
        retrofit.converter.Converter converter42 = builder0.converter;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(converter37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(converter42);
    }

    @Test
    public void test09150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09150");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log16, logLevel23);
        retrofit.client.Header[] headerArray30 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList31 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList31, headerArray30);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList31, typedOutput33);
        java.lang.String str35 = request34.getUrl();
        java.util.List<retrofit.client.Header> headerList36 = request34.getHeaders();
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", headerList36, typedOutput37);
        java.util.List<retrofit.client.Header> headerList39 = request38.getHeaders();
        java.util.List<retrofit.client.Header> headerList40 = request38.getHeaders();
        java.lang.String str41 = request38.getMethod();
        retrofit.mime.TypedOutput typedOutput42 = request38.getBody();
        retrofit.client.Request request43 = restAdapter25.logAndReplaceRequest(request38);
        java.lang.String str44 = request38.getMethod();
        retrofit.mime.TypedOutput typedOutput45 = request38.getBody();
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(headerList40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(typedOutput42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNull(typedOutput45);
    }

    @Test
    public void test09151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09151");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList14, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", headerList14, typedOutput19);
        java.lang.String str21 = request20.getMethod();
        retrofit.mime.TypedOutput typedOutput22 = request20.getBody();
        java.lang.String str23 = request20.getMethod();
        java.util.List<retrofit.client.Header> headerList24 = request20.getHeaders();
        java.util.List<retrofit.client.Header> headerList25 = request20.getHeaders();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(headerList24);
        org.junit.Assert.assertNotNull(headerList25);
    }

    @Test
    public void test09152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09152");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter5.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter5.logLevel;
        retrofit.converter.Converter converter8 = null;
        restAdapter5.converter = converter8;
        retrofit.ErrorHandler errorHandler10 = restAdapter5.errorHandler;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.client.Client.Provider provider14 = null;
        builder11.clientProvider = provider14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder11.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.Profiler profiler23 = null;
        builder22.profiler = profiler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = builder25.build();
        retrofit.converter.Converter converter33 = null;
        builder25.converter = converter33;
        retrofit.ErrorHandler errorHandler35 = null;
        builder25.errorHandler = errorHandler35;
        retrofit.RequestInterceptor requestInterceptor37 = builder25.requestInterceptor;
        builder22.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter.Builder builder39 = builder11.setRequestInterceptor(requestInterceptor37);
        restAdapter5.requestInterceptor = requestInterceptor37;
        restAdapter0.requestInterceptor = requestInterceptor37;
        java.util.concurrent.Executor executor42 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor43 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(requestInterceptor44);
        org.junit.Assert.assertNull(logLevel45);
    }

    @Test
    public void test09153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09153");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(log5);
    }

    @Test
    public void test09154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09154");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = null;
        builder6.converter = converter7;
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        java.util.concurrent.Executor executor11 = builder6.httpExecutor;
        java.util.concurrent.Executor executor12 = null;
        builder6.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder6.setServer("hi!");
        retrofit.Server server16 = builder15.server;
        builder0.server = server16;
        retrofit.Profiler profiler18 = null;
        builder0.profiler = profiler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.Server server22 = builder20.server;
        retrofit.RestAdapter.LogLevel logLevel23 = builder20.logLevel;
        retrofit.RestAdapter.LogLevel logLevel24 = builder20.logLevel;
        retrofit.Profiler profiler25 = null;
        builder20.profiler = profiler25;
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = builder28.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor30 = builder28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = builder28.requestInterceptor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.Profiler profiler37 = null;
        builder36.profiler = profiler37;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder36.requestInterceptor = requestInterceptor39;
        retrofit.RestAdapter restAdapter41 = builder36.build();
        retrofit.client.Client.Provider provider42 = builder36.clientProvider;
        builder28.clientProvider = provider42;
        retrofit.Profiler profiler44 = null;
        builder28.profiler = profiler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = builder50.build();
        retrofit.client.Header[] headerArray54 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList55 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList55, headerArray54);
        retrofit.mime.TypedOutput typedOutput57 = null;
        retrofit.client.Request request58 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList55, typedOutput57);
        java.lang.String str59 = request58.getMethod();
        java.lang.String str60 = request58.getMethod();
        retrofit.client.Request request61 = restAdapter51.logAndReplaceRequest(request58);
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter51.requestInterceptor;
        retrofit.RestAdapter.Builder builder63 = builder28.setRequestInterceptor(requestInterceptor62);
        retrofit.RestAdapter.Builder builder64 = builder20.setRequestInterceptor(requestInterceptor62);
        builder0.requestInterceptor = requestInterceptor62;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter41);
        org.junit.Assert.assertNotNull(provider42);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(headerArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(request61);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test09155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09155");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.Server server6 = restAdapter0.server;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(server6);
    }

    @Test
    public void test09156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09156");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor31 = builder29.requestInterceptor;
        retrofit.ErrorHandler errorHandler32 = null;
        builder29.errorHandler = errorHandler32;
        retrofit.converter.Converter converter34 = null;
        builder29.converter = converter34;
        retrofit.ErrorHandler errorHandler36 = null;
        builder29.errorHandler = errorHandler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.Profiler profiler43 = null;
        builder42.profiler = profiler43;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        builder42.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter restAdapter47 = builder42.build();
        retrofit.converter.Converter converter48 = restAdapter47.converter;
        retrofit.RestAdapter.Builder builder49 = builder29.setConverter(converter48);
        builder28.converter = converter48;
        retrofit.RestAdapter.Builder builder52 = builder28.setServer("hi!");
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.client.Client.Provider provider56 = null;
        builder53.clientProvider = provider56;
        retrofit.RestAdapter.Builder builder59 = builder53.setServer("hi!");
        retrofit.Profiler profiler60 = builder53.profiler;
        retrofit.RestAdapter restAdapter61 = builder53.build();
        retrofit.converter.Converter converter62 = restAdapter61.converter;
        builder52.converter = converter62;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNotNull(converter48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(converter62);
    }

    @Test
    public void test09157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09157");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter15.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log13, logLevel21);
        java.util.concurrent.Executor executor24 = restAdapter23.httpExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.client.Client.Provider provider28 = null;
        builder25.clientProvider = provider28;
        retrofit.RestAdapter.Builder builder31 = builder25.setServer("hi!");
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder32.setLog(log37);
        retrofit.RestAdapter restAdapter39 = builder32.build();
        java.util.concurrent.Executor executor40 = restAdapter39.httpExecutor;
        builder31.callbackExecutor = executor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.ErrorHandler errorHandler60 = null;
        restAdapter44.errorHandler = errorHandler60;
        retrofit.RestAdapter.Log log62 = restAdapter44.log;
        retrofit.RestAdapter.Builder builder63 = builder42.setLog(log62);
        retrofit.Profiler profiler64 = builder63.profiler;
        retrofit.Profiler profiler65 = builder63.profiler;
        java.util.concurrent.Executor executor66 = builder63.callbackExecutor;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder73 = builder67.setLog(log72);
        retrofit.RestAdapter restAdapter74 = builder67.build();
        java.util.concurrent.Executor executor75 = restAdapter74.httpExecutor;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.client.Client.Provider provider79 = null;
        builder76.clientProvider = provider79;
        retrofit.RestAdapter.Builder builder82 = builder76.setServer("hi!");
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor84 = null;
        builder83.httpExecutor = executor84;
        retrofit.RestAdapter.Builder builder87 = builder83.setServer("hi!");
        retrofit.RestAdapter.Log log88 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder89 = builder83.setLog(log88);
        retrofit.RestAdapter restAdapter90 = builder83.build();
        java.util.concurrent.Executor executor91 = restAdapter90.httpExecutor;
        builder82.callbackExecutor = executor91;
        retrofit.RestAdapter.Builder builder93 = builder63.setExecutors(executor75, executor91);
        builder31.callbackExecutor = executor91;
        restAdapter23.httpExecutor = executor91;
        retrofit.Profiler profiler96 = restAdapter23.profiler;
        retrofit.RestAdapter.LogLevel logLevel97 = restAdapter23.logLevel;
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(executor40);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(profiler64);
        org.junit.Assert.assertNull(profiler65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(executor75);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(restAdapter90);
        org.junit.Assert.assertNotNull(executor91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNull(profiler96);
        org.junit.Assert.assertTrue("'" + logLevel97 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel97.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09158");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.client.Response response11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response13 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response11, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test09159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09159");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel9 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.Profiler profiler15 = null;
        builder14.profiler = profiler15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder14.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter restAdapter19 = builder14.build();
        retrofit.converter.Converter converter20 = restAdapter19.converter;
        retrofit.RestAdapter.Log log21 = restAdapter19.log;
        builder0.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.client.Client.Provider provider26 = null;
        builder23.clientProvider = provider26;
        retrofit.RestAdapter.Builder builder29 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.Profiler profiler34 = restAdapter30.profiler;
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter30.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter30.requestInterceptor;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log38 = restAdapter37.log;
        java.util.concurrent.Executor executor39 = restAdapter37.callbackExecutor;
        retrofit.Profiler profiler40 = restAdapter37.profiler;
        retrofit.Profiler profiler41 = null;
        restAdapter37.profiler = profiler41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        restAdapter37.log = log51;
        restAdapter30.log = log51;
        retrofit.RestAdapter.Builder builder56 = builder23.setLog(log51);
        retrofit.RequestInterceptor requestInterceptor57 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter59 = builder58.converter;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor61 = restAdapter60.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        restAdapter60.requestInterceptor = requestInterceptor62;
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel73);
        restAdapter60.log = log72;
        retrofit.ErrorHandler errorHandler76 = null;
        restAdapter60.errorHandler = errorHandler76;
        retrofit.RestAdapter.Log log78 = restAdapter60.log;
        retrofit.RestAdapter.Builder builder79 = builder58.setLog(log78);
        retrofit.Profiler profiler80 = builder79.profiler;
        retrofit.client.Client.Provider provider81 = builder79.clientProvider;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter84 = builder83.build();
        retrofit.RequestInterceptor requestInterceptor85 = restAdapter84.requestInterceptor;
        retrofit.RestAdapter.Builder builder86 = builder23.setRequestInterceptor(requestInterceptor85);
        retrofit.RestAdapter.Builder builder87 = builder0.setRequestInterceptor(requestInterceptor85);
        retrofit.RestAdapter.Log log88 = builder0.log;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(converter20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(profiler80);
        org.junit.Assert.assertNull(provider81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(log88);
    }

    @Test
    public void test09160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09160");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.converter.Converter converter8 = restAdapter7.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.RestAdapter.Log log11 = builder9.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder33 = builder12.setLog(log32);
        retrofit.Profiler profiler34 = builder33.profiler;
        retrofit.client.Client.Provider provider35 = builder33.clientProvider;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter38 = builder37.build();
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter39.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter39.requestInterceptor = requestInterceptor41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        restAdapter39.log = log51;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter56 = null;
        restAdapter55.converter = converter56;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        restAdapter55.requestInterceptor = requestInterceptor58;
        retrofit.Profiler profiler60 = restAdapter55.profiler;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        restAdapter55.logLevel = logLevel61;
        java.util.concurrent.Executor executor64 = restAdapter55.httpExecutor;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log66 = restAdapter65.log;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = builder67.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor69 = builder67.requestInterceptor;
        retrofit.ErrorHandler errorHandler70 = null;
        builder67.errorHandler = errorHandler70;
        retrofit.converter.Converter converter72 = null;
        builder67.converter = converter72;
        retrofit.ErrorHandler errorHandler74 = null;
        builder67.errorHandler = errorHandler74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.Profiler profiler81 = null;
        builder80.profiler = profiler81;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        builder80.requestInterceptor = requestInterceptor83;
        retrofit.RestAdapter restAdapter85 = builder80.build();
        retrofit.converter.Converter converter86 = restAdapter85.converter;
        retrofit.RestAdapter.Builder builder87 = builder67.setConverter(converter86);
        restAdapter65.converter = converter86;
        restAdapter55.converter = converter86;
        restAdapter39.converter = converter86;
        restAdapter38.converter = converter86;
        retrofit.RestAdapter.Builder builder92 = builder9.setConverter(converter86);
        restAdapter7.converter = converter86;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(converter8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(log66);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(converter86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test09161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09161");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor9 = builder6.requestInterceptor;
        retrofit.RestAdapter.Builder builder11 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter12.logLevel = logLevel14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter12.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.logLevel;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter20 = null;
        restAdapter19.converter = converter20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter19.requestInterceptor = requestInterceptor22;
        retrofit.Profiler profiler24 = restAdapter19.profiler;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        restAdapter19.logLevel = logLevel25;
        java.util.concurrent.Executor executor28 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter19.getLogLevel();
        restAdapter12.logLevel = logLevel29;
        java.util.concurrent.Executor executor31 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.client.Client.Provider provider35 = null;
        builder32.clientProvider = provider35;
        retrofit.RestAdapter.Builder builder38 = builder32.setServer("hi!");
        java.util.concurrent.Executor executor39 = builder32.callbackExecutor;
        java.util.concurrent.Executor executor40 = builder32.callbackExecutor;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.client.Client.Provider provider46 = builder45.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean48 = logLevel47.log();
        builder45.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter50 = builder45.build();
        retrofit.ErrorHandler errorHandler51 = builder45.errorHandler;
        retrofit.RestAdapter.Builder builder52 = builder32.setErrorHandler(errorHandler51);
        restAdapter12.errorHandler = errorHandler51;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter55 = builder54.converter;
        retrofit.RestAdapter.LogLevel logLevel56 = builder54.logLevel;
        builder54.ensureSaneDefaults();
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder66.setLog(log71);
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter73.logLevel = logLevel75;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        restAdapter73.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter73.logLevel = logLevel79;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log71, logLevel79);
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor83 = null;
        builder82.httpExecutor = executor83;
        retrofit.RestAdapter.Builder builder86 = builder82.setServer("hi!");
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder88 = builder82.setLog(log87);
        restAdapter81.log = log87;
        builder54.log = log87;
        retrofit.RestAdapter.LogLevel logLevel91 = builder54.logLevel;
        restAdapter12.setLogLevel(logLevel91);
        builder6.logLevel = logLevel91;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09162");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        retrofit.Profiler profiler29 = builder28.profiler;
        retrofit.Profiler profiler30 = builder28.profiler;
        java.util.concurrent.Executor executor31 = builder28.callbackExecutor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder32.setLog(log37);
        retrofit.RestAdapter restAdapter39 = builder32.build();
        java.util.concurrent.Executor executor40 = restAdapter39.httpExecutor;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.client.Client.Provider provider44 = null;
        builder41.clientProvider = provider44;
        retrofit.RestAdapter.Builder builder47 = builder41.setServer("hi!");
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.RestAdapter restAdapter55 = builder48.build();
        java.util.concurrent.Executor executor56 = restAdapter55.httpExecutor;
        builder47.callbackExecutor = executor56;
        retrofit.RestAdapter.Builder builder58 = builder28.setExecutors(executor40, executor56);
        java.util.concurrent.Executor executor59 = builder28.httpExecutor;
        restAdapter0.httpExecutor = executor59;
        java.lang.Throwable throwable61 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable61, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(executor40);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(executor59);
    }

    @Test
    public void test09163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09163");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.httpExecutor = executor4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("hi!");
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder3.setLog(log8);
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        builder3.logLevel = logLevel19;
        retrofit.converter.Converter converter22 = builder3.converter;
        retrofit.ErrorHandler errorHandler23 = builder3.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel24 = builder3.logLevel;
        retrofit.Server server25 = builder3.server;
        builder0.server = server25;
        retrofit.client.Client.Provider provider27 = builder0.clientProvider;
        retrofit.RestAdapter.Log log28 = builder0.log;
        retrofit.RestAdapter restAdapter29 = builder0.build();
        retrofit.client.Client.Provider provider30 = restAdapter29.clientProvider;
        retrofit.Profiler profiler31 = null;
        restAdapter29.profiler = profiler31;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(provider30);
    }

    @Test
    public void test09164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09164");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        java.lang.String str14 = request8.getUrl();
        java.lang.String str15 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request8.getHeaders();
        java.lang.String str17 = request8.getMethod();
        java.lang.String str18 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList19 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("", "Retrofit-Idle", headerList19, typedOutput20);
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(headerList19);
    }

    @Test
    public void test09165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09165");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor18 = builder16.requestInterceptor;
        retrofit.ErrorHandler errorHandler19 = null;
        builder16.errorHandler = errorHandler19;
        retrofit.converter.Converter converter21 = null;
        builder16.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder16.errorHandler = errorHandler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.Profiler profiler30 = null;
        builder29.profiler = profiler30;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        builder29.requestInterceptor = requestInterceptor32;
        retrofit.RestAdapter restAdapter34 = builder29.build();
        retrofit.converter.Converter converter35 = restAdapter34.converter;
        retrofit.RestAdapter.Builder builder36 = builder16.setConverter(converter35);
        restAdapter14.converter = converter35;
        builder0.converter = converter35;
        retrofit.RestAdapter.Builder builder40 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter41 = builder40.build();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = builder42.callbackExecutor;
        retrofit.RestAdapter.Log log44 = builder42.log;
        retrofit.Server server45 = builder42.server;
        retrofit.converter.Converter converter46 = builder42.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = builder42.logLevel;
        retrofit.RestAdapter.LogLevel logLevel48 = builder42.logLevel;
        restAdapter41.logLevel = logLevel48;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(converter35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(restAdapter41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09166");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.ErrorHandler errorHandler8 = null;
        builder7.errorHandler = errorHandler8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = builder10.callbackExecutor;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        retrofit.RestAdapter.Builder builder23 = builder10.setLogLevel(logLevel21);
        builder23.ensureSaneDefaults();
        retrofit.Server server25 = builder23.server;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter27 = null;
        restAdapter26.converter = converter27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = builder29.converter;
        retrofit.Profiler profiler31 = null;
        builder29.profiler = profiler31;
        retrofit.ErrorHandler errorHandler33 = null;
        builder29.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter37.requestInterceptor = requestInterceptor39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter37.log = log49;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter37.errorHandler = errorHandler53;
        retrofit.RestAdapter.Log log55 = restAdapter37.log;
        retrofit.RestAdapter.Builder builder56 = builder35.setLog(log55);
        retrofit.RestAdapter.Builder builder57 = builder29.setLog(log55);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter58.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = builder57.setLogLevel(logLevel60);
        restAdapter26.logLevel = logLevel60;
        boolean boolean64 = logLevel60.log();
        builder23.logLevel = logLevel60;
        builder7.logLevel = logLevel60;
        retrofit.RequestInterceptor requestInterceptor67 = builder7.requestInterceptor;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(requestInterceptor67);
    }

    @Test
    public void test09167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09167");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RestAdapter.LogLevel logLevel7 = builder4.logLevel;
        builder4.ensureSaneDefaults();
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        java.util.concurrent.Executor executor20 = null;
        restAdapter19.httpExecutor = executor20;
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.Builder builder23 = builder4.setLog(log22);
        builder23.ensureSaneDefaults();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.Profiler profiler28 = null;
        builder26.profiler = profiler28;
        retrofit.RestAdapter.Builder builder31 = builder26.setServer("Retrofit-Idle");
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter40.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter40.requestInterceptor = requestInterceptor42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        restAdapter40.log = log52;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean57 = logLevel56.log();
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log52, logLevel56);
        builder31.log = log52;
        log52.log("");
        retrofit.RestAdapter.Builder builder62 = builder23.setLog(log52);
        retrofit.RestAdapter.Log log63 = null;
        builder23.log = log63;
        builder23.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test09168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09168");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter26 = builder25.build();
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = null;
        restAdapter27.httpExecutor = executor28;
        retrofit.client.Client.Provider provider30 = restAdapter27.clientProvider;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter27.requestInterceptor = requestInterceptor31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        builder33.logLevel = logLevel49;
        retrofit.converter.Converter converter52 = builder33.converter;
        retrofit.ErrorHandler errorHandler53 = builder33.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel54 = builder33.logLevel;
        retrofit.Server server55 = builder33.server;
        restAdapter27.server = server55;
        retrofit.Profiler profiler57 = null;
        restAdapter27.profiler = profiler57;
        retrofit.Profiler profiler59 = null;
        restAdapter27.profiler = profiler59;
        retrofit.Server server61 = restAdapter27.server;
        restAdapter26.server = server61;
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter26.logLevel;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09169");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = null;
        restAdapter8.httpExecutor = executor9;
        retrofit.Profiler profiler11 = null;
        restAdapter8.profiler = profiler11;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter8.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        retrofit.RequestInterceptor requestInterceptor37 = builder15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor38 = builder15.requestInterceptor;
        retrofit.RestAdapter.Builder builder40 = builder15.setServer("hi!");
        retrofit.Server server41 = builder15.server;
        restAdapter8.server = server41;
        builder0.server = server41;
        retrofit.RestAdapter restAdapter44 = builder0.build();
        retrofit.RestAdapter.Log log45 = builder0.log;
        retrofit.RestAdapter.Builder builder47 = builder0.setServer("hi!");
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test09170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09170");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.Profiler profiler11 = restAdapter10.profiler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.client.Client.Provider provider15 = null;
        builder12.clientProvider = provider15;
        retrofit.client.Client.Provider provider17 = builder12.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder12.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter23 = builder22.converter;
        retrofit.RestAdapter.LogLevel logLevel24 = builder22.logLevel;
        builder22.ensureSaneDefaults();
        retrofit.client.Client.Provider provider26 = null;
        builder22.clientProvider = provider26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter43.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter43.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log41, logLevel49);
        builder22.logLevel = logLevel49;
        retrofit.RestAdapter.LogLevel logLevel53 = builder22.logLevel;
        java.util.concurrent.Executor executor54 = builder22.httpExecutor;
        builder12.callbackExecutor = executor54;
        restAdapter10.callbackExecutor = executor54;
        retrofit.Server server57 = restAdapter10.server;
        retrofit.converter.Converter converter58 = restAdapter10.converter;
        retrofit.client.Header[] headerArray65 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList66 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList66, headerArray65);
        retrofit.mime.TypedOutput typedOutput68 = null;
        retrofit.client.Request request69 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList66, typedOutput68);
        java.lang.String str70 = request69.getUrl();
        java.util.List<retrofit.client.Header> headerList71 = request69.getHeaders();
        java.lang.String str72 = request69.getMethod();
        retrofit.mime.TypedOutput typedOutput73 = request69.getBody();
        java.lang.String str74 = request69.getUrl();
        java.util.List<retrofit.client.Header> headerList75 = request69.getHeaders();
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList75, typedOutput76);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("hi!", "hi!", headerList75, typedOutput78);
        retrofit.client.Request request80 = restAdapter10.logAndReplaceRequest(request79);
        java.util.List<retrofit.client.Header> headerList81 = request80.getHeaders();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNotNull(headerArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(headerList71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNull(typedOutput73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(headerList75);
        org.junit.Assert.assertNotNull(request80);
        org.junit.Assert.assertNotNull(headerList81);
    }

    @Test
    public void test09171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09171");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.converter.Converter converter9 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor10 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter.LogLevel logLevel13 = builder11.logLevel;
        builder11.ensureSaneDefaults();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter30.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter30.logLevel = logLevel36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log28, logLevel36);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        restAdapter38.log = log44;
        builder11.log = log44;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = builder48.callbackExecutor;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        retrofit.RestAdapter.Builder builder61 = builder48.setLogLevel(logLevel59);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log63 = restAdapter62.log;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = builder64.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor66 = builder64.requestInterceptor;
        retrofit.ErrorHandler errorHandler67 = null;
        builder64.errorHandler = errorHandler67;
        retrofit.converter.Converter converter69 = null;
        builder64.converter = converter69;
        retrofit.ErrorHandler errorHandler71 = null;
        builder64.errorHandler = errorHandler71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.Profiler profiler78 = null;
        builder77.profiler = profiler78;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        builder77.requestInterceptor = requestInterceptor80;
        retrofit.RestAdapter restAdapter82 = builder77.build();
        retrofit.converter.Converter converter83 = restAdapter82.converter;
        retrofit.RestAdapter.Builder builder84 = builder64.setConverter(converter83);
        restAdapter62.converter = converter83;
        builder48.converter = converter83;
        retrofit.RestAdapter.Builder builder87 = builder11.setConverter(converter83);
        java.util.concurrent.Executor executor88 = builder87.callbackExecutor;
        java.util.concurrent.Executor executor89 = builder87.httpExecutor;
        retrofit.ErrorHandler errorHandler90 = builder87.errorHandler;
        builder0.errorHandler = errorHandler90;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(converter83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNotNull(errorHandler90);
    }

    @Test
    public void test09172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09172");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        builder13.logLevel = logLevel29;
        retrofit.converter.Converter converter32 = builder13.converter;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        builder13.requestInterceptor = requestInterceptor33;
        retrofit.converter.Converter converter35 = builder13.converter;
        retrofit.RestAdapter.Log log36 = builder13.log;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder37.setLog(log42);
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter44.logLevel = logLevel46;
        retrofit.Profiler profiler48 = restAdapter44.profiler;
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter44.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor50 = null;
        restAdapter44.requestInterceptor = requestInterceptor50;
        retrofit.Profiler profiler52 = null;
        restAdapter44.profiler = profiler52;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter54.requestInterceptor;
        retrofit.converter.Converter converter56 = restAdapter54.converter;
        java.util.concurrent.Executor executor57 = null;
        restAdapter54.callbackExecutor = executor57;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter54.logLevel = logLevel59;
        restAdapter44.setLogLevel(logLevel59);
        builder37.logLevel = logLevel59;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.httpExecutor = executor64;
        retrofit.RestAdapter.Builder builder67 = builder63.setServer("hi!");
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder69 = builder63.setLog(log68);
        log68.log("");
        builder37.log = log68;
        retrofit.RestAdapter.Builder builder73 = builder13.setLog(log68);
        log68.log("hi!");
        builder6.log = log68;
        retrofit.client.Client.Provider provider77 = builder6.clientProvider;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(provider77);
    }

    @Test
    public void test09173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09173");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log16 = restAdapter15.log;
        java.util.concurrent.Executor executor17 = restAdapter15.callbackExecutor;
        retrofit.Profiler profiler18 = restAdapter15.profiler;
        retrofit.Profiler profiler19 = null;
        restAdapter15.profiler = profiler19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter15.log = log29;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        builder33.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log29, logLevel49);
        retrofit.converter.Converter converter53 = restAdapter52.converter;
        retrofit.converter.Converter converter54 = restAdapter52.converter;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter57 = null;
        builder56.converter = converter57;
        retrofit.client.Client.Provider provider59 = null;
        builder56.clientProvider = provider59;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        builder56.requestInterceptor = requestInterceptor61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.httpExecutor = executor64;
        retrofit.RestAdapter.Builder builder67 = builder63.setServer("hi!");
        retrofit.Profiler profiler68 = null;
        builder67.profiler = profiler68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.RestAdapter.Builder builder74 = builder70.setServer("hi!");
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder76 = builder70.setLog(log75);
        retrofit.RestAdapter restAdapter77 = builder70.build();
        retrofit.converter.Converter converter78 = null;
        builder70.converter = converter78;
        retrofit.ErrorHandler errorHandler80 = null;
        builder70.errorHandler = errorHandler80;
        retrofit.RequestInterceptor requestInterceptor82 = builder70.requestInterceptor;
        builder67.requestInterceptor = requestInterceptor82;
        retrofit.RestAdapter.Builder builder84 = builder56.setRequestInterceptor(requestInterceptor82);
        restAdapter52.requestInterceptor = requestInterceptor82;
        restAdapter0.requestInterceptor = requestInterceptor82;
        retrofit.Profiler profiler87 = null;
        restAdapter0.profiler = profiler87;
        retrofit.RestAdapter.Log log89 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler90 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler91 = restAdapter0.profiler;
        java.lang.Throwable throwable92 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable92, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(log89);
        org.junit.Assert.assertNull(profiler91);
    }

    @Test
    public void test09174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09174");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Log log25 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder26 = builder5.setLog(log25);
        restAdapter0.log = log25;
        retrofit.client.Client.Provider provider28 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter29 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler31 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(logLevel32);
    }

    @Test
    public void test09175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09175");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.ErrorHandler errorHandler31 = null;
        builder29.errorHandler = errorHandler31;
        retrofit.Profiler profiler33 = null;
        builder29.profiler = profiler33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log36 = restAdapter35.log;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.Profiler profiler44 = null;
        builder43.profiler = profiler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        retrofit.converter.Converter converter54 = null;
        builder46.converter = converter54;
        retrofit.ErrorHandler errorHandler56 = null;
        builder46.errorHandler = errorHandler56;
        retrofit.RequestInterceptor requestInterceptor58 = builder46.requestInterceptor;
        builder43.requestInterceptor = requestInterceptor58;
        restAdapter35.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.Builder builder61 = builder29.setRequestInterceptor(requestInterceptor58);
        retrofit.converter.Converter converter62 = builder29.converter;
        retrofit.RestAdapter.Builder builder64 = builder29.setServer("hi!");
        retrofit.RestAdapter.Builder builder66 = builder29.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder68 = builder29.setServer("hi!");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(converter62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test09176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09176");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter.LogLevel logLevel13 = builder11.logLevel;
        builder11.ensureSaneDefaults();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter30.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter30.logLevel = logLevel36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log28, logLevel36);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        restAdapter38.log = log44;
        builder11.log = log44;
        java.util.concurrent.Executor executor48 = null;
        builder11.httpExecutor = executor48;
        retrofit.converter.Converter converter50 = null;
        builder11.converter = converter50;
        retrofit.ErrorHandler errorHandler52 = builder11.errorHandler;
        retrofit.RestAdapter.Builder builder53 = builder6.setErrorHandler(errorHandler52);
        retrofit.ErrorHandler errorHandler54 = builder6.errorHandler;
        retrofit.client.Client.Provider provider55 = null;
        builder6.clientProvider = provider55;
        retrofit.RestAdapter restAdapter57 = builder6.build();
        retrofit.converter.Converter converter58 = restAdapter57.converter;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.RestAdapter restAdapter64 = builder63.build();
        retrofit.client.Header[] headerArray67 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList68 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList68, headerArray67);
        retrofit.mime.TypedOutput typedOutput70 = null;
        retrofit.client.Request request71 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList68, typedOutput70);
        java.lang.String str72 = request71.getMethod();
        java.lang.String str73 = request71.getMethod();
        retrofit.client.Request request74 = restAdapter64.logAndReplaceRequest(request71);
        retrofit.converter.Converter converter75 = restAdapter64.converter;
        java.util.concurrent.Executor executor76 = restAdapter64.httpExecutor;
        retrofit.RestAdapter.Log log77 = restAdapter64.log;
        restAdapter57.log = log77;
        java.lang.Throwable throwable79 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter57.logException(throwable79, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNotNull(converter58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(headerArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(request74);
        org.junit.Assert.assertNotNull(converter75);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(log77);
    }

    @Test
    public void test09177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09177");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor7 = builder6.httpExecutor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.client.Client.Provider provider11 = null;
        builder8.clientProvider = provider11;
        retrofit.client.Client.Provider provider13 = builder8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel14);
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder15.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter19 = builder18.converter;
        retrofit.RestAdapter.LogLevel logLevel20 = builder18.logLevel;
        builder18.ensureSaneDefaults();
        retrofit.client.Client.Provider provider22 = null;
        builder18.clientProvider = provider22;
        retrofit.Profiler profiler24 = builder18.profiler;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.callbackExecutor;
        retrofit.RestAdapter.Log log27 = builder25.log;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log44, logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder25.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = builder55.setLog(log60);
        builder25.log = log60;
        retrofit.RestAdapter.Builder builder63 = builder18.setLog(log60);
        java.util.concurrent.Executor executor64 = builder63.httpExecutor;
        builder15.callbackExecutor = executor64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.Profiler profiler71 = null;
        builder70.profiler = profiler71;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        builder70.requestInterceptor = requestInterceptor73;
        retrofit.RestAdapter restAdapter75 = builder70.build();
        retrofit.converter.Converter converter76 = null;
        builder70.converter = converter76;
        retrofit.client.Client.Provider provider78 = builder70.clientProvider;
        builder15.clientProvider = provider78;
        retrofit.RestAdapter.Builder builder80 = builder6.setClient(provider78);
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel82 = builder6.logLevel;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(executor64);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(provider78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09178");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.Server server22 = builder0.server;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter25.requestInterceptor = requestInterceptor27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        restAdapter25.log = log37;
        retrofit.ErrorHandler errorHandler41 = null;
        restAdapter25.errorHandler = errorHandler41;
        retrofit.RestAdapter.Log log43 = restAdapter25.log;
        retrofit.RestAdapter.Builder builder44 = builder23.setLog(log43);
        retrofit.RequestInterceptor requestInterceptor45 = builder23.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = builder23.requestInterceptor;
        retrofit.RestAdapter.Log log47 = builder23.log;
        builder0.log = log47;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = builder50.setLog(log55);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter57.logLevel = logLevel59;
        retrofit.Profiler profiler61 = restAdapter57.profiler;
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter57.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor63 = null;
        restAdapter57.requestInterceptor = requestInterceptor63;
        retrofit.Profiler profiler65 = null;
        restAdapter57.profiler = profiler65;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor68 = restAdapter67.requestInterceptor;
        retrofit.converter.Converter converter69 = restAdapter67.converter;
        java.util.concurrent.Executor executor70 = null;
        restAdapter67.callbackExecutor = executor70;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter67.logLevel = logLevel72;
        restAdapter57.setLogLevel(logLevel72);
        builder50.logLevel = logLevel72;
        builder0.logLevel = logLevel72;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler61);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNull(converter69);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test09179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09179");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.Server server9 = builder0.server;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.Profiler profiler15 = null;
        builder14.profiler = profiler15;
        retrofit.RestAdapter.LogLevel logLevel17 = builder14.logLevel;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        restAdapter18.log = log30;
        retrofit.ErrorHandler errorHandler34 = null;
        restAdapter18.errorHandler = errorHandler34;
        retrofit.converter.Converter converter36 = null;
        restAdapter18.converter = converter36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor47 = restAdapter46.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        restAdapter46.requestInterceptor = requestInterceptor48;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        restAdapter46.log = log58;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean63 = logLevel62.log();
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log58, logLevel62);
        restAdapter18.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder66 = builder14.setLogLevel(logLevel62);
        retrofit.Server server67 = builder66.server;
        builder0.server = server67;
        retrofit.client.Client.Provider provider69 = builder0.clientProvider;
        retrofit.Profiler profiler70 = null;
        builder0.profiler = profiler70;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(server67);
        org.junit.Assert.assertNull(provider69);
    }

    @Test
    public void test09180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09180");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getMethod();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        java.lang.String str15 = request12.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("Retrofit-Idle", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "Retrofit-Idle", headerList16, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", headerList16, typedOutput21);
        java.lang.String str23 = request22.getUrl();
        java.util.List<retrofit.client.Header> headerList24 = request22.getHeaders();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(headerList24);
    }

    @Test
    public void test09181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09181");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.httpExecutor = executor9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor12 = null;
        restAdapter0.callbackExecutor = executor12;
        retrofit.RestAdapter.Log log14 = restAdapter0.log;
        retrofit.Profiler profiler15 = restAdapter0.profiler;
        retrofit.Server server16 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log19 = null;
        restAdapter0.log = log19;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(logLevel17);
    }

    @Test
    public void test09182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09182");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.lang.String str19 = request18.getUrl();
        java.util.List<retrofit.client.Header> headerList20 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", headerList20, typedOutput21);
        java.lang.String str23 = request22.getMethod();
        retrofit.mime.TypedOutput typedOutput24 = request22.getBody();
        java.util.List<retrofit.client.Header> headerList25 = request22.getHeaders();
        retrofit.client.Request request26 = restAdapter7.logAndReplaceRequest(request22);
        retrofit.Profiler profiler27 = restAdapter7.profiler;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log29 = restAdapter28.log;
        retrofit.ErrorHandler errorHandler30 = restAdapter28.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.Profiler profiler37 = null;
        builder36.profiler = profiler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = builder39.build();
        retrofit.converter.Converter converter47 = null;
        builder39.converter = converter47;
        retrofit.ErrorHandler errorHandler49 = null;
        builder39.errorHandler = errorHandler49;
        retrofit.RequestInterceptor requestInterceptor51 = builder39.requestInterceptor;
        builder36.requestInterceptor = requestInterceptor51;
        restAdapter28.requestInterceptor = requestInterceptor51;
        restAdapter7.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.client.Client.Provider provider60 = builder59.clientProvider;
        builder59.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log63 = restAdapter62.log;
        retrofit.ErrorHandler errorHandler64 = restAdapter62.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler65 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.Profiler profiler71 = null;
        builder70.profiler = profiler71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder73.setLog(log78);
        retrofit.RestAdapter restAdapter80 = builder73.build();
        retrofit.converter.Converter converter81 = null;
        builder73.converter = converter81;
        retrofit.ErrorHandler errorHandler83 = null;
        builder73.errorHandler = errorHandler83;
        retrofit.RequestInterceptor requestInterceptor85 = builder73.requestInterceptor;
        builder70.requestInterceptor = requestInterceptor85;
        restAdapter62.requestInterceptor = requestInterceptor85;
        retrofit.RestAdapter.Builder builder88 = builder59.setRequestInterceptor(requestInterceptor85);
        retrofit.ErrorHandler errorHandler89 = builder59.errorHandler;
        restAdapter7.errorHandler = errorHandler89;
        retrofit.Profiler profiler91 = restAdapter7.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(typedOutput24);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNull(profiler91);
    }

    @Test
    public void test09183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09183");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.client.Client.Provider provider9 = restAdapter7.clientProvider;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.Profiler profiler13 = null;
        restAdapter10.profiler = profiler13;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        retrofit.Profiler profiler17 = null;
        restAdapter10.profiler = profiler17;
        java.util.concurrent.Executor executor19 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter10.new RestHandler();
        retrofit.Profiler profiler21 = null;
        restAdapter10.profiler = profiler21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = null;
        builder23.converter = converter24;
        retrofit.client.Client.Provider provider26 = null;
        builder23.clientProvider = provider26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder23.requestInterceptor = requestInterceptor28;
        retrofit.Profiler profiler30 = builder23.profiler;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter31.requestInterceptor;
        java.util.concurrent.Executor executor33 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        java.util.concurrent.Executor executor35 = restAdapter31.httpExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log37 = restAdapter36.log;
        retrofit.ErrorHandler errorHandler38 = restAdapter36.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.Profiler profiler45 = null;
        builder44.profiler = profiler45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder47.setLog(log52);
        retrofit.RestAdapter restAdapter54 = builder47.build();
        retrofit.converter.Converter converter55 = null;
        builder47.converter = converter55;
        retrofit.ErrorHandler errorHandler57 = null;
        builder47.errorHandler = errorHandler57;
        retrofit.RequestInterceptor requestInterceptor59 = builder47.requestInterceptor;
        builder44.requestInterceptor = requestInterceptor59;
        restAdapter36.requestInterceptor = requestInterceptor59;
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter36.requestInterceptor;
        restAdapter31.requestInterceptor = requestInterceptor62;
        builder23.requestInterceptor = requestInterceptor62;
        java.util.concurrent.Executor executor65 = builder23.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor66 = builder23.requestInterceptor;
        restAdapter10.requestInterceptor = requestInterceptor66;
        restAdapter7.requestInterceptor = requestInterceptor66;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNotNull(provider9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(requestInterceptor66);
    }

    @Test
    public void test09184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09184");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        java.util.concurrent.Executor executor19 = restAdapter18.httpExecutor;
        builder10.callbackExecutor = executor19;
        builder0.callbackExecutor = executor19;
        retrofit.RestAdapter.Log log22 = builder0.log;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider24 = builder0.clientProvider;
        retrofit.client.Client.Provider provider25 = builder0.clientProvider;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder27 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNull(provider25);
    }

    @Test
    public void test09185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09185");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.Profiler profiler11 = restAdapter8.profiler;
        retrofit.Profiler profiler12 = null;
        restAdapter8.profiler = profiler12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        builder26.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log22, logLevel42);
        retrofit.converter.Converter converter46 = restAdapter45.converter;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log56 = restAdapter55.log;
        java.util.concurrent.Executor executor57 = restAdapter55.callbackExecutor;
        retrofit.Profiler profiler58 = restAdapter55.profiler;
        retrofit.Profiler profiler59 = null;
        restAdapter55.profiler = profiler59;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter55.log = log69;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder73.setLog(log78);
        retrofit.Server server80 = null;
        retrofit.client.Client.Provider provider81 = null;
        java.util.concurrent.Executor executor82 = null;
        java.util.concurrent.Executor executor83 = null;
        retrofit.RequestInterceptor requestInterceptor84 = null;
        retrofit.converter.Converter converter85 = null;
        retrofit.Profiler profiler86 = null;
        retrofit.ErrorHandler errorHandler87 = null;
        retrofit.RestAdapter.Log log88 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server80, provider81, executor82, executor83, requestInterceptor84, converter85, profiler86, errorHandler87, log88, logLevel89);
        builder73.logLevel = logLevel89;
        retrofit.RestAdapter restAdapter92 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log69, logLevel89);
        restAdapter45.setLogLevel(logLevel89);
        retrofit.Profiler profiler94 = restAdapter45.profiler;
        retrofit.RestAdapter.LogLevel logLevel95 = restAdapter45.getLogLevel();
        retrofit.client.Client.Provider provider96 = restAdapter45.clientProvider;
        retrofit.converter.Converter converter97 = restAdapter45.converter;
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(profiler58);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler94);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider96);
        org.junit.Assert.assertNull(converter97);
    }

    @Test
    public void test09186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09186");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.Profiler profiler11 = restAdapter8.profiler;
        retrofit.Profiler profiler12 = null;
        restAdapter8.profiler = profiler12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        builder26.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log22, logLevel42);
        retrofit.converter.Converter converter46 = restAdapter45.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter45.logLevel;
        retrofit.client.Header[] headerArray54 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList55 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList55, headerArray54);
        retrofit.mime.TypedOutput typedOutput57 = null;
        retrofit.client.Request request58 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList55, typedOutput57);
        java.lang.String str59 = request58.getUrl();
        java.util.List<retrofit.client.Header> headerList60 = request58.getHeaders();
        java.lang.String str61 = request58.getMethod();
        java.util.List<retrofit.client.Header> headerList62 = request58.getHeaders();
        retrofit.mime.TypedOutput typedOutput63 = null;
        retrofit.client.Request request64 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList62, typedOutput63);
        retrofit.mime.TypedOutput typedOutput65 = null;
        retrofit.client.Request request66 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList62, typedOutput65);
        retrofit.mime.TypedOutput typedOutput67 = request66.getBody();
        retrofit.client.Request request68 = restAdapter45.logAndReplaceRequest(request66);
        retrofit.client.Header[] headerArray77 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList78 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList78, headerArray77);
        retrofit.mime.TypedOutput typedOutput80 = null;
        retrofit.client.Request request81 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList78, typedOutput80);
        java.lang.String str82 = request81.getUrl();
        java.util.List<retrofit.client.Header> headerList83 = request81.getHeaders();
        java.lang.String str84 = request81.getMethod();
        java.util.List<retrofit.client.Header> headerList85 = request81.getHeaders();
        retrofit.mime.TypedOutput typedOutput86 = null;
        retrofit.client.Request request87 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList85, typedOutput86);
        retrofit.mime.TypedOutput typedOutput88 = null;
        retrofit.client.Request request89 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList85, typedOutput88);
        retrofit.mime.TypedOutput typedOutput90 = null;
        retrofit.client.Request request91 = new retrofit.client.Request("", "Retrofit-Idle", headerList85, typedOutput90);
        retrofit.client.Request request92 = restAdapter45.logAndReplaceRequest(request91);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(headerList60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(headerList62);
        org.junit.Assert.assertNull(typedOutput67);
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertNotNull(headerArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(headerList83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(headerList85);
        org.junit.Assert.assertNotNull(request92);
    }

    @Test
    public void test09187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09187");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.Profiler profiler17 = restAdapter14.profiler;
        retrofit.Profiler profiler18 = null;
        restAdapter14.profiler = profiler18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter14.log = log28;
        restAdapter7.log = log28;
        retrofit.RestAdapter.Builder builder33 = builder0.setLog(log28);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.Profiler profiler39 = null;
        builder38.profiler = profiler39;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        builder38.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter restAdapter43 = builder38.build();
        retrofit.converter.Converter converter44 = restAdapter43.converter;
        java.util.concurrent.Executor executor45 = restAdapter43.callbackExecutor;
        builder0.callbackExecutor = executor45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter47.requestInterceptor;
        java.util.concurrent.Executor executor49 = restAdapter47.callbackExecutor;
        retrofit.converter.Converter converter50 = null;
        restAdapter47.converter = converter50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = builder52.converter;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter54.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter54.requestInterceptor = requestInterceptor56;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel67);
        restAdapter54.log = log66;
        retrofit.ErrorHandler errorHandler70 = null;
        restAdapter54.errorHandler = errorHandler70;
        retrofit.RestAdapter.Log log72 = restAdapter54.log;
        retrofit.RestAdapter.Builder builder73 = builder52.setLog(log72);
        restAdapter47.log = log72;
        retrofit.RestAdapter.Log log75 = restAdapter47.log;
        retrofit.RestAdapter.Builder builder76 = builder0.setLog(log75);
        retrofit.Server server77 = builder76.server;
        java.util.concurrent.Executor executor78 = null;
        builder76.httpExecutor = executor78;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(converter44);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(server77);
    }

    @Test
    public void test09188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09188");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        builder9.logLevel = logLevel25;
        retrofit.converter.Converter converter28 = builder9.converter;
        retrofit.ErrorHandler errorHandler29 = builder9.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel30 = builder9.logLevel;
        retrofit.Server server31 = builder9.server;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        restAdapter34.log = log46;
        retrofit.ErrorHandler errorHandler50 = null;
        restAdapter34.errorHandler = errorHandler50;
        retrofit.RestAdapter.Log log52 = restAdapter34.log;
        retrofit.RestAdapter.Builder builder53 = builder32.setLog(log52);
        retrofit.RequestInterceptor requestInterceptor54 = builder32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor55 = builder32.requestInterceptor;
        retrofit.RestAdapter.Log log56 = builder32.log;
        builder9.log = log56;
        retrofit.RestAdapter.LogLevel logLevel58 = builder9.logLevel;
        restAdapter0.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = builder60.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor62 = builder60.requestInterceptor;
        retrofit.ErrorHandler errorHandler63 = null;
        builder60.errorHandler = errorHandler63;
        retrofit.Profiler profiler65 = builder60.profiler;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.client.Client.Provider provider71 = builder70.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean73 = logLevel72.log();
        builder70.logLevel = logLevel72;
        builder60.logLevel = logLevel72;
        restAdapter0.logLevel = logLevel72;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNull(profiler65);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test09189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09189");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        builder7.ensureSaneDefaults();
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter26.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter26.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter26.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log24, logLevel32);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        restAdapter34.log = log40;
        builder7.log = log40;
        java.util.concurrent.Executor executor44 = null;
        builder7.httpExecutor = executor44;
        retrofit.converter.Converter converter46 = null;
        builder7.converter = converter46;
        retrofit.RestAdapter.Builder builder49 = builder7.setServer("hi!");
        retrofit.converter.Converter converter50 = builder49.converter;
        retrofit.RestAdapter restAdapter51 = builder49.build();
        retrofit.RestAdapter.LogLevel logLevel52 = builder49.logLevel;
        restAdapter0.logLevel = logLevel52;
        retrofit.ErrorHandler errorHandler54 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler54);
    }

    @Test
    public void test09190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09190");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.client.Client.Provider provider10 = null;
        builder7.clientProvider = provider10;
        retrofit.client.Client.Provider provider12 = builder7.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        builder19.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.converter.Converter converter25 = restAdapter24.converter;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        log26.log("");
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder30 = builder7.setLog(log26);
        retrofit.RestAdapter.Builder builder31 = builder5.setLog(log26);
        retrofit.Server server32 = builder5.server;
        retrofit.RequestInterceptor requestInterceptor33 = builder5.requestInterceptor;
        retrofit.RestAdapter.Builder builder35 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log37 = restAdapter36.log;
        java.util.concurrent.Executor executor38 = restAdapter36.callbackExecutor;
        retrofit.Profiler profiler39 = restAdapter36.profiler;
        retrofit.Profiler profiler40 = null;
        restAdapter36.profiler = profiler40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        restAdapter36.log = log50;
        log50.log("hi!");
        retrofit.RestAdapter.Builder builder56 = builder35.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel57 = builder56.logLevel;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(converter25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09191");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        java.util.concurrent.Executor executor10 = restAdapter0.callbackExecutor;
        retrofit.client.Client.Provider provider11 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.client.Client.Provider provider15 = null;
        builder12.clientProvider = provider15;
        retrofit.client.Client.Provider provider17 = builder12.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter30.requestInterceptor = requestInterceptor32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        restAdapter30.log = log42;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean47 = logLevel46.log();
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log42, logLevel46);
        retrofit.RestAdapter.Builder builder49 = builder20.setLog(log42);
        retrofit.Server server50 = builder49.server;
        retrofit.ErrorHandler errorHandler51 = null;
        builder49.errorHandler = errorHandler51;
        retrofit.Profiler profiler53 = null;
        builder49.profiler = profiler53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = builder55.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor57 = builder55.requestInterceptor;
        java.util.concurrent.Executor executor58 = builder55.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel59 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.Profiler profiler65 = null;
        builder64.profiler = profiler65;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        builder64.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter restAdapter69 = builder64.build();
        retrofit.converter.Converter converter70 = null;
        builder64.converter = converter70;
        retrofit.client.Client.Provider provider72 = builder64.clientProvider;
        retrofit.RestAdapter.Builder builder73 = builder55.setClient(provider72);
        builder49.clientProvider = provider72;
        builder19.clientProvider = provider72;
        restAdapter0.clientProvider = provider72;
        retrofit.Profiler profiler77 = null;
        restAdapter0.profiler = profiler77;
        retrofit.Profiler profiler79 = null;
        restAdapter0.profiler = profiler79;
        retrofit.Profiler profiler81 = null;
        restAdapter0.profiler = profiler81;
        retrofit.Server server83 = restAdapter0.server;
        retrofit.Server server84 = restAdapter0.server;
        retrofit.client.Client.Provider provider85 = restAdapter0.clientProvider;
        retrofit.ErrorHandler errorHandler86 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(provider72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertNull(server84);
        org.junit.Assert.assertNotNull(provider85);
        org.junit.Assert.assertNull(errorHandler86);
    }

    @Test
    public void test09192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09192");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.Profiler profiler28 = builder27.profiler;
        retrofit.RestAdapter.LogLevel logLevel29 = builder27.logLevel;
        restAdapter0.logLevel = logLevel29;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter0.requestInterceptor = requestInterceptor31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.client.Client.Provider provider36 = null;
        builder33.clientProvider = provider36;
        retrofit.client.Client.Provider provider38 = builder33.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel39);
        retrofit.Profiler profiler41 = null;
        builder33.profiler = profiler41;
        builder33.ensureSaneDefaults();
        retrofit.Server server44 = builder33.server;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log46 = restAdapter45.log;
        retrofit.ErrorHandler errorHandler47 = restAdapter45.errorHandler;
        retrofit.converter.Converter converter48 = null;
        restAdapter45.converter = converter48;
        retrofit.RequestInterceptor requestInterceptor50 = restAdapter45.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter45.logLevel;
        retrofit.RestAdapter.Log log53 = restAdapter45.log;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter69.logLevel = logLevel71;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        restAdapter69.requestInterceptor = requestInterceptor73;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter69.logLevel = logLevel75;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log67, logLevel75);
        restAdapter45.logLevel = logLevel75;
        builder33.logLevel = logLevel75;
        restAdapter0.logLevel = logLevel75;
        retrofit.client.Client.Provider provider81 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09193");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.client.Client.Provider provider5 = restAdapter0.clientProvider;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(requestInterceptor7);
    }

    @Test
    public void test09194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09194");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.client.Client.Provider provider10 = restAdapter9.clientProvider;
        java.util.concurrent.Executor executor11 = restAdapter9.httpExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider13 = null;
        restAdapter12.clientProvider = provider13;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = builder16.logLevel;
        restAdapter12.logLevel = logLevel18;
        boolean boolean20 = logLevel18.log();
        restAdapter9.logLevel = logLevel18;
        retrofit.Server server22 = restAdapter9.server;
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter9.requestInterceptor;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.getUrl();
        java.util.List<retrofit.client.Header> headerList34 = request32.getHeaders();
        java.lang.String str35 = request32.getMethod();
        java.util.List<retrofit.client.Header> headerList36 = request32.getHeaders();
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList36, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = request38.getBody();
        java.util.List<retrofit.client.Header> headerList40 = request38.getHeaders();
        java.util.List<retrofit.client.Header> headerList41 = request38.getHeaders();
        retrofit.mime.TypedOutput typedOutput42 = request38.getBody();
        retrofit.client.Request request43 = restAdapter9.logAndReplaceRequest(request38);
        retrofit.RestAdapter.Log log44 = null;
        restAdapter9.log = log44;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(provider10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertNull(typedOutput39);
        org.junit.Assert.assertNotNull(headerList40);
        org.junit.Assert.assertNotNull(headerList41);
        org.junit.Assert.assertNull(typedOutput42);
        org.junit.Assert.assertNotNull(request43);
    }

    @Test
    public void test09195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09195");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.Profiler profiler10 = null;
        restAdapter0.profiler = profiler10;
        retrofit.Profiler profiler12 = null;
        restAdapter0.profiler = profiler12;
        java.util.concurrent.Executor executor14 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler16 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider18 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(provider18);
    }

    @Test
    public void test09196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09196");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor9 = builder8.requestInterceptor;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log19 = restAdapter18.log;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.Profiler profiler21 = restAdapter18.profiler;
        retrofit.Profiler profiler22 = null;
        restAdapter18.profiler = profiler22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        restAdapter18.log = log32;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        builder36.logLevel = logLevel52;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log32, logLevel52);
        retrofit.converter.Converter converter56 = restAdapter55.converter;
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter55.logLevel;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder58.setLog(log63);
        retrofit.RestAdapter restAdapter65 = builder58.build();
        java.util.concurrent.Executor executor66 = restAdapter65.httpExecutor;
        restAdapter55.callbackExecutor = executor66;
        retrofit.Server server68 = restAdapter55.server;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter69.logLevel = logLevel71;
        retrofit.RequestInterceptor requestInterceptor73 = restAdapter69.requestInterceptor;
        java.util.concurrent.Executor executor74 = restAdapter69.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter69.new RestHandler();
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder82 = builder76.setLog(log81);
        restAdapter69.log = log81;
        restAdapter55.log = log81;
        builder8.log = log81;
        retrofit.RestAdapter.LogLevel logLevel86 = builder8.logLevel;
        retrofit.Profiler profiler87 = builder8.profiler;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler87);
    }

    @Test
    public void test09197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09197");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter2.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter2.logLevel = logLevel4;
        retrofit.Profiler profiler6 = restAdapter2.profiler;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter2.new RestHandler();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.RestAdapter.LogLevel logLevel31 = builder29.logLevel;
        restAdapter2.logLevel = logLevel31;
        java.util.concurrent.Executor executor33 = restAdapter2.callbackExecutor;
        retrofit.Server server34 = restAdapter2.server;
        retrofit.RestAdapter.LogLevel logLevel35 = null;
        restAdapter2.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.Profiler profiler39 = null;
        builder37.profiler = profiler39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.client.Client.Provider provider44 = null;
        builder41.clientProvider = provider44;
        retrofit.RestAdapter.Builder builder47 = builder41.setServer("hi!");
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.RestAdapter restAdapter55 = builder48.build();
        java.util.concurrent.Executor executor56 = restAdapter55.httpExecutor;
        builder47.callbackExecutor = executor56;
        builder37.callbackExecutor = executor56;
        restAdapter2.httpExecutor = executor56;
        restAdapter0.callbackExecutor = executor56;
        retrofit.Profiler profiler61 = null;
        restAdapter0.profiler = profiler61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.httpExecutor = executor64;
        retrofit.RestAdapter.Builder builder67 = builder63.setServer("hi!");
        retrofit.client.Client.Provider provider68 = builder67.clientProvider;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder69.setLog(log74);
        retrofit.RestAdapter restAdapter76 = builder69.build();
        java.util.concurrent.Executor executor77 = restAdapter76.httpExecutor;
        retrofit.Profiler profiler78 = null;
        restAdapter76.profiler = profiler78;
        java.util.concurrent.Executor executor80 = restAdapter76.callbackExecutor;
        builder67.httpExecutor = executor80;
        restAdapter0.callbackExecutor = executor80;
        retrofit.Profiler profiler83 = null;
        restAdapter0.profiler = profiler83;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(provider68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(executor80);
    }

    @Test
    public void test09198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09198");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter15.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log13, logLevel21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        restAdapter23.log = log29;
        retrofit.client.Header[] headerArray34 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList35 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList35, headerArray34);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList35, typedOutput37);
        java.lang.String str39 = request38.getUrl();
        java.lang.String str40 = request38.getUrl();
        retrofit.client.Request request41 = restAdapter23.logAndReplaceRequest(request38);
        java.lang.String str42 = request41.getUrl();
        java.lang.String str43 = request41.getMethod();
        retrofit.mime.TypedOutput typedOutput44 = request41.getBody();
        java.lang.String str45 = request41.getMethod();
        java.util.List<retrofit.client.Header> headerList46 = request41.getHeaders();
        java.util.List<retrofit.client.Header> headerList47 = request41.getHeaders();
        java.lang.String str48 = request41.getUrl();
        retrofit.mime.TypedOutput typedOutput49 = request41.getBody();
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(headerArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(typedOutput44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(headerList46);
        org.junit.Assert.assertNotNull(headerList47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(typedOutput49);
    }

    @Test
    public void test09199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09199");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder28.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.Profiler profiler39 = null;
        builder38.profiler = profiler39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = builder41.build();
        retrofit.converter.Converter converter49 = null;
        builder41.converter = converter49;
        retrofit.ErrorHandler errorHandler51 = null;
        builder41.errorHandler = errorHandler51;
        retrofit.RequestInterceptor requestInterceptor53 = builder41.requestInterceptor;
        builder38.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder28.setRequestInterceptor(requestInterceptor53);
        retrofit.Profiler profiler56 = builder55.profiler;
        retrofit.Profiler profiler57 = builder55.profiler;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.RestAdapter restAdapter63 = builder62.build();
        retrofit.RestAdapter.LogLevel logLevel64 = null;
        restAdapter63.logLevel = logLevel64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.Server server68 = restAdapter66.server;
        retrofit.client.Client.Provider provider69 = null;
        restAdapter66.clientProvider = provider69;
        retrofit.RequestInterceptor requestInterceptor71 = restAdapter66.requestInterceptor;
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel81);
        restAdapter66.log = log80;
        restAdapter63.log = log80;
        retrofit.RestAdapter.Builder builder85 = builder55.setLog(log80);
        java.util.concurrent.Executor executor86 = builder55.callbackExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(executor86);
    }

    @Test
    public void test09200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09200");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter0.logLevel = logLevel5;
        retrofit.Server server7 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter.LogLevel logLevel17 = builder15.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder14.setLogLevel(logLevel17);
        java.util.concurrent.Executor executor19 = builder14.callbackExecutor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        retrofit.Profiler profiler25 = null;
        builder24.profiler = profiler25;
        retrofit.RestAdapter.LogLevel logLevel27 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder14.setLogLevel(logLevel27);
        restAdapter0.setLogLevel(logLevel27);
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test09201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09201");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder11.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.converter.Converter converter17 = restAdapter16.converter;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        log18.log("");
        restAdapter16.log = log18;
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter16.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.Server server26 = restAdapter24.server;
        retrofit.client.Client.Provider provider27 = null;
        restAdapter24.clientProvider = provider27;
        retrofit.client.Client.Provider provider29 = null;
        restAdapter24.clientProvider = provider29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter31.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        restAdapter31.requestInterceptor = requestInterceptor33;
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        restAdapter31.log = log43;
        retrofit.ErrorHandler errorHandler47 = null;
        restAdapter31.errorHandler = errorHandler47;
        retrofit.RestAdapter.Log log49 = restAdapter31.log;
        java.util.concurrent.Executor executor50 = restAdapter31.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel51;
        restAdapter24.logLevel = logLevel51;
        restAdapter0.setLogLevel(logLevel51);
        boolean boolean55 = logLevel51.log();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test09202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09202");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder13.logLevel = logLevel18;
        retrofit.converter.Converter converter20 = null;
        builder13.converter = converter20;
        retrofit.client.Client.Provider provider22 = null;
        builder13.clientProvider = provider22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Log log44 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder45 = builder24.setLog(log44);
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder47.setLog(log52);
        retrofit.RestAdapter restAdapter54 = builder47.build();
        java.util.concurrent.Executor executor55 = restAdapter54.httpExecutor;
        builder24.callbackExecutor = executor55;
        builder13.httpExecutor = executor55;
        restAdapter10.callbackExecutor = executor55;
        restAdapter0.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.Profiler profiler65 = null;
        builder64.profiler = profiler65;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        builder64.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter restAdapter69 = builder64.build();
        retrofit.converter.Converter converter70 = restAdapter69.converter;
        java.util.concurrent.Executor executor71 = restAdapter69.callbackExecutor;
        retrofit.client.Client.Provider provider72 = restAdapter69.clientProvider;
        retrofit.RestAdapter.Log log73 = restAdapter69.log;
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter69.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor74;
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(converter70);
        org.junit.Assert.assertNotNull(executor71);
        org.junit.Assert.assertNotNull(provider72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(requestInterceptor74);
    }

    @Test
    public void test09203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09203");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter7.clientProvider = provider9;
        retrofit.client.Client.Provider provider11 = null;
        restAdapter7.clientProvider = provider11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        builder13.logLevel = logLevel29;
        retrofit.converter.Converter converter32 = builder13.converter;
        retrofit.ErrorHandler errorHandler33 = builder13.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel34 = builder13.logLevel;
        boolean boolean35 = logLevel34.log();
        boolean boolean36 = logLevel34.log();
        restAdapter7.logLevel = logLevel34;
        retrofit.Profiler profiler38 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Log log40 = restAdapter7.log;
        java.lang.Class<?> wildcardClass41 = restAdapter7.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test09204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09204");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log6 = builder0.log;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = builder10.callbackExecutor;
        retrofit.RestAdapter.Log log12 = builder10.log;
        retrofit.Server server13 = builder10.server;
        retrofit.converter.Converter converter14 = builder10.converter;
        retrofit.RestAdapter.Log log15 = builder10.log;
        retrofit.Server server16 = builder10.server;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter19.log = log31;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter19.errorHandler = errorHandler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter39.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter39.requestInterceptor = requestInterceptor41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        restAdapter39.log = log51;
        retrofit.ErrorHandler errorHandler55 = null;
        restAdapter39.errorHandler = errorHandler55;
        retrofit.RestAdapter.Log log57 = restAdapter39.log;
        retrofit.RestAdapter.Builder builder58 = builder37.setLog(log57);
        retrofit.RequestInterceptor requestInterceptor59 = builder37.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor60 = builder37.requestInterceptor;
        retrofit.RestAdapter.Builder builder62 = builder37.setServer("hi!");
        retrofit.Server server63 = builder37.server;
        restAdapter19.server = server63;
        builder17.server = server63;
        builder10.server = server63;
        builder0.server = server63;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNotNull(executor9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(server63);
    }

    @Test
    public void test09205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09205");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        java.lang.String str13 = request10.getMethod();
        java.util.List<retrofit.client.Header> headerList14 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList14, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.getHeaders();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList19);
    }

    @Test
    public void test09206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09206");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        builder25.logLevel = logLevel41;
        retrofit.converter.Converter converter44 = builder25.converter;
        retrofit.ErrorHandler errorHandler45 = builder25.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel46 = builder25.logLevel;
        retrofit.Server server47 = builder25.server;
        retrofit.RestAdapter.Builder builder48 = builder21.setServer(server47);
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter69.logLevel = logLevel71;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter69.setLogLevel(logLevel73);
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log66, logLevel73);
        log66.log("");
        retrofit.RestAdapter.Builder builder78 = builder48.setLog(log66);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test09207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09207");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.RestAdapter.Log log18 = restAdapter0.log;
        java.util.concurrent.Executor executor19 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel20;
        retrofit.Server server22 = restAdapter0.server;
        retrofit.Profiler profiler23 = null;
        restAdapter0.profiler = profiler23;
        retrofit.Profiler profiler25 = restAdapter0.profiler;
        retrofit.client.Client.Provider provider26 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(provider26);
    }

    @Test
    public void test09208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09208");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.client.Client.Provider provider13 = builder12.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        builder12.logLevel = logLevel14;
        retrofit.RestAdapter restAdapter17 = builder12.build();
        retrofit.converter.Converter converter18 = restAdapter17.converter;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter19.clientProvider = provider20;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter.LogLevel logLevel25 = builder23.logLevel;
        restAdapter19.logLevel = logLevel25;
        boolean boolean27 = logLevel25.log();
        restAdapter17.logLevel = logLevel25;
        restAdapter0.logLevel = logLevel25;
        java.util.concurrent.Executor executor30 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor31 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNotNull(converter18);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09209");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        java.util.concurrent.Executor executor10 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter11 = builder0.build();
        java.util.concurrent.Executor executor12 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log14 = restAdapter13.log;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.RestAdapter.LogLevel logLevel17 = null;
        restAdapter13.logLevel = logLevel17;
        retrofit.ErrorHandler errorHandler19 = restAdapter13.errorHandler;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        retrofit.Profiler profiler25 = null;
        builder24.profiler = profiler25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        builder24.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter restAdapter29 = builder24.build();
        retrofit.converter.Converter converter30 = restAdapter29.converter;
        restAdapter13.converter = converter30;
        retrofit.client.Client.Provider provider32 = restAdapter13.clientProvider;
        retrofit.converter.Converter converter33 = restAdapter13.converter;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log35 = restAdapter34.log;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log47 = restAdapter46.log;
        java.util.concurrent.Executor executor48 = restAdapter46.callbackExecutor;
        retrofit.Profiler profiler49 = restAdapter46.profiler;
        retrofit.Profiler profiler50 = null;
        restAdapter46.profiler = profiler50;
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel61);
        restAdapter46.log = log60;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.RestAdapter.Builder builder68 = builder64.setServer("hi!");
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder64.setLog(log69);
        retrofit.Server server71 = null;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel80);
        builder64.logLevel = logLevel80;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log60, logLevel80);
        restAdapter34.logLevel = logLevel80;
        restAdapter13.logLevel = logLevel80;
        retrofit.RestAdapter.Builder builder86 = builder0.setLogLevel(logLevel80);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNotNull(executor12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(converter30);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(converter33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test09210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09210");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.client.Client.Provider provider30 = builder29.clientProvider;
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        log32.log("");
        builder29.log = log32;
        retrofit.Server server36 = builder29.server;
        builder21.server = server36;
        java.util.concurrent.Executor executor38 = builder21.httpExecutor;
        retrofit.Server server39 = builder21.server;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log41 = restAdapter40.log;
        java.util.concurrent.Executor executor42 = restAdapter40.callbackExecutor;
        retrofit.Profiler profiler43 = restAdapter40.profiler;
        retrofit.Profiler profiler44 = null;
        restAdapter40.profiler = profiler44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        restAdapter40.log = log54;
        retrofit.Server server58 = null;
        restAdapter40.server = server58;
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter40.logLevel;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.Profiler profiler66 = null;
        builder65.profiler = profiler66;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        builder65.requestInterceptor = requestInterceptor68;
        retrofit.RestAdapter restAdapter70 = builder65.build();
        retrofit.converter.Converter converter71 = restAdapter70.converter;
        restAdapter40.converter = converter71;
        retrofit.RestAdapter.Builder builder73 = builder21.setConverter(converter71);
        retrofit.client.Client.Provider provider74 = builder73.clientProvider;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNotNull(server39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNotNull(converter71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(provider74);
    }

    @Test
    public void test09211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09211");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        java.util.concurrent.Executor executor11 = builder6.callbackExecutor;
        retrofit.Profiler profiler12 = builder6.profiler;
        retrofit.client.Client client13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder6.setClient(client13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(profiler12);
    }

    @Test
    public void test09212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09212");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.Server server6 = builder0.server;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.ErrorHandler errorHandler10 = restAdapter7.errorHandler;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter26.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter26.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter26.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log24, logLevel32);
        log24.log("Retrofit-Idle");
        restAdapter7.log = log24;
        builder0.log = log24;
        java.util.concurrent.Executor executor39 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder41 = builder0.setLog(log40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor39);
    }

    @Test
    public void test09213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09213");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Server server22 = null;
        builder0.server = server22;
        retrofit.Profiler profiler24 = null;
        builder0.profiler = profiler24;
        retrofit.Profiler profiler26 = null;
        builder0.profiler = profiler26;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = builder29.converter;
        retrofit.Profiler profiler31 = null;
        builder29.profiler = profiler31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.client.Client.Provider provider36 = null;
        builder33.clientProvider = provider36;
        retrofit.RestAdapter.Builder builder39 = builder33.setServer("hi!");
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder40.setLog(log45);
        retrofit.RestAdapter restAdapter47 = builder40.build();
        java.util.concurrent.Executor executor48 = restAdapter47.httpExecutor;
        builder39.callbackExecutor = executor48;
        builder29.callbackExecutor = executor48;
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        java.util.concurrent.Executor executor57 = null;
        builder52.httpExecutor = executor57;
        retrofit.RestAdapter restAdapter59 = builder52.build();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.client.Client.Provider provider61 = restAdapter59.clientProvider;
        builder29.clientProvider = provider61;
        java.util.concurrent.Executor executor63 = builder29.callbackExecutor;
        builder0.callbackExecutor = executor63;
        java.lang.Class<?> wildcardClass65 = executor63.getClass();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNotNull(executor48);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider61);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test09214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09214");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        restAdapter0.logLevel = logLevel6;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = builder12.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor14 = builder12.requestInterceptor;
        retrofit.ErrorHandler errorHandler15 = null;
        builder12.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = null;
        builder12.converter = converter17;
        retrofit.ErrorHandler errorHandler19 = null;
        builder12.errorHandler = errorHandler19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.Profiler profiler26 = null;
        builder25.profiler = profiler26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder25.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter restAdapter30 = builder25.build();
        retrofit.converter.Converter converter31 = restAdapter30.converter;
        retrofit.RestAdapter.Builder builder32 = builder12.setConverter(converter31);
        restAdapter10.converter = converter31;
        restAdapter0.converter = converter31;
        retrofit.RestAdapter.Log log35 = restAdapter0.log;
        retrofit.converter.Converter converter36 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.RestAdapter.LogLevel logLevel39 = builder37.logLevel;
        builder37.ensureSaneDefaults();
        retrofit.client.Client.Provider provider41 = null;
        builder37.clientProvider = provider41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("hi!");
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder51.setLog(log56);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter58.logLevel = logLevel60;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        restAdapter58.requestInterceptor = requestInterceptor62;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter58.logLevel = logLevel64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log56, logLevel64);
        builder37.logLevel = logLevel64;
        boolean boolean68 = logLevel64.log();
        restAdapter0.logLevel = logLevel64;
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(converter31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNotNull(converter36);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09215");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter15.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log13, logLevel21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        restAdapter23.log = log29;
        retrofit.client.Header[] headerArray34 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList35 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList35, headerArray34);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList35, typedOutput37);
        java.lang.String str39 = request38.getUrl();
        java.lang.String str40 = request38.getUrl();
        retrofit.client.Request request41 = restAdapter23.logAndReplaceRequest(request38);
        java.util.concurrent.Executor executor42 = restAdapter23.httpExecutor;
        retrofit.Profiler profiler43 = restAdapter23.profiler;
        java.util.concurrent.Executor executor44 = restAdapter23.httpExecutor;
        retrofit.client.Response response46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response48 = restAdapter23.logAndReplaceResponse("hi!", response46, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(headerArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNull(executor44);
    }

    @Test
    public void test09216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09216");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.Profiler profiler6 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider9 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(provider9);
    }

    @Test
    public void test09217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09217");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.Profiler profiler31 = builder29.profiler;
        java.util.concurrent.Executor executor32 = builder29.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        java.util.concurrent.Executor executor41 = restAdapter40.httpExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.RestAdapter.Builder builder48 = builder42.setServer("hi!");
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        java.util.concurrent.Executor executor57 = restAdapter56.httpExecutor;
        builder48.callbackExecutor = executor57;
        retrofit.RestAdapter.Builder builder59 = builder29.setExecutors(executor41, executor57);
        restAdapter7.httpExecutor = executor41;
        retrofit.client.Client.Provider provider61 = null;
        restAdapter7.clientProvider = provider61;
        retrofit.Profiler profiler63 = null;
        restAdapter7.profiler = profiler63;
        retrofit.Server server65 = restAdapter7.server;
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter7.logLevel;
        retrofit.RequestInterceptor requestInterceptor67 = restAdapter7.requestInterceptor;
        retrofit.client.Response response69 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response71 = restAdapter7.logAndReplaceResponse("", response69, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor67);
    }

    @Test
    public void test09218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09218");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder0.profiler;
        retrofit.converter.Converter converter23 = null;
        builder0.converter = converter23;
        retrofit.client.Client.Provider provider25 = builder0.clientProvider;
        java.util.concurrent.Executor executor26 = builder0.callbackExecutor;
        builder0.ensureSaneDefaults();
        retrofit.client.Client client28 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder29 = builder0.setClient(client28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNull(executor26);
    }

    @Test
    public void test09219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09219");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor29 = builder28.requestInterceptor;
        retrofit.Server server30 = null;
        builder28.server = server30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = builder32.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor34 = builder32.requestInterceptor;
        retrofit.ErrorHandler errorHandler35 = null;
        builder32.errorHandler = errorHandler35;
        retrofit.converter.Converter converter37 = null;
        builder32.converter = converter37;
        retrofit.ErrorHandler errorHandler39 = null;
        builder32.errorHandler = errorHandler39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter41.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        restAdapter41.requestInterceptor = requestInterceptor43;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        restAdapter41.log = log53;
        retrofit.ErrorHandler errorHandler57 = null;
        restAdapter41.errorHandler = errorHandler57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter60 = builder59.converter;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter61.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        restAdapter61.requestInterceptor = requestInterceptor63;
        retrofit.Server server65 = null;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server65, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel74);
        restAdapter61.log = log73;
        retrofit.ErrorHandler errorHandler77 = null;
        restAdapter61.errorHandler = errorHandler77;
        retrofit.RestAdapter.Log log79 = restAdapter61.log;
        retrofit.RestAdapter.Builder builder80 = builder59.setLog(log79);
        retrofit.RequestInterceptor requestInterceptor81 = builder59.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor82 = builder59.requestInterceptor;
        retrofit.RestAdapter.Builder builder84 = builder59.setServer("hi!");
        retrofit.Server server85 = builder59.server;
        restAdapter41.server = server85;
        retrofit.RestAdapter.Builder builder87 = builder32.setServer(server85);
        retrofit.RestAdapter.Builder builder88 = builder28.setServer(server85);
        restAdapter0.server = server85;
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter0.logLevel;
        retrofit.Server server91 = restAdapter0.server;
        retrofit.converter.Converter converter92 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler93 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter60);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(requestInterceptor81);
        org.junit.Assert.assertNull(requestInterceptor82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(server85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(logLevel90);
        org.junit.Assert.assertNotNull(server91);
        org.junit.Assert.assertNull(converter92);
        org.junit.Assert.assertNull(errorHandler93);
    }

    @Test
    public void test09220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09220");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        java.lang.String str14 = request8.getUrl();
        java.lang.String str15 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request8.getHeaders();
        java.lang.String str17 = request8.getMethod();
        java.lang.String str18 = request8.getUrl();
        java.lang.String str19 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList20 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList20, typedOutput21);
        java.lang.String str23 = request22.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Retrofit-Idle" + "'", str23, "Retrofit-Idle");
    }

    @Test
    public void test09221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09221");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = null;
        restAdapter0.logLevel = logLevel4;
        retrofit.ErrorHandler errorHandler6 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder11.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.converter.Converter converter17 = restAdapter16.converter;
        restAdapter0.converter = converter17;
        retrofit.client.Client.Provider provider19 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log20 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler21 = restAdapter0.errorHandler;
        retrofit.Profiler profiler22 = null;
        restAdapter0.profiler = profiler22;
        retrofit.Profiler profiler24 = restAdapter0.profiler;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(profiler24);
    }

    @Test
    public void test09222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09222");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.Profiler profiler11 = restAdapter10.profiler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor14 = restAdapter10.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.callbackExecutor;
        retrofit.RestAdapter.Log log18 = builder16.log;
        retrofit.Server server19 = builder16.server;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log21 = restAdapter20.log;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = builder22.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor24 = builder22.requestInterceptor;
        retrofit.ErrorHandler errorHandler25 = null;
        builder22.errorHandler = errorHandler25;
        retrofit.converter.Converter converter27 = null;
        builder22.converter = converter27;
        retrofit.ErrorHandler errorHandler29 = null;
        builder22.errorHandler = errorHandler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        builder35.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter restAdapter40 = builder35.build();
        retrofit.converter.Converter converter41 = restAdapter40.converter;
        retrofit.RestAdapter.Builder builder42 = builder22.setConverter(converter41);
        restAdapter20.converter = converter41;
        retrofit.RestAdapter.Builder builder44 = builder16.setConverter(converter41);
        restAdapter10.converter = converter41;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        java.util.concurrent.Executor executor54 = restAdapter53.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.client.Header[] headerArray60 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList61 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList61, headerArray60);
        retrofit.mime.TypedOutput typedOutput63 = null;
        retrofit.client.Request request64 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList61, typedOutput63);
        java.lang.String str65 = request64.getUrl();
        java.util.List<retrofit.client.Header> headerList66 = request64.getHeaders();
        retrofit.mime.TypedOutput typedOutput67 = null;
        retrofit.client.Request request68 = new retrofit.client.Request("hi!", "", headerList66, typedOutput67);
        java.lang.String str69 = request68.getMethod();
        retrofit.mime.TypedOutput typedOutput70 = request68.getBody();
        java.util.List<retrofit.client.Header> headerList71 = request68.getHeaders();
        retrofit.client.Request request72 = restAdapter53.logAndReplaceRequest(request68);
        retrofit.mime.TypedOutput typedOutput73 = request72.getBody();
        retrofit.client.Request request74 = restAdapter10.logAndReplaceRequest(request72);
        java.util.List<retrofit.client.Header> headerList75 = request72.getHeaders();
        java.util.List<retrofit.client.Header> headerList76 = request72.getHeaders();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(converter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNotNull(headerArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(headerList66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNull(typedOutput70);
        org.junit.Assert.assertNotNull(headerList71);
        org.junit.Assert.assertNotNull(request72);
        org.junit.Assert.assertNull(typedOutput73);
        org.junit.Assert.assertNotNull(request74);
        org.junit.Assert.assertNotNull(headerList75);
        org.junit.Assert.assertNotNull(headerList76);
    }

    @Test
    public void test09223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09223");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.Profiler profiler8 = null;
        builder6.profiler = profiler8;
        retrofit.RestAdapter.Log log10 = builder6.log;
        builder6.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor12 = null;
        builder6.requestInterceptor = requestInterceptor12;
        retrofit.converter.Converter converter14 = builder6.converter;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter15.logLevel;
        retrofit.converter.Converter converter18 = null;
        restAdapter15.converter = converter18;
        retrofit.ErrorHandler errorHandler20 = restAdapter15.errorHandler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = builder21.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor23 = builder21.requestInterceptor;
        retrofit.ErrorHandler errorHandler24 = null;
        builder21.errorHandler = errorHandler24;
        retrofit.converter.Converter converter26 = null;
        builder21.converter = converter26;
        retrofit.client.Client.Provider provider28 = builder21.clientProvider;
        retrofit.RequestInterceptor requestInterceptor29 = builder21.requestInterceptor;
        retrofit.Server server30 = builder21.server;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        log39.log("hi!");
        log39.log("Retrofit-Idle");
        builder21.log = log39;
        restAdapter15.log = log39;
        builder6.log = log39;
        log39.log("Retrofit-Idle");
        log39.log("");
        restAdapter0.log = log39;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNotNull(converter14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test09224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09224");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.Profiler profiler31 = builder29.profiler;
        java.util.concurrent.Executor executor32 = builder29.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        java.util.concurrent.Executor executor41 = restAdapter40.httpExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.RestAdapter.Builder builder48 = builder42.setServer("hi!");
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        java.util.concurrent.Executor executor57 = restAdapter56.httpExecutor;
        builder48.callbackExecutor = executor57;
        retrofit.RestAdapter.Builder builder59 = builder29.setExecutors(executor41, executor57);
        restAdapter7.httpExecutor = executor41;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter7.logLevel = logLevel70;
        retrofit.Server server73 = restAdapter7.server;
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter7.logLevel;
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter7.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test09225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09225");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.converter.Converter converter10 = restAdapter9.converter;
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        log11.log("");
        restAdapter9.log = log11;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter9.requestInterceptor;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.getUrl();
        java.util.List<retrofit.client.Header> headerList26 = request24.getHeaders();
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", headerList26, typedOutput27);
        java.lang.String str29 = request28.getMethod();
        retrofit.mime.TypedOutput typedOutput30 = request28.getBody();
        java.lang.String str31 = request28.getMethod();
        retrofit.client.Request request32 = restAdapter9.logAndReplaceRequest(request28);
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter9.logLevel;
        retrofit.client.Header[] headerArray45 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList46 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList46, headerArray45);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList46, typedOutput48);
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList46, typedOutput50);
        retrofit.mime.TypedOutput typedOutput52 = null;
        retrofit.client.Request request53 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList46, typedOutput52);
        retrofit.mime.TypedOutput typedOutput54 = null;
        retrofit.client.Request request55 = new retrofit.client.Request("Retrofit-Idle", "", (java.util.List<retrofit.client.Header>) headerList46, typedOutput54);
        retrofit.mime.TypedOutput typedOutput56 = null;
        retrofit.client.Request request57 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList46, typedOutput56);
        java.lang.String str58 = request57.getMethod();
        retrofit.client.Request request59 = restAdapter9.logAndReplaceRequest(request57);
        java.util.List<retrofit.client.Header> headerList60 = request57.getHeaders();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(converter10);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(headerArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(request59);
        org.junit.Assert.assertNotNull(headerList60);
    }

    @Test
    public void test09226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09226");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        log7.log("");
        builder4.log = log7;
        retrofit.RestAdapter.LogLevel logLevel11 = builder4.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09227");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Server server22 = null;
        builder0.server = server22;
        java.util.concurrent.Executor executor24 = builder0.httpExecutor;
        retrofit.Profiler profiler25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder26 = builder0.setProfiler(profiler25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor24);
    }

    @Test
    public void test09228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09228");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.Profiler profiler14 = null;
        builder13.profiler = profiler14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder13.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter restAdapter18 = builder13.build();
        retrofit.converter.Converter converter19 = restAdapter18.converter;
        retrofit.RestAdapter.Builder builder20 = builder0.setConverter(converter19);
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder26 = builder22.setServer("hi!");
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        log29.log("");
        builder26.log = log29;
        retrofit.Server server33 = builder26.server;
        builder20.server = server33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.client.Client.Provider provider38 = null;
        builder35.clientProvider = provider38;
        retrofit.RestAdapter.Builder builder41 = builder35.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter42.logLevel = logLevel44;
        retrofit.Profiler profiler46 = restAdapter42.profiler;
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter42.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter42.requestInterceptor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log50 = restAdapter49.log;
        java.util.concurrent.Executor executor51 = restAdapter49.callbackExecutor;
        retrofit.Profiler profiler52 = restAdapter49.profiler;
        retrofit.Profiler profiler53 = null;
        restAdapter49.profiler = profiler53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel64);
        restAdapter49.log = log63;
        restAdapter42.log = log63;
        retrofit.RestAdapter.Builder builder68 = builder35.setLog(log63);
        retrofit.converter.Converter converter69 = builder68.converter;
        retrofit.RestAdapter.Builder builder71 = builder68.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("hi!");
        retrofit.RestAdapter restAdapter77 = builder76.build();
        retrofit.RequestInterceptor requestInterceptor78 = builder76.requestInterceptor;
        retrofit.RestAdapter.Builder builder79 = builder71.setRequestInterceptor(requestInterceptor78);
        builder20.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter restAdapter81 = builder20.build();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(converter19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(converter69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter81);
    }

    @Test
    public void test09229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09229");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.client.Client.Provider provider4 = null;
        restAdapter0.clientProvider = provider4;
        retrofit.Profiler profiler6 = null;
        restAdapter0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.RequestInterceptor requestInterceptor30 = builder8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = null;
        builder32.converter = converter33;
        retrofit.client.Client.Provider provider35 = null;
        builder32.clientProvider = provider35;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        builder32.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.Profiler profiler44 = null;
        builder43.profiler = profiler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        retrofit.converter.Converter converter54 = null;
        builder46.converter = converter54;
        retrofit.ErrorHandler errorHandler56 = null;
        builder46.errorHandler = errorHandler56;
        retrofit.RequestInterceptor requestInterceptor58 = builder46.requestInterceptor;
        builder43.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.Builder builder60 = builder32.setRequestInterceptor(requestInterceptor58);
        retrofit.RestAdapter.Builder builder61 = builder8.setRequestInterceptor(requestInterceptor58);
        retrofit.RequestInterceptor requestInterceptor62 = builder61.requestInterceptor;
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log65 = builder64.log;
        restAdapter0.log = log65;
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log65);
    }

    @Test
    public void test09230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09230");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = null;
        restAdapter0.logLevel = logLevel4;
        retrofit.ErrorHandler errorHandler6 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder11.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.converter.Converter converter17 = restAdapter16.converter;
        restAdapter0.converter = converter17;
        retrofit.client.Client.Provider provider19 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log20 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler21 = restAdapter0.errorHandler;
        retrofit.Server server22 = restAdapter0.server;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = null;
        restAdapter23.httpExecutor = executor24;
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        builder27.logLevel = logLevel43;
        java.util.concurrent.Executor executor46 = builder27.httpExecutor;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.client.Client.Provider provider50 = null;
        builder47.clientProvider = provider50;
        retrofit.client.Client.Provider provider52 = builder47.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder54 = builder47.setLogLevel(logLevel53);
        builder27.logLevel = logLevel53;
        restAdapter23.logLevel = logLevel53;
        restAdapter0.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter59 = builder58.converter;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor61 = restAdapter60.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        restAdapter60.requestInterceptor = requestInterceptor62;
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel73);
        restAdapter60.log = log72;
        retrofit.ErrorHandler errorHandler76 = null;
        restAdapter60.errorHandler = errorHandler76;
        retrofit.RestAdapter.Log log78 = restAdapter60.log;
        retrofit.RestAdapter.Builder builder79 = builder58.setLog(log78);
        retrofit.Profiler profiler80 = builder79.profiler;
        retrofit.Profiler profiler81 = builder79.profiler;
        java.util.concurrent.Executor executor82 = builder79.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        builder79.requestInterceptor = requestInterceptor83;
        builder79.ensureSaneDefaults();
        retrofit.client.Client.Provider provider86 = builder79.clientProvider;
        retrofit.RequestInterceptor requestInterceptor87 = builder79.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor87;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(profiler80);
        org.junit.Assert.assertNull(profiler81);
        org.junit.Assert.assertNull(executor82);
        org.junit.Assert.assertNotNull(provider86);
        org.junit.Assert.assertNotNull(requestInterceptor87);
    }

    @Test
    public void test09231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09231");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.Profiler profiler19 = builder0.profiler;
        retrofit.Profiler profiler20 = null;
        builder0.profiler = profiler20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter22.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter22.logLevel;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter30 = null;
        restAdapter29.converter = converter30;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter29.requestInterceptor = requestInterceptor32;
        retrofit.Profiler profiler34 = restAdapter29.profiler;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        restAdapter29.logLevel = logLevel35;
        java.util.concurrent.Executor executor38 = restAdapter29.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter29.getLogLevel();
        restAdapter22.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder0.setLogLevel(logLevel39);
        retrofit.RestAdapter.Log log42 = builder0.log;
        retrofit.ErrorHandler errorHandler43 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder45 = builder0.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor46 = builder45.httpExecutor;
        retrofit.converter.Converter converter47 = null;
        builder45.converter = converter47;
        retrofit.ErrorHandler errorHandler49 = builder45.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(errorHandler49);
    }

    @Test
    public void test09232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09232");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        retrofit.RestAdapter.Builder builder21 = builder8.setLogLevel(logLevel19);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log23 = restAdapter22.log;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor26 = builder24.requestInterceptor;
        retrofit.ErrorHandler errorHandler27 = null;
        builder24.errorHandler = errorHandler27;
        retrofit.converter.Converter converter29 = null;
        builder24.converter = converter29;
        retrofit.ErrorHandler errorHandler31 = null;
        builder24.errorHandler = errorHandler31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.Profiler profiler38 = null;
        builder37.profiler = profiler38;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        builder37.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter restAdapter42 = builder37.build();
        retrofit.converter.Converter converter43 = restAdapter42.converter;
        retrofit.RestAdapter.Builder builder44 = builder24.setConverter(converter43);
        restAdapter22.converter = converter43;
        builder8.converter = converter43;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.setLogLevel(logLevel51);
        java.util.concurrent.Executor executor53 = restAdapter47.httpExecutor;
        retrofit.Server server54 = null;
        restAdapter47.server = server54;
        retrofit.Profiler profiler56 = restAdapter47.profiler;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter57.logLevel;
        retrofit.converter.Converter converter60 = null;
        restAdapter57.converter = converter60;
        retrofit.ErrorHandler errorHandler62 = restAdapter57.errorHandler;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log64 = restAdapter63.log;
        retrofit.ErrorHandler errorHandler65 = restAdapter63.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter63.new RestHandler();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.Profiler profiler72 = null;
        builder71.profiler = profiler72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder74.setLog(log79);
        retrofit.RestAdapter restAdapter81 = builder74.build();
        retrofit.converter.Converter converter82 = null;
        builder74.converter = converter82;
        retrofit.ErrorHandler errorHandler84 = null;
        builder74.errorHandler = errorHandler84;
        retrofit.RequestInterceptor requestInterceptor86 = builder74.requestInterceptor;
        builder71.requestInterceptor = requestInterceptor86;
        restAdapter63.requestInterceptor = requestInterceptor86;
        restAdapter57.requestInterceptor = requestInterceptor86;
        restAdapter47.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter.Builder builder91 = builder8.setRequestInterceptor(requestInterceptor86);
        retrofit.RequestInterceptor requestInterceptor92 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder93 = builder7.setRequestInterceptor(requestInterceptor92);
        retrofit.RestAdapter.LogLevel logLevel94 = builder93.logLevel;
        retrofit.Server server95 = builder93.server;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(converter43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server95);
    }

    @Test
    public void test09233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09233");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Profiler profiler7 = null;
        builder6.profiler = profiler7;
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        java.util.concurrent.Executor executor14 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor15 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.Profiler profiler21 = null;
        builder20.profiler = profiler21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        builder20.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter restAdapter25 = builder20.build();
        retrofit.converter.Converter converter26 = restAdapter25.converter;
        restAdapter10.converter = converter26;
        retrofit.RestAdapter.Builder builder28 = builder6.setConverter(converter26);
        java.util.concurrent.Executor executor29 = builder6.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel30 = builder6.logLevel;
        retrofit.Server server31 = builder6.server;
        builder6.ensureSaneDefaults();
        retrofit.client.Client client33 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder34 = builder6.setClient(client33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(converter26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server31);
    }

    @Test
    public void test09234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09234");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor3 = null;
        builder2.httpExecutor = executor3;
        retrofit.RestAdapter.Builder builder6 = builder2.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = builder6.build();
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.getMethod();
        java.lang.String str16 = request14.getMethod();
        retrofit.client.Request request17 = restAdapter7.logAndReplaceRequest(request14);
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.Builder builder20 = builder0.setLogLevel(logLevel19);
        java.util.concurrent.Executor executor21 = builder20.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor22 = builder20.requestInterceptor;
        retrofit.Server server23 = builder20.server;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        java.util.concurrent.Executor executor29 = null;
        builder24.httpExecutor = executor29;
        retrofit.RestAdapter restAdapter31 = builder24.build();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        restAdapter34.log = log46;
        retrofit.ErrorHandler errorHandler50 = null;
        restAdapter34.errorHandler = errorHandler50;
        retrofit.RestAdapter.Log log52 = restAdapter34.log;
        retrofit.RestAdapter.Builder builder53 = builder32.setLog(log52);
        retrofit.Profiler profiler54 = builder53.profiler;
        retrofit.Profiler profiler55 = builder53.profiler;
        java.util.concurrent.Executor executor56 = builder53.callbackExecutor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder57.setLog(log62);
        retrofit.RestAdapter restAdapter64 = builder57.build();
        java.util.concurrent.Executor executor65 = restAdapter64.httpExecutor;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.client.Client.Provider provider69 = null;
        builder66.clientProvider = provider69;
        retrofit.RestAdapter.Builder builder72 = builder66.setServer("hi!");
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder73.setLog(log78);
        retrofit.RestAdapter restAdapter80 = builder73.build();
        java.util.concurrent.Executor executor81 = restAdapter80.httpExecutor;
        builder72.callbackExecutor = executor81;
        retrofit.RestAdapter.Builder builder83 = builder53.setExecutors(executor65, executor81);
        restAdapter31.httpExecutor = executor65;
        retrofit.client.Client.Provider provider85 = null;
        restAdapter31.clientProvider = provider85;
        retrofit.Profiler profiler87 = null;
        restAdapter31.profiler = profiler87;
        retrofit.Server server89 = restAdapter31.server;
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter31.logLevel;
        retrofit.RequestInterceptor requestInterceptor91 = restAdapter31.requestInterceptor;
        builder20.requestInterceptor = requestInterceptor91;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(server89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor91);
    }

    @Test
    public void test09235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09235");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.httpExecutor = executor9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.Profiler profiler15 = null;
        builder13.profiler = profiler15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.client.Client.Provider provider20 = null;
        builder17.clientProvider = provider20;
        retrofit.RestAdapter.Builder builder23 = builder17.setServer("hi!");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        retrofit.RestAdapter restAdapter31 = builder24.build();
        java.util.concurrent.Executor executor32 = restAdapter31.httpExecutor;
        builder23.callbackExecutor = executor32;
        builder13.callbackExecutor = executor32;
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel36 = builder13.logLevel;
        restAdapter0.logLevel = logLevel36;
        retrofit.RestAdapter.Log log38 = restAdapter0.log;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log38);
    }

    @Test
    public void test09236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09236");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log44, logLevel48);
        retrofit.RestAdapter.Builder builder51 = builder22.setLog(log44);
        retrofit.Server server52 = builder51.server;
        retrofit.ErrorHandler errorHandler53 = null;
        builder51.errorHandler = errorHandler53;
        retrofit.Profiler profiler55 = null;
        builder51.profiler = profiler55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = builder57.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor59 = builder57.requestInterceptor;
        java.util.concurrent.Executor executor60 = builder57.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel61 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.Profiler profiler67 = null;
        builder66.profiler = profiler67;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        builder66.requestInterceptor = requestInterceptor69;
        retrofit.RestAdapter restAdapter71 = builder66.build();
        retrofit.converter.Converter converter72 = null;
        builder66.converter = converter72;
        retrofit.client.Client.Provider provider74 = builder66.clientProvider;
        retrofit.RestAdapter.Builder builder75 = builder57.setClient(provider74);
        builder51.clientProvider = provider74;
        retrofit.RestAdapter.Builder builder77 = builder21.setClient(provider74);
        retrofit.RestAdapter.Builder builder79 = builder21.setServer("hi!");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNotNull(provider74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test09237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09237");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "", headerList10, typedOutput11);
        java.lang.String str13 = request12.getMethod();
        retrofit.mime.TypedOutput typedOutput14 = request12.getBody();
        java.lang.String str15 = request12.getUrl();
        java.lang.String str16 = request12.getUrl();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test09238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09238");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder7.setLog(log12);
        retrofit.RestAdapter restAdapter14 = builder7.build();
        java.util.concurrent.Executor executor15 = restAdapter14.httpExecutor;
        builder6.callbackExecutor = executor15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter18 = builder17.converter;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter19.log = log31;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter19.errorHandler = errorHandler35;
        retrofit.RestAdapter.Log log37 = restAdapter19.log;
        retrofit.RestAdapter.Builder builder38 = builder17.setLog(log37);
        retrofit.Profiler profiler39 = builder38.profiler;
        retrofit.Profiler profiler40 = builder38.profiler;
        java.util.concurrent.Executor executor41 = builder38.callbackExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder48 = builder42.setLog(log47);
        retrofit.RestAdapter restAdapter49 = builder42.build();
        java.util.concurrent.Executor executor50 = restAdapter49.httpExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.client.Client.Provider provider54 = null;
        builder51.clientProvider = provider54;
        retrofit.RestAdapter.Builder builder57 = builder51.setServer("hi!");
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder58.setLog(log63);
        retrofit.RestAdapter restAdapter65 = builder58.build();
        java.util.concurrent.Executor executor66 = restAdapter65.httpExecutor;
        builder57.callbackExecutor = executor66;
        retrofit.RestAdapter.Builder builder68 = builder38.setExecutors(executor50, executor66);
        builder6.callbackExecutor = executor66;
        retrofit.client.Client.Provider provider70 = builder6.clientProvider;
        retrofit.RequestInterceptor requestInterceptor71 = builder6.requestInterceptor;
        retrofit.converter.Converter converter72 = builder6.converter;
        retrofit.RequestInterceptor requestInterceptor73 = builder6.requestInterceptor;
        retrofit.Profiler profiler74 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder75 = builder6.setProfiler(profiler74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNull(converter72);
        org.junit.Assert.assertNull(requestInterceptor73);
    }

    @Test
    public void test09239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09239");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter4 = null;
        builder3.converter = converter4;
        retrofit.client.Client.Provider provider6 = null;
        builder3.clientProvider = provider6;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder3.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter12.requestInterceptor = requestInterceptor14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        restAdapter12.log = log24;
        retrofit.ErrorHandler errorHandler28 = null;
        restAdapter12.errorHandler = errorHandler28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        retrofit.RestAdapter.Log log50 = restAdapter32.log;
        retrofit.RestAdapter.Builder builder51 = builder30.setLog(log50);
        retrofit.RequestInterceptor requestInterceptor52 = builder30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor53 = builder30.requestInterceptor;
        retrofit.RestAdapter.Builder builder55 = builder30.setServer("hi!");
        retrofit.Server server56 = builder30.server;
        restAdapter12.server = server56;
        builder10.server = server56;
        retrofit.RestAdapter.Builder builder59 = builder3.setServer(server56);
        restAdapter0.server = server56;
        retrofit.RequestInterceptor requestInterceptor61 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter63 = builder62.converter;
        retrofit.Profiler profiler64 = null;
        builder62.profiler = profiler64;
        retrofit.ErrorHandler errorHandler66 = null;
        builder62.errorHandler = errorHandler66;
        retrofit.RestAdapter.Builder builder69 = builder62.setServer("hi!");
        java.util.concurrent.Executor executor70 = builder62.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel71 = builder62.logLevel;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("hi!");
        retrofit.Profiler profiler77 = null;
        builder76.profiler = profiler77;
        retrofit.RequestInterceptor requestInterceptor79 = null;
        builder76.requestInterceptor = requestInterceptor79;
        retrofit.RestAdapter restAdapter81 = builder76.build();
        retrofit.converter.Converter converter82 = restAdapter81.converter;
        retrofit.RestAdapter.Log log83 = restAdapter81.log;
        builder62.log = log83;
        restAdapter0.log = log83;
        retrofit.converter.Converter converter86 = restAdapter0.converter;
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(converter82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNull(converter86);
    }

    @Test
    public void test09240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09240");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.Profiler profiler8 = null;
        builder0.profiler = profiler8;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor12 = builder11.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider18 = builder17.clientProvider;
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder17.log = log20;
        retrofit.ErrorHandler errorHandler22 = builder17.errorHandler;
        retrofit.client.Client.Provider provider23 = builder17.clientProvider;
        retrofit.RestAdapter.Builder builder24 = builder11.setClient(provider23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter25.logLevel = logLevel27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter25.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter25.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.Profiler profiler35 = null;
        builder33.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.client.Client.Provider provider40 = null;
        builder37.clientProvider = provider40;
        retrofit.RestAdapter.Builder builder43 = builder37.setServer("hi!");
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        retrofit.RestAdapter restAdapter51 = builder44.build();
        java.util.concurrent.Executor executor52 = restAdapter51.httpExecutor;
        builder43.callbackExecutor = executor52;
        builder33.callbackExecutor = executor52;
        restAdapter25.httpExecutor = executor52;
        builder11.callbackExecutor = executor52;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter58 = null;
        builder57.converter = converter58;
        retrofit.client.Client.Provider provider60 = null;
        builder57.clientProvider = provider60;
        java.util.concurrent.Executor executor62 = builder57.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder57.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.Profiler profiler70 = null;
        builder69.profiler = profiler70;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        builder69.requestInterceptor = requestInterceptor72;
        retrofit.RestAdapter restAdapter74 = builder69.build();
        retrofit.converter.Converter converter75 = restAdapter74.converter;
        java.util.concurrent.Executor executor76 = restAdapter74.callbackExecutor;
        builder57.httpExecutor = executor76;
        builder11.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.Profiler profiler84 = null;
        builder83.profiler = profiler84;
        retrofit.RequestInterceptor requestInterceptor86 = null;
        builder83.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter restAdapter88 = builder83.build();
        retrofit.converter.Converter converter89 = restAdapter88.converter;
        java.util.concurrent.Executor executor90 = restAdapter88.callbackExecutor;
        retrofit.client.Client.Provider provider91 = restAdapter88.clientProvider;
        builder11.clientProvider = provider91;
        builder11.ensureSaneDefaults();
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(provider23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(executor52);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(converter75);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(converter89);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNotNull(provider91);
    }

    @Test
    public void test09241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09241");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = null;
        restAdapter5.httpExecutor = executor6;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter5.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.Log log10 = restAdapter5.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter5.logLevel = logLevel11;
        restAdapter0.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter22 = builder21.converter;
        retrofit.RestAdapter.LogLevel logLevel23 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.RestAdapter.Log log45 = restAdapter27.log;
        retrofit.RestAdapter.Builder builder46 = builder25.setLog(log45);
        retrofit.RequestInterceptor requestInterceptor47 = builder25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = builder25.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder25.setServer("hi!");
        retrofit.Server server51 = builder25.server;
        retrofit.RestAdapter.Builder builder52 = builder20.setServer(server51);
        restAdapter0.server = server51;
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler55 = restAdapter0.profiler;
        retrofit.Profiler profiler56 = null;
        restAdapter0.profiler = profiler56;
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNull(profiler55);
    }

    @Test
    public void test09242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09242");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.ErrorHandler errorHandler12 = null;
        builder8.errorHandler = errorHandler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter16.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter16.requestInterceptor = requestInterceptor18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter16.log = log28;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter16.errorHandler = errorHandler32;
        retrofit.RestAdapter.Log log34 = restAdapter16.log;
        retrofit.RestAdapter.Builder builder35 = builder14.setLog(log34);
        retrofit.RestAdapter.Builder builder36 = builder8.setLog(log34);
        log34.log("Retrofit-Idle");
        builder0.log = log34;
        log34.log("hi!");
        log34.log("");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test09243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09243");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder21.requestInterceptor;
        retrofit.Server server23 = null;
        builder21.server = server23;
        retrofit.client.Client.Provider provider25 = null;
        builder21.clientProvider = provider25;
        retrofit.ErrorHandler errorHandler27 = null;
        builder21.errorHandler = errorHandler27;
        retrofit.client.Client.Provider provider29 = builder21.clientProvider;
        java.util.concurrent.Executor executor30 = builder21.httpExecutor;
        retrofit.ErrorHandler errorHandler31 = builder21.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(errorHandler31);
    }

    @Test
    public void test09244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09244");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.Profiler profiler14 = null;
        builder13.profiler = profiler14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder13.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter restAdapter18 = builder13.build();
        retrofit.converter.Converter converter19 = restAdapter18.converter;
        retrofit.RestAdapter.Builder builder20 = builder0.setConverter(converter19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log22 = restAdapter21.log;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = null;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter27.logLevel;
        retrofit.converter.Converter converter30 = null;
        restAdapter27.converter = converter30;
        retrofit.ErrorHandler errorHandler32 = restAdapter27.errorHandler;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log34 = restAdapter33.log;
        retrofit.ErrorHandler errorHandler35 = restAdapter33.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.Profiler profiler42 = null;
        builder41.profiler = profiler42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        retrofit.RestAdapter restAdapter51 = builder44.build();
        retrofit.converter.Converter converter52 = null;
        builder44.converter = converter52;
        retrofit.ErrorHandler errorHandler54 = null;
        builder44.errorHandler = errorHandler54;
        retrofit.RequestInterceptor requestInterceptor56 = builder44.requestInterceptor;
        builder41.requestInterceptor = requestInterceptor56;
        restAdapter33.requestInterceptor = requestInterceptor56;
        restAdapter27.requestInterceptor = requestInterceptor56;
        restAdapter21.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.Builder builder61 = builder20.setRequestInterceptor(requestInterceptor56);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = builder62.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor64 = builder62.requestInterceptor;
        retrofit.ErrorHandler errorHandler65 = null;
        builder62.errorHandler = errorHandler65;
        retrofit.converter.Converter converter67 = null;
        builder62.converter = converter67;
        retrofit.client.Client.Provider provider69 = builder62.clientProvider;
        retrofit.RequestInterceptor requestInterceptor70 = builder62.requestInterceptor;
        retrofit.Server server71 = builder62.server;
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel81);
        log80.log("hi!");
        log80.log("Retrofit-Idle");
        builder62.log = log80;
        retrofit.RestAdapter.Builder builder88 = builder20.setLog(log80);
        retrofit.converter.Converter converter89 = builder88.converter;
        retrofit.RequestInterceptor requestInterceptor90 = builder88.requestInterceptor;
        retrofit.converter.Converter converter91 = builder88.converter;
        retrofit.client.Client client92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder93 = builder88.setClient(client92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(converter19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(converter89);
        org.junit.Assert.assertNotNull(requestInterceptor90);
        org.junit.Assert.assertNotNull(converter91);
    }

    @Test
    public void test09245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09245");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = null;
        builder8.converter = converter9;
        retrofit.client.Client.Provider provider11 = null;
        builder8.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder8.requestInterceptor = requestInterceptor13;
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        restAdapter18.log = log30;
        retrofit.ErrorHandler errorHandler34 = null;
        restAdapter18.errorHandler = errorHandler34;
        retrofit.RestAdapter.Log log36 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder37 = builder16.setLog(log36);
        retrofit.RequestInterceptor requestInterceptor38 = builder16.requestInterceptor;
        java.util.concurrent.Executor executor39 = builder16.httpExecutor;
        retrofit.ErrorHandler errorHandler40 = builder16.errorHandler;
        retrofit.RestAdapter.Log log41 = builder16.log;
        retrofit.RestAdapter.Builder builder42 = builder8.setLog(log41);
        builder0.log = log41;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor46 = builder44.requestInterceptor;
        retrofit.Profiler profiler47 = builder44.profiler;
        retrofit.RestAdapter.LogLevel logLevel48 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder49 = builder0.setLogLevel(logLevel48);
        boolean boolean50 = logLevel48.log();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test09246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09246");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.Profiler profiler28 = builder27.profiler;
        retrofit.RestAdapter.LogLevel logLevel29 = builder27.logLevel;
        restAdapter0.logLevel = logLevel29;
        retrofit.Profiler profiler31 = null;
        restAdapter0.profiler = profiler31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.RestAdapter.Log log35 = builder33.log;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = builder36.converter;
        retrofit.RestAdapter.LogLevel logLevel38 = builder36.logLevel;
        builder36.ensureSaneDefaults();
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter55.requestInterceptor = requestInterceptor59;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter55.logLevel = logLevel61;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log53, logLevel61);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.RestAdapter.Builder builder68 = builder64.setServer("hi!");
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder64.setLog(log69);
        restAdapter63.log = log69;
        builder36.log = log69;
        java.util.concurrent.Executor executor73 = null;
        builder36.httpExecutor = executor73;
        retrofit.converter.Converter converter75 = null;
        builder36.converter = converter75;
        retrofit.ErrorHandler errorHandler77 = builder36.errorHandler;
        retrofit.RestAdapter.Builder builder78 = builder33.setErrorHandler(errorHandler77);
        restAdapter0.errorHandler = errorHandler77;
        retrofit.RestAdapter.Log log80 = restAdapter0.log;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(errorHandler77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(log80);
    }

    @Test
    public void test09247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09247");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter21.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter21.logLevel = logLevel27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log19, logLevel27);
        builder0.logLevel = logLevel27;
        retrofit.RestAdapter.LogLevel logLevel31 = builder0.logLevel;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter49 = null;
        restAdapter48.converter = converter49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter48.requestInterceptor = requestInterceptor51;
        retrofit.Profiler profiler53 = restAdapter48.profiler;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        restAdapter48.logLevel = logLevel54;
        java.util.concurrent.Executor executor57 = restAdapter48.httpExecutor;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log59 = restAdapter58.log;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = builder60.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor62 = builder60.requestInterceptor;
        retrofit.ErrorHandler errorHandler63 = null;
        builder60.errorHandler = errorHandler63;
        retrofit.converter.Converter converter65 = null;
        builder60.converter = converter65;
        retrofit.ErrorHandler errorHandler67 = null;
        builder60.errorHandler = errorHandler67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.Profiler profiler74 = null;
        builder73.profiler = profiler74;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        builder73.requestInterceptor = requestInterceptor76;
        retrofit.RestAdapter restAdapter78 = builder73.build();
        retrofit.converter.Converter converter79 = restAdapter78.converter;
        retrofit.RestAdapter.Builder builder80 = builder60.setConverter(converter79);
        restAdapter58.converter = converter79;
        restAdapter48.converter = converter79;
        restAdapter32.converter = converter79;
        retrofit.RestAdapter.Builder builder84 = builder0.setConverter(converter79);
        retrofit.Profiler profiler85 = builder84.profiler;
        retrofit.Profiler profiler86 = null;
        builder84.profiler = profiler86;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(converter79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(profiler85);
    }

    @Test
    public void test09248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09248");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter6.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter6.logLevel = logLevel8;
        retrofit.Profiler profiler10 = restAdapter6.profiler;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter6.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter6.requestInterceptor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log14 = restAdapter13.log;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.Profiler profiler16 = restAdapter13.profiler;
        retrofit.Profiler profiler17 = null;
        restAdapter13.profiler = profiler17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        restAdapter13.log = log27;
        restAdapter6.log = log27;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter6.getLogLevel();
        boolean boolean33 = logLevel32.log();
        restAdapter0.logLevel = logLevel32;
        java.util.concurrent.Executor executor35 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(executor35);
    }

    @Test
    public void test09249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09249");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = builder10.converter;
        retrofit.RestAdapter.LogLevel logLevel12 = builder10.logLevel;
        builder10.ensureSaneDefaults();
        retrofit.client.Client.Provider provider14 = null;
        builder10.clientProvider = provider14;
        retrofit.Profiler profiler16 = builder10.profiler;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.callbackExecutor;
        retrofit.RestAdapter.Log log19 = builder17.log;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log36, logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder17.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder47.setLog(log52);
        builder17.log = log52;
        retrofit.RestAdapter.Builder builder55 = builder10.setLog(log52);
        java.util.concurrent.Executor executor56 = builder55.httpExecutor;
        builder7.callbackExecutor = executor56;
        retrofit.RestAdapter.Log log58 = builder7.log;
        retrofit.Profiler profiler59 = null;
        builder7.profiler = profiler59;
        retrofit.Server server61 = builder7.server;
        retrofit.client.Client client62 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder63 = builder7.setClient(client62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertNull(server61);
    }

    @Test
    public void test09250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09250");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.httpExecutor = executor4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("hi!");
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder3.setLog(log8);
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        builder3.logLevel = logLevel19;
        retrofit.converter.Converter converter22 = builder3.converter;
        retrofit.ErrorHandler errorHandler23 = builder3.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel24 = builder3.logLevel;
        retrofit.Server server25 = builder3.server;
        builder0.server = server25;
        retrofit.client.Client.Provider provider27 = builder0.clientProvider;
        retrofit.RestAdapter.Log log28 = builder0.log;
        retrofit.RestAdapter restAdapter29 = builder0.build();
        retrofit.client.Client.Provider provider30 = restAdapter29.clientProvider;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.logLevel;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = null;
        builder34.converter = converter35;
        retrofit.client.Client.Provider provider37 = null;
        builder34.clientProvider = provider37;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder34.requestInterceptor = requestInterceptor39;
        retrofit.Profiler profiler41 = builder34.profiler;
        retrofit.Profiler profiler42 = null;
        builder34.profiler = profiler42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor46 = builder44.requestInterceptor;
        java.util.concurrent.Executor executor47 = builder44.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel48 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.Profiler profiler54 = null;
        builder53.profiler = profiler54;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        builder53.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter restAdapter58 = builder53.build();
        retrofit.converter.Converter converter59 = null;
        builder53.converter = converter59;
        retrofit.client.Client.Provider provider61 = builder53.clientProvider;
        retrofit.RestAdapter.Builder builder62 = builder44.setClient(provider61);
        retrofit.RestAdapter.Builder builder63 = builder34.setClient(provider61);
        retrofit.client.Client.Provider provider64 = builder63.clientProvider;
        restAdapter31.clientProvider = provider64;
        restAdapter29.clientProvider = provider64;
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter29.getLogLevel();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(provider30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(provider61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(provider64);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09251");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        restAdapter0.logLevel = logLevel6;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = builder12.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor14 = builder12.requestInterceptor;
        retrofit.ErrorHandler errorHandler15 = null;
        builder12.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = null;
        builder12.converter = converter17;
        retrofit.ErrorHandler errorHandler19 = null;
        builder12.errorHandler = errorHandler19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.Profiler profiler26 = null;
        builder25.profiler = profiler26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder25.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter restAdapter30 = builder25.build();
        retrofit.converter.Converter converter31 = restAdapter30.converter;
        retrofit.RestAdapter.Builder builder32 = builder12.setConverter(converter31);
        restAdapter10.converter = converter31;
        restAdapter0.converter = converter31;
        retrofit.RestAdapter.Log log35 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter0.getLogLevel();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter38.requestInterceptor;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.converter.Converter converter41 = null;
        restAdapter38.converter = converter41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter44 = builder43.converter;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter45.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter45.requestInterceptor = requestInterceptor47;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel58);
        restAdapter45.log = log57;
        retrofit.ErrorHandler errorHandler61 = null;
        restAdapter45.errorHandler = errorHandler61;
        retrofit.RestAdapter.Log log63 = restAdapter45.log;
        retrofit.RestAdapter.Builder builder64 = builder43.setLog(log63);
        restAdapter38.log = log63;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter67 = builder66.converter;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor69 = restAdapter68.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        restAdapter68.requestInterceptor = requestInterceptor70;
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel81);
        restAdapter68.log = log80;
        retrofit.ErrorHandler errorHandler84 = null;
        restAdapter68.errorHandler = errorHandler84;
        retrofit.RestAdapter.Log log86 = restAdapter68.log;
        retrofit.RestAdapter.Builder builder87 = builder66.setLog(log86);
        retrofit.RequestInterceptor requestInterceptor88 = builder66.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor89 = builder66.requestInterceptor;
        retrofit.RestAdapter.Builder builder91 = builder66.setServer("hi!");
        retrofit.Server server92 = builder66.server;
        retrofit.RestAdapter.LogLevel logLevel93 = builder66.logLevel;
        restAdapter38.logLevel = logLevel93;
        restAdapter0.setLogLevel(logLevel93);
        retrofit.RestAdapter.Log log96 = restAdapter0.log;
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(converter31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(converter67);
        org.junit.Assert.assertNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(requestInterceptor88);
        org.junit.Assert.assertNull(requestInterceptor89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(server92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log96);
    }

    @Test
    public void test09252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09252");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter10 = restAdapter0.converter;
        retrofit.Profiler profiler11 = restAdapter0.profiler;
        java.lang.Throwable throwable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable12, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(profiler11);
    }

    @Test
    public void test09253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09253");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        builder8.logLevel = logLevel10;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter17 = null;
        restAdapter14.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        restAdapter14.log = log39;
        retrofit.RestAdapter.Builder builder42 = builder8.setLog(log39);
        restAdapter0.log = log39;
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor45 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter0.new RestHandler();
        retrofit.client.Response response48 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response50 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response48, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(executor45);
    }

    @Test
    public void test09254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09254");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.Profiler profiler17 = restAdapter14.profiler;
        retrofit.Profiler profiler18 = null;
        restAdapter14.profiler = profiler18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter14.log = log28;
        restAdapter7.log = log28;
        retrofit.RestAdapter.Builder builder33 = builder0.setLog(log28);
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter.Builder builder36 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.RestAdapter.LogLevel logLevel39 = builder37.logLevel;
        builder37.ensureSaneDefaults();
        retrofit.client.Client.Provider provider41 = null;
        builder37.clientProvider = provider41;
        retrofit.Profiler profiler43 = builder37.profiler;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.callbackExecutor;
        retrofit.RestAdapter.Log log46 = builder44.log;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel64);
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter66.logLevel = logLevel68;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.setLogLevel(logLevel70);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log63, logLevel70);
        retrofit.RestAdapter.Builder builder73 = builder44.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder74.setLog(log79);
        builder44.log = log79;
        retrofit.RestAdapter.Builder builder82 = builder37.setLog(log79);
        retrofit.converter.Converter converter83 = builder82.converter;
        retrofit.RestAdapter.Builder builder84 = builder36.setConverter(converter83);
        retrofit.RequestInterceptor requestInterceptor85 = builder36.requestInterceptor;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(converter83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(requestInterceptor85);
    }

    @Test
    public void test09255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09255");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor10 = builder8.requestInterceptor;
        retrofit.ErrorHandler errorHandler11 = null;
        builder8.errorHandler = errorHandler11;
        retrofit.converter.Converter converter13 = null;
        builder8.converter = converter13;
        retrofit.client.Client.Provider provider15 = builder8.clientProvider;
        retrofit.RequestInterceptor requestInterceptor16 = builder8.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel17 = builder8.logLevel;
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.client.Client.Provider provider22 = null;
        builder19.clientProvider = provider22;
        retrofit.RestAdapter.Builder builder25 = builder19.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.Profiler profiler31 = null;
        builder30.profiler = profiler31;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        builder30.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter restAdapter35 = builder30.build();
        retrofit.converter.Converter converter36 = restAdapter35.converter;
        retrofit.RestAdapter.Builder builder37 = builder19.setConverter(converter36);
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log39 = restAdapter38.log;
        retrofit.ErrorHandler errorHandler40 = restAdapter38.errorHandler;
        retrofit.converter.Converter converter41 = null;
        restAdapter38.converter = converter41;
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter38.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter38.requestInterceptor;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = builder45.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor47 = builder45.requestInterceptor;
        retrofit.ErrorHandler errorHandler48 = null;
        builder45.errorHandler = errorHandler48;
        retrofit.converter.Converter converter50 = null;
        builder45.converter = converter50;
        retrofit.ErrorHandler errorHandler52 = null;
        builder45.errorHandler = errorHandler52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.Profiler profiler59 = null;
        builder58.profiler = profiler59;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        builder58.requestInterceptor = requestInterceptor61;
        retrofit.RestAdapter restAdapter63 = builder58.build();
        retrofit.converter.Converter converter64 = restAdapter63.converter;
        retrofit.RestAdapter.Builder builder65 = builder45.setConverter(converter64);
        restAdapter38.converter = converter64;
        builder37.converter = converter64;
        builder8.converter = converter64;
        restAdapter0.converter = converter64;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(converter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(converter64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test09256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09256");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter0.requestInterceptor = requestInterceptor9;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        retrofit.Server server12 = restAdapter0.server;
        retrofit.client.Client.Provider provider13 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log14 = restAdapter0.log;
        java.util.concurrent.Executor executor15 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log19 = restAdapter18.log;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter.LogLevel logLevel22 = null;
        restAdapter18.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter18.requestInterceptor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter25.logLevel = logLevel27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter25.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter25.getLogLevel();
        restAdapter18.logLevel = logLevel31;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter18.getLogLevel();
        restAdapter0.logLevel = logLevel33;
        retrofit.RestAdapter.Log log35 = restAdapter0.log;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log35);
    }

    @Test
    public void test09257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09257");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        java.lang.String str15 = request12.getMethod();
        retrofit.mime.TypedOutput typedOutput16 = request12.getBody();
        java.util.List<retrofit.client.Header> headerList17 = request12.getHeaders();
        java.util.List<retrofit.client.Header> headerList18 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", headerList18, typedOutput19);
        java.lang.String str21 = request20.getMethod();
        retrofit.mime.TypedOutput typedOutput22 = request20.getBody();
        java.lang.String str23 = request20.getMethod();
        retrofit.mime.TypedOutput typedOutput24 = request20.getBody();
        java.util.List<retrofit.client.Header> headerList25 = request20.getHeaders();
        java.lang.String str26 = request20.getMethod();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request27 = restAdapter0.logAndReplaceRequest(request20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(typedOutput24);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test09258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09258");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.Profiler profiler24 = builder21.profiler;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter30 = builder29.build();
        retrofit.client.Header[] headerArray33 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList34 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList34, headerArray33);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList34, typedOutput36);
        java.lang.String str38 = request37.getMethod();
        java.lang.String str39 = request37.getMethod();
        retrofit.client.Request request40 = restAdapter30.logAndReplaceRequest(request37);
        retrofit.Profiler profiler41 = restAdapter30.profiler;
        retrofit.client.Client.Provider provider42 = restAdapter30.clientProvider;
        retrofit.RestAdapter.Builder builder43 = builder21.setClient(provider42);
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(headerArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNotNull(provider42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test09259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09259");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter7.logLevel;
        retrofit.converter.Converter converter10 = null;
        restAdapter7.converter = converter10;
        retrofit.ErrorHandler errorHandler12 = restAdapter7.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = null;
        builder13.converter = converter14;
        retrofit.client.Client.Provider provider16 = null;
        builder13.clientProvider = provider16;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        builder13.requestInterceptor = requestInterceptor18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        retrofit.Profiler profiler25 = null;
        builder24.profiler = profiler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.RestAdapter restAdapter34 = builder27.build();
        retrofit.converter.Converter converter35 = null;
        builder27.converter = converter35;
        retrofit.ErrorHandler errorHandler37 = null;
        builder27.errorHandler = errorHandler37;
        retrofit.RequestInterceptor requestInterceptor39 = builder27.requestInterceptor;
        builder24.requestInterceptor = requestInterceptor39;
        retrofit.RestAdapter.Builder builder41 = builder13.setRequestInterceptor(requestInterceptor39);
        restAdapter7.requestInterceptor = requestInterceptor39;
        builder0.requestInterceptor = requestInterceptor39;
        retrofit.RequestInterceptor requestInterceptor44 = builder0.requestInterceptor;
        retrofit.RestAdapter restAdapter45 = builder0.build();
        java.util.concurrent.Executor executor46 = restAdapter45.callbackExecutor;
        retrofit.client.Response response48 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response50 = restAdapter45.logAndReplaceResponse("hi!", response48, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(executor46);
    }

    @Test
    public void test09260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09260");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.Server server8 = builder6.server;
        retrofit.RestAdapter.LogLevel logLevel9 = builder6.logLevel;
        retrofit.RestAdapter.LogLevel logLevel10 = builder6.logLevel;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = null;
        restAdapter11.httpExecutor = executor12;
        retrofit.Profiler profiler14 = null;
        restAdapter11.profiler = profiler14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter11.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter19 = builder18.converter;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter20.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter20.requestInterceptor = requestInterceptor22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        restAdapter20.log = log32;
        retrofit.ErrorHandler errorHandler36 = null;
        restAdapter20.errorHandler = errorHandler36;
        retrofit.RestAdapter.Log log38 = restAdapter20.log;
        retrofit.RestAdapter.Builder builder39 = builder18.setLog(log38);
        retrofit.RequestInterceptor requestInterceptor40 = builder18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor41 = builder18.requestInterceptor;
        retrofit.RestAdapter.Builder builder43 = builder18.setServer("hi!");
        retrofit.Server server44 = builder18.server;
        restAdapter11.server = server44;
        builder6.server = server44;
        builder0.server = server44;
        retrofit.client.Client client48 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder49 = builder0.setClient(client48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(server44);
    }

    @Test
    public void test09261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09261");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.httpExecutor = executor4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("hi!");
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder3.setLog(log8);
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        builder3.logLevel = logLevel19;
        retrofit.converter.Converter converter22 = builder3.converter;
        retrofit.ErrorHandler errorHandler23 = builder3.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel24 = builder3.logLevel;
        retrofit.Server server25 = builder3.server;
        builder0.server = server25;
        retrofit.client.Client.Provider provider27 = builder0.clientProvider;
        retrofit.RestAdapter.Log log28 = builder0.log;
        retrofit.Profiler profiler29 = builder0.profiler;
        java.util.concurrent.Executor executor30 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter31 = builder0.build();
        retrofit.Server server32 = builder0.server;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(server32);
    }

    @Test
    public void test09262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09262");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.Profiler profiler10 = null;
        restAdapter0.profiler = profiler10;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor15 = builder13.requestInterceptor;
        retrofit.ErrorHandler errorHandler16 = null;
        builder13.errorHandler = errorHandler16;
        retrofit.Profiler profiler18 = builder13.profiler;
        retrofit.Profiler profiler19 = null;
        builder13.profiler = profiler19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter22 = builder21.converter;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter23.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter23.requestInterceptor = requestInterceptor25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        restAdapter23.log = log35;
        retrofit.ErrorHandler errorHandler39 = null;
        restAdapter23.errorHandler = errorHandler39;
        retrofit.RestAdapter.Log log41 = restAdapter23.log;
        retrofit.RestAdapter.Builder builder42 = builder21.setLog(log41);
        retrofit.Profiler profiler43 = builder42.profiler;
        retrofit.RestAdapter.LogLevel logLevel44 = builder42.logLevel;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder46 = builder42.setLogLevel(logLevel45);
        builder13.logLevel = logLevel45;
        boolean boolean48 = logLevel45.log();
        restAdapter0.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.client.Client.Provider provider55 = builder54.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean57 = logLevel56.log();
        builder54.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter59 = builder54.build();
        retrofit.converter.Converter converter60 = restAdapter59.converter;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider62 = null;
        restAdapter61.clientProvider = provider62;
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter66 = builder65.converter;
        retrofit.RestAdapter.LogLevel logLevel67 = builder65.logLevel;
        restAdapter61.logLevel = logLevel67;
        boolean boolean69 = logLevel67.log();
        restAdapter59.logLevel = logLevel67;
        retrofit.ErrorHandler errorHandler71 = restAdapter59.errorHandler;
        retrofit.client.Client.Provider provider72 = restAdapter59.clientProvider;
        retrofit.ErrorHandler errorHandler73 = restAdapter59.errorHandler;
        restAdapter0.errorHandler = errorHandler73;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(converter60);
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(errorHandler71);
        org.junit.Assert.assertNotNull(provider72);
        org.junit.Assert.assertNotNull(errorHandler73);
    }

    @Test
    public void test09263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09263");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = builder4.build();
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getMethod();
        java.lang.String str14 = request12.getMethod();
        retrofit.client.Request request15 = restAdapter5.logAndReplaceRequest(request12);
        retrofit.converter.Converter converter16 = restAdapter5.converter;
        retrofit.Server server17 = restAdapter5.server;
        java.util.concurrent.Executor executor18 = restAdapter5.httpExecutor;
        retrofit.ErrorHandler errorHandler19 = restAdapter5.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(converter16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertNotNull(errorHandler19);
    }

    @Test
    public void test09264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09264");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        java.lang.String str17 = request16.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList18, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList18, typedOutput23);
        java.lang.String str25 = request24.getMethod();
        java.util.List<retrofit.client.Header> headerList26 = request24.getHeaders();
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList26, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("Retrofit-Idle", "", headerList26, typedOutput29);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList26);
    }

    @Test
    public void test09265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09265");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter5.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        restAdapter5.requestInterceptor = requestInterceptor7;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        restAdapter5.log = log17;
        retrofit.ErrorHandler errorHandler21 = null;
        restAdapter5.errorHandler = errorHandler21;
        retrofit.RestAdapter.Log log23 = restAdapter5.log;
        retrofit.RestAdapter.Builder builder24 = builder3.setLog(log23);
        retrofit.Profiler profiler25 = builder24.profiler;
        retrofit.client.Client.Provider provider26 = builder24.clientProvider;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = null;
        builder29.converter = converter30;
        retrofit.client.Client.Provider provider32 = null;
        builder29.clientProvider = provider32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        builder29.requestInterceptor = requestInterceptor34;
        retrofit.Profiler profiler36 = builder29.profiler;
        retrofit.Profiler profiler37 = null;
        builder29.profiler = profiler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor41 = builder39.requestInterceptor;
        java.util.concurrent.Executor executor42 = builder39.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel43 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.Profiler profiler49 = null;
        builder48.profiler = profiler49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        builder48.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter restAdapter53 = builder48.build();
        retrofit.converter.Converter converter54 = null;
        builder48.converter = converter54;
        retrofit.client.Client.Provider provider56 = builder48.clientProvider;
        retrofit.RestAdapter.Builder builder57 = builder39.setClient(provider56);
        retrofit.RestAdapter.Builder builder58 = builder29.setClient(provider56);
        builder28.clientProvider = provider56;
        builder0.clientProvider = provider56;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder62 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test09266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09266");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.client.Client.Provider provider14 = null;
        builder11.clientProvider = provider14;
        retrofit.RestAdapter.Builder builder17 = builder11.setServer("hi!");
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder18.setLog(log23);
        retrofit.RestAdapter restAdapter25 = builder18.build();
        java.util.concurrent.Executor executor26 = restAdapter25.httpExecutor;
        builder17.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter29 = builder28.converter;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter30.requestInterceptor = requestInterceptor32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        restAdapter30.log = log42;
        retrofit.ErrorHandler errorHandler46 = null;
        restAdapter30.errorHandler = errorHandler46;
        retrofit.RestAdapter.Log log48 = restAdapter30.log;
        retrofit.RestAdapter.Builder builder49 = builder28.setLog(log48);
        retrofit.Profiler profiler50 = builder49.profiler;
        retrofit.Profiler profiler51 = builder49.profiler;
        java.util.concurrent.Executor executor52 = builder49.callbackExecutor;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.RestAdapter.Builder builder57 = builder53.setServer("hi!");
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder53.setLog(log58);
        retrofit.RestAdapter restAdapter60 = builder53.build();
        java.util.concurrent.Executor executor61 = restAdapter60.httpExecutor;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.client.Client.Provider provider65 = null;
        builder62.clientProvider = provider65;
        retrofit.RestAdapter.Builder builder68 = builder62.setServer("hi!");
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder69.setLog(log74);
        retrofit.RestAdapter restAdapter76 = builder69.build();
        java.util.concurrent.Executor executor77 = restAdapter76.httpExecutor;
        builder68.callbackExecutor = executor77;
        retrofit.RestAdapter.Builder builder79 = builder49.setExecutors(executor61, executor77);
        builder17.callbackExecutor = executor77;
        builder6.httpExecutor = executor77;
        retrofit.Profiler profiler82 = builder6.profiler;
        retrofit.Profiler profiler83 = builder6.profiler;
        java.util.concurrent.Executor executor84 = builder6.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(profiler51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(profiler82);
        org.junit.Assert.assertNull(profiler83);
        org.junit.Assert.assertNotNull(executor84);
    }

    @Test
    public void test09267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09267");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.Server server8 = null;
        restAdapter0.server = server8;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter0.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler13 = null;
        restAdapter0.profiler = profiler13;
        java.util.concurrent.Executor executor15 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(executor15);
    }

    @Test
    public void test09268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09268");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = null;
        restAdapter5.httpExecutor = executor6;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter5.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.Log log10 = restAdapter5.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter5.logLevel = logLevel11;
        restAdapter0.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter22 = builder21.converter;
        retrofit.RestAdapter.LogLevel logLevel23 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.RestAdapter.Log log45 = restAdapter27.log;
        retrofit.RestAdapter.Builder builder46 = builder25.setLog(log45);
        retrofit.RequestInterceptor requestInterceptor47 = builder25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = builder25.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder25.setServer("hi!");
        retrofit.Server server51 = builder25.server;
        retrofit.RestAdapter.Builder builder52 = builder20.setServer(server51);
        restAdapter0.server = server51;
        retrofit.client.Client.Provider provider54 = null;
        restAdapter0.clientProvider = provider54;
        retrofit.RequestInterceptor requestInterceptor56 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler57 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test09269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09269");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        retrofit.RestAdapter.Log log50 = restAdapter32.log;
        retrofit.RestAdapter.Builder builder51 = builder30.setLog(log50);
        retrofit.RequestInterceptor requestInterceptor52 = builder30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor53 = builder30.requestInterceptor;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter55 = null;
        builder54.converter = converter55;
        retrofit.client.Client.Provider provider57 = null;
        builder54.clientProvider = provider57;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        builder54.requestInterceptor = requestInterceptor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.Profiler profiler66 = null;
        builder65.profiler = profiler66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder74 = builder68.setLog(log73);
        retrofit.RestAdapter restAdapter75 = builder68.build();
        retrofit.converter.Converter converter76 = null;
        builder68.converter = converter76;
        retrofit.ErrorHandler errorHandler78 = null;
        builder68.errorHandler = errorHandler78;
        retrofit.RequestInterceptor requestInterceptor80 = builder68.requestInterceptor;
        builder65.requestInterceptor = requestInterceptor80;
        retrofit.RestAdapter.Builder builder82 = builder54.setRequestInterceptor(requestInterceptor80);
        retrofit.RestAdapter.Builder builder83 = builder30.setRequestInterceptor(requestInterceptor80);
        retrofit.RestAdapter.Builder builder84 = builder0.setRequestInterceptor(requestInterceptor80);
        retrofit.RestAdapter.Log log85 = builder84.log;
        log85.log("hi!");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(log85);
    }

    @Test
    public void test09270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09270");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter2.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter2.logLevel = logLevel4;
        retrofit.Profiler profiler6 = restAdapter2.profiler;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter2.new RestHandler();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.RestAdapter.LogLevel logLevel31 = builder29.logLevel;
        restAdapter2.logLevel = logLevel31;
        java.util.concurrent.Executor executor33 = restAdapter2.callbackExecutor;
        retrofit.Server server34 = restAdapter2.server;
        retrofit.RestAdapter.LogLevel logLevel35 = null;
        restAdapter2.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.Profiler profiler39 = null;
        builder37.profiler = profiler39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.client.Client.Provider provider44 = null;
        builder41.clientProvider = provider44;
        retrofit.RestAdapter.Builder builder47 = builder41.setServer("hi!");
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.RestAdapter restAdapter55 = builder48.build();
        java.util.concurrent.Executor executor56 = restAdapter55.httpExecutor;
        builder47.callbackExecutor = executor56;
        builder37.callbackExecutor = executor56;
        restAdapter2.httpExecutor = executor56;
        restAdapter0.callbackExecutor = executor56;
        retrofit.Profiler profiler61 = null;
        restAdapter0.profiler = profiler61;
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter0.requestInterceptor;
        java.lang.Throwable throwable64 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable64, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(requestInterceptor63);
    }

    @Test
    public void test09271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09271");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.RequestInterceptor requestInterceptor33 = builder11.requestInterceptor;
        java.util.concurrent.Executor executor34 = builder11.httpExecutor;
        retrofit.ErrorHandler errorHandler35 = builder11.errorHandler;
        retrofit.RestAdapter.Log log36 = builder11.log;
        retrofit.converter.Converter converter37 = builder11.converter;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter46 = builder45.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder44.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter50 = builder49.converter;
        retrofit.RestAdapter.LogLevel logLevel51 = builder49.logLevel;
        builder49.ensureSaneDefaults();
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter68.logLevel = logLevel70;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        restAdapter68.requestInterceptor = requestInterceptor72;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter68.logLevel = logLevel74;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log66, logLevel74);
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = null;
        builder77.httpExecutor = executor78;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("hi!");
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder83 = builder77.setLog(log82);
        restAdapter76.log = log82;
        builder49.log = log82;
        java.util.concurrent.Executor executor86 = null;
        builder49.httpExecutor = executor86;
        retrofit.converter.Converter converter88 = null;
        builder49.converter = converter88;
        retrofit.ErrorHandler errorHandler90 = builder49.errorHandler;
        retrofit.RestAdapter.Builder builder91 = builder44.setErrorHandler(errorHandler90);
        retrofit.Server server92 = builder91.server;
        retrofit.RestAdapter.Builder builder93 = builder11.setServer(server92);
        retrofit.RestAdapter.LogLevel logLevel94 = builder93.logLevel;
        restAdapter0.logLevel = logLevel94;
        retrofit.Server server96 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel97 = restAdapter0.getLogLevel();
        boolean boolean98 = logLevel97.log();
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(server92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server96);
        org.junit.Assert.assertTrue("'" + logLevel97 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel97.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test09272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09272");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter7.clientProvider = provider9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.Server server12 = restAdapter7.server;
        java.lang.Throwable throwable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter7.logException(throwable13, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(server12);
    }

    @Test
    public void test09273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09273");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter.LogLevel logLevel10 = builder8.logLevel;
        builder8.ensureSaneDefaults();
        retrofit.client.Client.Provider provider12 = null;
        builder8.clientProvider = provider12;
        retrofit.Profiler profiler14 = builder8.profiler;
        java.util.concurrent.Executor executor15 = builder8.httpExecutor;
        restAdapter0.callbackExecutor = executor15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        java.util.concurrent.Executor executor21 = restAdapter17.httpExecutor;
        java.util.concurrent.Executor executor22 = restAdapter17.httpExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.Profiler profiler28 = null;
        builder27.profiler = profiler28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        builder27.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter restAdapter32 = builder27.build();
        retrofit.converter.Converter converter33 = restAdapter32.converter;
        restAdapter17.converter = converter33;
        restAdapter0.converter = converter33;
        retrofit.ErrorHandler errorHandler36 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(converter33);
        org.junit.Assert.assertNull(errorHandler36);
    }

    @Test
    public void test09274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09274");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.Profiler profiler6 = null;
        restAdapter0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.RequestInterceptor requestInterceptor30 = builder8.requestInterceptor;
        java.util.concurrent.Executor executor31 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder32.setLog(log37);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter40 = builder39.converter;
        retrofit.RestAdapter.LogLevel logLevel41 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder42 = builder38.setLogLevel(logLevel41);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter44 = builder43.converter;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter45.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter45.requestInterceptor = requestInterceptor47;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel58);
        restAdapter45.log = log57;
        retrofit.ErrorHandler errorHandler61 = null;
        restAdapter45.errorHandler = errorHandler61;
        retrofit.RestAdapter.Log log63 = restAdapter45.log;
        retrofit.RestAdapter.Builder builder64 = builder43.setLog(log63);
        retrofit.RequestInterceptor requestInterceptor65 = builder43.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor66 = builder43.requestInterceptor;
        retrofit.RestAdapter.Builder builder68 = builder43.setServer("hi!");
        retrofit.Server server69 = builder43.server;
        retrofit.RestAdapter.Builder builder70 = builder38.setServer(server69);
        retrofit.RestAdapter.Builder builder71 = builder8.setServer(server69);
        java.util.concurrent.Executor executor72 = builder8.callbackExecutor;
        retrofit.RestAdapter.Log log73 = builder8.log;
        restAdapter0.log = log73;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(converter40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(server69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertNotNull(log73);
    }

    @Test
    public void test09275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09275");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel9 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.Profiler profiler15 = null;
        builder14.profiler = profiler15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder14.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter restAdapter19 = builder14.build();
        retrofit.converter.Converter converter20 = restAdapter19.converter;
        retrofit.RestAdapter.Log log21 = restAdapter19.log;
        builder0.log = log21;
        retrofit.RestAdapter restAdapter23 = builder0.build();
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.getUrl();
        java.util.List<retrofit.client.Header> headerList34 = request32.getHeaders();
        java.lang.String str35 = request32.getMethod();
        retrofit.mime.TypedOutput typedOutput36 = request32.getBody();
        java.util.List<retrofit.client.Header> headerList37 = request32.getHeaders();
        java.lang.String str38 = request32.getUrl();
        java.lang.String str39 = request32.getUrl();
        java.util.List<retrofit.client.Header> headerList40 = request32.getHeaders();
        java.util.List<retrofit.client.Header> headerList41 = request32.getHeaders();
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList41, typedOutput42);
        retrofit.client.Request request44 = restAdapter23.logAndReplaceRequest(request43);
        retrofit.client.Client.Provider provider45 = restAdapter23.clientProvider;
        retrofit.client.Client.Provider provider46 = restAdapter23.clientProvider;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(converter20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(typedOutput36);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(headerList40);
        org.junit.Assert.assertNotNull(headerList41);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNotNull(provider45);
        org.junit.Assert.assertNotNull(provider46);
    }

    @Test
    public void test09276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09276");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter19.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter19.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log17, logLevel25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        restAdapter27.log = log33;
        builder0.log = log33;
        retrofit.Server server37 = builder0.server;
        retrofit.Server server38 = builder0.server;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = builder39.build();
        java.util.concurrent.Executor executor47 = restAdapter46.httpExecutor;
        retrofit.client.Client.Provider provider48 = null;
        restAdapter46.clientProvider = provider48;
        retrofit.client.Client.Provider provider50 = null;
        restAdapter46.clientProvider = provider50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel68);
        builder52.logLevel = logLevel68;
        retrofit.converter.Converter converter71 = builder52.converter;
        retrofit.ErrorHandler errorHandler72 = builder52.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel73 = builder52.logLevel;
        boolean boolean74 = logLevel73.log();
        boolean boolean75 = logLevel73.log();
        restAdapter46.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder77 = builder0.setLogLevel(logLevel73);
        retrofit.RestAdapter.LogLevel logLevel78 = builder77.logLevel;
        retrofit.RestAdapter.LogLevel logLevel79 = builder77.logLevel;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter71);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test09277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09277");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter19.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter19.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log17, logLevel25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        restAdapter27.log = log33;
        builder0.log = log33;
        java.util.concurrent.Executor executor37 = null;
        builder0.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter40 = builder39.converter;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter41.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        restAdapter41.requestInterceptor = requestInterceptor43;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        restAdapter41.log = log53;
        retrofit.ErrorHandler errorHandler57 = null;
        restAdapter41.errorHandler = errorHandler57;
        retrofit.RestAdapter.Log log59 = restAdapter41.log;
        retrofit.RestAdapter.Builder builder60 = builder39.setLog(log59);
        retrofit.RestAdapter.Builder builder61 = builder0.setLog(log59);
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel71);
        retrofit.RestAdapter.Builder builder73 = builder0.setLogLevel(logLevel71);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter74 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(converter40);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test09278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09278");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.converter.Converter converter22 = builder0.converter;
        retrofit.RestAdapter.Log log23 = builder0.log;
        retrofit.ErrorHandler errorHandler24 = builder0.errorHandler;
        retrofit.RestAdapter.Log log25 = builder0.log;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.Profiler profiler28 = null;
        builder26.profiler = profiler28;
        retrofit.RestAdapter.Builder builder31 = builder26.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.client.Client.Provider provider36 = null;
        builder33.clientProvider = provider36;
        retrofit.client.Client.Provider provider38 = builder33.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.Profiler profiler46 = null;
        builder45.profiler = profiler46;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        builder45.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter restAdapter50 = builder45.build();
        retrofit.converter.Converter converter51 = restAdapter50.converter;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        log52.log("");
        restAdapter50.log = log52;
        retrofit.RestAdapter.Builder builder56 = builder33.setLog(log52);
        retrofit.RestAdapter.Builder builder57 = builder31.setLog(log52);
        retrofit.Server server58 = builder31.server;
        builder0.server = server58;
        retrofit.RestAdapter.Log log60 = builder0.log;
        log60.log("");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(converter51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(server58);
        org.junit.Assert.assertNotNull(log60);
    }

    @Test
    public void test09279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09279");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor26);
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.Profiler profiler37 = null;
        builder36.profiler = profiler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = builder39.build();
        retrofit.converter.Converter converter47 = null;
        builder39.converter = converter47;
        retrofit.ErrorHandler errorHandler49 = null;
        builder39.errorHandler = errorHandler49;
        retrofit.RequestInterceptor requestInterceptor51 = builder39.requestInterceptor;
        builder36.requestInterceptor = requestInterceptor51;
        builder31.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.Log log54 = builder31.log;
        retrofit.ErrorHandler errorHandler55 = builder31.errorHandler;
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(errorHandler55);
    }

    @Test
    public void test09280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09280");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = null;
        restAdapter29.httpExecutor = executor30;
        retrofit.Profiler profiler32 = null;
        restAdapter29.profiler = profiler32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter29.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = builder36.converter;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter38.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        restAdapter38.requestInterceptor = requestInterceptor40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        restAdapter38.log = log50;
        retrofit.ErrorHandler errorHandler54 = null;
        restAdapter38.errorHandler = errorHandler54;
        retrofit.RestAdapter.Log log56 = restAdapter38.log;
        retrofit.RestAdapter.Builder builder57 = builder36.setLog(log56);
        retrofit.RequestInterceptor requestInterceptor58 = builder36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = builder36.requestInterceptor;
        retrofit.RestAdapter.Builder builder61 = builder36.setServer("hi!");
        retrofit.Server server62 = builder36.server;
        restAdapter29.server = server62;
        retrofit.RestAdapter.Builder builder64 = builder28.setServer(server62);
        retrofit.RestAdapter.Log log65 = builder28.log;
        retrofit.ErrorHandler errorHandler66 = builder28.errorHandler;
        retrofit.RestAdapter.Log log67 = builder28.log;
        retrofit.Profiler profiler68 = builder28.profiler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNull(profiler68);
    }

    @Test
    public void test09281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09281");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.converter.Converter converter9 = null;
        builder0.converter = converter9;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter11.logLevel = logLevel13;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.setLogLevel(logLevel15);
        java.util.concurrent.Executor executor17 = restAdapter11.httpExecutor;
        retrofit.Server server18 = null;
        restAdapter11.server = server18;
        retrofit.Profiler profiler20 = restAdapter11.profiler;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter21.logLevel;
        retrofit.converter.Converter converter24 = null;
        restAdapter21.converter = converter24;
        retrofit.ErrorHandler errorHandler26 = restAdapter21.errorHandler;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log28 = restAdapter27.log;
        retrofit.ErrorHandler errorHandler29 = restAdapter27.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter restAdapter45 = builder38.build();
        retrofit.converter.Converter converter46 = null;
        builder38.converter = converter46;
        retrofit.ErrorHandler errorHandler48 = null;
        builder38.errorHandler = errorHandler48;
        retrofit.RequestInterceptor requestInterceptor50 = builder38.requestInterceptor;
        builder35.requestInterceptor = requestInterceptor50;
        restAdapter27.requestInterceptor = requestInterceptor50;
        restAdapter21.requestInterceptor = requestInterceptor50;
        restAdapter11.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.Builder builder55 = builder0.setRequestInterceptor(requestInterceptor50);
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test09282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09282");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder9.logLevel = logLevel14;
        retrofit.converter.Converter converter16 = null;
        builder9.converter = converter16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter19 = builder18.converter;
        retrofit.Profiler profiler20 = null;
        builder18.profiler = profiler20;
        retrofit.RestAdapter.Builder builder23 = builder18.setServer("Retrofit-Idle");
        retrofit.Profiler profiler24 = builder23.profiler;
        retrofit.Server server25 = builder23.server;
        retrofit.RestAdapter.Builder builder26 = builder9.setServer(server25);
        retrofit.RestAdapter.Builder builder27 = builder0.setServer(server25);
        java.util.concurrent.Executor executor28 = builder27.httpExecutor;
        retrofit.RestAdapter restAdapter29 = builder27.build();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.client.Client.Provider provider33 = null;
        builder30.clientProvider = provider33;
        retrofit.RestAdapter.Builder builder36 = builder30.setServer("hi!");
        retrofit.Profiler profiler37 = builder30.profiler;
        retrofit.RestAdapter restAdapter38 = builder30.build();
        retrofit.converter.Converter converter39 = restAdapter38.converter;
        retrofit.Server server40 = restAdapter38.server;
        retrofit.RestAdapter.Builder builder41 = builder27.setServer(server40);
        retrofit.Profiler profiler42 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder43 = builder27.setProfiler(profiler42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(converter39);
        org.junit.Assert.assertNotNull(server40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test09283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09283");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.Profiler profiler31 = builder29.profiler;
        java.util.concurrent.Executor executor32 = builder29.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        java.util.concurrent.Executor executor41 = restAdapter40.httpExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.RestAdapter.Builder builder48 = builder42.setServer("hi!");
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        java.util.concurrent.Executor executor57 = restAdapter56.httpExecutor;
        builder48.callbackExecutor = executor57;
        retrofit.RestAdapter.Builder builder59 = builder29.setExecutors(executor41, executor57);
        restAdapter7.httpExecutor = executor41;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter7.logLevel = logLevel70;
        retrofit.ErrorHandler errorHandler73 = restAdapter7.errorHandler;
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter7.getLogLevel();
        retrofit.Server server76 = restAdapter7.server;
        java.util.concurrent.Executor executor77 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter7.new RestHandler();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler73);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNotNull(executor77);
    }

    @Test
    public void test09284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09284");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log8 = restAdapter7.log;
        retrofit.ErrorHandler errorHandler9 = restAdapter7.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.Profiler profiler16 = null;
        builder15.profiler = profiler16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder18.setLog(log23);
        retrofit.RestAdapter restAdapter25 = builder18.build();
        retrofit.converter.Converter converter26 = null;
        builder18.converter = converter26;
        retrofit.ErrorHandler errorHandler28 = null;
        builder18.errorHandler = errorHandler28;
        retrofit.RequestInterceptor requestInterceptor30 = builder18.requestInterceptor;
        builder15.requestInterceptor = requestInterceptor30;
        restAdapter7.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.Builder builder33 = builder4.setRequestInterceptor(requestInterceptor30);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = builder34.converter;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter36.requestInterceptor = requestInterceptor38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        restAdapter36.log = log48;
        retrofit.ErrorHandler errorHandler52 = null;
        restAdapter36.errorHandler = errorHandler52;
        retrofit.RestAdapter.Log log54 = restAdapter36.log;
        retrofit.RestAdapter.Builder builder55 = builder34.setLog(log54);
        retrofit.Profiler profiler56 = builder55.profiler;
        retrofit.Profiler profiler57 = builder55.profiler;
        java.util.concurrent.Executor executor58 = builder55.callbackExecutor;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.client.Client.Provider provider64 = builder63.clientProvider;
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        log66.log("");
        builder63.log = log66;
        retrofit.Server server70 = builder63.server;
        builder55.server = server70;
        retrofit.RestAdapter.Builder builder72 = builder33.setServer(server70);
        java.util.concurrent.Executor executor73 = builder33.callbackExecutor;
        retrofit.RestAdapter.Builder builder75 = builder33.setServer("hi!");
        retrofit.converter.Converter converter76 = builder33.converter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(server70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(converter76);
    }

    @Test
    public void test09285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09285");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("hi!", "", headerList19, typedOutput20);
        java.lang.String str22 = request21.getMethod();
        java.util.List<retrofit.client.Header> headerList23 = request21.getHeaders();
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList23, typedOutput24);
        java.util.List<retrofit.client.Header> headerList26 = request25.getHeaders();
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList26, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", headerList26, typedOutput29);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(headerList26);
    }

    @Test
    public void test09286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09286");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder5.logLevel = logLevel10;
        retrofit.converter.Converter converter12 = null;
        builder5.converter = converter12;
        retrofit.client.Client.Provider provider14 = null;
        builder5.clientProvider = provider14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        restAdapter18.log = log30;
        retrofit.ErrorHandler errorHandler34 = null;
        restAdapter18.errorHandler = errorHandler34;
        retrofit.RestAdapter.Log log36 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder37 = builder16.setLog(log36);
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = builder39.build();
        java.util.concurrent.Executor executor47 = restAdapter46.httpExecutor;
        builder16.callbackExecutor = executor47;
        builder5.httpExecutor = executor47;
        restAdapter0.httpExecutor = executor47;
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor52 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(logLevel53);
    }

    @Test
    public void test09287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09287");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log7 = restAdapter6.log;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter6.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.LogLevel logLevel10 = null;
        restAdapter6.logLevel = logLevel10;
        retrofit.ErrorHandler errorHandler12 = restAdapter6.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.Profiler profiler18 = null;
        builder17.profiler = profiler18;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder17.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = builder17.build();
        retrofit.converter.Converter converter23 = restAdapter22.converter;
        restAdapter6.converter = converter23;
        retrofit.client.Client.Provider provider25 = restAdapter6.clientProvider;
        retrofit.RestAdapter.Log log26 = restAdapter6.log;
        retrofit.ErrorHandler errorHandler27 = restAdapter6.errorHandler;
        retrofit.Server server28 = restAdapter6.server;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = null;
        restAdapter29.httpExecutor = executor30;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        builder33.logLevel = logLevel49;
        java.util.concurrent.Executor executor52 = builder33.httpExecutor;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.client.Client.Provider provider56 = null;
        builder53.clientProvider = provider56;
        retrofit.client.Client.Provider provider58 = builder53.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel59);
        builder33.logLevel = logLevel59;
        restAdapter29.logLevel = logLevel59;
        restAdapter6.logLevel = logLevel59;
        builder0.logLevel = logLevel59;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(converter23);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test09288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09288");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        builder25.logLevel = logLevel41;
        retrofit.converter.Converter converter44 = builder25.converter;
        retrofit.ErrorHandler errorHandler45 = builder25.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel46 = builder25.logLevel;
        retrofit.Server server47 = builder25.server;
        retrofit.RestAdapter.Builder builder48 = builder21.setServer(server47);
        retrofit.converter.Converter converter49 = null;
        builder48.converter = converter49;
        retrofit.RestAdapter restAdapter51 = builder48.build();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter51);
    }

    @Test
    public void test09289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09289");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.httpExecutor = executor9;
        retrofit.converter.Converter converter11 = restAdapter0.converter;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter12.logLevel = logLevel14;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter12.logLevel;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = null;
        restAdapter17.httpExecutor = executor18;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter17.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter22.logLevel;
        retrofit.converter.Converter converter25 = null;
        restAdapter22.converter = converter25;
        retrofit.ErrorHandler errorHandler27 = restAdapter22.errorHandler;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter29 = null;
        builder28.converter = converter29;
        retrofit.client.Client.Provider provider31 = null;
        builder28.clientProvider = provider31;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        builder28.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.Profiler profiler40 = null;
        builder39.profiler = profiler40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder48 = builder42.setLog(log47);
        retrofit.RestAdapter restAdapter49 = builder42.build();
        retrofit.converter.Converter converter50 = null;
        builder42.converter = converter50;
        retrofit.ErrorHandler errorHandler52 = null;
        builder42.errorHandler = errorHandler52;
        retrofit.RequestInterceptor requestInterceptor54 = builder42.requestInterceptor;
        builder39.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter.Builder builder56 = builder28.setRequestInterceptor(requestInterceptor54);
        restAdapter22.requestInterceptor = requestInterceptor54;
        restAdapter17.requestInterceptor = requestInterceptor54;
        java.util.concurrent.Executor executor59 = restAdapter17.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor60 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor61 = restAdapter17.requestInterceptor;
        restAdapter12.requestInterceptor = requestInterceptor61;
        restAdapter0.requestInterceptor = requestInterceptor61;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(requestInterceptor61);
    }

    @Test
    public void test09290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09290");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        retrofit.RestAdapter.Builder builder21 = builder8.setLogLevel(logLevel19);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log23 = restAdapter22.log;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor26 = builder24.requestInterceptor;
        retrofit.ErrorHandler errorHandler27 = null;
        builder24.errorHandler = errorHandler27;
        retrofit.converter.Converter converter29 = null;
        builder24.converter = converter29;
        retrofit.ErrorHandler errorHandler31 = null;
        builder24.errorHandler = errorHandler31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.Profiler profiler38 = null;
        builder37.profiler = profiler38;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        builder37.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter restAdapter42 = builder37.build();
        retrofit.converter.Converter converter43 = restAdapter42.converter;
        retrofit.RestAdapter.Builder builder44 = builder24.setConverter(converter43);
        restAdapter22.converter = converter43;
        builder8.converter = converter43;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.setLogLevel(logLevel51);
        java.util.concurrent.Executor executor53 = restAdapter47.httpExecutor;
        retrofit.Server server54 = null;
        restAdapter47.server = server54;
        retrofit.Profiler profiler56 = restAdapter47.profiler;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter57.logLevel;
        retrofit.converter.Converter converter60 = null;
        restAdapter57.converter = converter60;
        retrofit.ErrorHandler errorHandler62 = restAdapter57.errorHandler;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log64 = restAdapter63.log;
        retrofit.ErrorHandler errorHandler65 = restAdapter63.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter63.new RestHandler();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.Profiler profiler72 = null;
        builder71.profiler = profiler72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder74.setLog(log79);
        retrofit.RestAdapter restAdapter81 = builder74.build();
        retrofit.converter.Converter converter82 = null;
        builder74.converter = converter82;
        retrofit.ErrorHandler errorHandler84 = null;
        builder74.errorHandler = errorHandler84;
        retrofit.RequestInterceptor requestInterceptor86 = builder74.requestInterceptor;
        builder71.requestInterceptor = requestInterceptor86;
        restAdapter63.requestInterceptor = requestInterceptor86;
        restAdapter57.requestInterceptor = requestInterceptor86;
        restAdapter47.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter.Builder builder91 = builder8.setRequestInterceptor(requestInterceptor86);
        retrofit.RequestInterceptor requestInterceptor92 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder93 = builder7.setRequestInterceptor(requestInterceptor92);
        retrofit.RestAdapter.Log log94 = builder7.log;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(converter43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNull(log94);
    }

    @Test
    public void test09291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09291");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.converter.Converter converter10 = restAdapter7.converter;
        retrofit.client.Client.Provider provider11 = null;
        restAdapter7.clientProvider = provider11;
        retrofit.Profiler profiler13 = restAdapter7.profiler;
        retrofit.RestAdapter.Log log14 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = null;
        builder15.converter = converter16;
        retrofit.client.Client.Provider provider18 = null;
        builder15.clientProvider = provider18;
        java.util.concurrent.Executor executor20 = builder15.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        builder15.requestInterceptor = requestInterceptor21;
        retrofit.ErrorHandler errorHandler23 = builder15.errorHandler;
        retrofit.Server server24 = builder15.server;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log26 = restAdapter25.log;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.Profiler profiler28 = restAdapter25.profiler;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        java.util.concurrent.Executor executor31 = restAdapter29.callbackExecutor;
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        java.util.concurrent.Executor executor33 = restAdapter29.httpExecutor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log35 = restAdapter34.log;
        retrofit.ErrorHandler errorHandler36 = restAdapter34.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.Profiler profiler43 = null;
        builder42.profiler = profiler43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter restAdapter52 = builder45.build();
        retrofit.converter.Converter converter53 = null;
        builder45.converter = converter53;
        retrofit.ErrorHandler errorHandler55 = null;
        builder45.errorHandler = errorHandler55;
        retrofit.RequestInterceptor requestInterceptor57 = builder45.requestInterceptor;
        builder42.requestInterceptor = requestInterceptor57;
        restAdapter34.requestInterceptor = requestInterceptor57;
        retrofit.RequestInterceptor requestInterceptor60 = restAdapter34.requestInterceptor;
        restAdapter29.requestInterceptor = requestInterceptor60;
        restAdapter25.requestInterceptor = requestInterceptor60;
        builder15.requestInterceptor = requestInterceptor60;
        retrofit.RequestInterceptor requestInterceptor64 = builder15.requestInterceptor;
        restAdapter7.requestInterceptor = requestInterceptor64;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNotNull(converter10);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(requestInterceptor64);
    }

    @Test
    public void test09292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09292");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", headerList16, typedOutput17);
        java.lang.String str19 = request18.getMethod();
        retrofit.mime.TypedOutput typedOutput20 = request18.getBody();
        java.util.List<retrofit.client.Header> headerList21 = request18.getHeaders();
        java.util.List<retrofit.client.Header> headerList22 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", headerList22, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "hi!", headerList22, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList22, typedOutput27);
        java.util.List<retrofit.client.Header> headerList29 = request28.getHeaders();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertNotNull(headerList29);
    }

    @Test
    public void test09293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09293");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = null;
        builder6.converter = converter7;
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder6.requestInterceptor = requestInterceptor11;
        retrofit.Profiler profiler13 = builder6.profiler;
        retrofit.Profiler profiler14 = null;
        builder6.profiler = profiler14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor18 = builder16.requestInterceptor;
        java.util.concurrent.Executor executor19 = builder16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel20 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.Profiler profiler26 = null;
        builder25.profiler = profiler26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder25.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter restAdapter30 = builder25.build();
        retrofit.converter.Converter converter31 = null;
        builder25.converter = converter31;
        retrofit.client.Client.Provider provider33 = builder25.clientProvider;
        retrofit.RestAdapter.Builder builder34 = builder16.setClient(provider33);
        retrofit.RestAdapter.Builder builder35 = builder6.setClient(provider33);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = builder36.converter;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter38.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        restAdapter38.requestInterceptor = requestInterceptor40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        restAdapter38.log = log50;
        retrofit.ErrorHandler errorHandler54 = null;
        restAdapter38.errorHandler = errorHandler54;
        retrofit.RestAdapter.Log log56 = restAdapter38.log;
        retrofit.RestAdapter.Builder builder57 = builder36.setLog(log56);
        retrofit.RequestInterceptor requestInterceptor58 = builder36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = builder36.requestInterceptor;
        retrofit.RestAdapter.Builder builder61 = builder36.setServer("hi!");
        java.util.concurrent.Executor executor62 = builder61.httpExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log64 = restAdapter63.log;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.Profiler profiler66 = restAdapter63.profiler;
        retrofit.Profiler profiler67 = null;
        restAdapter63.profiler = profiler67;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        restAdapter63.log = log77;
        log77.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder83 = builder61.setLog(log77);
        builder6.log = log77;
        restAdapter0.log = log77;
        retrofit.ErrorHandler errorHandler86 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Log log87 = restAdapter0.log;
        retrofit.converter.Converter converter88 = restAdapter0.converter;
        retrofit.RequestInterceptor requestInterceptor89 = restAdapter0.requestInterceptor;
        retrofit.Server server90 = restAdapter0.server;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(provider33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(profiler66);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(errorHandler86);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNull(converter88);
        org.junit.Assert.assertNull(requestInterceptor89);
        org.junit.Assert.assertNull(server90);
    }

    @Test
    public void test09294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09294");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Log log25 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder26 = builder5.setLog(log25);
        restAdapter0.log = log25;
        retrofit.Profiler profiler28 = null;
        restAdapter0.profiler = profiler28;
        retrofit.converter.Converter converter30 = null;
        restAdapter0.converter = converter30;
        java.util.concurrent.Executor executor32 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        java.util.concurrent.Executor executor37 = restAdapter33.httpExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log39 = restAdapter38.log;
        retrofit.ErrorHandler errorHandler40 = restAdapter38.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        retrofit.Profiler profiler47 = null;
        builder46.profiler = profiler47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        retrofit.converter.Converter converter57 = null;
        builder49.converter = converter57;
        retrofit.ErrorHandler errorHandler59 = null;
        builder49.errorHandler = errorHandler59;
        retrofit.RequestInterceptor requestInterceptor61 = builder49.requestInterceptor;
        builder46.requestInterceptor = requestInterceptor61;
        restAdapter38.requestInterceptor = requestInterceptor61;
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter38.requestInterceptor;
        restAdapter33.requestInterceptor = requestInterceptor64;
        restAdapter0.requestInterceptor = requestInterceptor64;
        java.util.concurrent.Executor executor67 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler68 = null;
        restAdapter0.profiler = profiler68;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNull(executor67);
    }

    @Test
    public void test09295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09295");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = builder31.callbackExecutor;
        retrofit.RestAdapter.Log log33 = builder31.log;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.setLogLevel(logLevel57);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log50, logLevel57);
        retrofit.RestAdapter.Builder builder60 = builder31.setLogLevel(logLevel57);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter61.setLogLevel(logLevel65);
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter61.getLogLevel();
        builder60.logLevel = logLevel67;
        retrofit.RestAdapter.Builder builder69 = builder29.setLogLevel(logLevel67);
        retrofit.RestAdapter.LogLevel logLevel70 = builder29.logLevel;
        retrofit.RequestInterceptor requestInterceptor71 = builder29.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor71);
    }

    @Test
    public void test09296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09296");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.client.Client.Provider provider30 = builder29.clientProvider;
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        log32.log("");
        builder29.log = log32;
        retrofit.Server server36 = builder29.server;
        builder21.server = server36;
        java.util.concurrent.Executor executor38 = builder21.httpExecutor;
        retrofit.Server server39 = builder21.server;
        retrofit.converter.Converter converter40 = builder21.converter;
        retrofit.converter.Converter converter41 = null;
        builder21.converter = converter41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter43.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder51 = builder21.setLogLevel(logLevel50);
        builder51.ensureSaneDefaults();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNotNull(server39);
        org.junit.Assert.assertNull(converter40);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test09297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09297");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.Profiler profiler17 = restAdapter14.profiler;
        retrofit.Profiler profiler18 = null;
        restAdapter14.profiler = profiler18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter14.log = log28;
        restAdapter7.log = log28;
        retrofit.RestAdapter.Builder builder33 = builder0.setLog(log28);
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter.Builder builder36 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        java.util.concurrent.Executor executor42 = null;
        builder37.httpExecutor = executor42;
        retrofit.ErrorHandler errorHandler44 = builder37.errorHandler;
        java.util.concurrent.Executor executor45 = builder37.callbackExecutor;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder46.logLevel = logLevel51;
        retrofit.converter.Converter converter53 = null;
        builder46.converter = converter53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter56 = builder55.converter;
        retrofit.Profiler profiler57 = null;
        builder55.profiler = profiler57;
        retrofit.RestAdapter.Builder builder60 = builder55.setServer("Retrofit-Idle");
        retrofit.Profiler profiler61 = builder60.profiler;
        retrofit.Server server62 = builder60.server;
        retrofit.RestAdapter.Builder builder63 = builder46.setServer(server62);
        retrofit.RestAdapter.Builder builder64 = builder37.setServer(server62);
        java.util.concurrent.Executor executor65 = builder64.httpExecutor;
        retrofit.RestAdapter restAdapter66 = builder64.build();
        retrofit.RestAdapter restAdapter67 = builder64.build();
        retrofit.Server server68 = builder64.server;
        builder33.server = server68;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(profiler61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(server68);
    }

    @Test
    public void test09298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09298");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Server server22 = null;
        builder0.server = server22;
        retrofit.Profiler profiler24 = null;
        builder0.profiler = profiler24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = builder26.callbackExecutor;
        retrofit.RestAdapter.Log log28 = builder26.log;
        retrofit.Server server29 = builder26.server;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log31 = restAdapter30.log;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = builder32.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor34 = builder32.requestInterceptor;
        retrofit.ErrorHandler errorHandler35 = null;
        builder32.errorHandler = errorHandler35;
        retrofit.converter.Converter converter37 = null;
        builder32.converter = converter37;
        retrofit.ErrorHandler errorHandler39 = null;
        builder32.errorHandler = errorHandler39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.Profiler profiler46 = null;
        builder45.profiler = profiler46;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        builder45.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter restAdapter50 = builder45.build();
        retrofit.converter.Converter converter51 = restAdapter50.converter;
        retrofit.RestAdapter.Builder builder52 = builder32.setConverter(converter51);
        restAdapter30.converter = converter51;
        retrofit.RestAdapter.Builder builder54 = builder26.setConverter(converter51);
        builder0.converter = converter51;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter57 = builder56.converter;
        retrofit.RestAdapter.LogLevel logLevel58 = builder56.logLevel;
        builder56.ensureSaneDefaults();
        retrofit.client.Client.Provider provider60 = null;
        builder56.clientProvider = provider60;
        retrofit.ErrorHandler errorHandler62 = builder56.errorHandler;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter63.requestInterceptor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.ErrorHandler errorHandler66 = restAdapter63.errorHandler;
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder75.setLog(log80);
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter82.logLevel = logLevel84;
        retrofit.RequestInterceptor requestInterceptor86 = null;
        restAdapter82.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter82.logLevel = logLevel88;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log80, logLevel88);
        log80.log("Retrofit-Idle");
        restAdapter63.log = log80;
        retrofit.RestAdapter.Builder builder94 = builder56.setLog(log80);
        retrofit.RestAdapter.Builder builder95 = builder0.setLog(log80);
        retrofit.Profiler profiler96 = null;
        builder95.profiler = profiler96;
        retrofit.Profiler profiler98 = builder95.profiler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(converter51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(logLevel83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNull(profiler98);
    }

    @Test
    public void test09299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09299");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.converter.Converter converter10 = null;
        builder4.converter = converter10;
        retrofit.Profiler profiler12 = null;
        builder4.profiler = profiler12;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder16.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter.LogLevel logLevel25 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder22.setLogLevel(logLevel25);
        java.util.concurrent.Executor executor27 = builder22.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        java.util.concurrent.Executor executor33 = null;
        builder28.httpExecutor = executor33;
        retrofit.ErrorHandler errorHandler35 = builder28.errorHandler;
        java.util.concurrent.Executor executor36 = builder28.callbackExecutor;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder37.logLevel = logLevel42;
        retrofit.converter.Converter converter44 = null;
        builder37.converter = converter44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter47 = builder46.converter;
        retrofit.Profiler profiler48 = null;
        builder46.profiler = profiler48;
        retrofit.RestAdapter.Builder builder51 = builder46.setServer("Retrofit-Idle");
        retrofit.Profiler profiler52 = builder51.profiler;
        retrofit.Server server53 = builder51.server;
        retrofit.RestAdapter.Builder builder54 = builder37.setServer(server53);
        retrofit.RestAdapter.Builder builder55 = builder28.setServer(server53);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = builder56.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor58 = builder56.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = builder56.requestInterceptor;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.Profiler profiler65 = null;
        builder64.profiler = profiler65;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        builder64.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter restAdapter69 = builder64.build();
        retrofit.client.Client.Provider provider70 = builder64.clientProvider;
        builder56.clientProvider = provider70;
        builder28.clientProvider = provider70;
        builder22.clientProvider = provider70;
        retrofit.RestAdapter.Builder builder74 = builder4.setClient(provider70);
        retrofit.Profiler profiler75 = null;
        builder4.profiler = profiler75;
        retrofit.Profiler profiler77 = builder4.profiler;
        retrofit.Profiler profiler78 = null;
        builder4.profiler = profiler78;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(provider70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(profiler77);
    }

    @Test
    public void test09300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09300");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter10.logLevel;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.client.Client.Provider provider20 = builder19.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean22 = logLevel21.log();
        builder19.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.converter.Converter converter28 = null;
        restAdapter25.converter = converter28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        retrofit.RestAdapter.Log log50 = restAdapter32.log;
        retrofit.RestAdapter.Builder builder51 = builder30.setLog(log50);
        restAdapter25.log = log50;
        retrofit.RestAdapter.Builder builder53 = builder19.setLog(log50);
        retrofit.RequestInterceptor requestInterceptor54 = null;
        builder53.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.Profiler profiler61 = null;
        builder60.profiler = profiler61;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder60.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = builder65.callbackExecutor;
        retrofit.RestAdapter.Log log67 = builder65.log;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.Server server76 = null;
        retrofit.client.Client.Provider provider77 = null;
        java.util.concurrent.Executor executor78 = null;
        java.util.concurrent.Executor executor79 = null;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        retrofit.converter.Converter converter81 = null;
        retrofit.Profiler profiler82 = null;
        retrofit.ErrorHandler errorHandler83 = null;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server76, provider77, executor78, executor79, requestInterceptor80, converter81, profiler82, errorHandler83, log84, logLevel85);
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel88 = restAdapter87.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter87.logLevel = logLevel89;
        retrofit.RestAdapter.LogLevel logLevel91 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter87.setLogLevel(logLevel91);
        retrofit.RestAdapter restAdapter93 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log84, logLevel91);
        retrofit.RestAdapter.Builder builder94 = builder65.setLogLevel(logLevel91);
        builder60.logLevel = logLevel91;
        builder53.logLevel = logLevel91;
        restAdapter10.logLevel = logLevel91;
        boolean boolean98 = logLevel91.log();
        builder0.logLevel = logLevel91;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(log67);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test09301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09301");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Log log25 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder26 = builder5.setLog(log25);
        retrofit.Server server27 = null;
        builder5.server = server27;
        retrofit.Profiler profiler29 = null;
        builder5.profiler = profiler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = builder31.callbackExecutor;
        retrofit.RestAdapter.Log log33 = builder31.log;
        retrofit.Server server34 = builder31.server;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log36 = restAdapter35.log;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor39 = builder37.requestInterceptor;
        retrofit.ErrorHandler errorHandler40 = null;
        builder37.errorHandler = errorHandler40;
        retrofit.converter.Converter converter42 = null;
        builder37.converter = converter42;
        retrofit.ErrorHandler errorHandler44 = null;
        builder37.errorHandler = errorHandler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.Profiler profiler51 = null;
        builder50.profiler = profiler51;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        builder50.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter restAdapter55 = builder50.build();
        retrofit.converter.Converter converter56 = restAdapter55.converter;
        retrofit.RestAdapter.Builder builder57 = builder37.setConverter(converter56);
        restAdapter35.converter = converter56;
        retrofit.RestAdapter.Builder builder59 = builder31.setConverter(converter56);
        builder5.converter = converter56;
        retrofit.RestAdapter.Builder builder61 = builder0.setConverter(converter56);
        retrofit.ErrorHandler errorHandler62 = builder61.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(converter56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(errorHandler62);
    }

    @Test
    public void test09302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09302");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter.LogLevel logLevel33 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter37.requestInterceptor = requestInterceptor39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter37.log = log49;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter37.errorHandler = errorHandler53;
        retrofit.RestAdapter.Log log55 = restAdapter37.log;
        retrofit.RestAdapter.Builder builder56 = builder35.setLog(log55);
        retrofit.RequestInterceptor requestInterceptor57 = builder35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor58 = builder35.requestInterceptor;
        retrofit.RestAdapter.Builder builder60 = builder35.setServer("hi!");
        retrofit.Server server61 = builder35.server;
        retrofit.RestAdapter.Builder builder62 = builder30.setServer(server61);
        retrofit.RestAdapter.Builder builder63 = builder0.setServer(server61);
        retrofit.Profiler profiler64 = builder0.profiler;
        java.util.concurrent.Executor executor65 = builder0.httpExecutor;
        builder0.ensureSaneDefaults();
        retrofit.Server server67 = builder0.server;
        retrofit.Profiler profiler68 = null;
        builder0.profiler = profiler68;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(profiler64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(server67);
    }

    @Test
    public void test09303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09303");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter14.logLevel = logLevel16;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.setLogLevel(logLevel18);
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter14.getLogLevel();
        builder13.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter23 = builder22.converter;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter24.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter24.requestInterceptor = requestInterceptor26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        restAdapter24.log = log36;
        retrofit.ErrorHandler errorHandler40 = null;
        restAdapter24.errorHandler = errorHandler40;
        retrofit.RestAdapter.Log log42 = restAdapter24.log;
        retrofit.RestAdapter.Builder builder43 = builder22.setLog(log42);
        builder13.log = log42;
        retrofit.Profiler profiler45 = null;
        builder13.profiler = profiler45;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test09304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09304");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.converter.Converter converter11 = builder6.converter;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter12.requestInterceptor;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        java.util.concurrent.Executor executor16 = restAdapter12.httpExecutor;
        retrofit.converter.Converter converter17 = restAdapter12.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.logLevel;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.client.Client.Provider provider24 = builder23.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        builder23.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter28 = builder23.build();
        retrofit.ErrorHandler errorHandler29 = builder23.errorHandler;
        restAdapter12.errorHandler = errorHandler29;
        retrofit.RestAdapter.Builder builder31 = builder6.setErrorHandler(errorHandler29);
        retrofit.RequestInterceptor requestInterceptor32 = builder31.requestInterceptor;
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("Retrofit-Idle");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test09305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09305");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder16 = builder10.setLog(log15);
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter17.logLevel;
        retrofit.converter.Converter converter20 = null;
        restAdapter17.converter = converter20;
        retrofit.ErrorHandler errorHandler22 = restAdapter17.errorHandler;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = null;
        builder23.converter = converter24;
        retrofit.client.Client.Provider provider26 = null;
        builder23.clientProvider = provider26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder23.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.Profiler profiler35 = null;
        builder34.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder37.setLog(log42);
        retrofit.RestAdapter restAdapter44 = builder37.build();
        retrofit.converter.Converter converter45 = null;
        builder37.converter = converter45;
        retrofit.ErrorHandler errorHandler47 = null;
        builder37.errorHandler = errorHandler47;
        retrofit.RequestInterceptor requestInterceptor49 = builder37.requestInterceptor;
        builder34.requestInterceptor = requestInterceptor49;
        retrofit.RestAdapter.Builder builder51 = builder23.setRequestInterceptor(requestInterceptor49);
        restAdapter17.requestInterceptor = requestInterceptor49;
        builder10.requestInterceptor = requestInterceptor49;
        retrofit.RequestInterceptor requestInterceptor54 = builder10.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler58 = restAdapter0.profiler;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(requestInterceptor54);
        org.junit.Assert.assertNull(profiler58);
    }

    @Test
    public void test09306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09306");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.RequestInterceptor requestInterceptor30 = builder8.requestInterceptor;
        java.util.concurrent.Executor executor31 = builder8.httpExecutor;
        retrofit.ErrorHandler errorHandler32 = builder8.errorHandler;
        retrofit.RestAdapter.Log log33 = builder8.log;
        retrofit.RestAdapter.Builder builder34 = builder0.setLog(log33);
        retrofit.RequestInterceptor requestInterceptor35 = builder34.requestInterceptor;
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(requestInterceptor35);
    }

    @Test
    public void test09307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09307");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.converter.Converter converter10 = null;
        builder4.converter = converter10;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter12.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter12.getLogLevel();
        retrofit.client.Client.Provider provider17 = null;
        restAdapter12.clientProvider = provider17;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter12.logLevel;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter20.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter20.requestInterceptor = requestInterceptor24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter20.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter29 = builder28.converter;
        retrofit.Profiler profiler30 = null;
        builder28.profiler = profiler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.client.Client.Provider provider35 = null;
        builder32.clientProvider = provider35;
        retrofit.RestAdapter.Builder builder38 = builder32.setServer("hi!");
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = builder39.build();
        java.util.concurrent.Executor executor47 = restAdapter46.httpExecutor;
        builder38.callbackExecutor = executor47;
        builder28.callbackExecutor = executor47;
        restAdapter20.httpExecutor = executor47;
        restAdapter12.callbackExecutor = executor47;
        builder4.callbackExecutor = executor47;
        builder4.ensureSaneDefaults();
        retrofit.Server server54 = builder4.server;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.client.Client.Provider provider58 = null;
        builder55.clientProvider = provider58;
        retrofit.client.Client.Provider provider60 = builder55.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder62 = builder55.setLogLevel(logLevel61);
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder62.requestInterceptor = requestInterceptor63;
        retrofit.Profiler profiler65 = builder62.profiler;
        retrofit.RequestInterceptor requestInterceptor66 = builder62.requestInterceptor;
        retrofit.RestAdapter.Log log67 = builder62.log;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.client.Client.Provider provider73 = builder72.clientProvider;
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        log75.log("");
        builder72.log = log75;
        retrofit.Server server79 = builder72.server;
        builder62.server = server79;
        retrofit.RestAdapter.Builder builder81 = builder4.setServer(server79);
        retrofit.RestAdapter.LogLevel logLevel82 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder83 = builder4.setLogLevel(logLevel82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(profiler65);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNull(log67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(provider73);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(server79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test09308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09308");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.RequestInterceptor requestInterceptor33 = builder11.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = builder11.requestInterceptor;
        retrofit.RestAdapter.Builder builder36 = builder11.setServer("hi!");
        retrofit.Server server37 = builder11.server;
        retrofit.RestAdapter.Builder builder38 = builder6.setServer(server37);
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder38.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log44 = restAdapter43.log;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter43.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter.LogLevel logLevel47 = null;
        restAdapter43.logLevel = logLevel47;
        retrofit.ErrorHandler errorHandler49 = restAdapter43.errorHandler;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.Profiler profiler55 = null;
        builder54.profiler = profiler55;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        builder54.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter restAdapter59 = builder54.build();
        retrofit.converter.Converter converter60 = restAdapter59.converter;
        restAdapter43.converter = converter60;
        retrofit.ErrorHandler errorHandler62 = restAdapter43.errorHandler;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter64 = builder63.converter;
        retrofit.Profiler profiler65 = null;
        builder63.profiler = profiler65;
        retrofit.RestAdapter.Log log67 = builder63.log;
        builder63.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor69 = null;
        builder63.requestInterceptor = requestInterceptor69;
        retrofit.ErrorHandler errorHandler71 = null;
        builder63.errorHandler = errorHandler71;
        retrofit.converter.Converter converter73 = builder63.converter;
        restAdapter43.converter = converter73;
        retrofit.RestAdapter.Builder builder75 = builder38.setConverter(converter73);
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        builder75.ensureSaneDefaults();
        java.util.concurrent.Executor executor78 = builder75.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(converter60);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(converter64);
        org.junit.Assert.assertNull(log67);
        org.junit.Assert.assertNotNull(converter73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(executor78);
    }

    @Test
    public void test09309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09309");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.client.Response response8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response10 = restAdapter0.logAndReplaceResponse("", response8, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(converter6);
    }

    @Test
    public void test09310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09310");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RequestInterceptor requestInterceptor28 = builder6.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = builder6.requestInterceptor;
        retrofit.RestAdapter.Builder builder31 = builder6.setServer("hi!");
        retrofit.Server server32 = builder6.server;
        retrofit.RestAdapter.LogLevel logLevel33 = builder6.logLevel;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.Server server36 = restAdapter34.server;
        retrofit.client.Client.Provider provider37 = null;
        restAdapter34.clientProvider = provider37;
        retrofit.Server server39 = null;
        restAdapter34.server = server39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter42 = null;
        restAdapter41.converter = converter42;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter41.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log47 = restAdapter46.log;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        restAdapter46.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter.LogLevel logLevel50 = null;
        restAdapter46.logLevel = logLevel50;
        retrofit.ErrorHandler errorHandler52 = restAdapter46.errorHandler;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.RestAdapter.Builder builder57 = builder53.setServer("hi!");
        retrofit.Profiler profiler58 = null;
        builder57.profiler = profiler58;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        builder57.requestInterceptor = requestInterceptor60;
        retrofit.RestAdapter restAdapter62 = builder57.build();
        retrofit.converter.Converter converter63 = restAdapter62.converter;
        restAdapter46.converter = converter63;
        restAdapter41.converter = converter63;
        restAdapter34.converter = converter63;
        retrofit.RestAdapter.Builder builder67 = builder6.setConverter(converter63);
        restAdapter0.converter = converter63;
        java.lang.Throwable throwable69 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable69, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNotNull(converter63);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test09311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09311");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.ErrorHandler errorHandler24 = builder0.errorHandler;
        java.util.concurrent.Executor executor25 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider27 = null;
        restAdapter26.clientProvider = provider27;
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder31.logLevel = logLevel36;
        retrofit.converter.Converter converter38 = null;
        builder31.converter = converter38;
        retrofit.client.Client.Provider provider40 = null;
        builder31.clientProvider = provider40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.ErrorHandler errorHandler60 = null;
        restAdapter44.errorHandler = errorHandler60;
        retrofit.RestAdapter.Log log62 = restAdapter44.log;
        retrofit.RestAdapter.Builder builder63 = builder42.setLog(log62);
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = builder65.build();
        java.util.concurrent.Executor executor73 = restAdapter72.httpExecutor;
        builder42.callbackExecutor = executor73;
        builder31.httpExecutor = executor73;
        restAdapter26.httpExecutor = executor73;
        builder0.callbackExecutor = executor73;
        retrofit.converter.Converter converter78 = builder0.converter;
        java.util.concurrent.Executor executor79 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNull(converter78);
        org.junit.Assert.assertNotNull(executor79);
    }

    @Test
    public void test09312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09312");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.Profiler profiler11 = restAdapter8.profiler;
        retrofit.Profiler profiler12 = null;
        restAdapter8.profiler = profiler12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        builder26.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log22, logLevel42);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        restAdapter45.setLogLevel(logLevel48);
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter45.getLogLevel();
        java.util.concurrent.Executor executor52 = restAdapter45.callbackExecutor;
        retrofit.client.Response response54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response56 = restAdapter45.logAndReplaceResponse("", response54, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor52);
    }

    @Test
    public void test09313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09313");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.Server server19 = builder0.server;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.client.Client.Provider provider23 = null;
        builder20.clientProvider = provider23;
        retrofit.RestAdapter.Builder builder26 = builder20.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.RestAdapter restAdapter34 = builder27.build();
        java.util.concurrent.Executor executor35 = restAdapter34.httpExecutor;
        builder26.callbackExecutor = executor35;
        builder0.callbackExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter restAdapter45 = builder38.build();
        java.util.concurrent.Executor executor46 = restAdapter45.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.client.Header[] headerArray52 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList53 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList53, headerArray52);
        retrofit.mime.TypedOutput typedOutput55 = null;
        retrofit.client.Request request56 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList53, typedOutput55);
        java.lang.String str57 = request56.getUrl();
        java.util.List<retrofit.client.Header> headerList58 = request56.getHeaders();
        retrofit.mime.TypedOutput typedOutput59 = null;
        retrofit.client.Request request60 = new retrofit.client.Request("hi!", "", headerList58, typedOutput59);
        java.lang.String str61 = request60.getMethod();
        retrofit.mime.TypedOutput typedOutput62 = request60.getBody();
        java.util.List<retrofit.client.Header> headerList63 = request60.getHeaders();
        retrofit.client.Request request64 = restAdapter45.logAndReplaceRequest(request60);
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor66 = restAdapter65.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        restAdapter65.requestInterceptor = requestInterceptor67;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        restAdapter65.log = log77;
        retrofit.ErrorHandler errorHandler81 = null;
        restAdapter65.errorHandler = errorHandler81;
        retrofit.RestAdapter.Log log83 = restAdapter65.log;
        java.util.concurrent.Executor executor84 = restAdapter65.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel85;
        restAdapter45.setLogLevel(logLevel85);
        retrofit.RestAdapter.Log log88 = restAdapter45.log;
        retrofit.RestAdapter.RestHandler restHandler89 = restAdapter45.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor90 = restAdapter45.requestInterceptor;
        builder0.requestInterceptor = requestInterceptor90;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(executor46);
        org.junit.Assert.assertNotNull(headerArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(headerList58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNull(typedOutput62);
        org.junit.Assert.assertNotNull(headerList63);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNull(executor84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertNotNull(requestInterceptor90);
    }

    @Test
    public void test09314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09314");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter21 = builder20.converter;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter22.requestInterceptor = requestInterceptor24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        restAdapter22.log = log34;
        retrofit.ErrorHandler errorHandler38 = null;
        restAdapter22.errorHandler = errorHandler38;
        retrofit.RestAdapter.Log log40 = restAdapter22.log;
        retrofit.RestAdapter.Builder builder41 = builder20.setLog(log40);
        retrofit.RequestInterceptor requestInterceptor42 = builder20.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor43 = builder20.requestInterceptor;
        retrofit.RestAdapter.Builder builder45 = builder20.setServer("hi!");
        retrofit.Server server46 = builder20.server;
        restAdapter2.server = server46;
        builder0.server = server46;
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor50 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel51 = builder0.logLevel;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log53 = restAdapter52.log;
        java.util.concurrent.Executor executor54 = restAdapter52.callbackExecutor;
        java.util.concurrent.Executor executor55 = restAdapter52.callbackExecutor;
        retrofit.RestAdapter.Log log56 = restAdapter52.log;
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter52.requestInterceptor;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = builder58.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor60 = builder58.requestInterceptor;
        retrofit.ErrorHandler errorHandler61 = null;
        builder58.errorHandler = errorHandler61;
        retrofit.converter.Converter converter63 = null;
        builder58.converter = converter63;
        retrofit.client.Client.Provider provider65 = builder58.clientProvider;
        retrofit.RequestInterceptor requestInterceptor66 = builder58.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel67 = builder58.logLevel;
        builder58.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter restAdapter74 = builder73.build();
        retrofit.converter.Converter converter75 = null;
        restAdapter74.converter = converter75;
        retrofit.RequestInterceptor requestInterceptor77 = restAdapter74.requestInterceptor;
        retrofit.RestAdapter.Builder builder78 = builder58.setRequestInterceptor(requestInterceptor77);
        restAdapter52.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter.Builder builder80 = builder0.setRequestInterceptor(requestInterceptor77);
        retrofit.RestAdapter.LogLevel logLevel81 = builder80.logLevel;
        retrofit.RestAdapter.Log log82 = builder80.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(provider65);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log82);
    }

    @Test
    public void test09315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09315");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.setLogLevel(logLevel4);
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.Server server7 = null;
        restAdapter0.server = server7;
        retrofit.Profiler profiler9 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter10.logLevel;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log17 = restAdapter16.log;
        retrofit.ErrorHandler errorHandler18 = restAdapter16.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        retrofit.Profiler profiler25 = null;
        builder24.profiler = profiler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.RestAdapter restAdapter34 = builder27.build();
        retrofit.converter.Converter converter35 = null;
        builder27.converter = converter35;
        retrofit.ErrorHandler errorHandler37 = null;
        builder27.errorHandler = errorHandler37;
        retrofit.RequestInterceptor requestInterceptor39 = builder27.requestInterceptor;
        builder24.requestInterceptor = requestInterceptor39;
        restAdapter16.requestInterceptor = requestInterceptor39;
        restAdapter10.requestInterceptor = requestInterceptor39;
        restAdapter0.requestInterceptor = requestInterceptor39;
        retrofit.RestAdapter.Log log44 = restAdapter0.log;
        retrofit.client.Client.Provider provider45 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test09316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09316");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log19, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLogLevel(logLevel26);
        retrofit.ErrorHandler errorHandler30 = null;
        builder29.errorHandler = errorHandler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        builder35.logLevel = logLevel51;
        retrofit.converter.Converter converter54 = builder35.converter;
        retrofit.ErrorHandler errorHandler55 = builder35.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel56 = builder35.logLevel;
        retrofit.Server server57 = builder35.server;
        builder32.server = server57;
        retrofit.RestAdapter.Builder builder59 = builder29.setServer(server57);
        java.util.concurrent.Executor executor60 = builder29.httpExecutor;
        retrofit.Server server61 = builder29.server;
        retrofit.converter.Converter converter62 = builder29.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNull(converter62);
    }

    @Test
    public void test09317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09317");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.Server server6 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder30.setLog(log35);
        retrofit.RestAdapter restAdapter37 = builder30.build();
        java.util.concurrent.Executor executor38 = restAdapter37.httpExecutor;
        builder7.callbackExecutor = executor38;
        builder0.httpExecutor = executor38;
        java.util.concurrent.Executor executor41 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = null;
        builder42.converter = converter43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        builder42.requestInterceptor = requestInterceptor47;
        retrofit.Profiler profiler49 = builder42.profiler;
        java.util.concurrent.Executor executor50 = builder42.callbackExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.client.Client.Provider provider54 = null;
        builder51.clientProvider = provider54;
        retrofit.client.Client.Provider provider56 = builder51.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder58 = builder51.setLogLevel(logLevel57);
        retrofit.client.Client.Provider provider59 = builder51.clientProvider;
        retrofit.Profiler profiler60 = builder51.profiler;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter61.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        restAdapter61.requestInterceptor = requestInterceptor63;
        retrofit.Server server65 = null;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server65, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel74);
        restAdapter61.log = log73;
        retrofit.ErrorHandler errorHandler77 = null;
        restAdapter61.errorHandler = errorHandler77;
        java.util.concurrent.Executor executor79 = null;
        restAdapter61.callbackExecutor = executor79;
        retrofit.RestAdapter.Log log81 = restAdapter61.log;
        retrofit.RestAdapter.Builder builder82 = builder51.setLog(log81);
        builder42.log = log81;
        builder0.log = log81;
        retrofit.RestAdapter.Builder builder86 = builder0.setServer("hi!");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test09318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09318");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.RestAdapter.Builder builder20 = builder7.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder21 = builder4.setLogLevel(logLevel18);
        retrofit.RestAdapter.LogLevel logLevel22 = builder4.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test09319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09319");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter.LogLevel logLevel33 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter37.requestInterceptor = requestInterceptor39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter37.log = log49;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter37.errorHandler = errorHandler53;
        retrofit.RestAdapter.Log log55 = restAdapter37.log;
        retrofit.RestAdapter.Builder builder56 = builder35.setLog(log55);
        retrofit.RequestInterceptor requestInterceptor57 = builder35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor58 = builder35.requestInterceptor;
        retrofit.RestAdapter.Builder builder60 = builder35.setServer("hi!");
        retrofit.Server server61 = builder35.server;
        retrofit.RestAdapter.Builder builder62 = builder30.setServer(server61);
        retrofit.RestAdapter.Builder builder63 = builder0.setServer(server61);
        java.util.concurrent.Executor executor64 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log65 = builder0.log;
        retrofit.Profiler profiler66 = null;
        builder0.profiler = profiler66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter69 = builder68.converter;
        retrofit.RestAdapter.LogLevel logLevel70 = builder68.logLevel;
        builder68.ensureSaneDefaults();
        retrofit.Server server72 = builder68.server;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder73.setLog(log78);
        retrofit.RestAdapter restAdapter80 = builder73.build();
        retrofit.RequestInterceptor requestInterceptor81 = restAdapter80.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.Builder builder83 = builder68.setLogLevel(logLevel82);
        retrofit.RestAdapter.Log log84 = builder83.log;
        retrofit.RestAdapter.Builder builder85 = builder0.setLog(log84);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNull(converter69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test09320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09320");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.Profiler profiler9 = builder7.profiler;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = builder10.callbackExecutor;
        retrofit.RestAdapter.Log log12 = builder10.log;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.setLogLevel(logLevel36);
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log29, logLevel36);
        retrofit.RestAdapter.Builder builder39 = builder10.setLogLevel(logLevel36);
        retrofit.ErrorHandler errorHandler40 = null;
        builder39.errorHandler = errorHandler40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = builder42.callbackExecutor;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        retrofit.RestAdapter.Builder builder55 = builder42.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder56 = builder39.setLogLevel(logLevel53);
        builder56.ensureSaneDefaults();
        java.util.concurrent.Executor executor58 = builder56.callbackExecutor;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RestAdapter.Builder builder60 = builder7.setExecutors(executor58, executor59);
        retrofit.Profiler profiler61 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder62 = builder60.setProfiler(profiler61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test09321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09321");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        retrofit.ErrorHandler errorHandler10 = restAdapter8.errorHandler;
        retrofit.Profiler profiler11 = null;
        restAdapter8.profiler = profiler11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter14 = null;
        restAdapter13.converter = converter14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter13.requestInterceptor = requestInterceptor16;
        retrofit.Profiler profiler18 = restAdapter13.profiler;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        restAdapter13.logLevel = logLevel19;
        java.util.concurrent.Executor executor22 = restAdapter13.httpExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log24 = restAdapter23.log;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor27 = builder25.requestInterceptor;
        retrofit.ErrorHandler errorHandler28 = null;
        builder25.errorHandler = errorHandler28;
        retrofit.converter.Converter converter30 = null;
        builder25.converter = converter30;
        retrofit.ErrorHandler errorHandler32 = null;
        builder25.errorHandler = errorHandler32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.Profiler profiler39 = null;
        builder38.profiler = profiler39;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        builder38.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter restAdapter43 = builder38.build();
        retrofit.converter.Converter converter44 = restAdapter43.converter;
        retrofit.RestAdapter.Builder builder45 = builder25.setConverter(converter44);
        restAdapter23.converter = converter44;
        restAdapter13.converter = converter44;
        restAdapter8.converter = converter44;
        retrofit.RestAdapter.Builder builder49 = builder0.setConverter(converter44);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.Profiler profiler57 = null;
        builder56.profiler = profiler57;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        builder56.requestInterceptor = requestInterceptor59;
        retrofit.RestAdapter restAdapter61 = builder56.build();
        retrofit.converter.Converter converter62 = null;
        builder56.converter = converter62;
        retrofit.RestAdapter.LogLevel logLevel64 = builder56.logLevel;
        retrofit.RequestInterceptor requestInterceptor65 = builder56.requestInterceptor;
        builder51.requestInterceptor = requestInterceptor65;
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(converter44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor65);
    }

    @Test
    public void test09322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09322");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Profiler profiler9 = builder0.profiler;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.httpExecutor;
        retrofit.Profiler profiler13 = null;
        restAdapter11.profiler = profiler13;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        java.util.concurrent.Executor executor17 = restAdapter15.callbackExecutor;
        retrofit.converter.Converter converter18 = null;
        restAdapter15.converter = converter18;
        retrofit.RestAdapter.Log log20 = restAdapter15.log;
        retrofit.ErrorHandler errorHandler21 = restAdapter15.errorHandler;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.client.Client.Provider provider25 = null;
        builder22.clientProvider = provider25;
        retrofit.RestAdapter.Builder builder28 = builder22.setServer("hi!");
        retrofit.Profiler profiler29 = builder22.profiler;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = null;
        builder30.converter = converter31;
        retrofit.client.Client.Provider provider33 = null;
        builder30.clientProvider = provider33;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        builder30.requestInterceptor = requestInterceptor35;
        retrofit.Profiler profiler37 = builder30.profiler;
        retrofit.Profiler profiler38 = null;
        builder30.profiler = profiler38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = builder40.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor42 = builder40.requestInterceptor;
        java.util.concurrent.Executor executor43 = builder40.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel44 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.Profiler profiler50 = null;
        builder49.profiler = profiler50;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        builder49.requestInterceptor = requestInterceptor52;
        retrofit.RestAdapter restAdapter54 = builder49.build();
        retrofit.converter.Converter converter55 = null;
        builder49.converter = converter55;
        retrofit.client.Client.Provider provider57 = builder49.clientProvider;
        retrofit.RestAdapter.Builder builder58 = builder40.setClient(provider57);
        retrofit.RestAdapter.Builder builder59 = builder30.setClient(provider57);
        retrofit.client.Client.Provider provider60 = builder59.clientProvider;
        builder22.clientProvider = provider60;
        restAdapter15.clientProvider = provider60;
        restAdapter11.clientProvider = provider60;
        retrofit.RestAdapter.Builder builder64 = builder0.setClient(provider60);
        retrofit.converter.Converter converter65 = null;
        builder0.converter = converter65;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(provider57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(provider60);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test09323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09323");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor26);
        java.util.concurrent.Executor executor29 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.client.Client.Provider provider33 = null;
        builder30.clientProvider = provider33;
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.RestAdapter restAdapter43 = builder36.build();
        retrofit.converter.Converter converter44 = null;
        builder36.converter = converter44;
        retrofit.ErrorHandler errorHandler46 = null;
        builder36.errorHandler = errorHandler46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.RestAdapter.LogLevel logLevel50 = builder48.logLevel;
        builder48.ensureSaneDefaults();
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder60.setLog(log65);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter67.logLevel = logLevel69;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        restAdapter67.requestInterceptor = requestInterceptor71;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter67.logLevel = logLevel73;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log65, logLevel73);
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder82 = builder76.setLog(log81);
        restAdapter75.log = log81;
        builder48.log = log81;
        java.util.concurrent.Executor executor85 = null;
        builder48.httpExecutor = executor85;
        retrofit.converter.Converter converter87 = null;
        builder48.converter = converter87;
        retrofit.ErrorHandler errorHandler89 = builder48.errorHandler;
        retrofit.RestAdapter.Builder builder90 = builder36.setErrorHandler(errorHandler89);
        builder30.errorHandler = errorHandler89;
        builder0.errorHandler = errorHandler89;
        retrofit.Server server93 = builder0.server;
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(server93);
    }

    @Test
    public void test09324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09324");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter19.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter19.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log17, logLevel25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        restAdapter27.log = log33;
        builder0.log = log33;
        java.util.concurrent.Executor executor37 = null;
        builder0.httpExecutor = executor37;
        retrofit.converter.Converter converter39 = null;
        builder0.converter = converter39;
        retrofit.RestAdapter.Builder builder42 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder44 = builder0.setServer("hi!");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test09325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09325");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.Server server5 = restAdapter0.server;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(provider6);
    }

    @Test
    public void test09326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09326");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder0.requestInterceptor = requestInterceptor6;
        retrofit.converter.Converter converter8 = null;
        builder0.converter = converter8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.Server server15 = restAdapter10.server;
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler17 = null;
        restAdapter10.errorHandler = errorHandler17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter.LogLevel logLevel21 = builder19.logLevel;
        builder19.ensureSaneDefaults();
        retrofit.client.Client.Provider provider23 = null;
        builder19.clientProvider = provider23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter40.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter40.logLevel = logLevel46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log38, logLevel46);
        builder19.logLevel = logLevel46;
        retrofit.client.Client.Provider provider50 = null;
        builder19.clientProvider = provider50;
        retrofit.converter.Converter converter52 = builder19.converter;
        restAdapter10.converter = converter52;
        builder0.converter = converter52;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder55.logLevel = logLevel60;
        retrofit.converter.Converter converter62 = null;
        builder55.converter = converter62;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor65 = restAdapter64.requestInterceptor;
        retrofit.converter.Converter converter66 = restAdapter64.converter;
        java.util.concurrent.Executor executor67 = null;
        restAdapter64.callbackExecutor = executor67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor70 = null;
        restAdapter69.httpExecutor = executor70;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        restAdapter69.requestInterceptor = requestInterceptor72;
        retrofit.RestAdapter.Log log74 = restAdapter69.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter69.logLevel = logLevel75;
        restAdapter64.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder78 = builder55.setLogLevel(logLevel75);
        retrofit.RestAdapter.Log log79 = builder78.log;
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log81 = restAdapter80.log;
        java.util.concurrent.Executor executor82 = restAdapter80.callbackExecutor;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor84 = restAdapter83.requestInterceptor;
        retrofit.converter.Converter converter85 = restAdapter83.converter;
        java.util.concurrent.Executor executor86 = null;
        restAdapter83.callbackExecutor = executor86;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter83.logLevel = logLevel88;
        restAdapter80.logLevel = logLevel88;
        retrofit.RestAdapter.Builder builder91 = builder78.setLogLevel(logLevel88);
        retrofit.RestAdapter.LogLevel logLevel92 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean93 = logLevel92.log();
        retrofit.RestAdapter.Builder builder94 = builder91.setLogLevel(logLevel92);
        builder0.logLevel = logLevel92;
        retrofit.RestAdapter.Builder builder97 = builder0.setServer("Retrofit-Idle");
        retrofit.Profiler profiler98 = null;
        builder97.profiler = profiler98;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter52);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertNull(executor82);
        org.junit.Assert.assertNull(requestInterceptor84);
        org.junit.Assert.assertNull(converter85);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test09327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09327");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = null;
        restAdapter5.httpExecutor = executor6;
        retrofit.Profiler profiler8 = null;
        restAdapter5.profiler = profiler8;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter5.requestInterceptor = requestInterceptor10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder33 = builder12.setLog(log32);
        retrofit.RequestInterceptor requestInterceptor34 = builder12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = builder12.requestInterceptor;
        retrofit.RestAdapter.Builder builder37 = builder12.setServer("hi!");
        retrofit.Server server38 = builder12.server;
        restAdapter5.server = server38;
        restAdapter0.server = server38;
        retrofit.client.Client.Provider provider41 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNull(logLevel42);
    }

    @Test
    public void test09328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09328");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel6;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter.LogLevel logLevel13 = builder11.logLevel;
        builder11.ensureSaneDefaults();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter30.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter30.logLevel = logLevel36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log28, logLevel36);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        restAdapter38.log = log44;
        builder11.log = log44;
        java.util.concurrent.Executor executor48 = null;
        builder11.httpExecutor = executor48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.converter.Converter converter52 = restAdapter50.converter;
        java.util.concurrent.Executor executor53 = null;
        restAdapter50.callbackExecutor = executor53;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter50.logLevel;
        java.util.concurrent.Executor executor56 = restAdapter50.callbackExecutor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder57.setLog(log62);
        retrofit.RestAdapter restAdapter64 = builder57.build();
        java.util.concurrent.Executor executor65 = restAdapter64.httpExecutor;
        restAdapter50.httpExecutor = executor65;
        builder11.callbackExecutor = executor65;
        retrofit.RequestInterceptor requestInterceptor68 = builder11.requestInterceptor;
        retrofit.ErrorHandler errorHandler69 = builder11.errorHandler;
        retrofit.converter.Converter converter70 = builder11.converter;
        restAdapter0.converter = converter70;
        retrofit.RequestInterceptor requestInterceptor72 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(errorHandler69);
        org.junit.Assert.assertNotNull(converter70);
        org.junit.Assert.assertNull(requestInterceptor72);
    }

    @Test
    public void test09329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09329");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.Server server22 = builder0.server;
        retrofit.RestAdapter restAdapter23 = builder0.build();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter23.new RestHandler();
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.converter.Converter converter28 = null;
        restAdapter25.converter = converter28;
        retrofit.RestAdapter.Log log30 = restAdapter25.log;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter25.new RestHandler();
        retrofit.Profiler profiler32 = restAdapter25.profiler;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = null;
        restAdapter33.httpExecutor = executor34;
        retrofit.client.Client.Provider provider36 = restAdapter33.clientProvider;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter33.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        builder39.logLevel = logLevel55;
        retrofit.converter.Converter converter58 = builder39.converter;
        retrofit.ErrorHandler errorHandler59 = builder39.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel60 = builder39.logLevel;
        retrofit.Server server61 = builder39.server;
        restAdapter33.server = server61;
        restAdapter25.server = server61;
        restAdapter23.server = server61;
        retrofit.Server server65 = restAdapter23.server;
        retrofit.client.Response response67 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response69 = restAdapter23.logAndReplaceResponse("", response67, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(server65);
    }

    @Test
    public void test09330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09330");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.Profiler profiler14 = null;
        builder13.profiler = profiler14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder13.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter restAdapter18 = builder13.build();
        retrofit.converter.Converter converter19 = restAdapter18.converter;
        retrofit.RestAdapter.Builder builder20 = builder0.setConverter(converter19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log22 = restAdapter21.log;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = null;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter27.logLevel;
        retrofit.converter.Converter converter30 = null;
        restAdapter27.converter = converter30;
        retrofit.ErrorHandler errorHandler32 = restAdapter27.errorHandler;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log34 = restAdapter33.log;
        retrofit.ErrorHandler errorHandler35 = restAdapter33.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.Profiler profiler42 = null;
        builder41.profiler = profiler42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        retrofit.RestAdapter restAdapter51 = builder44.build();
        retrofit.converter.Converter converter52 = null;
        builder44.converter = converter52;
        retrofit.ErrorHandler errorHandler54 = null;
        builder44.errorHandler = errorHandler54;
        retrofit.RequestInterceptor requestInterceptor56 = builder44.requestInterceptor;
        builder41.requestInterceptor = requestInterceptor56;
        restAdapter33.requestInterceptor = requestInterceptor56;
        restAdapter27.requestInterceptor = requestInterceptor56;
        restAdapter21.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.Builder builder61 = builder20.setRequestInterceptor(requestInterceptor56);
        java.util.concurrent.Executor executor62 = builder20.callbackExecutor;
        retrofit.Profiler profiler63 = builder20.profiler;
        builder20.ensureSaneDefaults();
        builder20.ensureSaneDefaults();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(converter19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(profiler63);
    }

    @Test
    public void test09331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09331");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.ErrorHandler errorHandler12 = null;
        builder8.errorHandler = errorHandler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter16.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter16.requestInterceptor = requestInterceptor18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter16.log = log28;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter16.errorHandler = errorHandler32;
        retrofit.RestAdapter.Log log34 = restAdapter16.log;
        retrofit.RestAdapter.Builder builder35 = builder14.setLog(log34);
        retrofit.RestAdapter.Builder builder36 = builder8.setLog(log34);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor39 = builder37.requestInterceptor;
        retrofit.ErrorHandler errorHandler40 = null;
        builder37.errorHandler = errorHandler40;
        retrofit.converter.Converter converter42 = null;
        builder37.converter = converter42;
        retrofit.ErrorHandler errorHandler44 = null;
        builder37.errorHandler = errorHandler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.Profiler profiler51 = null;
        builder50.profiler = profiler51;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        builder50.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter restAdapter55 = builder50.build();
        retrofit.converter.Converter converter56 = restAdapter55.converter;
        retrofit.RestAdapter.Builder builder57 = builder37.setConverter(converter56);
        builder36.converter = converter56;
        builder0.converter = converter56;
        retrofit.RestAdapter restAdapter60 = builder0.build();
        retrofit.Profiler profiler61 = restAdapter60.profiler;
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.client.Response response64 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response66 = restAdapter60.logAndReplaceResponse("hi!", response64, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(converter56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNull(profiler61);
    }

    @Test
    public void test09332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09332");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder0.requestInterceptor = requestInterceptor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.RestAdapter.Log log12 = builder8.log;
        builder8.ensureSaneDefaults();
        retrofit.converter.Converter converter14 = builder8.converter;
        java.util.concurrent.Executor executor15 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder16.setLog(log21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter.LogLevel logLevel25 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder22.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter.LogLevel logLevel29 = builder27.logLevel;
        builder27.ensureSaneDefaults();
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        restAdapter46.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter46.logLevel = logLevel52;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log44, logLevel52);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = builder55.setLog(log60);
        restAdapter54.log = log60;
        builder27.log = log60;
        java.util.concurrent.Executor executor64 = null;
        builder27.httpExecutor = executor64;
        retrofit.converter.Converter converter66 = null;
        builder27.converter = converter66;
        retrofit.ErrorHandler errorHandler68 = builder27.errorHandler;
        retrofit.RestAdapter.Builder builder69 = builder22.setErrorHandler(errorHandler68);
        retrofit.ErrorHandler errorHandler70 = builder22.errorHandler;
        retrofit.client.Client.Provider provider71 = null;
        builder22.clientProvider = provider71;
        retrofit.client.Client.Provider provider73 = builder22.clientProvider;
        retrofit.ErrorHandler errorHandler74 = builder22.errorHandler;
        builder8.errorHandler = errorHandler74;
        builder0.errorHandler = errorHandler74;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertNotNull(converter14);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(errorHandler68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(errorHandler70);
        org.junit.Assert.assertNull(provider73);
        org.junit.Assert.assertNotNull(errorHandler74);
    }

    @Test
    public void test09333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09333");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder7.setLog(log12);
        retrofit.RestAdapter restAdapter14 = builder7.build();
        retrofit.converter.Converter converter15 = null;
        builder7.converter = converter15;
        java.util.concurrent.Executor executor17 = builder7.httpExecutor;
        restAdapter0.callbackExecutor = executor17;
        java.lang.Throwable throwable19 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable19, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(executor17);
    }

    @Test
    public void test09334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09334");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter11.logLevel = logLevel13;
        retrofit.Profiler profiler15 = restAdapter11.profiler;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter11.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter11.requestInterceptor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log19 = restAdapter18.log;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.Profiler profiler21 = restAdapter18.profiler;
        retrofit.Profiler profiler22 = null;
        restAdapter18.profiler = profiler22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        restAdapter18.log = log32;
        restAdapter11.log = log32;
        restAdapter8.log = log32;
        retrofit.RestAdapter.Builder builder38 = builder0.setLog(log32);
        java.util.concurrent.Executor executor39 = builder38.httpExecutor;
        retrofit.RestAdapter restAdapter40 = builder38.build();
        retrofit.RestAdapter.Log log41 = builder38.log;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = null;
        builder42.converter = converter43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        java.util.concurrent.Executor executor47 = builder42.httpExecutor;
        retrofit.ErrorHandler errorHandler48 = builder42.errorHandler;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor50 = restAdapter49.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter49.requestInterceptor = requestInterceptor51;
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel62);
        restAdapter49.log = log61;
        retrofit.Server server65 = restAdapter49.server;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.Profiler profiler71 = null;
        builder70.profiler = profiler71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder73.setLog(log78);
        retrofit.RestAdapter restAdapter80 = builder73.build();
        retrofit.converter.Converter converter81 = null;
        builder73.converter = converter81;
        retrofit.ErrorHandler errorHandler83 = null;
        builder73.errorHandler = errorHandler83;
        retrofit.RequestInterceptor requestInterceptor85 = builder73.requestInterceptor;
        builder70.requestInterceptor = requestInterceptor85;
        restAdapter49.requestInterceptor = requestInterceptor85;
        retrofit.RestAdapter.Builder builder88 = builder42.setRequestInterceptor(requestInterceptor85);
        retrofit.RestAdapter.Builder builder89 = builder38.setRequestInterceptor(requestInterceptor85);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test09335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09335");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Server server22 = null;
        builder0.server = server22;
        java.util.concurrent.Executor executor24 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        builder0.requestInterceptor = requestInterceptor25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        log35.log("hi!");
        builder0.log = log35;
        retrofit.client.Client.Provider provider41 = null;
        builder0.clientProvider = provider41;
        retrofit.client.Client.Provider provider43 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter45 = builder44.converter;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor47 = restAdapter46.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        restAdapter46.requestInterceptor = requestInterceptor48;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        restAdapter46.log = log58;
        retrofit.ErrorHandler errorHandler62 = null;
        restAdapter46.errorHandler = errorHandler62;
        retrofit.RestAdapter.Log log64 = restAdapter46.log;
        retrofit.RestAdapter.Builder builder65 = builder44.setLog(log64);
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder73 = builder67.setLog(log72);
        retrofit.RestAdapter restAdapter74 = builder67.build();
        java.util.concurrent.Executor executor75 = restAdapter74.httpExecutor;
        builder44.callbackExecutor = executor75;
        builder0.callbackExecutor = executor75;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder79 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(executor75);
    }

    @Test
    public void test09336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09336");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        builder8.logLevel = logLevel10;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter17 = null;
        restAdapter14.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        restAdapter14.log = log39;
        retrofit.RestAdapter.Builder builder42 = builder8.setLog(log39);
        restAdapter0.log = log39;
        retrofit.converter.Converter converter44 = restAdapter0.converter;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log46 = restAdapter45.log;
        java.util.concurrent.Executor executor47 = restAdapter45.callbackExecutor;
        retrofit.Profiler profiler48 = restAdapter45.profiler;
        retrofit.Profiler profiler49 = null;
        restAdapter45.profiler = profiler49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter45.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter54 = builder53.converter;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor56 = restAdapter55.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter55.requestInterceptor = requestInterceptor57;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel68);
        restAdapter55.log = log67;
        retrofit.ErrorHandler errorHandler71 = null;
        restAdapter55.errorHandler = errorHandler71;
        retrofit.RestAdapter.Log log73 = restAdapter55.log;
        retrofit.RestAdapter.Builder builder74 = builder53.setLog(log73);
        retrofit.RequestInterceptor requestInterceptor75 = builder53.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor76 = builder53.requestInterceptor;
        retrofit.RestAdapter.Log log77 = builder53.log;
        restAdapter45.log = log77;
        restAdapter0.log = log77;
        retrofit.RequestInterceptor requestInterceptor80 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor81 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor83 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(requestInterceptor75);
        org.junit.Assert.assertNull(requestInterceptor76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNull(requestInterceptor80);
        org.junit.Assert.assertNull(requestInterceptor81);
        org.junit.Assert.assertNull(logLevel82);
        org.junit.Assert.assertNull(executor83);
    }

    @Test
    public void test09337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09337");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter4.requestInterceptor;
        java.util.concurrent.Executor executor6 = restAdapter4.callbackExecutor;
        retrofit.ErrorHandler errorHandler7 = restAdapter4.errorHandler;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder16.setLog(log21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter23.logLevel = logLevel25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter23.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter23.logLevel = logLevel29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log21, logLevel29);
        log21.log("Retrofit-Idle");
        restAdapter4.log = log21;
        restAdapter0.log = log21;
        retrofit.Server server36 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler38 = null;
        restAdapter0.profiler = profiler38;
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(requestInterceptor37);
    }

    @Test
    public void test09338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09338");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.converter.Converter converter10 = restAdapter9.converter;
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        log11.log("");
        restAdapter9.log = log11;
        java.util.concurrent.Executor executor15 = restAdapter9.callbackExecutor;
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        java.lang.String str29 = request28.getMethod();
        retrofit.mime.TypedOutput typedOutput30 = request28.getBody();
        retrofit.mime.TypedOutput typedOutput31 = request28.getBody();
        java.lang.String str32 = request28.getMethod();
        java.util.List<retrofit.client.Header> headerList33 = request28.getHeaders();
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("Retrofit-Idle", "", headerList33, typedOutput34);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("", "Retrofit-Idle", headerList33, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList33, typedOutput38);
        retrofit.client.Request request40 = restAdapter9.logAndReplaceRequest(request39);
        retrofit.mime.TypedOutput typedOutput41 = request40.getBody();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(converter10);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNull(typedOutput41);
    }

    @Test
    public void test09339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09339");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.Profiler profiler35 = null;
        builder34.profiler = profiler35;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        builder34.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter restAdapter39 = builder34.build();
        retrofit.client.Client.Provider provider40 = builder34.clientProvider;
        retrofit.RestAdapter.Builder builder41 = builder29.setClient(provider40);
        retrofit.RestAdapter.Log log42 = builder41.log;
        retrofit.Profiler profiler43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder44 = builder41.setProfiler(profiler43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(provider40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
    }

    @Test
    public void test09340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09340");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.Server server5 = restAdapter0.server;
        retrofit.Profiler profiler6 = restAdapter0.profiler;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter11.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter11.requestInterceptor = requestInterceptor13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        restAdapter11.log = log23;
        retrofit.ErrorHandler errorHandler27 = null;
        restAdapter11.errorHandler = errorHandler27;
        retrofit.RestAdapter.Log log29 = restAdapter11.log;
        retrofit.RestAdapter.Builder builder30 = builder9.setLog(log29);
        retrofit.RequestInterceptor requestInterceptor31 = builder9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor32 = builder9.requestInterceptor;
        retrofit.RestAdapter.Builder builder34 = builder9.setServer("hi!");
        java.util.concurrent.Executor executor35 = builder34.httpExecutor;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean61 = logLevel60.log();
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log56, logLevel60);
        retrofit.RestAdapter.Builder builder63 = builder34.setLogLevel(logLevel60);
        retrofit.RestAdapter.Log log64 = builder63.log;
        log64.log("Retrofit-Idle");
        restAdapter0.log = log64;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log64);
    }

    @Test
    public void test09341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09341");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        retrofit.client.Response response9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response11 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response9, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(log7);
    }

    @Test
    public void test09342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09342");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.ErrorHandler errorHandler10 = restAdapter7.errorHandler;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter26.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter26.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter26.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log24, logLevel32);
        log24.log("Retrofit-Idle");
        restAdapter7.log = log24;
        retrofit.RestAdapter.Builder builder38 = builder0.setLog(log24);
        retrofit.client.Client.Provider provider39 = builder0.clientProvider;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(provider39);
    }

    @Test
    public void test09343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09343");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.ErrorHandler errorHandler12 = null;
        builder8.errorHandler = errorHandler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter16.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter16.requestInterceptor = requestInterceptor18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter16.log = log28;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter16.errorHandler = errorHandler32;
        retrofit.RestAdapter.Log log34 = restAdapter16.log;
        retrofit.RestAdapter.Builder builder35 = builder14.setLog(log34);
        retrofit.RestAdapter.Builder builder36 = builder8.setLog(log34);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor39 = builder37.requestInterceptor;
        retrofit.ErrorHandler errorHandler40 = null;
        builder37.errorHandler = errorHandler40;
        retrofit.converter.Converter converter42 = null;
        builder37.converter = converter42;
        retrofit.ErrorHandler errorHandler44 = null;
        builder37.errorHandler = errorHandler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.Profiler profiler51 = null;
        builder50.profiler = profiler51;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        builder50.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter restAdapter55 = builder50.build();
        retrofit.converter.Converter converter56 = restAdapter55.converter;
        retrofit.RestAdapter.Builder builder57 = builder37.setConverter(converter56);
        builder36.converter = converter56;
        builder0.converter = converter56;
        retrofit.RestAdapter restAdapter60 = builder0.build();
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.Profiler profiler66 = null;
        builder65.profiler = profiler66;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        builder65.requestInterceptor = requestInterceptor68;
        retrofit.RestAdapter restAdapter70 = builder65.build();
        retrofit.Server server71 = builder65.server;
        retrofit.Server server72 = builder65.server;
        retrofit.RestAdapter.Builder builder73 = builder0.setServer(server72);
        retrofit.RestAdapter.LogLevel logLevel74 = builder73.logLevel;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder75.setLog(log80);
        retrofit.RestAdapter restAdapter82 = builder75.build();
        retrofit.RestAdapter.Log log83 = restAdapter82.log;
        builder73.log = log83;
        retrofit.RestAdapter.Builder builder86 = builder73.setServer("Retrofit-Idle");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(converter56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test09344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09344");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log7 = restAdapter6.log;
        retrofit.ErrorHandler errorHandler8 = restAdapter6.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter6.new RestHandler();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.Profiler profiler15 = null;
        builder14.profiler = profiler15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder17.setLog(log22);
        retrofit.RestAdapter restAdapter24 = builder17.build();
        retrofit.converter.Converter converter25 = null;
        builder17.converter = converter25;
        retrofit.ErrorHandler errorHandler27 = null;
        builder17.errorHandler = errorHandler27;
        retrofit.RequestInterceptor requestInterceptor29 = builder17.requestInterceptor;
        builder14.requestInterceptor = requestInterceptor29;
        restAdapter6.requestInterceptor = requestInterceptor29;
        restAdapter0.requestInterceptor = requestInterceptor29;
        retrofit.ErrorHandler errorHandler33 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider34 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter0.getLogLevel();
        retrofit.converter.Converter converter37 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(converter37);
    }

    @Test
    public void test09345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09345");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = builder23.build();
        retrofit.converter.Converter converter31 = null;
        builder23.converter = converter31;
        retrofit.ErrorHandler errorHandler33 = null;
        builder23.errorHandler = errorHandler33;
        retrofit.RequestInterceptor requestInterceptor35 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.client.Client.Provider provider41 = builder40.clientProvider;
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("");
        builder40.log = log43;
        retrofit.Server server47 = builder40.server;
        builder23.server = server47;
        retrofit.RestAdapter.Builder builder49 = builder0.setServer(server47);
        retrofit.RequestInterceptor requestInterceptor50 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor51 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log53 = restAdapter52.log;
        retrofit.ErrorHandler errorHandler54 = restAdapter52.errorHandler;
        retrofit.converter.Converter converter55 = null;
        restAdapter52.converter = converter55;
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter52.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter52.logLevel;
        retrofit.RestAdapter.Log log60 = restAdapter52.log;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder69.setLog(log74);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter76.logLevel = logLevel78;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        restAdapter76.requestInterceptor = requestInterceptor80;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter76.logLevel = logLevel82;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log74, logLevel82);
        restAdapter52.logLevel = logLevel82;
        builder0.logLevel = logLevel82;
        retrofit.Profiler profiler87 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder88 = builder0.setProfiler(profiler87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09346");
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("Retrofit-Idle", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("Retrofit-Idle", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("Retrofit-Idle", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList17, typedOutput33);
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09347");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Log log9 = builder0.log;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder16 = builder10.setLog(log15);
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        builder10.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.RestAdapter.LogLevel logLevel32 = builder30.logLevel;
        builder30.ensureSaneDefaults();
        retrofit.client.Client.Provider provider34 = null;
        builder30.clientProvider = provider34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter51.logLevel = logLevel53;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        restAdapter51.requestInterceptor = requestInterceptor55;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter51.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log49, logLevel57);
        builder30.logLevel = logLevel57;
        retrofit.client.Client.Provider provider61 = null;
        builder30.clientProvider = provider61;
        retrofit.converter.Converter converter63 = builder30.converter;
        builder29.converter = converter63;
        builder10.converter = converter63;
        retrofit.RestAdapter.Builder builder66 = builder0.setConverter(converter63);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel68 = builder0.logLevel;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09348");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log16, logLevel23);
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        retrofit.Profiler profiler27 = null;
        restAdapter25.profiler = profiler27;
        retrofit.client.Client.Provider provider29 = restAdapter25.clientProvider;
        java.lang.Throwable throwable30 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter25.logException(throwable30, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(provider29);
    }

    @Test
    public void test09349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09349");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider6 = null;
        restAdapter0.clientProvider = provider6;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter0.getLogLevel();
        java.lang.Throwable throwable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable10, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(logLevel9);
    }

    @Test
    public void test09350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09350");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter21.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter21.logLevel = logLevel27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log19, logLevel27);
        builder0.logLevel = logLevel27;
        retrofit.client.Client.Provider provider31 = null;
        builder0.clientProvider = provider31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = builder40.converter;
        retrofit.RestAdapter.LogLevel logLevel42 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder39.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter45 = builder44.converter;
        retrofit.RestAdapter.LogLevel logLevel46 = builder44.logLevel;
        builder44.ensureSaneDefaults();
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder56.setLog(log61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter63.logLevel = logLevel65;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        restAdapter63.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter63.logLevel = logLevel69;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log61, logLevel69);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("hi!");
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder78 = builder72.setLog(log77);
        restAdapter71.log = log77;
        builder44.log = log77;
        java.util.concurrent.Executor executor81 = null;
        builder44.httpExecutor = executor81;
        retrofit.converter.Converter converter83 = null;
        builder44.converter = converter83;
        retrofit.ErrorHandler errorHandler85 = builder44.errorHandler;
        retrofit.RestAdapter.Builder builder86 = builder39.setErrorHandler(errorHandler85);
        retrofit.RestAdapter.Builder builder87 = builder0.setErrorHandler(errorHandler85);
        builder87.ensureSaneDefaults();
        retrofit.converter.Converter converter89 = builder87.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(errorHandler85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(converter89);
    }

    @Test
    public void test09351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09351");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.converter.Converter converter8 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.Profiler profiler14 = null;
        builder13.profiler = profiler14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder13.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter restAdapter18 = builder13.build();
        retrofit.converter.Converter converter19 = null;
        builder13.converter = converter19;
        retrofit.Profiler profiler21 = null;
        builder13.profiler = profiler21;
        retrofit.RestAdapter.Builder builder24 = builder13.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.Profiler profiler27 = null;
        builder25.profiler = profiler27;
        retrofit.ErrorHandler errorHandler29 = null;
        builder25.errorHandler = errorHandler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter33.requestInterceptor = requestInterceptor35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        restAdapter33.log = log45;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter33.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = restAdapter33.log;
        retrofit.RestAdapter.Builder builder52 = builder31.setLog(log51);
        retrofit.RestAdapter.Builder builder53 = builder25.setLog(log51);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor55 = null;
        restAdapter54.httpExecutor = executor55;
        retrofit.Profiler profiler57 = null;
        restAdapter54.profiler = profiler57;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter54.requestInterceptor = requestInterceptor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter62 = builder61.converter;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter63.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter63.requestInterceptor = requestInterceptor65;
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel76);
        restAdapter63.log = log75;
        retrofit.ErrorHandler errorHandler79 = null;
        restAdapter63.errorHandler = errorHandler79;
        retrofit.RestAdapter.Log log81 = restAdapter63.log;
        retrofit.RestAdapter.Builder builder82 = builder61.setLog(log81);
        retrofit.RequestInterceptor requestInterceptor83 = builder61.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor84 = builder61.requestInterceptor;
        retrofit.RestAdapter.Builder builder86 = builder61.setServer("hi!");
        retrofit.Server server87 = builder61.server;
        restAdapter54.server = server87;
        retrofit.RestAdapter.Builder builder89 = builder53.setServer(server87);
        retrofit.RestAdapter.Builder builder90 = builder13.setServer(server87);
        retrofit.Server server91 = builder90.server;
        restAdapter0.server = server91;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(converter62);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(requestInterceptor83);
        org.junit.Assert.assertNull(requestInterceptor84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(server91);
    }

    @Test
    public void test09352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09352");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.util.concurrent.Executor executor11 = null;
        restAdapter10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder13.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = builder13.requestInterceptor;
        restAdapter10.requestInterceptor = requestInterceptor25;
        retrofit.client.Response response28 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response30 = restAdapter10.logAndReplaceResponse("", response28, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(requestInterceptor25);
    }

    @Test
    public void test09353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09353");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = builder31.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor33 = builder31.requestInterceptor;
        java.util.concurrent.Executor executor34 = builder31.httpExecutor;
        retrofit.RestAdapter.Builder builder36 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log38 = restAdapter37.log;
        retrofit.ErrorHandler errorHandler39 = restAdapter37.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter37.new RestHandler();
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.Profiler profiler46 = null;
        builder45.profiler = profiler46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.RestAdapter restAdapter55 = builder48.build();
        retrofit.converter.Converter converter56 = null;
        builder48.converter = converter56;
        retrofit.ErrorHandler errorHandler58 = null;
        builder48.errorHandler = errorHandler58;
        retrofit.RequestInterceptor requestInterceptor60 = builder48.requestInterceptor;
        builder45.requestInterceptor = requestInterceptor60;
        restAdapter37.requestInterceptor = requestInterceptor60;
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter37.requestInterceptor;
        builder36.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter.Builder builder65 = builder29.setRequestInterceptor(requestInterceptor63);
        retrofit.Server server66 = builder29.server;
        retrofit.Profiler profiler67 = null;
        builder29.profiler = profiler67;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(server66);
    }

    @Test
    public void test09354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09354");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.client.Client.Provider provider10 = null;
        builder7.clientProvider = provider10;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        builder7.requestInterceptor = requestInterceptor12;
        retrofit.Profiler profiler14 = builder7.profiler;
        retrofit.Profiler profiler15 = null;
        builder7.profiler = profiler15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor19 = builder17.requestInterceptor;
        java.util.concurrent.Executor executor20 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel21 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder26 = builder22.setServer("hi!");
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        builder26.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter restAdapter31 = builder26.build();
        retrofit.converter.Converter converter32 = null;
        builder26.converter = converter32;
        retrofit.client.Client.Provider provider34 = builder26.clientProvider;
        retrofit.RestAdapter.Builder builder35 = builder17.setClient(provider34);
        retrofit.RestAdapter.Builder builder36 = builder7.setClient(provider34);
        restAdapter0.clientProvider = provider34;
        retrofit.ErrorHandler errorHandler38 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(provider34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler38);
    }

    @Test
    public void test09355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09355");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log6 = builder0.log;
        java.util.concurrent.Executor executor7 = builder0.httpExecutor;
        retrofit.Profiler profiler8 = builder0.profiler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(profiler8);
    }

    @Test
    public void test09356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09356");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput16 = request14.getBody();
        java.lang.String str17 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request14.getHeaders();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(headerList18);
    }

    @Test
    public void test09357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09357");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.RequestInterceptor requestInterceptor49 = builder27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor50 = builder27.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = builder27.setServer("hi!");
        retrofit.Server server53 = builder27.server;
        restAdapter9.server = server53;
        retrofit.RestAdapter.Builder builder55 = builder0.setServer(server53);
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Log log57 = builder55.log;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder59 = builder55.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log57);
    }

    @Test
    public void test09358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09358");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList14 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "hi!", headerList14, typedOutput15);
        java.lang.String str17 = request16.getMethod();
        java.lang.String str18 = request16.getMethod();
        java.util.List<retrofit.client.Header> headerList19 = request16.getHeaders();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(headerList19);
    }

    @Test
    public void test09359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09359");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.Profiler profiler9 = null;
        builder8.profiler = profiler9;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder8.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.client.Client.Provider provider14 = builder8.clientProvider;
        builder0.clientProvider = provider14;
        retrofit.Profiler profiler16 = null;
        builder0.profiler = profiler16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder18.setLog(log23);
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        builder18.logLevel = logLevel34;
        retrofit.converter.Converter converter37 = builder18.converter;
        retrofit.ErrorHandler errorHandler38 = builder18.errorHandler;
        retrofit.Server server39 = builder18.server;
        builder0.server = server39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter41.logLevel;
        retrofit.converter.Converter converter44 = null;
        restAdapter41.converter = converter44;
        retrofit.ErrorHandler errorHandler46 = restAdapter41.errorHandler;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log48 = restAdapter47.log;
        retrofit.ErrorHandler errorHandler49 = restAdapter47.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("hi!");
        retrofit.Profiler profiler56 = null;
        builder55.profiler = profiler56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder58.setLog(log63);
        retrofit.RestAdapter restAdapter65 = builder58.build();
        retrofit.converter.Converter converter66 = null;
        builder58.converter = converter66;
        retrofit.ErrorHandler errorHandler68 = null;
        builder58.errorHandler = errorHandler68;
        retrofit.RequestInterceptor requestInterceptor70 = builder58.requestInterceptor;
        builder55.requestInterceptor = requestInterceptor70;
        restAdapter47.requestInterceptor = requestInterceptor70;
        retrofit.RequestInterceptor requestInterceptor73 = restAdapter47.requestInterceptor;
        restAdapter41.requestInterceptor = requestInterceptor73;
        builder0.requestInterceptor = requestInterceptor73;
        retrofit.RestAdapter.Builder builder77 = builder0.setServer("hi!");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNotNull(provider14);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNotNull(server39);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test09360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09360");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.Server server10 = restAdapter0.server;
        retrofit.Profiler profiler11 = null;
        restAdapter0.profiler = profiler11;
        retrofit.Server server13 = restAdapter0.server;
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(server13);
    }

    @Test
    public void test09361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09361");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = null;
        restAdapter10.errorHandler = errorHandler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder13.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = builder13.requestInterceptor;
        restAdapter10.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter.LogLevel logLevel29 = builder27.logLevel;
        builder27.ensureSaneDefaults();
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        restAdapter46.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter46.logLevel = logLevel52;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log44, logLevel52);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = builder55.setLog(log60);
        restAdapter54.log = log60;
        builder27.log = log60;
        java.util.concurrent.Executor executor64 = null;
        builder27.httpExecutor = executor64;
        retrofit.converter.Converter converter66 = null;
        builder27.converter = converter66;
        java.util.concurrent.Executor executor68 = builder27.callbackExecutor;
        restAdapter10.callbackExecutor = executor68;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executor68);
    }

    @Test
    public void test09362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09362");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.RestAdapter restAdapter16 = builder9.build();
        java.util.concurrent.Executor executor17 = restAdapter16.httpExecutor;
        restAdapter0.callbackExecutor = executor17;
        retrofit.RestAdapter.Log log19 = restAdapter0.log;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter20.new RestHandler();
        retrofit.Profiler profiler23 = null;
        restAdapter20.profiler = profiler23;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.client.Client.Provider provider29 = null;
        builder26.clientProvider = provider29;
        retrofit.client.Client.Provider provider31 = builder26.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel32);
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        builder33.ensureSaneDefaults();
        java.util.concurrent.Executor executor36 = builder33.callbackExecutor;
        restAdapter20.httpExecutor = executor36;
        restAdapter0.httpExecutor = executor36;
        retrofit.client.Header[] headerArray41 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList42 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList42, headerArray41);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList42, typedOutput44);
        java.lang.String str46 = request45.getUrl();
        java.util.List<retrofit.client.Header> headerList47 = request45.getHeaders();
        java.lang.String str48 = request45.getMethod();
        retrofit.mime.TypedOutput typedOutput49 = request45.getBody();
        retrofit.mime.TypedOutput typedOutput50 = request45.getBody();
        java.lang.String str51 = request45.getUrl();
        java.lang.String str52 = request45.getUrl();
        java.lang.String str53 = request45.getUrl();
        java.lang.String str54 = request45.getMethod();
        java.util.List<retrofit.client.Header> headerList55 = request45.getHeaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request56 = restAdapter0.logAndReplaceRequest(request45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNotNull(headerArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(headerList47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(typedOutput49);
        org.junit.Assert.assertNull(typedOutput50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(headerList55);
    }

    @Test
    public void test09363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09363");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.Server server5 = restAdapter0.server;
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(executor6);
    }

    @Test
    public void test09364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09364");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.converter.Converter converter10 = restAdapter9.converter;
        retrofit.RestAdapter.Log log11 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter9.getLogLevel();
        boolean boolean14 = logLevel13.log();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(converter10);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09365");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.Profiler profiler22 = null;
        builder0.profiler = profiler22;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test09366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09366");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.Profiler profiler19 = builder0.profiler;
        retrofit.ErrorHandler errorHandler20 = null;
        builder0.errorHandler = errorHandler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter23 = builder22.converter;
        retrofit.RestAdapter.LogLevel logLevel24 = builder22.logLevel;
        builder22.ensureSaneDefaults();
        retrofit.client.Client.Provider provider26 = null;
        builder22.clientProvider = provider26;
        retrofit.Profiler profiler28 = builder22.profiler;
        java.util.concurrent.Executor executor29 = builder22.callbackExecutor;
        retrofit.Server server30 = builder22.server;
        java.util.concurrent.Executor executor31 = builder22.httpExecutor;
        builder0.httpExecutor = executor31;
        retrofit.ErrorHandler errorHandler33 = null;
        builder0.errorHandler = errorHandler33;
        java.lang.Class<?> wildcardClass35 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test09367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09367");
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("Retrofit-Idle", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("Retrofit-Idle", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.getHeaders();
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("hi!", "", headerList31, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("hi!", "hi!", headerList31, typedOutput34);
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(headerList31);
    }

    @Test
    public void test09368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09368");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.httpExecutor = executor4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter restAdapter15 = builder8.build();
        retrofit.converter.Converter converter16 = null;
        builder8.converter = converter16;
        retrofit.ErrorHandler errorHandler18 = null;
        builder8.errorHandler = errorHandler18;
        retrofit.RequestInterceptor requestInterceptor20 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.client.Client.Provider provider26 = builder25.clientProvider;
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        log28.log("");
        builder25.log = log28;
        retrofit.Server server32 = builder25.server;
        builder8.server = server32;
        retrofit.RestAdapter.Builder builder34 = builder3.setServer(server32);
        restAdapter0.server = server32;
        retrofit.client.Response response37 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response39 = restAdapter0.logAndReplaceResponse("hi!", response37, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test09369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09369");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Profiler profiler9 = builder0.profiler;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder10.logLevel = logLevel15;
        retrofit.converter.Converter converter17 = null;
        builder10.converter = converter17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.converter.Converter converter21 = restAdapter19.converter;
        java.util.concurrent.Executor executor22 = null;
        restAdapter19.callbackExecutor = executor22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = null;
        restAdapter24.httpExecutor = executor25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter24.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.Log log29 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter24.logLevel = logLevel30;
        restAdapter19.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder33 = builder10.setLogLevel(logLevel30);
        builder0.logLevel = logLevel30;
        retrofit.Server server35 = builder0.server;
        java.util.concurrent.Executor executor36 = builder0.callbackExecutor;
        retrofit.client.Client client37 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder38 = builder0.setClient(client37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNull(executor36);
    }

    @Test
    public void test09370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09370");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.httpExecutor = executor9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler13 = null;
        restAdapter0.profiler = profiler13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder15.setLog(log20);
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        builder15.logLevel = logLevel31;
        retrofit.converter.Converter converter34 = builder15.converter;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        builder15.requestInterceptor = requestInterceptor35;
        retrofit.converter.Converter converter37 = builder15.converter;
        retrofit.RestAdapter.Log log38 = builder15.log;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.Profiler profiler50 = restAdapter46.profiler;
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter46.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter46.requestInterceptor = requestInterceptor52;
        retrofit.Profiler profiler54 = null;
        restAdapter46.profiler = profiler54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter56.requestInterceptor;
        retrofit.converter.Converter converter58 = restAdapter56.converter;
        java.util.concurrent.Executor executor59 = null;
        restAdapter56.callbackExecutor = executor59;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter56.logLevel = logLevel61;
        restAdapter46.setLogLevel(logLevel61);
        builder39.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        log70.log("");
        builder39.log = log70;
        retrofit.RestAdapter.Builder builder75 = builder15.setLog(log70);
        restAdapter0.log = log70;
        retrofit.converter.Converter converter77 = restAdapter0.converter;
        retrofit.Profiler profiler78 = null;
        restAdapter0.profiler = profiler78;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(converter77);
    }

    @Test
    public void test09371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09371");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.util.List<retrofit.client.Header> headerList11 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput12 = request10.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request10.getHeaders();
        java.lang.String str14 = request10.getUrl();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
    }

    @Test
    public void test09372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09372");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.Profiler profiler2 = null;
        restAdapter0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = builder4.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor6 = builder4.requestInterceptor;
        retrofit.ErrorHandler errorHandler7 = null;
        builder4.errorHandler = errorHandler7;
        retrofit.Profiler profiler9 = builder4.profiler;
        java.util.concurrent.Executor executor10 = builder4.httpExecutor;
        retrofit.converter.Converter converter11 = builder4.converter;
        retrofit.client.Client.Provider provider12 = builder4.clientProvider;
        retrofit.RestAdapter.Builder builder14 = builder4.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        retrofit.Profiler profiler37 = builder36.profiler;
        retrofit.client.Client.Provider provider38 = builder36.clientProvider;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter41 = builder40.build();
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter41.requestInterceptor;
        builder4.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter restAdapter44 = builder4.build();
        retrofit.RequestInterceptor requestInterceptor45 = builder4.requestInterceptor;
        retrofit.ErrorHandler errorHandler46 = builder4.errorHandler;
        retrofit.client.Client.Provider provider47 = builder4.clientProvider;
        java.util.concurrent.Executor executor48 = builder4.callbackExecutor;
        restAdapter0.callbackExecutor = executor48;
        java.util.concurrent.Executor executor50 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(restAdapter41);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(provider47);
        org.junit.Assert.assertNotNull(executor48);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(logLevel51);
    }

    @Test
    public void test09373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09373");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.Profiler profiler14 = null;
        builder13.profiler = profiler14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder13.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter restAdapter18 = builder13.build();
        retrofit.converter.Converter converter19 = restAdapter18.converter;
        retrofit.RestAdapter.Builder builder20 = builder0.setConverter(converter19);
        retrofit.client.Client.Provider provider21 = null;
        builder20.clientProvider = provider21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter25.requestInterceptor = requestInterceptor27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        restAdapter25.log = log37;
        retrofit.ErrorHandler errorHandler41 = null;
        restAdapter25.errorHandler = errorHandler41;
        retrofit.RestAdapter.Log log43 = restAdapter25.log;
        retrofit.RestAdapter.Builder builder44 = builder23.setLog(log43);
        retrofit.RequestInterceptor requestInterceptor45 = builder23.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder48 = builder23.setServer("hi!");
        java.util.concurrent.Executor executor49 = builder48.httpExecutor;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log51 = restAdapter50.log;
        java.util.concurrent.Executor executor52 = restAdapter50.callbackExecutor;
        retrofit.Profiler profiler53 = restAdapter50.profiler;
        retrofit.Profiler profiler54 = null;
        restAdapter50.profiler = profiler54;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        restAdapter50.log = log64;
        log64.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder70 = builder48.setLog(log64);
        log64.log("hi!");
        builder20.log = log64;
        builder20.ensureSaneDefaults();
        retrofit.Server server75 = builder20.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(converter19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(server75);
    }

    @Test
    public void test09374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09374");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        builder21.requestInterceptor = requestInterceptor25;
        builder21.ensureSaneDefaults();
        retrofit.client.Client.Provider provider28 = builder21.clientProvider;
        retrofit.RequestInterceptor requestInterceptor29 = builder21.requestInterceptor;
        retrofit.Server server30 = builder21.server;
        java.util.concurrent.Executor executor31 = builder21.callbackExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(provider28);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(executor31);
    }

    @Test
    public void test09375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09375");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.Profiler profiler5 = null;
        builder0.profiler = profiler5;
        builder0.ensureSaneDefaults();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = builder10.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor12 = builder10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor13 = builder10.requestInterceptor;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.Profiler profiler19 = null;
        builder18.profiler = profiler19;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        builder18.requestInterceptor = requestInterceptor21;
        retrofit.RestAdapter restAdapter23 = builder18.build();
        retrofit.client.Client.Provider provider24 = builder18.clientProvider;
        builder10.clientProvider = provider24;
        retrofit.Profiler profiler26 = null;
        builder10.profiler = profiler26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        builder28.logLevel = logLevel44;
        retrofit.converter.Converter converter47 = builder28.converter;
        retrofit.ErrorHandler errorHandler48 = builder28.errorHandler;
        retrofit.Server server49 = builder28.server;
        builder10.server = server49;
        retrofit.RestAdapter.Builder builder51 = builder0.setServer(server49);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.Profiler profiler56 = restAdapter52.profiler;
        retrofit.ErrorHandler errorHandler57 = null;
        restAdapter52.errorHandler = errorHandler57;
        java.util.concurrent.Executor executor59 = restAdapter52.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor60 = restAdapter52.requestInterceptor;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log62 = restAdapter61.log;
        java.util.concurrent.Executor executor63 = restAdapter61.callbackExecutor;
        retrofit.Profiler profiler64 = restAdapter61.profiler;
        retrofit.Profiler profiler65 = null;
        restAdapter61.profiler = profiler65;
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel76);
        restAdapter61.log = log75;
        log75.log("Retrofit-Idle");
        restAdapter52.log = log75;
        builder51.log = log75;
        retrofit.client.Client.Provider provider83 = builder51.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNotNull(provider24);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(profiler64);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(provider83);
    }

    @Test
    public void test09376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09376");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.ErrorHandler errorHandler12 = null;
        builder8.errorHandler = errorHandler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter16.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter16.requestInterceptor = requestInterceptor18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter16.log = log28;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter16.errorHandler = errorHandler32;
        retrofit.RestAdapter.Log log34 = restAdapter16.log;
        retrofit.RestAdapter.Builder builder35 = builder14.setLog(log34);
        retrofit.RestAdapter.Builder builder36 = builder8.setLog(log34);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor39 = builder37.requestInterceptor;
        retrofit.ErrorHandler errorHandler40 = null;
        builder37.errorHandler = errorHandler40;
        retrofit.converter.Converter converter42 = null;
        builder37.converter = converter42;
        retrofit.ErrorHandler errorHandler44 = null;
        builder37.errorHandler = errorHandler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.Profiler profiler51 = null;
        builder50.profiler = profiler51;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        builder50.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter restAdapter55 = builder50.build();
        retrofit.converter.Converter converter56 = restAdapter55.converter;
        retrofit.RestAdapter.Builder builder57 = builder37.setConverter(converter56);
        builder36.converter = converter56;
        builder0.converter = converter56;
        retrofit.RestAdapter restAdapter60 = builder0.build();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.converter.Converter converter62 = restAdapter60.converter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(converter56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter62);
    }

    @Test
    public void test09377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09377");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter16.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter16.requestInterceptor = requestInterceptor18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter16.log = log28;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log28, logLevel32);
        retrofit.RestAdapter.Builder builder35 = builder6.setLog(log28);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.client.Client.Provider provider39 = null;
        builder36.clientProvider = provider39;
        retrofit.RestAdapter.Builder builder42 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        java.util.concurrent.Executor executor45 = restAdapter43.callbackExecutor;
        retrofit.converter.Converter converter46 = null;
        restAdapter43.converter = converter46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter50.requestInterceptor = requestInterceptor52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        restAdapter50.log = log62;
        retrofit.ErrorHandler errorHandler66 = null;
        restAdapter50.errorHandler = errorHandler66;
        retrofit.RestAdapter.Log log68 = restAdapter50.log;
        retrofit.RestAdapter.Builder builder69 = builder48.setLog(log68);
        restAdapter43.log = log68;
        retrofit.RestAdapter.Builder builder71 = builder36.setLog(log68);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter73 = builder72.converter;
        retrofit.Profiler profiler74 = null;
        builder72.profiler = profiler74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.client.Client.Provider provider79 = null;
        builder76.clientProvider = provider79;
        retrofit.RestAdapter.Builder builder82 = builder76.setServer("hi!");
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor84 = null;
        builder83.httpExecutor = executor84;
        retrofit.RestAdapter.Builder builder87 = builder83.setServer("hi!");
        retrofit.RestAdapter.Log log88 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder89 = builder83.setLog(log88);
        retrofit.RestAdapter restAdapter90 = builder83.build();
        java.util.concurrent.Executor executor91 = restAdapter90.httpExecutor;
        builder82.callbackExecutor = executor91;
        builder72.callbackExecutor = executor91;
        builder71.httpExecutor = executor91;
        builder35.httpExecutor = executor91;
        restAdapter0.callbackExecutor = executor91;
        retrofit.client.Client.Provider provider97 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter98 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler99 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(converter73);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(restAdapter90);
        org.junit.Assert.assertNotNull(executor91);
        org.junit.Assert.assertNull(provider97);
        org.junit.Assert.assertNull(converter98);
        org.junit.Assert.assertNull(errorHandler99);
    }

    @Test
    public void test09378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09378");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler5 = builder0.errorHandler;
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        retrofit.RestAdapter.Builder builder18 = builder0.setLog(log15);
        retrofit.ErrorHandler errorHandler19 = builder0.errorHandler;
        retrofit.RestAdapter.Log log20 = builder0.log;
        retrofit.RequestInterceptor requestInterceptor21 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(requestInterceptor21);
    }

    @Test
    public void test09379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09379");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.Profiler profiler13 = null;
        builder12.profiler = profiler13;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder12.requestInterceptor = requestInterceptor15;
        retrofit.RestAdapter restAdapter17 = builder12.build();
        retrofit.converter.Converter converter18 = restAdapter17.converter;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        log19.log("");
        restAdapter17.log = log19;
        retrofit.RestAdapter.Builder builder23 = builder0.setLog(log19);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        retrofit.RestAdapter restAdapter31 = builder24.build();
        java.util.concurrent.Executor executor32 = restAdapter31.httpExecutor;
        retrofit.client.Client.Provider provider33 = null;
        restAdapter31.clientProvider = provider33;
        retrofit.Profiler profiler35 = restAdapter31.profiler;
        retrofit.Server server36 = restAdapter31.server;
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter31.logLevel;
        java.util.concurrent.Executor executor38 = restAdapter31.httpExecutor;
        builder0.callbackExecutor = executor38;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNotNull(converter18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor38);
    }

    @Test
    public void test09380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09380");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter.LogLevel logLevel26 = builder24.logLevel;
        builder24.ensureSaneDefaults();
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter43.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter43.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log41, logLevel49);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        restAdapter51.log = log57;
        builder24.log = log57;
        java.util.concurrent.Executor executor61 = null;
        builder24.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter64 = builder63.converter;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor66 = restAdapter65.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        restAdapter65.requestInterceptor = requestInterceptor67;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        restAdapter65.log = log77;
        retrofit.ErrorHandler errorHandler81 = null;
        restAdapter65.errorHandler = errorHandler81;
        retrofit.RestAdapter.Log log83 = restAdapter65.log;
        retrofit.RestAdapter.Builder builder84 = builder63.setLog(log83);
        retrofit.RestAdapter.Builder builder85 = builder24.setLog(log83);
        retrofit.RestAdapter.Builder builder86 = builder21.setLog(log83);
        java.util.concurrent.Executor executor87 = builder86.callbackExecutor;
        retrofit.Profiler profiler88 = null;
        builder86.profiler = profiler88;
        retrofit.ErrorHandler errorHandler90 = builder86.errorHandler;
        retrofit.ErrorHandler errorHandler91 = builder86.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(converter64);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(executor87);
        org.junit.Assert.assertNull(errorHandler90);
        org.junit.Assert.assertNull(errorHandler91);
    }

    @Test
    public void test09381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09381");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder28.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.client.Client.Provider provider37 = null;
        builder34.clientProvider = provider37;
        retrofit.client.Client.Provider provider39 = builder34.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor53 = restAdapter52.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        restAdapter52.requestInterceptor = requestInterceptor54;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        restAdapter52.log = log64;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean69 = logLevel68.log();
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log64, logLevel68);
        retrofit.RestAdapter.Builder builder71 = builder42.setLog(log64);
        retrofit.Server server72 = builder71.server;
        retrofit.ErrorHandler errorHandler73 = null;
        builder71.errorHandler = errorHandler73;
        retrofit.Profiler profiler75 = null;
        builder71.profiler = profiler75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = builder77.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor79 = builder77.requestInterceptor;
        java.util.concurrent.Executor executor80 = builder77.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel81 = builder77.logLevel;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor83 = null;
        builder82.httpExecutor = executor83;
        retrofit.RestAdapter.Builder builder86 = builder82.setServer("hi!");
        retrofit.Profiler profiler87 = null;
        builder86.profiler = profiler87;
        retrofit.RequestInterceptor requestInterceptor89 = null;
        builder86.requestInterceptor = requestInterceptor89;
        retrofit.RestAdapter restAdapter91 = builder86.build();
        retrofit.converter.Converter converter92 = null;
        builder86.converter = converter92;
        retrofit.client.Client.Provider provider94 = builder86.clientProvider;
        retrofit.RestAdapter.Builder builder95 = builder77.setClient(provider94);
        builder71.clientProvider = provider94;
        builder41.clientProvider = provider94;
        builder33.clientProvider = provider94;
        retrofit.RequestInterceptor requestInterceptor99 = builder33.requestInterceptor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNull(requestInterceptor79);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(provider94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNull(requestInterceptor99);
    }

    @Test
    public void test09382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09382");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        builder4.logLevel = logLevel6;
        retrofit.RestAdapter.Log log9 = builder4.log;
        retrofit.RestAdapter.LogLevel logLevel10 = builder4.logLevel;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        log19.log("hi!");
        log19.log("Retrofit-Idle");
        builder4.log = log19;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test09383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09383");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder9.logLevel = logLevel14;
        retrofit.converter.Converter converter16 = null;
        builder9.converter = converter16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter19 = builder18.converter;
        retrofit.Profiler profiler20 = null;
        builder18.profiler = profiler20;
        retrofit.RestAdapter.Builder builder23 = builder18.setServer("Retrofit-Idle");
        retrofit.Profiler profiler24 = builder23.profiler;
        retrofit.Server server25 = builder23.server;
        retrofit.RestAdapter.Builder builder26 = builder9.setServer(server25);
        retrofit.RestAdapter.Builder builder27 = builder0.setServer(server25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        retrofit.RestAdapter restAdapter35 = builder28.build();
        java.util.concurrent.Executor executor36 = restAdapter35.httpExecutor;
        retrofit.client.Client.Provider provider37 = null;
        restAdapter35.clientProvider = provider37;
        retrofit.client.Client.Provider provider39 = null;
        restAdapter35.clientProvider = provider39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        builder41.logLevel = logLevel57;
        retrofit.converter.Converter converter60 = builder41.converter;
        retrofit.ErrorHandler errorHandler61 = builder41.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel62 = builder41.logLevel;
        boolean boolean63 = logLevel62.log();
        boolean boolean64 = logLevel62.log();
        restAdapter35.logLevel = logLevel62;
        builder0.logLevel = logLevel62;
        boolean boolean67 = logLevel62.log();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter60);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test09384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09384");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.converter.Converter converter8 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.Profiler profiler11 = null;
        builder9.profiler = profiler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.client.Client.Provider provider16 = null;
        builder13.clientProvider = provider16;
        retrofit.RestAdapter.Builder builder19 = builder13.setServer("hi!");
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder20.setLog(log25);
        retrofit.RestAdapter restAdapter27 = builder20.build();
        java.util.concurrent.Executor executor28 = restAdapter27.httpExecutor;
        builder19.callbackExecutor = executor28;
        builder9.callbackExecutor = executor28;
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        java.util.concurrent.Executor executor37 = null;
        builder32.httpExecutor = executor37;
        retrofit.RestAdapter restAdapter39 = builder32.build();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.client.Client.Provider provider41 = restAdapter39.clientProvider;
        builder9.clientProvider = provider41;
        java.util.concurrent.Executor executor43 = builder9.callbackExecutor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter45 = builder44.converter;
        retrofit.Profiler profiler46 = null;
        builder44.profiler = profiler46;
        retrofit.ErrorHandler errorHandler48 = null;
        builder44.errorHandler = errorHandler48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter51 = builder50.converter;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor53 = restAdapter52.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        restAdapter52.requestInterceptor = requestInterceptor54;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        restAdapter52.log = log64;
        retrofit.ErrorHandler errorHandler68 = null;
        restAdapter52.errorHandler = errorHandler68;
        retrofit.RestAdapter.Log log70 = restAdapter52.log;
        retrofit.RestAdapter.Builder builder71 = builder50.setLog(log70);
        retrofit.RestAdapter.Builder builder72 = builder44.setLog(log70);
        log70.log("hi!");
        builder9.log = log70;
        log70.log("Retrofit-Idle");
        restAdapter0.log = log70;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider41);
        org.junit.Assert.assertNotNull(executor43);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test09385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09385");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.client.Client.Provider provider6 = null;
        restAdapter0.clientProvider = provider6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        restAdapter18.log = log30;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log30, logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder8.setLog(log30);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = builder38.converter;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter40.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter40.requestInterceptor = requestInterceptor42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        restAdapter40.log = log52;
        retrofit.ErrorHandler errorHandler56 = null;
        restAdapter40.errorHandler = errorHandler56;
        retrofit.RestAdapter.Log log58 = restAdapter40.log;
        retrofit.RestAdapter.Builder builder59 = builder38.setLog(log58);
        retrofit.RequestInterceptor requestInterceptor60 = builder38.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor61 = builder38.requestInterceptor;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter63 = null;
        builder62.converter = converter63;
        retrofit.client.Client.Provider provider65 = null;
        builder62.clientProvider = provider65;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        builder62.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.Profiler profiler74 = null;
        builder73.profiler = profiler74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder82 = builder76.setLog(log81);
        retrofit.RestAdapter restAdapter83 = builder76.build();
        retrofit.converter.Converter converter84 = null;
        builder76.converter = converter84;
        retrofit.ErrorHandler errorHandler86 = null;
        builder76.errorHandler = errorHandler86;
        retrofit.RequestInterceptor requestInterceptor88 = builder76.requestInterceptor;
        builder73.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.Builder builder90 = builder62.setRequestInterceptor(requestInterceptor88);
        retrofit.RestAdapter.Builder builder91 = builder38.setRequestInterceptor(requestInterceptor88);
        retrofit.RestAdapter.Builder builder92 = builder8.setRequestInterceptor(requestInterceptor88);
        restAdapter0.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.LogLevel logLevel94 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor95 = restAdapter0.callbackExecutor;
        retrofit.client.Client.Provider provider96 = restAdapter0.clientProvider;
        java.lang.Throwable throwable97 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable97, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(logLevel94);
        org.junit.Assert.assertNull(executor95);
        org.junit.Assert.assertNull(provider96);
    }

    @Test
    public void test09386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09386");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.Server server22 = builder0.server;
        retrofit.Profiler profiler23 = builder0.profiler;
        java.util.concurrent.Executor executor24 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder26 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("hi!");
        java.util.concurrent.Executor executor31 = builder30.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor31);
    }

    @Test
    public void test09387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09387");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        java.lang.String str17 = request16.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList18, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", headerList18, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList18, typedOutput25);
        java.lang.String str27 = request26.getMethod();
        retrofit.mime.TypedOutput typedOutput28 = request26.getBody();
        java.lang.String str29 = request26.getMethod();
        java.util.List<retrofit.client.Header> headerList30 = request26.getHeaders();
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", headerList30, typedOutput31);
        java.lang.String str33 = request32.getUrl();
        java.lang.String str34 = request32.getMethod();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Retrofit-Idle" + "'", str27, "Retrofit-Idle");
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-Idle" + "'", str29, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
    }

    @Test
    public void test09388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09388");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = builder25.build();
        java.util.concurrent.Executor executor33 = restAdapter32.httpExecutor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.client.Client.Provider provider37 = null;
        builder34.clientProvider = provider37;
        retrofit.RestAdapter.Builder builder40 = builder34.setServer("hi!");
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = builder41.build();
        java.util.concurrent.Executor executor49 = restAdapter48.httpExecutor;
        builder40.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = builder21.setExecutors(executor33, executor49);
        java.util.concurrent.Executor executor52 = builder51.callbackExecutor;
        retrofit.Server server53 = builder51.server;
        retrofit.converter.Converter converter54 = builder51.converter;
        retrofit.Profiler profiler55 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder56 = builder51.setProfiler(profiler55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(executor52);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(converter54);
    }

    @Test
    public void test09389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09389");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.converter.Converter converter22 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor24 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = null;
        builder25.converter = converter26;
        retrofit.client.Client.Provider provider28 = null;
        builder25.clientProvider = provider28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        builder25.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        restAdapter34.log = log46;
        retrofit.ErrorHandler errorHandler50 = null;
        restAdapter34.errorHandler = errorHandler50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = builder52.converter;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter54.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter54.requestInterceptor = requestInterceptor56;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel67);
        restAdapter54.log = log66;
        retrofit.ErrorHandler errorHandler70 = null;
        restAdapter54.errorHandler = errorHandler70;
        retrofit.RestAdapter.Log log72 = restAdapter54.log;
        retrofit.RestAdapter.Builder builder73 = builder52.setLog(log72);
        retrofit.RequestInterceptor requestInterceptor74 = builder52.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor75 = builder52.requestInterceptor;
        retrofit.RestAdapter.Builder builder77 = builder52.setServer("hi!");
        retrofit.Server server78 = builder52.server;
        restAdapter34.server = server78;
        builder32.server = server78;
        retrofit.RestAdapter.Builder builder81 = builder25.setServer(server78);
        retrofit.RestAdapter restAdapter82 = builder25.build();
        retrofit.Server server83 = builder25.server;
        retrofit.RestAdapter.Builder builder84 = builder0.setServer(server83);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder84.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test09390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09390");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log19 = restAdapter18.log;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.Profiler profiler21 = restAdapter18.profiler;
        retrofit.Profiler profiler22 = null;
        restAdapter18.profiler = profiler22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        restAdapter18.log = log32;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        builder36.logLevel = logLevel52;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log32, logLevel52);
        boolean boolean56 = logLevel52.log();
        boolean boolean57 = logLevel52.log();
        boolean boolean58 = logLevel52.log();
        retrofit.RestAdapter.Builder builder59 = builder9.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter61 = null;
        builder60.converter = converter61;
        retrofit.client.Client.Provider provider63 = null;
        builder60.clientProvider = provider63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        builder60.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.Profiler profiler72 = null;
        builder71.profiler = profiler72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder74.setLog(log79);
        retrofit.RestAdapter restAdapter81 = builder74.build();
        retrofit.converter.Converter converter82 = null;
        builder74.converter = converter82;
        retrofit.ErrorHandler errorHandler84 = null;
        builder74.errorHandler = errorHandler84;
        retrofit.RequestInterceptor requestInterceptor86 = builder74.requestInterceptor;
        builder71.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter.Builder builder88 = builder60.setRequestInterceptor(requestInterceptor86);
        retrofit.client.Client.Provider provider89 = null;
        builder88.clientProvider = provider89;
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        log91.log("");
        retrofit.RestAdapter.Builder builder94 = builder88.setLog(log91);
        retrofit.RequestInterceptor requestInterceptor95 = builder94.requestInterceptor;
        builder9.requestInterceptor = requestInterceptor95;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(log91);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(requestInterceptor95);
    }

    @Test
    public void test09391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09391");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider9 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter14.logLevel = logLevel16;
        retrofit.Profiler profiler18 = restAdapter14.profiler;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter21 = builder20.converter;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter22.requestInterceptor = requestInterceptor24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        restAdapter22.log = log34;
        retrofit.ErrorHandler errorHandler38 = null;
        restAdapter22.errorHandler = errorHandler38;
        retrofit.RestAdapter.Log log40 = restAdapter22.log;
        retrofit.RestAdapter.Builder builder41 = builder20.setLog(log40);
        retrofit.Profiler profiler42 = builder41.profiler;
        retrofit.RestAdapter.LogLevel logLevel43 = builder41.logLevel;
        restAdapter14.logLevel = logLevel43;
        java.util.concurrent.Executor executor45 = restAdapter14.callbackExecutor;
        retrofit.Server server46 = restAdapter14.server;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter48 = builder47.converter;
        retrofit.Profiler profiler49 = null;
        builder47.profiler = profiler49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.client.Client.Provider provider54 = null;
        builder51.clientProvider = provider54;
        retrofit.RestAdapter.Builder builder57 = builder51.setServer("hi!");
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder58.setLog(log63);
        retrofit.RestAdapter restAdapter65 = builder58.build();
        java.util.concurrent.Executor executor66 = restAdapter65.httpExecutor;
        builder57.callbackExecutor = executor66;
        builder47.callbackExecutor = executor66;
        restAdapter14.httpExecutor = executor66;
        restAdapter10.callbackExecutor = executor66;
        builder0.callbackExecutor = executor66;
        retrofit.Profiler profiler72 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder73 = builder0.setProfiler(profiler72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertNull(converter48);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(executor66);
    }

    @Test
    public void test09392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09392");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter8.logLevel = logLevel10;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter8.requestInterceptor = requestInterceptor12;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter8.logLevel = logLevel14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.Profiler profiler18 = null;
        builder16.profiler = profiler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.client.Client.Provider provider23 = null;
        builder20.clientProvider = provider23;
        retrofit.RestAdapter.Builder builder26 = builder20.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.RestAdapter restAdapter34 = builder27.build();
        java.util.concurrent.Executor executor35 = restAdapter34.httpExecutor;
        builder26.callbackExecutor = executor35;
        builder16.callbackExecutor = executor35;
        restAdapter8.httpExecutor = executor35;
        restAdapter0.callbackExecutor = executor35;
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = null;
        builder42.converter = converter43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        builder42.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.Profiler profiler54 = null;
        builder53.profiler = profiler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder56.setLog(log61);
        retrofit.RestAdapter restAdapter63 = builder56.build();
        retrofit.converter.Converter converter64 = null;
        builder56.converter = converter64;
        retrofit.ErrorHandler errorHandler66 = null;
        builder56.errorHandler = errorHandler66;
        retrofit.RequestInterceptor requestInterceptor68 = builder56.requestInterceptor;
        builder53.requestInterceptor = requestInterceptor68;
        retrofit.RestAdapter.Builder builder70 = builder42.setRequestInterceptor(requestInterceptor68);
        retrofit.client.Client.Provider provider71 = null;
        builder70.clientProvider = provider71;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        log73.log("");
        retrofit.RestAdapter.Builder builder76 = builder70.setLog(log73);
        java.util.concurrent.Executor executor77 = builder76.httpExecutor;
        builder76.ensureSaneDefaults();
        retrofit.client.Client.Provider provider79 = builder76.clientProvider;
        builder41.clientProvider = provider79;
        restAdapter0.clientProvider = provider79;
        java.lang.Throwable throwable82 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable82, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNotNull(provider79);
    }

    @Test
    public void test09393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09393");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = null;
        builder24.converter = converter25;
        retrofit.client.Client.Provider provider27 = null;
        builder24.clientProvider = provider27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        builder24.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter restAdapter45 = builder38.build();
        retrofit.converter.Converter converter46 = null;
        builder38.converter = converter46;
        retrofit.ErrorHandler errorHandler48 = null;
        builder38.errorHandler = errorHandler48;
        retrofit.RequestInterceptor requestInterceptor50 = builder38.requestInterceptor;
        builder35.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.Builder builder52 = builder24.setRequestInterceptor(requestInterceptor50);
        retrofit.RestAdapter.Builder builder53 = builder0.setRequestInterceptor(requestInterceptor50);
        retrofit.RequestInterceptor requestInterceptor54 = builder53.requestInterceptor;
        retrofit.RestAdapter.Builder builder56 = builder53.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log57 = builder56.log;
        log57.log("hi!");
        log57.log("Retrofit-Idle");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
    }

    @Test
    public void test09394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09394");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.client.Client.Provider provider13 = null;
        builder10.clientProvider = provider13;
        retrofit.RestAdapter.Builder builder16 = builder10.setServer("hi!");
        retrofit.Profiler profiler17 = builder10.profiler;
        retrofit.RestAdapter restAdapter18 = builder10.build();
        retrofit.converter.Converter converter19 = restAdapter18.converter;
        retrofit.RestAdapter.Builder builder20 = builder7.setConverter(converter19);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.client.Client.Provider provider24 = null;
        builder21.clientProvider = provider24;
        retrofit.RestAdapter.Builder builder27 = builder21.setServer("hi!");
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.Profiler profiler33 = null;
        builder32.profiler = profiler33;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        builder32.requestInterceptor = requestInterceptor35;
        retrofit.RestAdapter restAdapter37 = builder32.build();
        retrofit.converter.Converter converter38 = restAdapter37.converter;
        retrofit.RestAdapter.Builder builder39 = builder21.setConverter(converter38);
        retrofit.RestAdapter.Builder builder40 = builder7.setConverter(converter38);
        retrofit.converter.Converter converter41 = builder7.converter;
        retrofit.converter.Converter converter42 = builder7.converter;
        retrofit.Profiler profiler43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder44 = builder7.setProfiler(profiler43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(converter19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(converter38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(converter41);
        org.junit.Assert.assertNotNull(converter42);
    }

    @Test
    public void test09395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09395");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Profiler profiler7 = null;
        builder6.profiler = profiler7;
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter16.logLevel;
        retrofit.converter.Converter converter19 = null;
        restAdapter16.converter = converter19;
        retrofit.ErrorHandler errorHandler21 = restAdapter16.errorHandler;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log23 = restAdapter22.log;
        retrofit.ErrorHandler errorHandler24 = restAdapter22.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.Profiler profiler31 = null;
        builder30.profiler = profiler31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        retrofit.converter.Converter converter41 = null;
        builder33.converter = converter41;
        retrofit.ErrorHandler errorHandler43 = null;
        builder33.errorHandler = errorHandler43;
        retrofit.RequestInterceptor requestInterceptor45 = builder33.requestInterceptor;
        builder30.requestInterceptor = requestInterceptor45;
        restAdapter22.requestInterceptor = requestInterceptor45;
        restAdapter16.requestInterceptor = requestInterceptor45;
        restAdapter10.requestInterceptor = requestInterceptor45;
        builder6.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = builder51.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor53 = builder51.requestInterceptor;
        retrofit.ErrorHandler errorHandler54 = null;
        builder51.errorHandler = errorHandler54;
        retrofit.Profiler profiler56 = builder51.profiler;
        java.util.concurrent.Executor executor57 = builder51.httpExecutor;
        retrofit.converter.Converter converter58 = builder51.converter;
        retrofit.Profiler profiler59 = null;
        builder51.profiler = profiler59;
        retrofit.RestAdapter.Log log61 = builder51.log;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        retrofit.RestAdapter restAdapter69 = builder62.build();
        retrofit.converter.Converter converter70 = null;
        builder62.converter = converter70;
        retrofit.ErrorHandler errorHandler72 = null;
        builder62.errorHandler = errorHandler72;
        retrofit.RequestInterceptor requestInterceptor74 = builder62.requestInterceptor;
        retrofit.RestAdapter.Builder builder75 = builder51.setRequestInterceptor(requestInterceptor74);
        retrofit.RestAdapter.Builder builder76 = builder6.setRequestInterceptor(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test09396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09396");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler9 = restAdapter0.profiler;
        retrofit.Server server10 = null;
        restAdapter0.server = server10;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(profiler9);
    }

    @Test
    public void test09397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09397");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log19, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLogLevel(logLevel26);
        retrofit.ErrorHandler errorHandler30 = null;
        builder29.errorHandler = errorHandler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        builder35.logLevel = logLevel51;
        retrofit.converter.Converter converter54 = builder35.converter;
        retrofit.ErrorHandler errorHandler55 = builder35.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel56 = builder35.logLevel;
        retrofit.Server server57 = builder35.server;
        builder32.server = server57;
        retrofit.RestAdapter.Builder builder59 = builder29.setServer(server57);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.setLogLevel(logLevel64);
        retrofit.Server server66 = restAdapter60.server;
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter60.logLevel;
        builder29.logLevel = logLevel67;
        retrofit.Profiler profiler69 = null;
        builder29.profiler = profiler69;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test09398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09398");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = null;
        restAdapter9.httpExecutor = executor10;
        retrofit.client.Client.Provider provider12 = restAdapter9.clientProvider;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.ErrorHandler errorHandler16 = restAdapter13.errorHandler;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter32.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter32.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log30, logLevel38);
        log30.log("Retrofit-Idle");
        restAdapter13.log = log30;
        restAdapter9.log = log30;
        restAdapter0.log = log30;
        java.util.concurrent.Executor executor46 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter47 = restAdapter0.converter;
        retrofit.converter.Converter converter48 = restAdapter0.converter;
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNull(converter48);
    }

    @Test
    public void test09399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09399");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        builder4.logLevel = logLevel6;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.RestAdapter.Log log10 = restAdapter9.log;
        java.util.concurrent.Executor executor11 = restAdapter9.callbackExecutor;
        retrofit.Server server12 = restAdapter9.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(server12);
    }

    @Test
    public void test09400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09400");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.client.Client.Provider provider15 = builder13.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(provider15);
    }

    @Test
    public void test09401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09401");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.Profiler profiler31 = builder29.profiler;
        java.util.concurrent.Executor executor32 = builder29.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        java.util.concurrent.Executor executor41 = restAdapter40.httpExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.RestAdapter.Builder builder48 = builder42.setServer("hi!");
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        java.util.concurrent.Executor executor57 = restAdapter56.httpExecutor;
        builder48.callbackExecutor = executor57;
        retrofit.RestAdapter.Builder builder59 = builder29.setExecutors(executor41, executor57);
        restAdapter7.httpExecutor = executor41;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter7.logLevel = logLevel70;
        retrofit.ErrorHandler errorHandler73 = restAdapter7.errorHandler;
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter7.new RestHandler();
        retrofit.converter.Converter converter77 = restAdapter7.converter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler73);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(converter77);
    }

    @Test
    public void test09402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09402");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Server server22 = null;
        builder0.server = server22;
        java.util.concurrent.Executor executor24 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        builder0.requestInterceptor = requestInterceptor25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        log35.log("hi!");
        builder0.log = log35;
        retrofit.client.Client.Provider provider41 = null;
        builder0.clientProvider = provider41;
        retrofit.RestAdapter.LogLevel logLevel43 = builder0.logLevel;
        java.util.concurrent.Executor executor44 = builder0.callbackExecutor;
        retrofit.Profiler profiler45 = null;
        builder0.profiler = profiler45;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor44);
    }

    @Test
    public void test09403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09403");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.Profiler profiler11 = restAdapter8.profiler;
        retrofit.Profiler profiler12 = null;
        restAdapter8.profiler = profiler12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        builder26.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log22, logLevel42);
        retrofit.converter.Converter converter46 = restAdapter45.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter45.logLevel;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.RestAdapter restAdapter55 = builder48.build();
        java.util.concurrent.Executor executor56 = restAdapter55.httpExecutor;
        restAdapter45.callbackExecutor = executor56;
        retrofit.Server server58 = restAdapter45.server;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter59.logLevel = logLevel61;
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter59.requestInterceptor;
        java.util.concurrent.Executor executor64 = restAdapter59.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler65 = restAdapter59.new RestHandler();
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder66.setLog(log71);
        restAdapter59.log = log71;
        restAdapter45.log = log71;
        retrofit.RestAdapter.LogLevel logLevel75 = null;
        restAdapter45.setLogLevel(logLevel75);
        retrofit.RequestInterceptor requestInterceptor77 = restAdapter45.requestInterceptor;
        retrofit.ErrorHandler errorHandler78 = restAdapter45.errorHandler;
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(requestInterceptor77);
        org.junit.Assert.assertNull(errorHandler78);
    }

    @Test
    public void test09404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09404");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log7 = restAdapter6.log;
        retrofit.ErrorHandler errorHandler8 = restAdapter6.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter6.new RestHandler();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.Profiler profiler15 = null;
        builder14.profiler = profiler15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder17.setLog(log22);
        retrofit.RestAdapter restAdapter24 = builder17.build();
        retrofit.converter.Converter converter25 = null;
        builder17.converter = converter25;
        retrofit.ErrorHandler errorHandler27 = null;
        builder17.errorHandler = errorHandler27;
        retrofit.RequestInterceptor requestInterceptor29 = builder17.requestInterceptor;
        builder14.requestInterceptor = requestInterceptor29;
        restAdapter6.requestInterceptor = requestInterceptor29;
        restAdapter0.requestInterceptor = requestInterceptor29;
        retrofit.converter.Converter converter33 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNull(converter33);
    }

    @Test
    public void test09405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09405");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = builder25.build();
        java.util.concurrent.Executor executor33 = restAdapter32.httpExecutor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.client.Client.Provider provider37 = null;
        builder34.clientProvider = provider37;
        retrofit.RestAdapter.Builder builder40 = builder34.setServer("hi!");
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = builder41.build();
        java.util.concurrent.Executor executor49 = restAdapter48.httpExecutor;
        builder40.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = builder21.setExecutors(executor33, executor49);
        retrofit.converter.Converter converter52 = builder51.converter;
        retrofit.converter.Converter converter53 = builder51.converter;
        retrofit.RequestInterceptor requestInterceptor54 = builder51.requestInterceptor;
        retrofit.Profiler profiler55 = builder51.profiler;
        retrofit.Profiler profiler56 = builder51.profiler;
        retrofit.converter.Converter converter57 = builder51.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(converter57);
    }

    @Test
    public void test09406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09406");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter7.clientProvider = provider9;
        retrofit.client.Client.Provider provider11 = null;
        restAdapter7.clientProvider = provider11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        java.util.concurrent.Executor executor21 = restAdapter20.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter20.new RestHandler();
        retrofit.converter.Converter converter23 = restAdapter20.converter;
        restAdapter7.converter = converter23;
        java.util.concurrent.Executor executor25 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.converter.Converter converter28 = restAdapter26.converter;
        java.util.concurrent.Executor executor29 = null;
        restAdapter26.callbackExecutor = executor29;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter26.logLevel;
        java.util.concurrent.Executor executor32 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        java.util.concurrent.Executor executor41 = restAdapter40.httpExecutor;
        restAdapter26.httpExecutor = executor41;
        restAdapter7.httpExecutor = executor41;
        retrofit.RestAdapter.Log log44 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = builder52.converter;
        retrofit.RestAdapter.LogLevel logLevel54 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder51.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter57 = builder56.converter;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor59 = restAdapter58.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        restAdapter58.requestInterceptor = requestInterceptor60;
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel71);
        restAdapter58.log = log70;
        retrofit.ErrorHandler errorHandler74 = null;
        restAdapter58.errorHandler = errorHandler74;
        retrofit.RestAdapter.Log log76 = restAdapter58.log;
        retrofit.RestAdapter.Builder builder77 = builder56.setLog(log76);
        retrofit.RequestInterceptor requestInterceptor78 = builder56.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor79 = builder56.requestInterceptor;
        retrofit.RestAdapter.Builder builder81 = builder56.setServer("hi!");
        retrofit.Server server82 = builder56.server;
        retrofit.RestAdapter.Builder builder83 = builder51.setServer(server82);
        retrofit.RestAdapter.LogLevel logLevel84 = builder51.logLevel;
        retrofit.Server server85 = builder51.server;
        restAdapter7.server = server85;
        retrofit.client.Response response88 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response90 = restAdapter7.logAndReplaceResponse("hi!", response88, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(converter23);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(requestInterceptor78);
        org.junit.Assert.assertNull(requestInterceptor79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server85);
    }

    @Test
    public void test09407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09407");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor9 = builder7.requestInterceptor;
        java.util.concurrent.Executor executor10 = builder7.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel11 = builder7.logLevel;
        retrofit.ErrorHandler errorHandler12 = builder7.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = null;
        builder13.converter = converter14;
        retrofit.client.Client.Provider provider16 = null;
        builder13.clientProvider = provider16;
        retrofit.converter.Converter converter18 = builder13.converter;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter.LogLevel logLevel21 = builder19.logLevel;
        builder19.ensureSaneDefaults();
        retrofit.client.Client.Provider provider23 = null;
        builder19.clientProvider = provider23;
        retrofit.Profiler profiler25 = builder19.profiler;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = builder26.callbackExecutor;
        retrofit.RestAdapter.Log log28 = builder26.log;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter48.logLevel = logLevel50;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.setLogLevel(logLevel52);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log45, logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder26.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder56.setLog(log61);
        builder26.log = log61;
        retrofit.RestAdapter.Builder builder64 = builder19.setLog(log61);
        retrofit.RequestInterceptor requestInterceptor65 = builder19.requestInterceptor;
        retrofit.RestAdapter.Builder builder66 = builder13.setRequestInterceptor(requestInterceptor65);
        retrofit.RestAdapter.Builder builder67 = builder7.setRequestInterceptor(requestInterceptor65);
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.client.Client.Provider provider71 = null;
        builder68.clientProvider = provider71;
        retrofit.client.Client.Provider provider73 = builder68.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder75 = builder68.setLogLevel(logLevel74);
        java.util.concurrent.Executor executor76 = builder75.callbackExecutor;
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.client.Client.Provider provider81 = null;
        builder78.clientProvider = provider81;
        retrofit.RestAdapter.Builder builder84 = builder78.setServer("hi!");
        retrofit.Profiler profiler85 = builder78.profiler;
        retrofit.RestAdapter restAdapter86 = builder78.build();
        retrofit.converter.Converter converter87 = restAdapter86.converter;
        retrofit.RestAdapter.Builder builder88 = builder75.setConverter(converter87);
        builder7.converter = converter87;
        restAdapter0.converter = converter87;
        retrofit.client.Client.Provider provider91 = restAdapter0.clientProvider;
        retrofit.client.Response response93 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response95 = restAdapter0.logAndReplaceResponse("", response93, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(provider73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(profiler85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(converter87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(provider91);
    }

    @Test
    public void test09408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09408");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder9.logLevel = logLevel14;
        retrofit.converter.Converter converter16 = null;
        builder9.converter = converter16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter19 = builder18.converter;
        retrofit.Profiler profiler20 = null;
        builder18.profiler = profiler20;
        retrofit.RestAdapter.Builder builder23 = builder18.setServer("Retrofit-Idle");
        retrofit.Profiler profiler24 = builder23.profiler;
        retrofit.Server server25 = builder23.server;
        retrofit.RestAdapter.Builder builder26 = builder9.setServer(server25);
        retrofit.RestAdapter.Builder builder27 = builder0.setServer(server25);
        java.util.concurrent.Executor executor28 = builder27.httpExecutor;
        retrofit.RestAdapter restAdapter29 = builder27.build();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.client.Client.Provider provider33 = null;
        builder30.clientProvider = provider33;
        retrofit.RestAdapter.Builder builder36 = builder30.setServer("hi!");
        retrofit.Profiler profiler37 = builder30.profiler;
        retrofit.RestAdapter restAdapter38 = builder30.build();
        retrofit.converter.Converter converter39 = restAdapter38.converter;
        retrofit.Server server40 = restAdapter38.server;
        retrofit.RestAdapter.Builder builder41 = builder27.setServer(server40);
        retrofit.client.Client client42 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder43 = builder27.setClient(client42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(converter39);
        org.junit.Assert.assertNotNull(server40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test09409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09409");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder0.profiler;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter23.logLevel = logLevel25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter23.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter23.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        builder35.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter restAdapter40 = builder35.build();
        retrofit.converter.Converter converter41 = null;
        builder35.converter = converter41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter43.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter43.getLogLevel();
        retrofit.client.Client.Provider provider48 = null;
        restAdapter43.clientProvider = provider48;
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter43.logLevel;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter51.logLevel = logLevel53;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        restAdapter51.requestInterceptor = requestInterceptor55;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter51.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter60 = builder59.converter;
        retrofit.Profiler profiler61 = null;
        builder59.profiler = profiler61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.httpExecutor = executor64;
        retrofit.client.Client.Provider provider66 = null;
        builder63.clientProvider = provider66;
        retrofit.RestAdapter.Builder builder69 = builder63.setServer("hi!");
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.RestAdapter.Builder builder74 = builder70.setServer("hi!");
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder76 = builder70.setLog(log75);
        retrofit.RestAdapter restAdapter77 = builder70.build();
        java.util.concurrent.Executor executor78 = restAdapter77.httpExecutor;
        builder69.callbackExecutor = executor78;
        builder59.callbackExecutor = executor78;
        restAdapter51.httpExecutor = executor78;
        restAdapter43.callbackExecutor = executor78;
        builder35.callbackExecutor = executor78;
        restAdapter23.callbackExecutor = executor78;
        builder0.httpExecutor = executor78;
        retrofit.RestAdapter.Log log86 = builder0.log;
        retrofit.Profiler profiler87 = builder0.profiler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter60);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(executor78);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNull(profiler87);
    }

    @Test
    public void test09410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09410");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.RestAdapter.Builder builder20 = builder7.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder21 = builder4.setLogLevel(logLevel18);
        retrofit.RestAdapter.Log log22 = builder21.log;
        retrofit.Profiler profiler23 = null;
        builder21.profiler = profiler23;
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.Profiler profiler28 = null;
        builder26.profiler = profiler28;
        retrofit.ErrorHandler errorHandler30 = null;
        builder26.errorHandler = errorHandler30;
        retrofit.RestAdapter.Builder builder33 = builder26.setServer("hi!");
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = null;
        builder34.converter = converter35;
        retrofit.client.Client.Provider provider37 = null;
        builder34.clientProvider = provider37;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder34.requestInterceptor = requestInterceptor39;
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.ErrorHandler errorHandler60 = null;
        restAdapter44.errorHandler = errorHandler60;
        retrofit.RestAdapter.Log log62 = restAdapter44.log;
        retrofit.RestAdapter.Builder builder63 = builder42.setLog(log62);
        retrofit.RequestInterceptor requestInterceptor64 = builder42.requestInterceptor;
        java.util.concurrent.Executor executor65 = builder42.httpExecutor;
        retrofit.ErrorHandler errorHandler66 = builder42.errorHandler;
        retrofit.RestAdapter.Log log67 = builder42.log;
        retrofit.RestAdapter.Builder builder68 = builder34.setLog(log67);
        builder26.log = log67;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = builder70.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor72 = builder70.requestInterceptor;
        retrofit.Profiler profiler73 = builder70.profiler;
        retrofit.RestAdapter.LogLevel logLevel74 = builder70.logLevel;
        retrofit.RestAdapter.Builder builder75 = builder26.setLogLevel(logLevel74);
        retrofit.RestAdapter.Builder builder76 = builder21.setLogLevel(logLevel74);
        java.lang.Class<?> wildcardClass77 = builder76.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNull(profiler73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test09411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09411");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.client.Client.Provider provider9 = null;
        builder0.clientProvider = provider9;
        java.util.concurrent.Executor executor11 = builder0.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder13 = builder0.setProfiler(profiler12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor11);
    }

    @Test
    public void test09412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09412");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter5.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        restAdapter5.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter5.getLogLevel();
        retrofit.client.Client.Provider provider10 = null;
        restAdapter5.clientProvider = provider10;
        retrofit.ErrorHandler errorHandler12 = restAdapter5.errorHandler;
        retrofit.client.Client.Provider provider13 = restAdapter5.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter5.new RestHandler();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter15.requestInterceptor = requestInterceptor17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        restAdapter15.log = log27;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter15.errorHandler = errorHandler31;
        retrofit.converter.Converter converter33 = null;
        restAdapter15.converter = converter33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = builder35.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor37 = builder35.requestInterceptor;
        retrofit.ErrorHandler errorHandler38 = null;
        builder35.errorHandler = errorHandler38;
        retrofit.converter.Converter converter40 = null;
        builder35.converter = converter40;
        retrofit.ErrorHandler errorHandler42 = null;
        builder35.errorHandler = errorHandler42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.ErrorHandler errorHandler60 = null;
        restAdapter44.errorHandler = errorHandler60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter63 = builder62.converter;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor65 = restAdapter64.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        restAdapter64.requestInterceptor = requestInterceptor66;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel77);
        restAdapter64.log = log76;
        retrofit.ErrorHandler errorHandler80 = null;
        restAdapter64.errorHandler = errorHandler80;
        retrofit.RestAdapter.Log log82 = restAdapter64.log;
        retrofit.RestAdapter.Builder builder83 = builder62.setLog(log82);
        retrofit.RequestInterceptor requestInterceptor84 = builder62.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor85 = builder62.requestInterceptor;
        retrofit.RestAdapter.Builder builder87 = builder62.setServer("hi!");
        retrofit.Server server88 = builder62.server;
        restAdapter44.server = server88;
        retrofit.RestAdapter.Builder builder90 = builder35.setServer(server88);
        restAdapter15.server = server88;
        restAdapter5.server = server88;
        restAdapter0.server = server88;
        retrofit.Profiler profiler94 = restAdapter0.profiler;
        retrofit.Server server95 = restAdapter0.server;
        retrofit.Profiler profiler96 = null;
        restAdapter0.profiler = profiler96;
        retrofit.client.Client.Provider provider98 = null;
        restAdapter0.clientProvider = provider98;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(requestInterceptor84);
        org.junit.Assert.assertNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(server88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(profiler94);
        org.junit.Assert.assertNotNull(server95);
    }

    @Test
    public void test09413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09413");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.converter.Converter converter11 = restAdapter9.converter;
        java.util.concurrent.Executor executor12 = null;
        restAdapter9.callbackExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = null;
        restAdapter14.httpExecutor = executor15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter14.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Log log19 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel20;
        restAdapter9.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder23 = builder0.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.Profiler profiler29 = null;
        builder28.profiler = profiler29;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        builder28.requestInterceptor = requestInterceptor31;
        retrofit.RestAdapter restAdapter33 = builder28.build();
        retrofit.converter.Converter converter34 = restAdapter33.converter;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        builder0.httpExecutor = executor35;
        retrofit.RestAdapter restAdapter37 = builder0.build();
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        java.util.concurrent.Executor executor49 = null;
        restAdapter48.httpExecutor = executor49;
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        log51.log("Retrofit-Idle");
        restAdapter37.log = log51;
        log51.log("Retrofit-Idle");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(converter34);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
    }

    @Test
    public void test09414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09414");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        java.lang.String str13 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput14 = request10.getBody();
        java.util.List<retrofit.client.Header> headerList15 = request10.getHeaders();
        java.util.List<retrofit.client.Header> headerList16 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", headerList16, typedOutput17);
        java.lang.String str19 = request18.getMethod();
        retrofit.mime.TypedOutput typedOutput20 = request18.getBody();
        java.lang.String str21 = request18.getMethod();
        retrofit.mime.TypedOutput typedOutput22 = request18.getBody();
        java.util.List<retrofit.client.Header> headerList23 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList23, typedOutput24);
        java.util.List<retrofit.client.Header> headerList26 = request25.getHeaders();
        retrofit.mime.TypedOutput typedOutput27 = request25.getBody();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
    }

    @Test
    public void test09415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09415");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getMethod();
        java.lang.String str8 = request6.getMethod();
        java.lang.String str9 = request6.getUrl();
        java.lang.String str10 = request6.getUrl();
        java.lang.String str11 = request6.getUrl();
        java.lang.String str12 = request6.getMethod();
        java.lang.String str13 = request6.getUrl();
        java.lang.Class<?> wildcardClass14 = request6.getClass();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test09416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09416");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        java.util.concurrent.Executor executor6 = builder4.httpExecutor;
        retrofit.Profiler profiler7 = null;
        builder4.profiler = profiler7;
        retrofit.client.Client.Provider provider9 = builder4.clientProvider;
        retrofit.Profiler profiler10 = builder4.profiler;
        retrofit.RequestInterceptor requestInterceptor11 = builder4.requestInterceptor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        builder12.logLevel = logLevel28;
        retrofit.converter.Converter converter31 = builder12.converter;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        builder12.requestInterceptor = requestInterceptor32;
        retrofit.RestAdapter restAdapter34 = builder12.build();
        retrofit.Server server35 = builder12.server;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        builder36.logLevel = logLevel52;
        retrofit.converter.Converter converter55 = builder36.converter;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        builder36.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter restAdapter58 = builder36.build();
        retrofit.client.Client.Provider provider59 = builder36.clientProvider;
        builder12.clientProvider = provider59;
        retrofit.RestAdapter.Builder builder61 = builder4.setClient(provider59);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(server35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(provider59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test09417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09417");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.ErrorHandler errorHandler11 = builder6.errorHandler;
        retrofit.client.Client.Provider provider12 = builder6.clientProvider;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(provider12);
    }

    @Test
    public void test09418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09418");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = builder25.build();
        java.util.concurrent.Executor executor33 = restAdapter32.httpExecutor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.client.Client.Provider provider37 = null;
        builder34.clientProvider = provider37;
        retrofit.RestAdapter.Builder builder40 = builder34.setServer("hi!");
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = builder41.build();
        java.util.concurrent.Executor executor49 = restAdapter48.httpExecutor;
        builder40.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = builder21.setExecutors(executor33, executor49);
        java.util.concurrent.Executor executor52 = builder51.callbackExecutor;
        retrofit.Server server53 = builder51.server;
        retrofit.converter.Converter converter54 = builder51.converter;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel72);
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter74.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter74.logLevel = logLevel76;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter74.setLogLevel(logLevel78);
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log71, logLevel78);
        java.util.concurrent.Executor executor81 = restAdapter80.callbackExecutor;
        retrofit.RestAdapter.Log log82 = restAdapter80.log;
        log82.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder85 = builder51.setLog(log82);
        log82.log("Retrofit-Idle");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(executor52);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test09419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09419");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder0.requestInterceptor = requestInterceptor6;
        retrofit.Profiler profiler8 = null;
        builder0.profiler = profiler8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder10.logLevel = logLevel15;
        retrofit.RestAdapter.Log log17 = builder10.log;
        retrofit.RestAdapter restAdapter18 = builder10.build();
        retrofit.ErrorHandler errorHandler19 = restAdapter18.errorHandler;
        retrofit.RestAdapter.Builder builder20 = builder0.setErrorHandler(errorHandler19);
        retrofit.client.Client.Provider provider21 = builder0.clientProvider;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(provider21);
    }

    @Test
    public void test09420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09420");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter0.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter11 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler12 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(errorHandler12);
    }

    @Test
    public void test09421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09421");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.converter.Converter converter9 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler10 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(errorHandler10);
    }

    @Test
    public void test09422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09422");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.RequestInterceptor requestInterceptor30 = builder8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder33 = builder8.setServer("hi!");
        retrofit.Server server34 = builder8.server;
        retrofit.RestAdapter.LogLevel logLevel35 = builder8.logLevel;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.Server server38 = restAdapter36.server;
        retrofit.client.Client.Provider provider39 = null;
        restAdapter36.clientProvider = provider39;
        retrofit.Server server41 = null;
        restAdapter36.server = server41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter44 = null;
        restAdapter43.converter = converter44;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter43.requestInterceptor = requestInterceptor46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log49 = restAdapter48.log;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        restAdapter48.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.LogLevel logLevel52 = null;
        restAdapter48.logLevel = logLevel52;
        retrofit.ErrorHandler errorHandler54 = restAdapter48.errorHandler;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.Profiler profiler60 = null;
        builder59.profiler = profiler60;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        builder59.requestInterceptor = requestInterceptor62;
        retrofit.RestAdapter restAdapter64 = builder59.build();
        retrofit.converter.Converter converter65 = restAdapter64.converter;
        restAdapter48.converter = converter65;
        restAdapter43.converter = converter65;
        restAdapter36.converter = converter65;
        retrofit.RestAdapter.Builder builder69 = builder8.setConverter(converter65);
        restAdapter0.converter = converter65;
        retrofit.RequestInterceptor requestInterceptor71 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler72 = null;
        restAdapter0.profiler = profiler72;
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(converter65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNull(logLevel74);
    }

    @Test
    public void test09423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09423");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        retrofit.Server server5 = null;
        restAdapter0.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        retrofit.Server server29 = null;
        builder7.server = server29;
        java.util.concurrent.Executor executor31 = builder7.httpExecutor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder32.logLevel = logLevel37;
        retrofit.converter.Converter converter39 = null;
        builder32.converter = converter39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter41.requestInterceptor;
        retrofit.converter.Converter converter43 = restAdapter41.converter;
        java.util.concurrent.Executor executor44 = null;
        restAdapter41.callbackExecutor = executor44;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor47 = null;
        restAdapter46.httpExecutor = executor47;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        restAdapter46.requestInterceptor = requestInterceptor49;
        retrofit.RestAdapter.Log log51 = restAdapter46.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.logLevel = logLevel52;
        restAdapter41.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder55 = builder32.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.Profiler profiler61 = null;
        builder60.profiler = profiler61;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder60.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter restAdapter65 = builder60.build();
        retrofit.converter.Converter converter66 = restAdapter65.converter;
        java.util.concurrent.Executor executor67 = restAdapter65.callbackExecutor;
        builder32.httpExecutor = executor67;
        retrofit.RestAdapter restAdapter69 = builder32.build();
        java.util.concurrent.Executor executor70 = builder32.httpExecutor;
        java.util.concurrent.Executor executor71 = builder32.httpExecutor;
        builder7.callbackExecutor = executor71;
        restAdapter0.httpExecutor = executor71;
        retrofit.Profiler profiler74 = restAdapter0.profiler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(converter66);
        org.junit.Assert.assertNotNull(executor67);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(executor71);
        org.junit.Assert.assertNull(profiler74);
    }

    @Test
    public void test09424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09424");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder11.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        builder11.logLevel = logLevel13;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        java.util.concurrent.Executor executor19 = restAdapter17.callbackExecutor;
        retrofit.converter.Converter converter20 = null;
        restAdapter17.converter = converter20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter23 = builder22.converter;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter24.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter24.requestInterceptor = requestInterceptor26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        restAdapter24.log = log36;
        retrofit.ErrorHandler errorHandler40 = null;
        restAdapter24.errorHandler = errorHandler40;
        retrofit.RestAdapter.Log log42 = restAdapter24.log;
        retrofit.RestAdapter.Builder builder43 = builder22.setLog(log42);
        restAdapter17.log = log42;
        retrofit.RestAdapter.Builder builder45 = builder11.setLog(log42);
        retrofit.RequestInterceptor requestInterceptor46 = null;
        builder45.requestInterceptor = requestInterceptor46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.Profiler profiler53 = null;
        builder52.profiler = profiler53;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        builder52.requestInterceptor = requestInterceptor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = builder57.callbackExecutor;
        retrofit.RestAdapter.Log log59 = builder57.log;
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel77);
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter79.logLevel = logLevel81;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter79.setLogLevel(logLevel83);
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log76, logLevel83);
        retrofit.RestAdapter.Builder builder86 = builder57.setLogLevel(logLevel83);
        builder52.logLevel = logLevel83;
        builder45.logLevel = logLevel83;
        retrofit.Profiler profiler89 = builder45.profiler;
        retrofit.RestAdapter.Builder builder91 = builder45.setServer("Retrofit-Idle");
        retrofit.Server server92 = null;
        builder91.server = server92;
        retrofit.RestAdapter.LogLevel logLevel94 = builder91.logLevel;
        builder0.logLevel = logLevel94;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider97 = builder0.clientProvider;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(profiler89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(provider97);
    }

    @Test
    public void test09425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09425");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.converter.Converter converter24 = builder0.converter;
        retrofit.client.Client.Provider provider25 = builder0.clientProvider;
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor27 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor28 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler29 = builder0.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(errorHandler29);
    }

    @Test
    public void test09426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09426");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter10.logLevel;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log17 = restAdapter16.log;
        retrofit.ErrorHandler errorHandler18 = restAdapter16.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        retrofit.Profiler profiler25 = null;
        builder24.profiler = profiler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.RestAdapter restAdapter34 = builder27.build();
        retrofit.converter.Converter converter35 = null;
        builder27.converter = converter35;
        retrofit.ErrorHandler errorHandler37 = null;
        builder27.errorHandler = errorHandler37;
        retrofit.RequestInterceptor requestInterceptor39 = builder27.requestInterceptor;
        builder24.requestInterceptor = requestInterceptor39;
        restAdapter16.requestInterceptor = requestInterceptor39;
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter16.requestInterceptor;
        restAdapter10.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.Builder builder44 = builder7.setRequestInterceptor(requestInterceptor42);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        builder44.log = log50;
        log50.log("");
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test09427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09427");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.RestAdapter.Log log8 = builder0.log;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter11.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter11.requestInterceptor = requestInterceptor13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        restAdapter11.log = log23;
        retrofit.ErrorHandler errorHandler27 = null;
        restAdapter11.errorHandler = errorHandler27;
        retrofit.RestAdapter.Log log29 = restAdapter11.log;
        retrofit.RestAdapter.Builder builder30 = builder9.setLog(log29);
        retrofit.RequestInterceptor requestInterceptor31 = builder9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor32 = builder9.requestInterceptor;
        retrofit.RestAdapter.Builder builder34 = builder9.setServer("hi!");
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder43.setLog(log48);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter50.logLevel = logLevel52;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        restAdapter50.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter50.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log48, logLevel56);
        boolean boolean59 = logLevel56.log();
        retrofit.RestAdapter.Builder builder60 = builder34.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        retrofit.RestAdapter restAdapter68 = builder61.build();
        java.util.concurrent.Executor executor69 = restAdapter68.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter68.new RestHandler();
        retrofit.converter.Converter converter71 = restAdapter68.converter;
        builder60.converter = converter71;
        builder60.ensureSaneDefaults();
        retrofit.converter.Converter converter74 = builder60.converter;
        retrofit.RestAdapter.Builder builder75 = builder0.setConverter(converter74);
        retrofit.RestAdapter.Builder builder77 = builder0.setServer("Retrofit-Idle");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(executor69);
        org.junit.Assert.assertNotNull(converter71);
        org.junit.Assert.assertNotNull(converter74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test09428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09428");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter19.log = log31;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log31, logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder9.setLog(log31);
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = builder40.callbackExecutor;
        retrofit.RestAdapter.Log log42 = builder40.log;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter62.logLevel = logLevel64;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter62.setLogLevel(logLevel66);
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log59, logLevel66);
        retrofit.RestAdapter.Builder builder69 = builder40.setLogLevel(logLevel66);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter70.logLevel = logLevel72;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter70.setLogLevel(logLevel74);
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter70.getLogLevel();
        builder69.logLevel = logLevel76;
        retrofit.RestAdapter.Builder builder78 = builder38.setLogLevel(logLevel76);
        retrofit.converter.Converter converter79 = builder38.converter;
        retrofit.Profiler profiler80 = builder38.profiler;
        retrofit.RestAdapter.Log log81 = builder38.log;
        retrofit.RestAdapter.Builder builder82 = builder8.setLog(log81);
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(converter79);
        org.junit.Assert.assertNull(profiler80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09429");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.ErrorHandler errorHandler12 = null;
        builder8.errorHandler = errorHandler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter16.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter16.requestInterceptor = requestInterceptor18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter16.log = log28;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter16.errorHandler = errorHandler32;
        retrofit.RestAdapter.Log log34 = restAdapter16.log;
        retrofit.RestAdapter.Builder builder35 = builder14.setLog(log34);
        retrofit.RestAdapter.Builder builder36 = builder8.setLog(log34);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor39 = builder37.requestInterceptor;
        retrofit.ErrorHandler errorHandler40 = null;
        builder37.errorHandler = errorHandler40;
        retrofit.converter.Converter converter42 = null;
        builder37.converter = converter42;
        retrofit.ErrorHandler errorHandler44 = null;
        builder37.errorHandler = errorHandler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.Profiler profiler51 = null;
        builder50.profiler = profiler51;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        builder50.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter restAdapter55 = builder50.build();
        retrofit.converter.Converter converter56 = restAdapter55.converter;
        retrofit.RestAdapter.Builder builder57 = builder37.setConverter(converter56);
        builder36.converter = converter56;
        builder0.converter = converter56;
        retrofit.RestAdapter restAdapter60 = builder0.build();
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.Profiler profiler66 = null;
        builder65.profiler = profiler66;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        builder65.requestInterceptor = requestInterceptor68;
        retrofit.RestAdapter restAdapter70 = builder65.build();
        retrofit.Server server71 = builder65.server;
        retrofit.Server server72 = builder65.server;
        retrofit.RestAdapter.Builder builder73 = builder0.setServer(server72);
        retrofit.RestAdapter.LogLevel logLevel74 = builder73.logLevel;
        boolean boolean75 = logLevel74.log();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(converter56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test09430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09430");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder11.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.converter.Converter converter17 = restAdapter16.converter;
        retrofit.RestAdapter.Log log18 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter16.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter16.requestInterceptor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = builder21.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor23 = builder21.requestInterceptor;
        java.util.concurrent.Executor executor24 = builder21.httpExecutor;
        retrofit.RestAdapter.Builder builder26 = builder21.setServer("hi!");
        retrofit.RestAdapter.Log log27 = builder21.log;
        retrofit.RestAdapter.Log log28 = builder21.log;
        java.util.concurrent.Executor executor29 = builder21.httpExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter30.requestInterceptor;
        java.util.concurrent.Executor executor35 = restAdapter30.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter30.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter30.requestInterceptor;
        retrofit.RestAdapter.Log log38 = restAdapter30.log;
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter30.logLevel;
        builder21.logLevel = logLevel39;
        restAdapter16.logLevel = logLevel39;
        restAdapter0.logLevel = logLevel39;
        java.lang.Throwable throwable43 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable43, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test09431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09431");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RestAdapter.LogLevel logLevel7 = builder4.logLevel;
        builder4.ensureSaneDefaults();
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        java.util.concurrent.Executor executor20 = null;
        restAdapter19.httpExecutor = executor20;
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.Builder builder23 = builder4.setLog(log22);
        builder23.ensureSaneDefaults();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.Profiler profiler28 = null;
        builder26.profiler = profiler28;
        retrofit.RestAdapter.Builder builder31 = builder26.setServer("Retrofit-Idle");
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter40.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter40.requestInterceptor = requestInterceptor42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        restAdapter40.log = log52;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean57 = logLevel56.log();
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log52, logLevel56);
        builder31.log = log52;
        log52.log("");
        retrofit.RestAdapter.Builder builder62 = builder23.setLog(log52);
        builder62.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test09432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09432");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.converter.Converter converter22 = builder0.converter;
        retrofit.RestAdapter.Log log23 = builder0.log;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Log log44 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder45 = builder24.setLog(log44);
        retrofit.RequestInterceptor requestInterceptor46 = builder24.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor47 = builder24.requestInterceptor;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = null;
        builder48.converter = converter49;
        retrofit.client.Client.Provider provider51 = null;
        builder48.clientProvider = provider51;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        builder48.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.Profiler profiler60 = null;
        builder59.profiler = profiler60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        retrofit.RestAdapter restAdapter69 = builder62.build();
        retrofit.converter.Converter converter70 = null;
        builder62.converter = converter70;
        retrofit.ErrorHandler errorHandler72 = null;
        builder62.errorHandler = errorHandler72;
        retrofit.RequestInterceptor requestInterceptor74 = builder62.requestInterceptor;
        builder59.requestInterceptor = requestInterceptor74;
        retrofit.RestAdapter.Builder builder76 = builder48.setRequestInterceptor(requestInterceptor74);
        retrofit.RestAdapter.Builder builder77 = builder24.setRequestInterceptor(requestInterceptor74);
        retrofit.RequestInterceptor requestInterceptor78 = builder77.requestInterceptor;
        retrofit.RestAdapter.Builder builder79 = builder0.setRequestInterceptor(requestInterceptor78);
        retrofit.RestAdapter.Builder builder81 = builder79.setServer("hi!");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test09433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09433");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.Profiler profiler13 = null;
        builder12.profiler = profiler13;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder12.requestInterceptor = requestInterceptor15;
        retrofit.RestAdapter restAdapter17 = builder12.build();
        retrofit.converter.Converter converter18 = restAdapter17.converter;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        log19.log("");
        restAdapter17.log = log19;
        retrofit.RestAdapter.Builder builder23 = builder0.setLog(log19);
        retrofit.RequestInterceptor requestInterceptor24 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNotNull(converter18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(requestInterceptor24);
    }

    @Test
    public void test09434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09434");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.client.Client.Provider provider9 = restAdapter7.clientProvider;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder16 = builder10.setLog(log15);
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        builder10.logLevel = logLevel26;
        retrofit.converter.Converter converter29 = builder10.converter;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        builder10.requestInterceptor = requestInterceptor30;
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        retrofit.converter.Converter converter41 = null;
        builder33.converter = converter41;
        retrofit.ErrorHandler errorHandler43 = null;
        builder33.errorHandler = errorHandler43;
        retrofit.RequestInterceptor requestInterceptor45 = builder33.requestInterceptor;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.client.Client.Provider provider51 = builder50.clientProvider;
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        log53.log("");
        builder50.log = log53;
        retrofit.Server server57 = builder50.server;
        builder33.server = server57;
        retrofit.RestAdapter.Builder builder59 = builder10.setServer(server57);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter60.logLevel;
        retrofit.converter.Converter converter63 = null;
        restAdapter60.converter = converter63;
        retrofit.ErrorHandler errorHandler65 = restAdapter60.errorHandler;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter67 = null;
        builder66.converter = converter67;
        retrofit.client.Client.Provider provider69 = null;
        builder66.clientProvider = provider69;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        builder66.requestInterceptor = requestInterceptor71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.Profiler profiler78 = null;
        builder77.profiler = profiler78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.httpExecutor = executor81;
        retrofit.RestAdapter.Builder builder84 = builder80.setServer("hi!");
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder86 = builder80.setLog(log85);
        retrofit.RestAdapter restAdapter87 = builder80.build();
        retrofit.converter.Converter converter88 = null;
        builder80.converter = converter88;
        retrofit.ErrorHandler errorHandler90 = null;
        builder80.errorHandler = errorHandler90;
        retrofit.RequestInterceptor requestInterceptor92 = builder80.requestInterceptor;
        builder77.requestInterceptor = requestInterceptor92;
        retrofit.RestAdapter.Builder builder94 = builder66.setRequestInterceptor(requestInterceptor92);
        restAdapter60.requestInterceptor = requestInterceptor92;
        builder59.requestInterceptor = requestInterceptor92;
        restAdapter7.requestInterceptor = requestInterceptor92;
        retrofit.Profiler profiler98 = null;
        restAdapter7.profiler = profiler98;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test09435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09435");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder11.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.converter.Converter converter17 = restAdapter16.converter;
        retrofit.RestAdapter.Builder builder18 = builder0.setConverter(converter17);
        java.util.concurrent.Executor executor19 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log21 = restAdapter20.log;
        retrofit.ErrorHandler errorHandler22 = restAdapter20.errorHandler;
        retrofit.client.Client.Provider provider23 = null;
        restAdapter20.clientProvider = provider23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.RestAdapter.LogLevel logLevel27 = builder25.logLevel;
        builder25.ensureSaneDefaults();
        retrofit.client.Client.Provider provider29 = null;
        builder25.clientProvider = provider29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        restAdapter46.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter46.logLevel = logLevel52;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log44, logLevel52);
        builder25.logLevel = logLevel52;
        retrofit.client.Client.Provider provider56 = null;
        builder25.clientProvider = provider56;
        retrofit.converter.Converter converter58 = builder25.converter;
        restAdapter20.converter = converter58;
        retrofit.RestAdapter.Builder builder60 = builder0.setConverter(converter58);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = builder65.build();
        retrofit.converter.Converter converter67 = null;
        restAdapter66.converter = converter67;
        retrofit.client.Client.Provider provider69 = restAdapter66.clientProvider;
        retrofit.RestAdapter.Builder builder70 = builder60.setClient(provider69);
        java.util.concurrent.Executor executor71 = builder70.callbackExecutor;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(provider69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(executor71);
    }

    @Test
    public void test09436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09436");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder7.setLog(log12);
        retrofit.RestAdapter restAdapter14 = builder7.build();
        java.util.concurrent.Executor executor15 = restAdapter14.httpExecutor;
        builder6.callbackExecutor = executor15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter18 = builder17.converter;
        retrofit.Profiler profiler19 = null;
        builder17.profiler = profiler19;
        retrofit.ErrorHandler errorHandler21 = null;
        builder17.errorHandler = errorHandler21;
        retrofit.Server server23 = builder17.server;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Log log44 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder45 = builder24.setLog(log44);
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder47.setLog(log52);
        retrofit.RestAdapter restAdapter54 = builder47.build();
        java.util.concurrent.Executor executor55 = restAdapter54.httpExecutor;
        builder24.callbackExecutor = executor55;
        builder17.httpExecutor = executor55;
        java.util.concurrent.Executor executor58 = builder17.httpExecutor;
        builder6.httpExecutor = executor58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        java.util.concurrent.Executor executor65 = null;
        builder60.httpExecutor = executor65;
        retrofit.ErrorHandler errorHandler67 = builder60.errorHandler;
        java.util.concurrent.Executor executor68 = builder60.callbackExecutor;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder69.logLevel = logLevel74;
        retrofit.converter.Converter converter76 = null;
        builder69.converter = converter76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter79 = builder78.converter;
        retrofit.Profiler profiler80 = null;
        builder78.profiler = profiler80;
        retrofit.RestAdapter.Builder builder83 = builder78.setServer("Retrofit-Idle");
        retrofit.Profiler profiler84 = builder83.profiler;
        retrofit.Server server85 = builder83.server;
        retrofit.RestAdapter.Builder builder86 = builder69.setServer(server85);
        retrofit.RestAdapter.Builder builder87 = builder60.setServer(server85);
        java.util.concurrent.Executor executor88 = builder87.httpExecutor;
        retrofit.RestAdapter restAdapter89 = builder87.build();
        retrofit.Server server90 = restAdapter89.server;
        retrofit.RestAdapter.Builder builder91 = builder6.setServer(server90);
        retrofit.converter.Converter converter92 = builder6.converter;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(profiler84);
        org.junit.Assert.assertNotNull(server85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(executor88);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(server90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(converter92);
    }

    @Test
    public void test09437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09437");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        java.lang.String str17 = request14.getMethod();
        retrofit.mime.TypedOutput typedOutput18 = request14.getBody();
        java.util.List<retrofit.client.Header> headerList19 = request14.getHeaders();
        java.lang.String str20 = request14.getUrl();
        java.lang.String str21 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList22 = request14.getHeaders();
        java.util.List<retrofit.client.Header> headerList23 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "hi!", headerList23, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("hi!", "hi!", headerList23, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", headerList23, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("Retrofit-Idle", "", headerList23, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = request31.getBody();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNull(typedOutput32);
    }

    @Test
    public void test09438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09438");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RestAdapter.LogLevel logLevel7 = builder4.logLevel;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.converter.Converter converter26 = null;
        restAdapter8.converter = converter26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter36.requestInterceptor = requestInterceptor38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        restAdapter36.log = log48;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log48, logLevel52);
        restAdapter8.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder56 = builder4.setLogLevel(logLevel52);
        java.util.concurrent.Executor executor57 = builder4.httpExecutor;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.Server server66 = null;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log74, logLevel75);
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter77.logLevel = logLevel79;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter77.setLogLevel(logLevel81);
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log74, logLevel81);
        log74.log("");
        log74.log("hi!");
        log74.log("hi!");
        log74.log("");
        log74.log("hi!");
        retrofit.RestAdapter.Builder builder94 = builder4.setLog(log74);
        retrofit.RestAdapter.LogLevel logLevel95 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean96 = logLevel95.log();
        builder4.logLevel = logLevel95;
        retrofit.client.Client client98 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder99 = builder4.setClient(client98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test09439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09439");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        builder8.logLevel = logLevel10;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter17 = null;
        restAdapter14.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        restAdapter14.log = log39;
        retrofit.RestAdapter.Builder builder42 = builder8.setLog(log39);
        restAdapter0.log = log39;
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler45 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider46 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(logLevel48);
    }

    @Test
    public void test09440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09440");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = builder0.build();
        retrofit.Server server23 = builder0.server;
        retrofit.Profiler profiler24 = null;
        builder0.profiler = profiler24;
        retrofit.RestAdapter restAdapter26 = builder0.build();
        retrofit.client.Client.Provider provider27 = builder0.clientProvider;
        retrofit.converter.Converter converter28 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel29 = builder0.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNotNull(provider27);
        org.junit.Assert.assertNotNull(converter28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test09441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09441");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = null;
        restAdapter5.httpExecutor = executor6;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter5.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter10.logLevel;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = null;
        builder16.converter = converter17;
        retrofit.client.Client.Provider provider19 = null;
        builder16.clientProvider = provider19;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        builder16.requestInterceptor = requestInterceptor21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.Profiler profiler28 = null;
        builder27.profiler = profiler28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder30.setLog(log35);
        retrofit.RestAdapter restAdapter37 = builder30.build();
        retrofit.converter.Converter converter38 = null;
        builder30.converter = converter38;
        retrofit.ErrorHandler errorHandler40 = null;
        builder30.errorHandler = errorHandler40;
        retrofit.RequestInterceptor requestInterceptor42 = builder30.requestInterceptor;
        builder27.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.Builder builder44 = builder16.setRequestInterceptor(requestInterceptor42);
        restAdapter10.requestInterceptor = requestInterceptor42;
        restAdapter5.requestInterceptor = requestInterceptor42;
        java.util.concurrent.Executor executor47 = restAdapter5.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter5.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor49 = restAdapter5.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor49;
        retrofit.Profiler profiler51 = null;
        restAdapter0.profiler = profiler51;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(requestInterceptor49);
    }

    @Test
    public void test09442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09442");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log16, logLevel23);
        retrofit.client.Header[] headerArray30 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList31 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList31, headerArray30);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList31, typedOutput33);
        java.lang.String str35 = request34.getUrl();
        java.util.List<retrofit.client.Header> headerList36 = request34.getHeaders();
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", headerList36, typedOutput37);
        java.util.List<retrofit.client.Header> headerList39 = request38.getHeaders();
        java.util.List<retrofit.client.Header> headerList40 = request38.getHeaders();
        java.lang.String str41 = request38.getMethod();
        retrofit.mime.TypedOutput typedOutput42 = request38.getBody();
        retrofit.client.Request request43 = restAdapter25.logAndReplaceRequest(request38);
        retrofit.mime.TypedOutput typedOutput44 = request38.getBody();
        retrofit.mime.TypedOutput typedOutput45 = request38.getBody();
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(headerList40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(typedOutput42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNull(typedOutput44);
        org.junit.Assert.assertNull(typedOutput45);
    }

    @Test
    public void test09443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09443");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor7 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.Profiler profiler11 = null;
        restAdapter0.profiler = profiler11;
        retrofit.client.Response response14 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response16 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response14, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test09444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09444");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel6;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Log log9 = restAdapter0.log;
        retrofit.RestAdapter.Log log10 = null;
        restAdapter0.log = log10;
        retrofit.Profiler profiler12 = null;
        restAdapter0.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.Profiler profiler16 = null;
        builder14.profiler = profiler16;
        retrofit.ErrorHandler errorHandler18 = null;
        builder14.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder21 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder26 = builder22.setServer("hi!");
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        builder26.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter restAdapter31 = builder26.build();
        retrofit.converter.Converter converter32 = restAdapter31.converter;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        log33.log("");
        restAdapter31.log = log33;
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter31.requestInterceptor;
        retrofit.RestAdapter.Builder builder38 = builder21.setRequestInterceptor(requestInterceptor37);
        restAdapter0.requestInterceptor = requestInterceptor37;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(converter32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test09445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09445");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        builder10.logLevel = logLevel12;
        retrofit.RestAdapter restAdapter15 = builder10.build();
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter16.requestInterceptor;
        java.util.concurrent.Executor executor18 = restAdapter16.callbackExecutor;
        retrofit.converter.Converter converter19 = null;
        restAdapter16.converter = converter19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter22 = builder21.converter;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter23.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter23.requestInterceptor = requestInterceptor25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        restAdapter23.log = log35;
        retrofit.ErrorHandler errorHandler39 = null;
        restAdapter23.errorHandler = errorHandler39;
        retrofit.RestAdapter.Log log41 = restAdapter23.log;
        retrofit.RestAdapter.Builder builder42 = builder21.setLog(log41);
        restAdapter16.log = log41;
        retrofit.RestAdapter.Builder builder44 = builder10.setLog(log41);
        retrofit.RestAdapter.LogLevel logLevel45 = null;
        builder44.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = builder47.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor49 = builder47.requestInterceptor;
        retrofit.ErrorHandler errorHandler50 = null;
        builder47.errorHandler = errorHandler50;
        retrofit.converter.Converter converter52 = null;
        builder47.converter = converter52;
        retrofit.ErrorHandler errorHandler54 = null;
        builder47.errorHandler = errorHandler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.Profiler profiler61 = null;
        builder60.profiler = profiler61;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder60.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter restAdapter65 = builder60.build();
        retrofit.converter.Converter converter66 = restAdapter65.converter;
        retrofit.RestAdapter.Builder builder67 = builder47.setConverter(converter66);
        retrofit.RestAdapter.Builder builder68 = builder44.setConverter(converter66);
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder69.setLog(log74);
        retrofit.RestAdapter restAdapter76 = builder69.build();
        retrofit.RestAdapter restAdapter77 = builder69.build();
        java.util.concurrent.Executor executor78 = builder69.callbackExecutor;
        retrofit.converter.Converter converter79 = builder69.converter;
        builder68.converter = converter79;
        restAdapter0.converter = converter79;
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(converter66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(executor78);
        org.junit.Assert.assertNotNull(converter79);
    }

    @Test
    public void test09446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09446");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.RestAdapter.Builder builder12 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.Profiler profiler17 = restAdapter13.profiler;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter13.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter13.requestInterceptor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log21 = restAdapter20.log;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.Profiler profiler23 = restAdapter20.profiler;
        retrofit.Profiler profiler24 = null;
        restAdapter20.profiler = profiler24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        restAdapter20.log = log34;
        restAdapter13.log = log34;
        retrofit.RestAdapter.Builder builder39 = builder6.setLog(log34);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.Profiler profiler45 = null;
        builder44.profiler = profiler45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        builder44.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter restAdapter49 = builder44.build();
        retrofit.converter.Converter converter50 = restAdapter49.converter;
        java.util.concurrent.Executor executor51 = restAdapter49.callbackExecutor;
        builder6.callbackExecutor = executor51;
        builder6.ensureSaneDefaults();
        retrofit.Server server54 = builder6.server;
        retrofit.RestAdapter.Builder builder55 = builder5.setServer(server54);
        retrofit.RestAdapter.Log log56 = builder55.log;
        retrofit.RestAdapter.Log log57 = builder55.log;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(converter50);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertNull(log57);
    }

    @Test
    public void test09447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09447");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log19, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLogLevel(logLevel26);
        retrofit.ErrorHandler errorHandler30 = null;
        builder29.errorHandler = errorHandler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = builder32.callbackExecutor;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        retrofit.RestAdapter.Builder builder45 = builder32.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder29.setLogLevel(logLevel43);
        builder46.ensureSaneDefaults();
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter56.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        restAdapter56.requestInterceptor = requestInterceptor58;
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel69);
        restAdapter56.log = log68;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean73 = logLevel72.log();
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log68, logLevel72);
        retrofit.RestAdapter.Builder builder75 = builder46.setLog(log68);
        builder46.ensureSaneDefaults();
        retrofit.Server server77 = builder46.server;
        retrofit.RestAdapter.Log log78 = builder46.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertNotNull(log78);
    }

    @Test
    public void test09448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09448");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter5 = builder4.converter;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter6.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter6.requestInterceptor = requestInterceptor8;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        restAdapter6.log = log18;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter6.errorHandler = errorHandler22;
        retrofit.RestAdapter.Log log24 = restAdapter6.log;
        retrofit.RestAdapter.Builder builder25 = builder4.setLog(log24);
        retrofit.RequestInterceptor requestInterceptor26 = builder25.requestInterceptor;
        retrofit.Server server27 = null;
        builder25.server = server27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.Profiler profiler34 = null;
        builder33.profiler = profiler34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder33.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter restAdapter38 = builder33.build();
        retrofit.converter.Converter converter39 = null;
        builder33.converter = converter39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter41.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        restAdapter41.requestInterceptor = requestInterceptor43;
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter41.getLogLevel();
        retrofit.client.Client.Provider provider46 = null;
        restAdapter41.clientProvider = provider46;
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter41.logLevel;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter49.logLevel = logLevel51;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        restAdapter49.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter49.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter58 = builder57.converter;
        retrofit.Profiler profiler59 = null;
        builder57.profiler = profiler59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.client.Client.Provider provider64 = null;
        builder61.clientProvider = provider64;
        retrofit.RestAdapter.Builder builder67 = builder61.setServer("hi!");
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder74 = builder68.setLog(log73);
        retrofit.RestAdapter restAdapter75 = builder68.build();
        java.util.concurrent.Executor executor76 = restAdapter75.httpExecutor;
        builder67.callbackExecutor = executor76;
        builder57.callbackExecutor = executor76;
        restAdapter49.httpExecutor = executor76;
        restAdapter41.callbackExecutor = executor76;
        builder33.callbackExecutor = executor76;
        builder33.ensureSaneDefaults();
        java.util.concurrent.Executor executor83 = builder33.httpExecutor;
        retrofit.converter.Converter converter84 = builder33.converter;
        builder25.converter = converter84;
        restAdapter0.converter = converter84;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(executor83);
        org.junit.Assert.assertNotNull(converter84);
    }

    @Test
    public void test09449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09449");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.RestAdapter.Log log9 = builder7.log;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.setLogLevel(logLevel33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log26, logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder7.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder37.setLog(log42);
        builder7.log = log42;
        retrofit.RestAdapter.Builder builder45 = builder0.setLog(log42);
        java.util.concurrent.Executor executor46 = builder45.httpExecutor;
        retrofit.RestAdapter.Builder builder48 = builder45.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler49 = builder45.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(executor46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(errorHandler49);
    }

    @Test
    public void test09450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09450");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Log log25 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder26 = builder5.setLog(log25);
        retrofit.Profiler profiler27 = builder26.profiler;
        retrofit.Profiler profiler28 = builder26.profiler;
        java.util.concurrent.Executor executor29 = builder26.callbackExecutor;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder30.setLog(log35);
        retrofit.RestAdapter restAdapter37 = builder30.build();
        java.util.concurrent.Executor executor38 = restAdapter37.httpExecutor;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.client.Client.Provider provider42 = null;
        builder39.clientProvider = provider42;
        retrofit.RestAdapter.Builder builder45 = builder39.setServer("hi!");
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        java.util.concurrent.Executor executor54 = restAdapter53.httpExecutor;
        builder45.callbackExecutor = executor54;
        retrofit.RestAdapter.Builder builder56 = builder26.setExecutors(executor38, executor54);
        builder0.callbackExecutor = executor38;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.Profiler profiler63 = null;
        builder62.profiler = profiler63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = builder65.build();
        retrofit.converter.Converter converter73 = null;
        builder65.converter = converter73;
        retrofit.ErrorHandler errorHandler75 = null;
        builder65.errorHandler = errorHandler75;
        retrofit.RequestInterceptor requestInterceptor77 = builder65.requestInterceptor;
        builder62.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter.Builder builder79 = builder0.setRequestInterceptor(requestInterceptor77);
        retrofit.Profiler profiler80 = null;
        builder79.profiler = profiler80;
        java.util.concurrent.Executor executor82 = builder79.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(executor82);
    }

    @Test
    public void test09451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09451");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter5.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        restAdapter5.requestInterceptor = requestInterceptor7;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        restAdapter5.log = log17;
        retrofit.ErrorHandler errorHandler21 = null;
        restAdapter5.errorHandler = errorHandler21;
        retrofit.converter.Converter converter23 = null;
        restAdapter5.converter = converter23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter33.requestInterceptor = requestInterceptor35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        restAdapter33.log = log45;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean50 = logLevel49.log();
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log45, logLevel49);
        restAdapter5.logLevel = logLevel49;
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter5.logLevel;
        boolean boolean54 = logLevel53.log();
        restAdapter0.logLevel = logLevel53;
        retrofit.Profiler profiler56 = null;
        restAdapter0.profiler = profiler56;
        java.util.concurrent.Executor executor58 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(executor58);
    }

    @Test
    public void test09452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09452");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder5.setLog(log10);
        retrofit.RestAdapter restAdapter12 = builder5.build();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter12.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.Builder builder15 = builder0.setLogLevel(logLevel14);
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.Profiler profiler17 = builder15.profiler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter19 = builder18.converter;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter20.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter20.requestInterceptor = requestInterceptor22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        restAdapter20.log = log32;
        retrofit.ErrorHandler errorHandler36 = null;
        restAdapter20.errorHandler = errorHandler36;
        retrofit.RestAdapter.Log log38 = restAdapter20.log;
        retrofit.RestAdapter.Builder builder39 = builder18.setLog(log38);
        retrofit.Server server40 = null;
        builder18.server = server40;
        java.util.concurrent.Executor executor42 = builder18.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        builder18.requestInterceptor = requestInterceptor43;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        log53.log("hi!");
        builder18.log = log53;
        retrofit.client.Client.Provider provider59 = null;
        builder18.clientProvider = provider59;
        retrofit.RestAdapter.Log log61 = builder18.log;
        builder15.log = log61;
        log61.log("Retrofit-Idle");
        log61.log("");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(errorHandler16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log61);
    }

    @Test
    public void test09453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09453");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.client.Client.Provider provider8 = null;
        builder5.clientProvider = provider8;
        retrofit.client.Client.Provider provider10 = builder5.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.Profiler profiler18 = null;
        builder17.profiler = profiler18;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder17.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = builder17.build();
        retrofit.converter.Converter converter23 = restAdapter22.converter;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        log24.log("");
        restAdapter22.log = log24;
        retrofit.RestAdapter.Builder builder28 = builder5.setLog(log24);
        restAdapter0.log = log24;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log31 = restAdapter0.log;
        retrofit.Profiler profiler32 = restAdapter0.profiler;
        java.util.concurrent.Executor executor33 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(converter23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(executor33);
    }

    @Test
    public void test09454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09454");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor3 = builder2.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor4 = builder2.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = null;
        builder2.errorHandler = errorHandler5;
        retrofit.converter.Converter converter7 = null;
        builder2.converter = converter7;
        retrofit.client.Client.Provider provider9 = builder2.clientProvider;
        retrofit.RequestInterceptor requestInterceptor10 = builder2.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel11 = builder2.logLevel;
        restAdapter0.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = builder17.build();
        retrofit.RestAdapter.LogLevel logLevel19 = null;
        restAdapter18.logLevel = logLevel19;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.Server server23 = restAdapter21.server;
        retrofit.client.Client.Provider provider24 = null;
        restAdapter21.clientProvider = provider24;
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter21.requestInterceptor;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        restAdapter21.log = log35;
        restAdapter18.log = log35;
        retrofit.Server server40 = null;
        restAdapter18.server = server40;
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter18.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor42;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(requestInterceptor42);
    }

    @Test
    public void test09455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09455");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.client.Client.Provider provider10 = null;
        builder7.clientProvider = provider10;
        retrofit.client.Client.Provider provider12 = builder7.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        builder19.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.converter.Converter converter25 = restAdapter24.converter;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        log26.log("");
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder30 = builder7.setLog(log26);
        retrofit.RestAdapter.Builder builder31 = builder5.setLog(log26);
        java.util.concurrent.Executor executor32 = builder31.httpExecutor;
        retrofit.client.Client.Provider provider33 = builder31.clientProvider;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        java.util.concurrent.Executor executor36 = builder35.httpExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(converter25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(executor36);
    }

    @Test
    public void test09456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09456");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder5.setLog(log10);
        retrofit.RestAdapter restAdapter12 = builder5.build();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter12.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.Builder builder15 = builder0.setLogLevel(logLevel14);
        retrofit.RequestInterceptor requestInterceptor16 = builder0.requestInterceptor;
        retrofit.converter.Converter converter17 = builder0.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor23 = null;
        builder18.httpExecutor = executor23;
        retrofit.RestAdapter restAdapter25 = builder18.build();
        retrofit.converter.Converter converter26 = restAdapter25.converter;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = builder34.converter;
        retrofit.RestAdapter.LogLevel logLevel36 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = builder38.converter;
        retrofit.RestAdapter.LogLevel logLevel40 = builder38.logLevel;
        builder38.ensureSaneDefaults();
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = builder50.setLog(log55);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter57.logLevel = logLevel59;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        restAdapter57.requestInterceptor = requestInterceptor61;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter57.logLevel = logLevel63;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log55, logLevel63);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder66.setLog(log71);
        restAdapter65.log = log71;
        builder38.log = log71;
        java.util.concurrent.Executor executor75 = null;
        builder38.httpExecutor = executor75;
        retrofit.converter.Converter converter77 = null;
        builder38.converter = converter77;
        retrofit.ErrorHandler errorHandler79 = builder38.errorHandler;
        retrofit.RestAdapter.Builder builder80 = builder33.setErrorHandler(errorHandler79);
        retrofit.RestAdapter.LogLevel logLevel81 = builder33.logLevel;
        restAdapter25.logLevel = logLevel81;
        retrofit.Server server83 = restAdapter25.server;
        retrofit.client.Client.Provider provider84 = restAdapter25.clientProvider;
        retrofit.RequestInterceptor requestInterceptor85 = restAdapter25.requestInterceptor;
        retrofit.RestAdapter.Builder builder86 = builder0.setRequestInterceptor(requestInterceptor85);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(converter26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(errorHandler79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(provider84);
        org.junit.Assert.assertNotNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test09457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09457");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.ErrorHandler errorHandler12 = null;
        builder8.errorHandler = errorHandler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter16.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter16.requestInterceptor = requestInterceptor18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter16.log = log28;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter16.errorHandler = errorHandler32;
        retrofit.RestAdapter.Log log34 = restAdapter16.log;
        retrofit.RestAdapter.Builder builder35 = builder14.setLog(log34);
        retrofit.RestAdapter.Builder builder36 = builder8.setLog(log34);
        log34.log("Retrofit-Idle");
        builder0.log = log34;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter55.requestInterceptor = requestInterceptor59;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter55.logLevel = logLevel61;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log53, logLevel61);
        log53.log("hi!");
        builder0.log = log53;
        retrofit.RestAdapter.LogLevel logLevel67 = builder0.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09458");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.converter.Converter converter11 = restAdapter9.converter;
        java.util.concurrent.Executor executor12 = null;
        restAdapter9.callbackExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = null;
        restAdapter14.httpExecutor = executor15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter14.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Log log19 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel20;
        restAdapter9.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder23 = builder0.setLogLevel(logLevel20);
        retrofit.RestAdapter.Log log24 = builder23.log;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log26 = restAdapter25.log;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.converter.Converter converter30 = restAdapter28.converter;
        java.util.concurrent.Executor executor31 = null;
        restAdapter28.callbackExecutor = executor31;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter28.logLevel = logLevel33;
        restAdapter25.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder36 = builder23.setLogLevel(logLevel33);
        java.util.concurrent.Executor executor37 = builder23.httpExecutor;
        retrofit.ErrorHandler errorHandler38 = builder23.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(errorHandler38);
    }

    @Test
    public void test09459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09459");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.client.Client.Provider provider8 = null;
        builder5.clientProvider = provider8;
        retrofit.RestAdapter.Builder builder11 = builder5.setServer("hi!");
        retrofit.Profiler profiler12 = builder5.profiler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter15.requestInterceptor = requestInterceptor17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        restAdapter15.log = log27;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter15.errorHandler = errorHandler31;
        retrofit.RestAdapter.Log log33 = restAdapter15.log;
        retrofit.RestAdapter.Builder builder34 = builder13.setLog(log33);
        retrofit.RequestInterceptor requestInterceptor35 = builder13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = builder13.requestInterceptor;
        retrofit.RestAdapter.Log log37 = builder13.log;
        builder5.log = log37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter39.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter39.requestInterceptor = requestInterceptor41;
        java.util.concurrent.Executor executor43 = restAdapter39.httpExecutor;
        java.util.concurrent.Executor executor44 = restAdapter39.httpExecutor;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.Profiler profiler50 = null;
        builder49.profiler = profiler50;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        builder49.requestInterceptor = requestInterceptor52;
        retrofit.RestAdapter restAdapter54 = builder49.build();
        retrofit.converter.Converter converter55 = restAdapter54.converter;
        restAdapter39.converter = converter55;
        builder5.converter = converter55;
        restAdapter0.converter = converter55;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(converter55);
    }

    @Test
    public void test09460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09460");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = null;
        builder30.converter = converter31;
        retrofit.client.Client.Provider provider33 = null;
        builder30.clientProvider = provider33;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        builder30.requestInterceptor = requestInterceptor35;
        retrofit.Profiler profiler37 = builder30.profiler;
        retrofit.Profiler profiler38 = null;
        builder30.profiler = profiler38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = builder40.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor42 = builder40.requestInterceptor;
        java.util.concurrent.Executor executor43 = builder40.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel44 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.Profiler profiler50 = null;
        builder49.profiler = profiler50;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        builder49.requestInterceptor = requestInterceptor52;
        retrofit.RestAdapter restAdapter54 = builder49.build();
        retrofit.converter.Converter converter55 = null;
        builder49.converter = converter55;
        retrofit.client.Client.Provider provider57 = builder49.clientProvider;
        retrofit.RestAdapter.Builder builder58 = builder40.setClient(provider57);
        retrofit.RestAdapter.Builder builder59 = builder30.setClient(provider57);
        retrofit.client.Client.Provider provider60 = builder59.clientProvider;
        retrofit.RestAdapter.Builder builder61 = builder29.setClient(provider60);
        retrofit.client.Client.Provider provider62 = builder29.clientProvider;
        retrofit.converter.Converter converter63 = builder29.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(provider57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(provider60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(provider62);
        org.junit.Assert.assertNull(converter63);
    }

    @Test
    public void test09461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09461");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.client.Client.Provider provider9 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder11 = builder4.setLogLevel(logLevel10);
        retrofit.RequestInterceptor requestInterceptor12 = null;
        builder11.requestInterceptor = requestInterceptor12;
        retrofit.client.Client.Provider provider14 = builder11.clientProvider;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = null;
        builder15.converter = converter16;
        retrofit.client.Client.Provider provider18 = null;
        builder15.clientProvider = provider18;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder15.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter24.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter24.requestInterceptor = requestInterceptor26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        restAdapter24.log = log36;
        retrofit.ErrorHandler errorHandler40 = null;
        restAdapter24.errorHandler = errorHandler40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.ErrorHandler errorHandler60 = null;
        restAdapter44.errorHandler = errorHandler60;
        retrofit.RestAdapter.Log log62 = restAdapter44.log;
        retrofit.RestAdapter.Builder builder63 = builder42.setLog(log62);
        retrofit.RequestInterceptor requestInterceptor64 = builder42.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor65 = builder42.requestInterceptor;
        retrofit.RestAdapter.Builder builder67 = builder42.setServer("hi!");
        retrofit.Server server68 = builder42.server;
        restAdapter24.server = server68;
        builder22.server = server68;
        retrofit.RestAdapter.Builder builder71 = builder15.setServer(server68);
        retrofit.RestAdapter.LogLevel logLevel72 = builder15.logLevel;
        builder11.logLevel = logLevel72;
        builder0.logLevel = logLevel72;
        retrofit.RestAdapter.Log log75 = builder0.log;
        retrofit.RequestInterceptor requestInterceptor76 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(server68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(requestInterceptor76);
    }

    @Test
    public void test09462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09462");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.Profiler profiler5 = null;
        builder0.profiler = profiler5;
        builder0.ensureSaneDefaults();
        retrofit.Server server8 = builder0.server;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = builder9.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor11 = builder9.requestInterceptor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder33 = builder12.setLog(log32);
        retrofit.Profiler profiler34 = builder33.profiler;
        retrofit.client.Client.Provider provider35 = builder33.clientProvider;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = null;
        builder38.converter = converter39;
        retrofit.client.Client.Provider provider41 = null;
        builder38.clientProvider = provider41;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        builder38.requestInterceptor = requestInterceptor43;
        retrofit.Profiler profiler45 = builder38.profiler;
        retrofit.Profiler profiler46 = null;
        builder38.profiler = profiler46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = builder48.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor50 = builder48.requestInterceptor;
        java.util.concurrent.Executor executor51 = builder48.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel52 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.RestAdapter.Builder builder57 = builder53.setServer("hi!");
        retrofit.Profiler profiler58 = null;
        builder57.profiler = profiler58;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        builder57.requestInterceptor = requestInterceptor60;
        retrofit.RestAdapter restAdapter62 = builder57.build();
        retrofit.converter.Converter converter63 = null;
        builder57.converter = converter63;
        retrofit.client.Client.Provider provider65 = builder57.clientProvider;
        retrofit.RestAdapter.Builder builder66 = builder48.setClient(provider65);
        retrofit.RestAdapter.Builder builder67 = builder38.setClient(provider65);
        builder37.clientProvider = provider65;
        builder9.clientProvider = provider65;
        retrofit.RestAdapter.Builder builder70 = builder0.setClient(provider65);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("hi!");
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.Profiler profiler78 = null;
        builder77.profiler = profiler78;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        builder77.requestInterceptor = requestInterceptor80;
        retrofit.RestAdapter restAdapter82 = builder77.build();
        retrofit.converter.Converter converter83 = null;
        builder77.converter = converter83;
        retrofit.client.Client.Provider provider85 = builder77.clientProvider;
        retrofit.RestAdapter.Builder builder86 = builder70.setClient(provider85);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNotNull(provider65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(provider85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test09463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09463");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", headerList12, typedOutput13);
        java.lang.String str15 = request14.getMethod();
        retrofit.mime.TypedOutput typedOutput16 = request14.getBody();
        java.util.List<retrofit.client.Header> headerList17 = request14.getHeaders();
        java.util.List<retrofit.client.Header> headerList18 = request14.getHeaders();
        java.lang.String str19 = request14.getMethod();
        java.util.List<retrofit.client.Header> headerList20 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", headerList20, typedOutput21);
        java.lang.String str23 = request22.getUrl();
        java.lang.String str24 = request22.getMethod();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test09464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09464");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        java.lang.String str17 = request16.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList18, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", headerList18, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList18, typedOutput25);
        java.lang.String str27 = request26.getMethod();
        retrofit.mime.TypedOutput typedOutput28 = request26.getBody();
        java.util.List<retrofit.client.Header> headerList29 = request26.getHeaders();
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList29, typedOutput30);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Retrofit-Idle" + "'", str27, "Retrofit-Idle");
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
    }

    @Test
    public void test09465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09465");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = builder0.server;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log7 = restAdapter6.log;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor10 = builder8.requestInterceptor;
        retrofit.ErrorHandler errorHandler11 = null;
        builder8.errorHandler = errorHandler11;
        retrofit.converter.Converter converter13 = null;
        builder8.converter = converter13;
        retrofit.ErrorHandler errorHandler15 = null;
        builder8.errorHandler = errorHandler15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.Profiler profiler22 = null;
        builder21.profiler = profiler22;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        builder21.requestInterceptor = requestInterceptor24;
        retrofit.RestAdapter restAdapter26 = builder21.build();
        retrofit.converter.Converter converter27 = restAdapter26.converter;
        retrofit.RestAdapter.Builder builder28 = builder8.setConverter(converter27);
        restAdapter6.converter = converter27;
        builder0.converter = converter27;
        java.util.concurrent.Executor executor31 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.RestAdapter.LogLevel logLevel34 = builder32.logLevel;
        builder32.ensureSaneDefaults();
        retrofit.client.Client.Provider provider36 = null;
        builder32.clientProvider = provider36;
        retrofit.Profiler profiler38 = builder32.profiler;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        retrofit.RestAdapter.Log log41 = builder39.log;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter61.setLogLevel(logLevel65);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log58, logLevel65);
        retrofit.RestAdapter.Builder builder68 = builder39.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder69.setLog(log74);
        builder39.log = log74;
        retrofit.RestAdapter.Builder builder77 = builder32.setLog(log74);
        retrofit.RequestInterceptor requestInterceptor78 = builder32.requestInterceptor;
        retrofit.converter.Converter converter79 = builder32.converter;
        builder0.converter = converter79;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor83 = null;
        builder82.httpExecutor = executor83;
        retrofit.RestAdapter.Builder builder86 = builder82.setServer("hi!");
        retrofit.Profiler profiler87 = null;
        builder86.profiler = profiler87;
        retrofit.RequestInterceptor requestInterceptor89 = null;
        builder86.requestInterceptor = requestInterceptor89;
        retrofit.RestAdapter restAdapter91 = builder86.build();
        retrofit.Server server92 = builder86.server;
        retrofit.Server server93 = builder86.server;
        retrofit.ErrorHandler errorHandler94 = builder86.errorHandler;
        builder0.errorHandler = errorHandler94;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNotNull(converter27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(converter79);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(server92);
        org.junit.Assert.assertNotNull(server93);
        org.junit.Assert.assertNotNull(errorHandler94);
    }

    @Test
    public void test09466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09466");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        builder8.logLevel = logLevel10;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter17 = null;
        restAdapter14.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        restAdapter14.log = log39;
        retrofit.RestAdapter.Builder builder42 = builder8.setLog(log39);
        restAdapter0.log = log39;
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter0.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter0.requestInterceptor;
        retrofit.Server server46 = restAdapter0.server;
        retrofit.RestAdapter.Log log47 = restAdapter0.log;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertNotNull(log47);
    }

    @Test
    public void test09467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09467");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.httpExecutor = executor4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("hi!");
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder3.setLog(log8);
        retrofit.ErrorHandler errorHandler10 = builder3.errorHandler;
        retrofit.client.Client.Provider provider11 = builder3.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel12 = builder3.logLevel;
        retrofit.RestAdapter restAdapter13 = builder3.build();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.client.Client.Provider provider19 = builder18.clientProvider;
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log22 = restAdapter21.log;
        retrofit.ErrorHandler errorHandler23 = restAdapter21.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.Profiler profiler30 = null;
        builder29.profiler = profiler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder32.setLog(log37);
        retrofit.RestAdapter restAdapter39 = builder32.build();
        retrofit.converter.Converter converter40 = null;
        builder32.converter = converter40;
        retrofit.ErrorHandler errorHandler42 = null;
        builder32.errorHandler = errorHandler42;
        retrofit.RequestInterceptor requestInterceptor44 = builder32.requestInterceptor;
        builder29.requestInterceptor = requestInterceptor44;
        restAdapter21.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.Builder builder47 = builder18.setRequestInterceptor(requestInterceptor44);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter50.requestInterceptor = requestInterceptor52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        restAdapter50.log = log62;
        retrofit.ErrorHandler errorHandler66 = null;
        restAdapter50.errorHandler = errorHandler66;
        retrofit.RestAdapter.Log log68 = restAdapter50.log;
        retrofit.RestAdapter.Builder builder69 = builder48.setLog(log68);
        retrofit.Profiler profiler70 = builder69.profiler;
        retrofit.Profiler profiler71 = builder69.profiler;
        java.util.concurrent.Executor executor72 = builder69.callbackExecutor;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.client.Client.Provider provider78 = builder77.clientProvider;
        builder77.ensureSaneDefaults();
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        log80.log("");
        builder77.log = log80;
        retrofit.Server server84 = builder77.server;
        builder69.server = server84;
        retrofit.RestAdapter.Builder builder86 = builder47.setServer(server84);
        retrofit.RequestInterceptor requestInterceptor87 = builder86.requestInterceptor;
        java.util.concurrent.Executor executor88 = builder86.httpExecutor;
        retrofit.client.Client.Provider provider89 = builder86.clientProvider;
        retrofit.RestAdapter.Builder builder90 = builder3.setClient(provider89);
        retrofit.RestAdapter.Builder builder91 = builder0.setClient(provider89);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(profiler70);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(requestInterceptor87);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test09468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09468");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder6.setLog(log11);
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        builder6.logLevel = logLevel22;
        retrofit.converter.Converter converter25 = builder6.converter;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        builder6.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter restAdapter28 = builder6.build();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter28.new RestHandler();
        retrofit.Server server30 = restAdapter28.server;
        builder0.server = server30;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(server30);
    }

    @Test
    public void test09469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09469");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.Profiler profiler9 = null;
        builder8.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        retrofit.converter.Converter converter19 = null;
        builder11.converter = converter19;
        retrofit.ErrorHandler errorHandler21 = null;
        builder11.errorHandler = errorHandler21;
        retrofit.RequestInterceptor requestInterceptor23 = builder11.requestInterceptor;
        builder8.requestInterceptor = requestInterceptor23;
        restAdapter0.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.Profiler profiler28 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler29 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(logLevel31);
    }

    @Test
    public void test09470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09470");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.ErrorHandler errorHandler31 = null;
        builder29.errorHandler = errorHandler31;
        retrofit.Profiler profiler33 = null;
        builder29.profiler = profiler33;
        retrofit.converter.Converter converter35 = builder29.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(converter35);
    }

    @Test
    public void test09471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09471");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor26);
        retrofit.client.Client.Provider provider29 = null;
        builder28.clientProvider = provider29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter31.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        restAdapter31.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter31.getLogLevel();
        retrofit.Server server36 = restAdapter31.server;
        java.util.concurrent.Executor executor37 = restAdapter31.callbackExecutor;
        retrofit.ErrorHandler errorHandler38 = null;
        restAdapter31.errorHandler = errorHandler38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = builder40.converter;
        retrofit.RestAdapter.LogLevel logLevel42 = builder40.logLevel;
        builder40.ensureSaneDefaults();
        retrofit.client.Client.Provider provider44 = null;
        builder40.clientProvider = provider44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder54.setLog(log59);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter61.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter61.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log59, logLevel67);
        builder40.logLevel = logLevel67;
        retrofit.client.Client.Provider provider71 = null;
        builder40.clientProvider = provider71;
        retrofit.converter.Converter converter73 = builder40.converter;
        restAdapter31.converter = converter73;
        builder28.converter = converter73;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter76.logLevel = logLevel78;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter76.setLogLevel(logLevel80);
        java.util.concurrent.Executor executor82 = restAdapter76.httpExecutor;
        retrofit.Server server83 = null;
        restAdapter76.server = server83;
        retrofit.RestAdapter.LogLevel logLevel85 = restAdapter76.logLevel;
        retrofit.RestAdapter.Builder builder86 = builder28.setLogLevel(logLevel85);
        retrofit.Profiler profiler87 = builder86.profiler;
        retrofit.Profiler profiler88 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder89 = builder86.setProfiler(profiler88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter73);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor82);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(profiler87);
    }

    @Test
    public void test09472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09472");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter8.getLogLevel();
        retrofit.client.Client.Provider provider13 = null;
        restAdapter8.clientProvider = provider13;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter8.logLevel;
        java.util.concurrent.Executor executor16 = restAdapter8.callbackExecutor;
        java.util.concurrent.Executor executor17 = null;
        restAdapter8.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        java.util.concurrent.Executor executor24 = null;
        builder19.httpExecutor = executor24;
        retrofit.RestAdapter restAdapter26 = builder19.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.Profiler profiler49 = builder48.profiler;
        retrofit.Profiler profiler50 = builder48.profiler;
        java.util.concurrent.Executor executor51 = builder48.callbackExecutor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        retrofit.RestAdapter restAdapter59 = builder52.build();
        java.util.concurrent.Executor executor60 = restAdapter59.httpExecutor;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.client.Client.Provider provider64 = null;
        builder61.clientProvider = provider64;
        retrofit.RestAdapter.Builder builder67 = builder61.setServer("hi!");
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder74 = builder68.setLog(log73);
        retrofit.RestAdapter restAdapter75 = builder68.build();
        java.util.concurrent.Executor executor76 = restAdapter75.httpExecutor;
        builder67.callbackExecutor = executor76;
        retrofit.RestAdapter.Builder builder78 = builder48.setExecutors(executor60, executor76);
        restAdapter26.httpExecutor = executor60;
        retrofit.Server server80 = null;
        retrofit.client.Client.Provider provider81 = null;
        java.util.concurrent.Executor executor82 = null;
        java.util.concurrent.Executor executor83 = null;
        retrofit.RequestInterceptor requestInterceptor84 = null;
        retrofit.converter.Converter converter85 = null;
        retrofit.Profiler profiler86 = null;
        retrofit.ErrorHandler errorHandler87 = null;
        retrofit.RestAdapter.Log log88 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server80, provider81, executor82, executor83, requestInterceptor84, converter85, profiler86, errorHandler87, log88, logLevel89);
        restAdapter26.logLevel = logLevel89;
        retrofit.ErrorHandler errorHandler92 = restAdapter26.errorHandler;
        restAdapter8.errorHandler = errorHandler92;
        restAdapter0.errorHandler = errorHandler92;
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler92);
    }

    @Test
    public void test09473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09473");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter26 = builder25.build();
        retrofit.RestAdapter.Log log27 = builder25.log;
        retrofit.RestAdapter restAdapter28 = builder25.build();
        retrofit.Profiler profiler29 = restAdapter28.profiler;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.Profiler profiler34 = restAdapter30.profiler;
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter30.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter30.requestInterceptor;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log38 = restAdapter37.log;
        java.util.concurrent.Executor executor39 = restAdapter37.callbackExecutor;
        retrofit.Profiler profiler40 = restAdapter37.profiler;
        retrofit.Profiler profiler41 = null;
        restAdapter37.profiler = profiler41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        restAdapter37.log = log51;
        restAdapter30.log = log51;
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter30.getLogLevel();
        restAdapter28.setLogLevel(logLevel56);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test09474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09474");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        restAdapter0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor29 = builder7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = builder7.requestInterceptor;
        retrofit.RestAdapter.Builder builder32 = builder7.setServer("hi!");
        retrofit.Server server33 = builder7.server;
        restAdapter0.server = server33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = builder35.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor37 = builder35.requestInterceptor;
        retrofit.Profiler profiler38 = builder35.profiler;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.RestAdapter.Log log41 = builder39.log;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter.LogLevel logLevel44 = builder42.logLevel;
        builder42.ensureSaneDefaults();
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder54.setLog(log59);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter61.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter61.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log59, logLevel67);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.RestAdapter.Builder builder74 = builder70.setServer("hi!");
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder76 = builder70.setLog(log75);
        restAdapter69.log = log75;
        builder42.log = log75;
        java.util.concurrent.Executor executor79 = null;
        builder42.httpExecutor = executor79;
        retrofit.converter.Converter converter81 = null;
        builder42.converter = converter81;
        retrofit.ErrorHandler errorHandler83 = builder42.errorHandler;
        retrofit.RestAdapter.Builder builder84 = builder39.setErrorHandler(errorHandler83);
        retrofit.RestAdapter.Builder builder85 = builder35.setErrorHandler(errorHandler83);
        restAdapter0.errorHandler = errorHandler83;
        retrofit.RestAdapter.Log log87 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel88 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(errorHandler83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(log87);
        org.junit.Assert.assertNull(logLevel88);
        org.junit.Assert.assertNull(logLevel89);
        org.junit.Assert.assertNull(logLevel90);
    }

    @Test
    public void test09475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09475");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request10.getBody();
        retrofit.mime.TypedOutput typedOutput13 = request10.getBody();
        java.lang.String str14 = request10.getMethod();
        java.util.List<retrofit.client.Header> headerList15 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput16 = request10.getBody();
        java.util.List<retrofit.client.Header> headerList17 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("", "Retrofit-Idle", headerList17, typedOutput18);
        java.util.List<retrofit.client.Header> headerList20 = request19.getHeaders();
        java.util.List<retrofit.client.Header> headerList21 = request19.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("hi!", "hi!", headerList21, typedOutput22);
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList21);
    }

    @Test
    public void test09476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09476");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter restAdapter8 = builder0.build();
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.client.Client.Provider provider13 = null;
        builder10.clientProvider = provider13;
        retrofit.RestAdapter.Builder builder16 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter17.logLevel = logLevel19;
        retrofit.Profiler profiler21 = restAdapter17.profiler;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter17.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter17.requestInterceptor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log25 = restAdapter24.log;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.Profiler profiler27 = restAdapter24.profiler;
        retrofit.Profiler profiler28 = null;
        restAdapter24.profiler = profiler28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter24.log = log38;
        restAdapter17.log = log38;
        retrofit.RestAdapter.Builder builder43 = builder10.setLog(log38);
        java.util.concurrent.Executor executor44 = builder43.callbackExecutor;
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor47 = restAdapter46.requestInterceptor;
        java.util.concurrent.Executor executor48 = restAdapter46.callbackExecutor;
        retrofit.converter.Converter converter49 = null;
        restAdapter46.converter = converter49;
        retrofit.RestAdapter.Log log51 = restAdapter46.log;
        retrofit.ErrorHandler errorHandler52 = restAdapter46.errorHandler;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.client.Client.Provider provider56 = null;
        builder53.clientProvider = provider56;
        retrofit.RestAdapter.Builder builder59 = builder53.setServer("hi!");
        retrofit.Profiler profiler60 = builder53.profiler;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter62 = null;
        builder61.converter = converter62;
        retrofit.client.Client.Provider provider64 = null;
        builder61.clientProvider = provider64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        builder61.requestInterceptor = requestInterceptor66;
        retrofit.Profiler profiler68 = builder61.profiler;
        retrofit.Profiler profiler69 = null;
        builder61.profiler = profiler69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = builder71.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor73 = builder71.requestInterceptor;
        java.util.concurrent.Executor executor74 = builder71.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel75 = builder71.logLevel;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.Profiler profiler81 = null;
        builder80.profiler = profiler81;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        builder80.requestInterceptor = requestInterceptor83;
        retrofit.RestAdapter restAdapter85 = builder80.build();
        retrofit.converter.Converter converter86 = null;
        builder80.converter = converter86;
        retrofit.client.Client.Provider provider88 = builder80.clientProvider;
        retrofit.RestAdapter.Builder builder89 = builder71.setClient(provider88);
        retrofit.RestAdapter.Builder builder90 = builder61.setClient(provider88);
        retrofit.client.Client.Provider provider91 = builder90.clientProvider;
        builder53.clientProvider = provider91;
        restAdapter46.clientProvider = provider91;
        builder43.clientProvider = provider91;
        retrofit.RequestInterceptor requestInterceptor95 = builder43.requestInterceptor;
        retrofit.ErrorHandler errorHandler96 = builder43.errorHandler;
        builder0.errorHandler = errorHandler96;
        retrofit.RequestInterceptor requestInterceptor98 = builder0.requestInterceptor;
        retrofit.client.Client.Provider provider99 = builder0.clientProvider;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(restAdapter8);
        org.junit.Assert.assertNotNull(executor9);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNull(profiler68);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(provider88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(provider91);
        org.junit.Assert.assertNotNull(requestInterceptor95);
        org.junit.Assert.assertNotNull(errorHandler96);
        org.junit.Assert.assertNotNull(requestInterceptor98);
        org.junit.Assert.assertNotNull(provider99);
    }

    @Test
    public void test09477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09477");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter9.logLevel;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter9.getLogLevel();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09478");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.Profiler profiler11 = null;
        builder10.profiler = profiler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder13.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = builder13.requestInterceptor;
        builder10.requestInterceptor = requestInterceptor25;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.client.Client.Provider provider31 = null;
        builder28.clientProvider = provider31;
        retrofit.RestAdapter.Builder builder34 = builder28.setServer("hi!");
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.Profiler profiler40 = null;
        builder39.profiler = profiler40;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        builder39.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter restAdapter44 = builder39.build();
        retrofit.converter.Converter converter45 = restAdapter44.converter;
        retrofit.RestAdapter.Builder builder46 = builder28.setConverter(converter45);
        restAdapter0.converter = converter45;
        retrofit.Profiler profiler48 = restAdapter0.profiler;
        java.util.concurrent.Executor executor49 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor50 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(converter45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNotNull(requestInterceptor51);
    }

    @Test
    public void test09479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09479");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = null;
        builder24.converter = converter25;
        retrofit.client.Client.Provider provider27 = null;
        builder24.clientProvider = provider27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        builder24.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter restAdapter45 = builder38.build();
        retrofit.converter.Converter converter46 = null;
        builder38.converter = converter46;
        retrofit.ErrorHandler errorHandler48 = null;
        builder38.errorHandler = errorHandler48;
        retrofit.RequestInterceptor requestInterceptor50 = builder38.requestInterceptor;
        builder35.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.Builder builder52 = builder24.setRequestInterceptor(requestInterceptor50);
        retrofit.RestAdapter.Builder builder53 = builder0.setRequestInterceptor(requestInterceptor50);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = builder54.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor56 = builder54.requestInterceptor;
        retrofit.ErrorHandler errorHandler57 = null;
        builder54.errorHandler = errorHandler57;
        retrofit.converter.Converter converter59 = null;
        builder54.converter = converter59;
        retrofit.ErrorHandler errorHandler61 = null;
        builder54.errorHandler = errorHandler61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.httpExecutor = executor64;
        retrofit.RestAdapter.Builder builder67 = builder63.setServer("hi!");
        retrofit.Profiler profiler68 = null;
        builder67.profiler = profiler68;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        builder67.requestInterceptor = requestInterceptor70;
        retrofit.RestAdapter restAdapter72 = builder67.build();
        retrofit.converter.Converter converter73 = restAdapter72.converter;
        retrofit.RestAdapter.Builder builder74 = builder54.setConverter(converter73);
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter76 = builder75.converter;
        retrofit.Profiler profiler77 = null;
        builder75.profiler = profiler77;
        retrofit.ErrorHandler errorHandler79 = null;
        builder75.errorHandler = errorHandler79;
        retrofit.RestAdapter.Builder builder82 = builder75.setServer("hi!");
        java.util.concurrent.Executor executor83 = builder75.httpExecutor;
        builder75.ensureSaneDefaults();
        retrofit.client.Client.Provider provider85 = builder75.clientProvider;
        builder74.clientProvider = provider85;
        retrofit.RestAdapter.Builder builder87 = builder0.setClient(provider85);
        retrofit.client.Client.Provider provider88 = builder87.clientProvider;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(converter73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(converter76);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(executor83);
        org.junit.Assert.assertNotNull(provider85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(provider88);
    }

    @Test
    public void test09480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09480");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter7.requestInterceptor = requestInterceptor13;
        retrofit.Profiler profiler15 = null;
        restAdapter7.profiler = profiler15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.converter.Converter converter19 = restAdapter17.converter;
        java.util.concurrent.Executor executor20 = null;
        restAdapter17.callbackExecutor = executor20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter17.logLevel = logLevel22;
        restAdapter7.setLogLevel(logLevel22);
        builder0.logLevel = logLevel22;
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor27 = builder0.httpExecutor;
        retrofit.Profiler profiler28 = builder0.profiler;
        retrofit.converter.Converter converter29 = null;
        builder0.converter = converter29;
        retrofit.RestAdapter restAdapter31 = builder0.build();
        retrofit.Server server32 = builder0.server;
        retrofit.RestAdapter.Log log33 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder34 = builder0.setLog(log33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(server32);
    }

    @Test
    public void test09481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09481");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder28.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.Profiler profiler39 = null;
        builder38.profiler = profiler39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = builder41.build();
        retrofit.converter.Converter converter49 = null;
        builder41.converter = converter49;
        retrofit.ErrorHandler errorHandler51 = null;
        builder41.errorHandler = errorHandler51;
        retrofit.RequestInterceptor requestInterceptor53 = builder41.requestInterceptor;
        builder38.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder28.setRequestInterceptor(requestInterceptor53);
        retrofit.Profiler profiler56 = builder55.profiler;
        java.util.concurrent.Executor executor57 = builder55.httpExecutor;
        java.util.concurrent.Executor executor58 = builder55.callbackExecutor;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.Profiler profiler64 = null;
        builder63.profiler = profiler64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        builder63.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter restAdapter68 = builder63.build();
        retrofit.converter.Converter converter69 = restAdapter68.converter;
        java.util.concurrent.Executor executor70 = restAdapter68.callbackExecutor;
        retrofit.client.Client.Provider provider71 = restAdapter68.clientProvider;
        retrofit.RestAdapter.Builder builder72 = builder55.setClient(provider71);
        retrofit.RequestInterceptor requestInterceptor73 = builder72.requestInterceptor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(converter69);
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(provider71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(requestInterceptor73);
    }

    @Test
    public void test09482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09482");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log9 = restAdapter0.log;
        retrofit.client.Client.Provider provider10 = restAdapter0.clientProvider;
        retrofit.ErrorHandler errorHandler11 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(logLevel12);
    }

    @Test
    public void test09483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09483");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        java.util.concurrent.Executor executor19 = restAdapter18.httpExecutor;
        builder10.callbackExecutor = executor19;
        builder0.callbackExecutor = executor19;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = null;
        builder23.converter = converter24;
        retrofit.client.Client.Provider provider26 = null;
        builder23.clientProvider = provider26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder23.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.Profiler profiler35 = null;
        builder34.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder37.setLog(log42);
        retrofit.RestAdapter restAdapter44 = builder37.build();
        retrofit.converter.Converter converter45 = null;
        builder37.converter = converter45;
        retrofit.ErrorHandler errorHandler47 = null;
        builder37.errorHandler = errorHandler47;
        retrofit.RequestInterceptor requestInterceptor49 = builder37.requestInterceptor;
        builder34.requestInterceptor = requestInterceptor49;
        retrofit.RestAdapter.Builder builder51 = builder23.setRequestInterceptor(requestInterceptor49);
        retrofit.client.Client.Provider provider52 = null;
        builder51.clientProvider = provider52;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        log54.log("");
        retrofit.RestAdapter.Builder builder57 = builder51.setLog(log54);
        java.util.concurrent.Executor executor58 = builder57.httpExecutor;
        builder57.ensureSaneDefaults();
        retrofit.converter.Converter converter60 = builder57.converter;
        builder0.converter = converter60;
        retrofit.Server server62 = builder0.server;
        retrofit.Server server63 = builder0.server;
        java.util.concurrent.Executor executor64 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(converter60);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNotNull(executor64);
    }

    @Test
    public void test09484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09484");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.converter.Converter converter9 = null;
        builder0.converter = converter9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        builder11.logLevel = logLevel27;
        retrofit.converter.Converter converter30 = builder11.converter;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        builder11.requestInterceptor = requestInterceptor31;
        builder11.ensureSaneDefaults();
        java.util.concurrent.Executor executor34 = builder11.callbackExecutor;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.Profiler profiler37 = null;
        builder35.profiler = profiler37;
        retrofit.RestAdapter.Log log39 = builder35.log;
        builder35.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor41 = null;
        builder35.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter44 = builder43.converter;
        retrofit.RestAdapter.LogLevel logLevel45 = builder43.logLevel;
        builder43.ensureSaneDefaults();
        retrofit.client.Client.Provider provider47 = null;
        builder43.clientProvider = provider47;
        retrofit.Profiler profiler49 = builder43.profiler;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = builder50.callbackExecutor;
        retrofit.RestAdapter.Log log52 = builder50.log;
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter72.logLevel = logLevel74;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter72.setLogLevel(logLevel76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log69, logLevel76);
        retrofit.RestAdapter.Builder builder79 = builder50.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.httpExecutor = executor81;
        retrofit.RestAdapter.Builder builder84 = builder80.setServer("hi!");
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder86 = builder80.setLog(log85);
        builder50.log = log85;
        retrofit.RestAdapter.Builder builder88 = builder43.setLog(log85);
        java.util.concurrent.Executor executor89 = builder88.httpExecutor;
        builder35.httpExecutor = executor89;
        retrofit.RestAdapter.Builder builder91 = builder0.setExecutors(executor34, executor89);
        retrofit.RestAdapter.LogLevel logLevel92 = builder0.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test09485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09485");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = builder4.build();
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getMethod();
        java.lang.String str14 = request12.getMethod();
        retrofit.client.Request request15 = restAdapter5.logAndReplaceRequest(request12);
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter5.requestInterceptor;
        java.util.concurrent.Executor executor17 = null;
        restAdapter5.httpExecutor = executor17;
        retrofit.Profiler profiler19 = null;
        restAdapter5.profiler = profiler19;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(requestInterceptor16);
    }

    @Test
    public void test09486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09486");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        builder4.logLevel = logLevel6;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        restAdapter10.log = log35;
        retrofit.RestAdapter.Builder builder38 = builder4.setLog(log35);
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder38.requestInterceptor = requestInterceptor39;
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder43.setLog(log48);
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        builder43.logLevel = logLevel59;
        retrofit.Profiler profiler62 = builder43.profiler;
        retrofit.Profiler profiler63 = null;
        builder43.profiler = profiler63;
        retrofit.RequestInterceptor requestInterceptor65 = builder43.requestInterceptor;
        retrofit.RestAdapter.Log log66 = builder43.log;
        retrofit.RestAdapter.Builder builder67 = builder38.setLog(log66);
        retrofit.RestAdapter.Log log68 = builder38.log;
        log68.log("hi!");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log68);
    }

    @Test
    public void test09487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09487");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = null;
        restAdapter10.errorHandler = errorHandler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder13.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = builder13.requestInterceptor;
        restAdapter10.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter.LogLevel logLevel29 = builder27.logLevel;
        builder27.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor31 = builder27.requestInterceptor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder32.setLog(log37);
        retrofit.RestAdapter restAdapter39 = builder32.build();
        retrofit.converter.Converter converter40 = null;
        builder32.converter = converter40;
        retrofit.ErrorHandler errorHandler42 = null;
        builder32.errorHandler = errorHandler42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter51.logLevel;
        retrofit.converter.Converter converter54 = null;
        restAdapter51.converter = converter54;
        retrofit.ErrorHandler errorHandler56 = restAdapter51.errorHandler;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter58 = null;
        builder57.converter = converter58;
        retrofit.client.Client.Provider provider60 = null;
        builder57.clientProvider = provider60;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        builder57.requestInterceptor = requestInterceptor62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.RestAdapter.Builder builder68 = builder64.setServer("hi!");
        retrofit.Profiler profiler69 = null;
        builder68.profiler = profiler69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder71.setLog(log76);
        retrofit.RestAdapter restAdapter78 = builder71.build();
        retrofit.converter.Converter converter79 = null;
        builder71.converter = converter79;
        retrofit.ErrorHandler errorHandler81 = null;
        builder71.errorHandler = errorHandler81;
        retrofit.RequestInterceptor requestInterceptor83 = builder71.requestInterceptor;
        builder68.requestInterceptor = requestInterceptor83;
        retrofit.RestAdapter.Builder builder85 = builder57.setRequestInterceptor(requestInterceptor83);
        restAdapter51.requestInterceptor = requestInterceptor83;
        builder44.requestInterceptor = requestInterceptor83;
        builder32.requestInterceptor = requestInterceptor83;
        retrofit.RestAdapter.LogLevel logLevel89 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder90 = builder27.setLogLevel(logLevel89);
        restAdapter10.setLogLevel(logLevel89);
        retrofit.RequestInterceptor requestInterceptor92 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor93 = restAdapter10.httpExecutor;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNull(executor93);
    }

    @Test
    public void test09488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09488");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter restAdapter11 = builder9.build();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter11.new RestHandler();
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(server10);
        org.junit.Assert.assertNotNull(restAdapter11);
    }

    @Test
    public void test09489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09489");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Log log24 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel25 = builder0.logLevel;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log28 = restAdapter27.log;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.LogLevel logLevel31 = null;
        restAdapter27.logLevel = logLevel31;
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter27.requestInterceptor;
        retrofit.Profiler profiler34 = null;
        restAdapter27.profiler = profiler34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter36.logLevel = logLevel38;
        retrofit.Profiler profiler40 = restAdapter36.profiler;
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.ErrorHandler errorHandler60 = null;
        restAdapter44.errorHandler = errorHandler60;
        retrofit.RestAdapter.Log log62 = restAdapter44.log;
        retrofit.RestAdapter.Builder builder63 = builder42.setLog(log62);
        retrofit.Profiler profiler64 = builder63.profiler;
        retrofit.RestAdapter.LogLevel logLevel65 = builder63.logLevel;
        restAdapter36.logLevel = logLevel65;
        java.util.concurrent.Executor executor67 = restAdapter36.callbackExecutor;
        retrofit.Server server68 = restAdapter36.server;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter70 = builder69.converter;
        retrofit.Profiler profiler71 = null;
        builder69.profiler = profiler71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.client.Client.Provider provider76 = null;
        builder73.clientProvider = provider76;
        retrofit.RestAdapter.Builder builder79 = builder73.setServer("hi!");
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.httpExecutor = executor81;
        retrofit.RestAdapter.Builder builder84 = builder80.setServer("hi!");
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder86 = builder80.setLog(log85);
        retrofit.RestAdapter restAdapter87 = builder80.build();
        java.util.concurrent.Executor executor88 = restAdapter87.httpExecutor;
        builder79.callbackExecutor = executor88;
        builder69.callbackExecutor = executor88;
        restAdapter36.httpExecutor = executor88;
        restAdapter27.httpExecutor = executor88;
        restAdapter26.callbackExecutor = executor88;
        java.util.concurrent.Executor executor94 = null;
        retrofit.RestAdapter.Builder builder95 = builder0.setExecutors(executor88, executor94);
        java.util.concurrent.Executor executor96 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(profiler64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertNull(converter70);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(executor96);
    }

    @Test
    public void test09490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09490");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler8 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log9 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = null;
        builder10.converter = converter11;
        retrofit.client.Client.Provider provider13 = null;
        builder10.clientProvider = provider13;
        java.util.concurrent.Executor executor15 = builder10.httpExecutor;
        retrofit.Profiler profiler16 = builder10.profiler;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder17.setLog(log22);
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        builder17.logLevel = logLevel33;
        retrofit.converter.Converter converter36 = builder17.converter;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        builder17.requestInterceptor = requestInterceptor37;
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder40.setLog(log45);
        retrofit.RestAdapter restAdapter47 = builder40.build();
        retrofit.converter.Converter converter48 = null;
        builder40.converter = converter48;
        retrofit.ErrorHandler errorHandler50 = null;
        builder40.errorHandler = errorHandler50;
        retrofit.RequestInterceptor requestInterceptor52 = builder40.requestInterceptor;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.RestAdapter.Builder builder57 = builder53.setServer("hi!");
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        builder57.ensureSaneDefaults();
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        log60.log("");
        builder57.log = log60;
        retrofit.Server server64 = builder57.server;
        builder40.server = server64;
        retrofit.RestAdapter.Builder builder66 = builder17.setServer(server64);
        retrofit.RequestInterceptor requestInterceptor67 = builder17.requestInterceptor;
        java.util.concurrent.Executor executor68 = builder17.httpExecutor;
        builder10.httpExecutor = executor68;
        restAdapter0.httpExecutor = executor68;
        java.util.concurrent.Executor executor71 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNotNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(server64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(executor71);
    }

    @Test
    public void test09491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09491");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        restAdapter0.server = server4;
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter7.getLogLevel();
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = null;
        restAdapter12.httpExecutor = executor13;
        retrofit.Profiler profiler15 = null;
        restAdapter12.profiler = profiler15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter12.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        retrofit.RequestInterceptor requestInterceptor41 = builder19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor42 = builder19.requestInterceptor;
        retrofit.RestAdapter.Builder builder44 = builder19.setServer("hi!");
        retrofit.Server server45 = builder19.server;
        restAdapter12.server = server45;
        restAdapter7.server = server45;
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter50 = builder49.converter;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor52 = restAdapter51.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        restAdapter51.requestInterceptor = requestInterceptor53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel64);
        restAdapter51.log = log63;
        retrofit.ErrorHandler errorHandler67 = null;
        restAdapter51.errorHandler = errorHandler67;
        retrofit.RestAdapter.Log log69 = restAdapter51.log;
        retrofit.RestAdapter.Builder builder70 = builder49.setLog(log69);
        retrofit.Profiler profiler71 = builder70.profiler;
        retrofit.client.Client.Provider provider72 = builder70.clientProvider;
        retrofit.RestAdapter.Builder builder74 = builder70.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler75 = builder70.errorHandler;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = builder76.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor78 = builder76.requestInterceptor;
        java.util.concurrent.Executor executor79 = builder76.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel80 = builder76.logLevel;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor82 = null;
        builder81.httpExecutor = executor82;
        retrofit.RestAdapter.Builder builder85 = builder81.setServer("hi!");
        retrofit.Profiler profiler86 = null;
        builder85.profiler = profiler86;
        retrofit.RequestInterceptor requestInterceptor88 = null;
        builder85.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter restAdapter90 = builder85.build();
        retrofit.converter.Converter converter91 = null;
        builder85.converter = converter91;
        retrofit.client.Client.Provider provider93 = builder85.clientProvider;
        retrofit.RestAdapter.Builder builder94 = builder76.setClient(provider93);
        builder70.clientProvider = provider93;
        restAdapter7.clientProvider = provider93;
        restAdapter0.clientProvider = provider93;
        retrofit.RestAdapter.LogLevel logLevel98 = restAdapter0.getLogLevel();
        retrofit.converter.Converter converter99 = restAdapter0.converter;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNull(provider72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(errorHandler75);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNull(requestInterceptor78);
        org.junit.Assert.assertNull(executor79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter90);
        org.junit.Assert.assertNotNull(provider93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(logLevel98);
        org.junit.Assert.assertNull(converter99);
    }

    @Test
    public void test09492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09492");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "", headerList10, typedOutput11);
        java.util.List<retrofit.client.Header> headerList13 = request12.getHeaders();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        java.lang.String str15 = request12.getUrl();
        java.lang.String str16 = request12.getUrl();
        java.lang.String str17 = request12.getMethod();
        java.lang.String str18 = request12.getUrl();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test09493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09493");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.Profiler profiler26 = null;
        builder24.profiler = profiler26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.client.Client.Provider provider31 = null;
        builder28.clientProvider = provider31;
        retrofit.RestAdapter.Builder builder34 = builder28.setServer("hi!");
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        retrofit.RestAdapter restAdapter42 = builder35.build();
        java.util.concurrent.Executor executor43 = restAdapter42.httpExecutor;
        builder34.callbackExecutor = executor43;
        builder24.callbackExecutor = executor43;
        builder21.callbackExecutor = executor43;
        retrofit.RequestInterceptor requestInterceptor47 = builder21.requestInterceptor;
        retrofit.ErrorHandler errorHandler48 = builder21.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(executor43);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(errorHandler48);
    }

    @Test
    public void test09494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09494");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList14 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "hi!", headerList14, typedOutput15);
        java.lang.String str17 = request16.getMethod();
        retrofit.mime.TypedOutput typedOutput18 = request16.getBody();
        java.lang.String str19 = request16.getMethod();
        java.util.List<retrofit.client.Header> headerList20 = request16.getHeaders();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(headerList20);
    }

    @Test
    public void test09495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09495");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder5.setLog(log10);
        retrofit.RestAdapter restAdapter12 = builder5.build();
        retrofit.converter.Converter converter13 = null;
        builder5.converter = converter13;
        retrofit.ErrorHandler errorHandler15 = null;
        builder5.errorHandler = errorHandler15;
        retrofit.RequestInterceptor requestInterceptor17 = builder5.requestInterceptor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.client.Client.Provider provider23 = builder22.clientProvider;
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        log25.log("");
        builder22.log = log25;
        retrofit.Server server29 = builder22.server;
        builder5.server = server29;
        retrofit.RestAdapter.Builder builder31 = builder0.setServer(server29);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        java.util.concurrent.Executor executor36 = restAdapter32.httpExecutor;
        java.util.concurrent.Executor executor37 = restAdapter32.httpExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.Profiler profiler43 = null;
        builder42.profiler = profiler43;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        builder42.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter restAdapter47 = builder42.build();
        retrofit.converter.Converter converter48 = restAdapter47.converter;
        restAdapter32.converter = converter48;
        retrofit.RestAdapter.Builder builder50 = builder31.setConverter(converter48);
        retrofit.RestAdapter.Builder builder52 = builder31.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor53 = builder52.requestInterceptor;
        retrofit.Profiler profiler54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder55 = builder52.setProfiler(profiler54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNotNull(converter48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(requestInterceptor53);
    }

    @Test
    public void test09496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09496");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.httpExecutor = executor9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor12 = null;
        restAdapter0.callbackExecutor = executor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.setLogLevel(logLevel37);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log30, logLevel37);
        log30.log("");
        log30.log("hi!");
        log30.log("");
        restAdapter0.log = log30;
        log30.log("Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test09497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09497");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Log log25 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder26 = builder5.setLog(log25);
        retrofit.RequestInterceptor requestInterceptor27 = builder5.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = builder5.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = null;
        builder29.converter = converter30;
        retrofit.client.Client.Provider provider32 = null;
        builder29.clientProvider = provider32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        builder29.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.Profiler profiler41 = null;
        builder40.profiler = profiler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder43.setLog(log48);
        retrofit.RestAdapter restAdapter50 = builder43.build();
        retrofit.converter.Converter converter51 = null;
        builder43.converter = converter51;
        retrofit.ErrorHandler errorHandler53 = null;
        builder43.errorHandler = errorHandler53;
        retrofit.RequestInterceptor requestInterceptor55 = builder43.requestInterceptor;
        builder40.requestInterceptor = requestInterceptor55;
        retrofit.RestAdapter.Builder builder57 = builder29.setRequestInterceptor(requestInterceptor55);
        retrofit.RestAdapter.Builder builder58 = builder5.setRequestInterceptor(requestInterceptor55);
        retrofit.RestAdapter.LogLevel logLevel59 = builder58.logLevel;
        boolean boolean60 = logLevel59.log();
        retrofit.RestAdapter.Builder builder61 = builder0.setLogLevel(logLevel59);
        retrofit.RequestInterceptor requestInterceptor62 = builder61.requestInterceptor;
        retrofit.client.Client.Provider provider63 = builder61.clientProvider;
        retrofit.Server server64 = builder61.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNotNull(server64);
    }

    @Test
    public void test09498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09498");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter4.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter4.requestInterceptor = requestInterceptor6;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel17);
        restAdapter4.log = log16;
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter4.errorHandler = errorHandler20;
        retrofit.converter.Converter converter22 = null;
        restAdapter4.converter = converter22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log44, logLevel48);
        restAdapter4.logLevel = logLevel48;
        restAdapter0.logLevel = logLevel48;
        retrofit.Profiler profiler53 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter0.logLevel;
        retrofit.client.Response response56 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response58 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response56, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test09499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09499");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter.LogLevel logLevel26 = builder24.logLevel;
        builder24.ensureSaneDefaults();
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter43.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter43.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log41, logLevel49);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        restAdapter51.log = log57;
        builder24.log = log57;
        java.util.concurrent.Executor executor61 = null;
        builder24.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter64 = builder63.converter;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor66 = restAdapter65.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        restAdapter65.requestInterceptor = requestInterceptor67;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        restAdapter65.log = log77;
        retrofit.ErrorHandler errorHandler81 = null;
        restAdapter65.errorHandler = errorHandler81;
        retrofit.RestAdapter.Log log83 = restAdapter65.log;
        retrofit.RestAdapter.Builder builder84 = builder63.setLog(log83);
        retrofit.RestAdapter.Builder builder85 = builder24.setLog(log83);
        retrofit.RestAdapter.Builder builder86 = builder21.setLog(log83);
        retrofit.client.Client client87 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder88 = builder86.setClient(client87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(converter64);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test09500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09500");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter5 = builder4.converter;
        retrofit.RestAdapter.LogLevel logLevel6 = builder4.logLevel;
        builder4.ensureSaneDefaults();
        retrofit.client.Client.Provider provider8 = null;
        builder4.clientProvider = provider8;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder18.setLog(log23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter25.logLevel = logLevel27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter25.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter25.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log23, logLevel31);
        builder4.logLevel = logLevel31;
        retrofit.client.Client.Provider provider35 = null;
        builder4.clientProvider = provider35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder37.setLog(log42);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter45 = builder44.converter;
        retrofit.RestAdapter.LogLevel logLevel46 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder43.setLogLevel(logLevel46);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.RestAdapter.LogLevel logLevel50 = builder48.logLevel;
        builder48.ensureSaneDefaults();
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder60.setLog(log65);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter67.logLevel = logLevel69;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        restAdapter67.requestInterceptor = requestInterceptor71;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter67.logLevel = logLevel73;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log65, logLevel73);
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder82 = builder76.setLog(log81);
        restAdapter75.log = log81;
        builder48.log = log81;
        java.util.concurrent.Executor executor85 = null;
        builder48.httpExecutor = executor85;
        retrofit.converter.Converter converter87 = null;
        builder48.converter = converter87;
        retrofit.ErrorHandler errorHandler89 = builder48.errorHandler;
        retrofit.RestAdapter.Builder builder90 = builder43.setErrorHandler(errorHandler89);
        retrofit.RestAdapter.Builder builder91 = builder4.setErrorHandler(errorHandler89);
        builder0.errorHandler = errorHandler89;
        retrofit.RestAdapter.Builder builder94 = builder0.setServer("hi!");
        retrofit.converter.Converter converter95 = builder0.converter;
        retrofit.Profiler profiler96 = null;
        builder0.profiler = profiler96;
        retrofit.Server server98 = builder0.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(converter95);
        org.junit.Assert.assertNotNull(server98);
    }
}

