import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.converter.Converter converter11 = restAdapter9.converter;
        java.util.concurrent.Executor executor12 = null;
        restAdapter9.callbackExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = null;
        restAdapter14.httpExecutor = executor15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter14.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Log log19 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel20;
        restAdapter9.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder23 = builder0.setLogLevel(logLevel20);
        retrofit.RestAdapter.Log log24 = builder23.log;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder25.logLevel = logLevel30;
        retrofit.converter.Converter converter32 = null;
        builder25.converter = converter32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.converter.Converter converter36 = restAdapter34.converter;
        java.util.concurrent.Executor executor37 = null;
        restAdapter34.callbackExecutor = executor37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = null;
        restAdapter39.httpExecutor = executor40;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter39.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.Log log44 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel45;
        restAdapter34.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder48 = builder25.setLogLevel(logLevel45);
        builder23.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = builder50.setLog(log55);
        retrofit.ErrorHandler errorHandler57 = builder50.errorHandler;
        retrofit.client.Client.Provider provider58 = builder50.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel59 = builder50.logLevel;
        retrofit.RestAdapter restAdapter60 = builder50.build();
        retrofit.Server server61 = restAdapter60.server;
        retrofit.RestAdapter.Builder builder62 = builder23.setServer(server61);
        java.util.concurrent.Executor executor63 = builder62.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(executor63);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = builder10.build();
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.lang.String str19 = request18.getMethod();
        java.lang.String str20 = request18.getMethod();
        retrofit.client.Request request21 = restAdapter11.logAndReplaceRequest(request18);
        java.lang.String str22 = request18.getMethod();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request23 = restAdapter0.logAndReplaceRequest(request18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = builder4.build();
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getMethod();
        java.lang.String str14 = request12.getMethod();
        retrofit.client.Request request15 = restAdapter5.logAndReplaceRequest(request12);
        retrofit.RestAdapter.Log log16 = restAdapter5.log;
        retrofit.client.Client.Provider provider17 = null;
        restAdapter5.clientProvider = provider17;
        retrofit.Profiler profiler19 = restAdapter5.profiler;
        retrofit.Server server20 = restAdapter5.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNotNull(server20);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.converter.Converter converter25 = null;
        restAdapter7.converter = converter25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter35.requestInterceptor = requestInterceptor37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        restAdapter35.log = log47;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log47, logLevel51);
        restAdapter7.logLevel = logLevel51;
        retrofit.client.Header[] headerArray59 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList60 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList60, headerArray59);
        retrofit.mime.TypedOutput typedOutput62 = null;
        retrofit.client.Request request63 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList60, typedOutput62);
        java.lang.String str64 = request63.getUrl();
        java.util.List<retrofit.client.Header> headerList65 = request63.getHeaders();
        java.lang.String str66 = request63.getMethod();
        retrofit.mime.TypedOutput typedOutput67 = request63.getBody();
        java.util.List<retrofit.client.Header> headerList68 = request63.getHeaders();
        java.lang.String str69 = request63.getUrl();
        java.lang.String str70 = request63.getUrl();
        java.util.List<retrofit.client.Header> headerList71 = request63.getHeaders();
        java.util.List<retrofit.client.Header> headerList72 = request63.getHeaders();
        retrofit.mime.TypedOutput typedOutput73 = null;
        retrofit.client.Request request74 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList72, typedOutput73);
        java.lang.String str75 = request74.getMethod();
        retrofit.client.Request request76 = restAdapter7.logAndReplaceRequest(request74);
        java.util.List<retrofit.client.Header> headerList77 = request74.getHeaders();
        java.util.List<retrofit.client.Header> headerList78 = request74.getHeaders();
        retrofit.mime.TypedOutput typedOutput79 = request74.getBody();
        java.lang.String str80 = request74.getMethod();
        retrofit.mime.TypedOutput typedOutput81 = request74.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request82 = restAdapter0.logAndReplaceRequest(request74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(headerArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(headerList65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNull(typedOutput67);
        org.junit.Assert.assertNotNull(headerList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(headerList71);
        org.junit.Assert.assertNotNull(headerList72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Retrofit-Idle" + "'", str75, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request76);
        org.junit.Assert.assertNotNull(headerList77);
        org.junit.Assert.assertNotNull(headerList78);
        org.junit.Assert.assertNull(typedOutput79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Retrofit-Idle" + "'", str80, "Retrofit-Idle");
        org.junit.Assert.assertNull(typedOutput81);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor9 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.client.Client.Provider provider13 = null;
        builder10.clientProvider = provider13;
        retrofit.client.Client.Provider provider15 = builder10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel16);
        retrofit.Profiler profiler18 = null;
        builder10.profiler = profiler18;
        retrofit.RestAdapter.Builder builder21 = builder10.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter22.requestInterceptor = requestInterceptor24;
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter22.getLogLevel();
        retrofit.client.Client.Provider provider27 = null;
        restAdapter22.clientProvider = provider27;
        retrofit.ErrorHandler errorHandler29 = restAdapter22.errorHandler;
        retrofit.client.Client.Provider provider30 = restAdapter22.clientProvider;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter33.requestInterceptor = requestInterceptor35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        restAdapter33.log = log45;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter33.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = restAdapter33.log;
        retrofit.RestAdapter.Builder builder52 = builder31.setLog(log51);
        retrofit.Profiler profiler53 = builder52.profiler;
        retrofit.Profiler profiler54 = builder52.profiler;
        java.util.concurrent.Executor executor55 = builder52.callbackExecutor;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder56.setLog(log61);
        retrofit.RestAdapter restAdapter63 = builder56.build();
        java.util.concurrent.Executor executor64 = restAdapter63.httpExecutor;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.client.Client.Provider provider68 = null;
        builder65.clientProvider = provider68;
        retrofit.RestAdapter.Builder builder71 = builder65.setServer("hi!");
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("hi!");
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder78 = builder72.setLog(log77);
        retrofit.RestAdapter restAdapter79 = builder72.build();
        java.util.concurrent.Executor executor80 = restAdapter79.httpExecutor;
        builder71.callbackExecutor = executor80;
        retrofit.RestAdapter.Builder builder82 = builder52.setExecutors(executor64, executor80);
        restAdapter22.callbackExecutor = executor64;
        retrofit.Profiler profiler84 = null;
        restAdapter22.profiler = profiler84;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor87 = builder86.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor88 = builder86.requestInterceptor;
        java.util.concurrent.Executor executor89 = builder86.httpExecutor;
        retrofit.RestAdapter.Builder builder91 = builder86.setServer("hi!");
        retrofit.RestAdapter.Log log92 = builder86.log;
        retrofit.RestAdapter restAdapter93 = builder86.build();
        retrofit.RequestInterceptor requestInterceptor94 = restAdapter93.requestInterceptor;
        restAdapter22.requestInterceptor = requestInterceptor94;
        builder10.requestInterceptor = requestInterceptor94;
        retrofit.RestAdapter.Builder builder97 = builder8.setRequestInterceptor(requestInterceptor94);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(executor64);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(executor87);
        org.junit.Assert.assertNull(requestInterceptor88);
        org.junit.Assert.assertNull(executor89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(log92);
        org.junit.Assert.assertNotNull(restAdapter93);
        org.junit.Assert.assertNotNull(requestInterceptor94);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.Profiler profiler6 = builder5.profiler;
        retrofit.client.Client.Provider provider7 = builder5.clientProvider;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder16.setLog(log21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter23.logLevel = logLevel25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter23.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter23.logLevel = logLevel29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log21, logLevel29);
        log21.log("hi!");
        builder5.log = log21;
        retrofit.RestAdapter restAdapter35 = builder5.build();
        retrofit.converter.Converter converter36 = restAdapter35.converter;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(converter36);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Profiler profiler6 = builder0.profiler;
        java.util.concurrent.Executor executor7 = builder0.httpExecutor;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = builder9.callbackExecutor;
        retrofit.RestAdapter.Log log11 = builder9.log;
        retrofit.Server server12 = builder9.server;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = null;
        builder13.converter = converter14;
        retrofit.client.Client.Provider provider16 = null;
        builder13.clientProvider = provider16;
        java.util.concurrent.Executor executor18 = builder13.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        builder13.requestInterceptor = requestInterceptor19;
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter24 = null;
        restAdapter23.converter = converter24;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter23.requestInterceptor = requestInterceptor26;
        retrofit.Profiler profiler28 = restAdapter23.profiler;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        restAdapter23.logLevel = logLevel29;
        java.util.concurrent.Executor executor32 = restAdapter23.httpExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor35 = builder33.requestInterceptor;
        retrofit.ErrorHandler errorHandler36 = null;
        builder33.errorHandler = errorHandler36;
        retrofit.converter.Converter converter38 = null;
        builder33.converter = converter38;
        retrofit.ErrorHandler errorHandler40 = null;
        builder33.errorHandler = errorHandler40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter42.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter42.requestInterceptor = requestInterceptor44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        restAdapter42.log = log54;
        retrofit.ErrorHandler errorHandler58 = null;
        restAdapter42.errorHandler = errorHandler58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter61 = builder60.converter;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter62.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        restAdapter62.requestInterceptor = requestInterceptor64;
        retrofit.Server server66 = null;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log74, logLevel75);
        restAdapter62.log = log74;
        retrofit.ErrorHandler errorHandler78 = null;
        restAdapter62.errorHandler = errorHandler78;
        retrofit.RestAdapter.Log log80 = restAdapter62.log;
        retrofit.RestAdapter.Builder builder81 = builder60.setLog(log80);
        retrofit.RequestInterceptor requestInterceptor82 = builder60.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor83 = builder60.requestInterceptor;
        retrofit.RestAdapter.Builder builder85 = builder60.setServer("hi!");
        retrofit.Server server86 = builder60.server;
        restAdapter42.server = server86;
        retrofit.RestAdapter.Builder builder88 = builder33.setServer(server86);
        restAdapter23.server = server86;
        retrofit.RestAdapter.Builder builder90 = builder13.setServer(server86);
        retrofit.Server server91 = builder90.server;
        builder9.server = server91;
        builder0.server = server91;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(requestInterceptor82);
        org.junit.Assert.assertNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(server91);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.Profiler profiler11 = restAdapter8.profiler;
        retrofit.Profiler profiler12 = null;
        restAdapter8.profiler = profiler12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        builder26.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log22, logLevel42);
        retrofit.Profiler profiler46 = restAdapter45.profiler;
        java.util.concurrent.Executor executor47 = restAdapter45.callbackExecutor;
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(executor47);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        retrofit.RestAdapter.Builder builder21 = builder8.setLogLevel(logLevel19);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter22.getLogLevel();
        builder21.logLevel = logLevel28;
        retrofit.RestAdapter.Builder builder30 = builder0.setLogLevel(logLevel28);
        retrofit.RequestInterceptor requestInterceptor31 = null;
        builder0.requestInterceptor = requestInterceptor31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.Profiler profiler40 = null;
        builder39.profiler = profiler40;
        retrofit.client.Client.Provider provider42 = builder39.clientProvider;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter43.requestInterceptor = requestInterceptor45;
        java.util.concurrent.Executor executor47 = restAdapter43.httpExecutor;
        java.util.concurrent.Executor executor48 = restAdapter43.httpExecutor;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.Profiler profiler54 = null;
        builder53.profiler = profiler54;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        builder53.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter restAdapter58 = builder53.build();
        retrofit.converter.Converter converter59 = restAdapter58.converter;
        restAdapter43.converter = converter59;
        retrofit.RestAdapter.Builder builder61 = builder39.setConverter(converter59);
        builder0.converter = converter59;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter63.requestInterceptor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.ErrorHandler errorHandler66 = restAdapter63.errorHandler;
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder75.setLog(log80);
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter82.logLevel = logLevel84;
        retrofit.RequestInterceptor requestInterceptor86 = null;
        restAdapter82.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter82.logLevel = logLevel88;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log80, logLevel88);
        log80.log("Retrofit-Idle");
        restAdapter63.log = log80;
        retrofit.RestAdapter.Builder builder94 = builder0.setLog(log80);
        retrofit.Server server95 = builder94.server;
        retrofit.client.Client.Provider provider96 = builder94.clientProvider;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter97 = builder94.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(converter59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(logLevel83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(server95);
        org.junit.Assert.assertNull(provider96);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        log26.log("hi!");
        log26.log("hi!");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.Profiler profiler17 = restAdapter14.profiler;
        retrofit.Profiler profiler18 = null;
        restAdapter14.profiler = profiler18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter14.log = log28;
        restAdapter7.log = log28;
        retrofit.RestAdapter.Builder builder33 = builder0.setLog(log28);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.Profiler profiler39 = null;
        builder38.profiler = profiler39;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        builder38.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter restAdapter43 = builder38.build();
        retrofit.converter.Converter converter44 = restAdapter43.converter;
        java.util.concurrent.Executor executor45 = restAdapter43.callbackExecutor;
        builder0.callbackExecutor = executor45;
        retrofit.RestAdapter restAdapter47 = builder0.build();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(converter44);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(restAdapter47);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.RequestInterceptor requestInterceptor49 = builder27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor50 = builder27.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = builder27.setServer("hi!");
        retrofit.Server server53 = builder27.server;
        restAdapter9.server = server53;
        builder7.server = server53;
        retrofit.RestAdapter.Builder builder56 = builder0.setServer(server53);
        retrofit.RestAdapter.LogLevel logLevel57 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.converter.Converter converter59 = builder0.converter;
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter59);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = null;
        restAdapter5.httpExecutor = executor6;
        retrofit.Profiler profiler8 = null;
        restAdapter5.profiler = profiler8;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter5.requestInterceptor = requestInterceptor10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder33 = builder12.setLog(log32);
        retrofit.RequestInterceptor requestInterceptor34 = builder12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = builder12.requestInterceptor;
        retrofit.RestAdapter.Builder builder37 = builder12.setServer("hi!");
        retrofit.Server server38 = builder12.server;
        restAdapter5.server = server38;
        restAdapter0.server = server38;
        retrofit.client.Client.Provider provider41 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider44 = null;
        restAdapter43.clientProvider = provider44;
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder48.logLevel = logLevel53;
        retrofit.converter.Converter converter55 = null;
        builder48.converter = converter55;
        retrofit.client.Client.Provider provider57 = null;
        builder48.clientProvider = provider57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter60 = builder59.converter;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter61.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        restAdapter61.requestInterceptor = requestInterceptor63;
        retrofit.Server server65 = null;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server65, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel74);
        restAdapter61.log = log73;
        retrofit.ErrorHandler errorHandler77 = null;
        restAdapter61.errorHandler = errorHandler77;
        retrofit.RestAdapter.Log log79 = restAdapter61.log;
        retrofit.RestAdapter.Builder builder80 = builder59.setLog(log79);
        builder59.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor83 = null;
        builder82.httpExecutor = executor83;
        retrofit.RestAdapter.Builder builder86 = builder82.setServer("hi!");
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder88 = builder82.setLog(log87);
        retrofit.RestAdapter restAdapter89 = builder82.build();
        java.util.concurrent.Executor executor90 = restAdapter89.httpExecutor;
        builder59.callbackExecutor = executor90;
        builder48.httpExecutor = executor90;
        restAdapter43.httpExecutor = executor90;
        retrofit.RequestInterceptor requestInterceptor94 = restAdapter43.requestInterceptor;
        java.util.concurrent.Executor executor95 = restAdapter43.httpExecutor;
        java.util.concurrent.Executor executor96 = restAdapter43.httpExecutor;
        restAdapter0.httpExecutor = executor96;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter60);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNull(requestInterceptor94);
        org.junit.Assert.assertNotNull(executor95);
        org.junit.Assert.assertNotNull(executor96);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler5 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = null;
        builder6.converter = converter7;
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.converter.Converter converter11 = builder6.converter;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter.LogLevel logLevel14 = builder12.logLevel;
        builder12.ensureSaneDefaults();
        retrofit.client.Client.Provider provider16 = null;
        builder12.clientProvider = provider16;
        retrofit.Profiler profiler18 = builder12.profiler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = builder19.callbackExecutor;
        retrofit.RestAdapter.Log log21 = builder19.log;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter41.logLevel = logLevel43;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.setLogLevel(logLevel45);
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log38, logLevel45);
        retrofit.RestAdapter.Builder builder48 = builder19.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        builder19.log = log54;
        retrofit.RestAdapter.Builder builder57 = builder12.setLog(log54);
        retrofit.RequestInterceptor requestInterceptor58 = builder12.requestInterceptor;
        retrofit.RestAdapter.Builder builder59 = builder6.setRequestInterceptor(requestInterceptor58);
        retrofit.RestAdapter.Builder builder60 = builder0.setRequestInterceptor(requestInterceptor58);
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Log log9 = builder0.log;
        java.util.concurrent.Executor executor10 = builder0.callbackExecutor;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel12 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter15.requestInterceptor = requestInterceptor17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        restAdapter15.log = log27;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter15.errorHandler = errorHandler31;
        retrofit.RestAdapter.Log log33 = restAdapter15.log;
        retrofit.RestAdapter.Builder builder34 = builder13.setLog(log33);
        retrofit.Profiler profiler35 = builder34.profiler;
        retrofit.Profiler profiler36 = builder34.profiler;
        java.util.concurrent.Executor executor37 = builder34.callbackExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter restAdapter45 = builder38.build();
        java.util.concurrent.Executor executor46 = restAdapter45.httpExecutor;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.client.Client.Provider provider50 = null;
        builder47.clientProvider = provider50;
        retrofit.RestAdapter.Builder builder53 = builder47.setServer("hi!");
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder54.setLog(log59);
        retrofit.RestAdapter restAdapter61 = builder54.build();
        java.util.concurrent.Executor executor62 = restAdapter61.httpExecutor;
        builder53.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = builder34.setExecutors(executor46, executor62);
        builder0.callbackExecutor = executor62;
        java.util.concurrent.Executor executor66 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(executor46);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(executor66);
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.converter.Converter converter6 = builder0.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        builder7.ensureSaneDefaults();
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter26.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter26.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter26.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log24, logLevel32);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        restAdapter34.log = log40;
        builder7.log = log40;
        java.util.concurrent.Executor executor44 = null;
        builder7.httpExecutor = executor44;
        retrofit.converter.Converter converter46 = null;
        builder7.converter = converter46;
        retrofit.RestAdapter.Builder builder49 = builder7.setServer("hi!");
        retrofit.converter.Converter converter50 = builder49.converter;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter52 = builder51.converter;
        retrofit.Profiler profiler53 = null;
        builder51.profiler = profiler53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.client.Client.Provider provider58 = null;
        builder55.clientProvider = provider58;
        retrofit.RestAdapter.Builder builder61 = builder55.setServer("hi!");
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        retrofit.RestAdapter restAdapter69 = builder62.build();
        java.util.concurrent.Executor executor70 = restAdapter69.httpExecutor;
        builder61.callbackExecutor = executor70;
        builder51.callbackExecutor = executor70;
        builder51.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        java.util.concurrent.Executor executor79 = null;
        builder74.httpExecutor = executor79;
        retrofit.RestAdapter restAdapter81 = builder74.build();
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter81.getLogLevel();
        retrofit.client.Client.Provider provider83 = restAdapter81.clientProvider;
        builder51.clientProvider = provider83;
        retrofit.RestAdapter.Builder builder85 = builder49.setClient(provider83);
        retrofit.client.Client.Provider provider86 = builder85.clientProvider;
        retrofit.Server server87 = builder85.server;
        builder0.server = server87;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(converter6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(provider86);
        org.junit.Assert.assertNotNull(server87);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        java.lang.String str14 = request8.getUrl();
        java.lang.String str15 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList17 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        retrofit.mime.TypedOutput typedOutput20 = request19.getBody();
        java.lang.String str21 = request19.getUrl();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.httpExecutor = executor9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor12 = null;
        restAdapter0.callbackExecutor = executor12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.Profiler profiler16 = null;
        builder14.profiler = profiler16;
        retrofit.ErrorHandler errorHandler18 = null;
        builder14.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter21 = builder20.converter;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter22.requestInterceptor = requestInterceptor24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        restAdapter22.log = log34;
        retrofit.ErrorHandler errorHandler38 = null;
        restAdapter22.errorHandler = errorHandler38;
        retrofit.RestAdapter.Log log40 = restAdapter22.log;
        retrofit.RestAdapter.Builder builder41 = builder20.setLog(log40);
        retrofit.RestAdapter.Builder builder42 = builder14.setLog(log40);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder42.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.Profiler profiler53 = null;
        builder52.profiler = profiler53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = builder55.setLog(log60);
        retrofit.RestAdapter restAdapter62 = builder55.build();
        retrofit.converter.Converter converter63 = null;
        builder55.converter = converter63;
        retrofit.ErrorHandler errorHandler65 = null;
        builder55.errorHandler = errorHandler65;
        retrofit.RequestInterceptor requestInterceptor67 = builder55.requestInterceptor;
        builder52.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter.Builder builder69 = builder42.setRequestInterceptor(requestInterceptor67);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.RestAdapter.Builder builder74 = builder70.setServer("hi!");
        retrofit.Profiler profiler75 = null;
        builder74.profiler = profiler75;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        builder74.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter restAdapter79 = builder74.build();
        retrofit.converter.Converter converter80 = restAdapter79.converter;
        java.util.concurrent.Executor executor81 = restAdapter79.callbackExecutor;
        builder69.callbackExecutor = executor81;
        restAdapter0.httpExecutor = executor81;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor85 = null;
        builder84.httpExecutor = executor85;
        retrofit.RestAdapter.Builder builder88 = builder84.setServer("hi!");
        java.util.concurrent.Executor executor89 = null;
        builder84.httpExecutor = executor89;
        retrofit.RestAdapter restAdapter91 = builder84.build();
        retrofit.converter.Converter converter92 = restAdapter91.converter;
        retrofit.RequestInterceptor requestInterceptor93 = restAdapter91.requestInterceptor;
        retrofit.RestAdapter.Log log94 = restAdapter91.log;
        retrofit.ErrorHandler errorHandler95 = restAdapter91.errorHandler;
        retrofit.converter.Converter converter96 = restAdapter91.converter;
        restAdapter0.converter = converter96;
        retrofit.RestAdapter.RestHandler restHandler98 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(converter80);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(converter92);
        org.junit.Assert.assertNotNull(requestInterceptor93);
        org.junit.Assert.assertNotNull(log94);
        org.junit.Assert.assertNotNull(errorHandler95);
        org.junit.Assert.assertNotNull(converter96);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.RestAdapter.Log log45 = restAdapter27.log;
        retrofit.RestAdapter.Builder builder46 = builder25.setLog(log45);
        retrofit.RequestInterceptor requestInterceptor47 = builder25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = builder25.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder25.setServer("hi!");
        retrofit.Server server51 = builder25.server;
        restAdapter7.server = server51;
        builder6.server = server51;
        java.util.concurrent.Executor executor54 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        java.util.concurrent.Executor executor60 = null;
        builder55.httpExecutor = executor60;
        retrofit.RestAdapter restAdapter62 = builder55.build();
        retrofit.converter.Converter converter63 = restAdapter62.converter;
        builder6.converter = converter63;
        retrofit.converter.Converter converter65 = builder6.converter;
        retrofit.Profiler profiler66 = builder6.profiler;
        retrofit.Profiler profiler67 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder68 = builder6.setProfiler(profiler67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNotNull(converter63);
        org.junit.Assert.assertNotNull(converter65);
        org.junit.Assert.assertNull(profiler66);
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.ErrorHandler errorHandler31 = null;
        builder29.errorHandler = errorHandler31;
        retrofit.Profiler profiler33 = null;
        builder29.profiler = profiler33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log36 = restAdapter35.log;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.Profiler profiler44 = null;
        builder43.profiler = profiler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        retrofit.converter.Converter converter54 = null;
        builder46.converter = converter54;
        retrofit.ErrorHandler errorHandler56 = null;
        builder46.errorHandler = errorHandler56;
        retrofit.RequestInterceptor requestInterceptor58 = builder46.requestInterceptor;
        builder43.requestInterceptor = requestInterceptor58;
        restAdapter35.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.Builder builder61 = builder29.setRequestInterceptor(requestInterceptor58);
        java.util.concurrent.Executor executor62 = builder61.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor63 = builder61.requestInterceptor;
        java.util.concurrent.Executor executor64 = builder61.callbackExecutor;
        java.util.concurrent.Executor executor65 = builder61.callbackExecutor;
        retrofit.Server server66 = builder61.server;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter72 = builder71.build();
        retrofit.client.Header[] headerArray75 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList76 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList76, headerArray75);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList76, typedOutput78);
        java.lang.String str80 = request79.getMethod();
        java.lang.String str81 = request79.getMethod();
        retrofit.client.Request request82 = restAdapter72.logAndReplaceRequest(request79);
        retrofit.RestAdapter.Log log83 = restAdapter72.log;
        retrofit.client.Client.Provider provider84 = restAdapter72.clientProvider;
        retrofit.ErrorHandler errorHandler85 = restAdapter72.errorHandler;
        builder61.errorHandler = errorHandler85;
        retrofit.client.Client client87 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder88 = builder61.setClient(client87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNotNull(requestInterceptor63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(headerArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(request82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(provider84);
        org.junit.Assert.assertNotNull(errorHandler85);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = null;
        restAdapter5.httpExecutor = executor6;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter5.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.Log log10 = restAdapter5.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter5.logLevel = logLevel11;
        restAdapter0.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter22 = builder21.converter;
        retrofit.RestAdapter.LogLevel logLevel23 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder20.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.RestAdapter.Log log45 = restAdapter27.log;
        retrofit.RestAdapter.Builder builder46 = builder25.setLog(log45);
        retrofit.RequestInterceptor requestInterceptor47 = builder25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = builder25.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder25.setServer("hi!");
        retrofit.Server server51 = builder25.server;
        retrofit.RestAdapter.Builder builder52 = builder20.setServer(server51);
        restAdapter0.server = server51;
        retrofit.client.Client.Provider provider54 = null;
        restAdapter0.clientProvider = provider54;
        retrofit.RequestInterceptor requestInterceptor56 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler57 = restAdapter0.profiler;
        retrofit.converter.Converter converter58 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor60 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor60);
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.httpExecutor = executor9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler13 = null;
        restAdapter0.profiler = profiler13;
        retrofit.client.Client.Provider provider15 = restAdapter0.clientProvider;
        retrofit.Profiler profiler16 = restAdapter0.profiler;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(profiler16);
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter19.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter19.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log17, logLevel25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        restAdapter27.log = log33;
        builder0.log = log33;
        java.util.concurrent.Executor executor37 = null;
        builder0.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter40 = builder39.converter;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter41.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        restAdapter41.requestInterceptor = requestInterceptor43;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        restAdapter41.log = log53;
        retrofit.ErrorHandler errorHandler57 = null;
        restAdapter41.errorHandler = errorHandler57;
        retrofit.RestAdapter.Log log59 = restAdapter41.log;
        retrofit.RestAdapter.Builder builder60 = builder39.setLog(log59);
        retrofit.RestAdapter.Builder builder61 = builder0.setLog(log59);
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel71);
        retrofit.RestAdapter.Builder builder73 = builder0.setLogLevel(logLevel71);
        retrofit.client.Client.Provider provider74 = builder73.clientProvider;
        retrofit.client.Client client75 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder76 = builder73.setClient(client75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(converter40);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(provider74);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter restAdapter8 = builder0.build();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = builder9.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor11 = builder9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = builder9.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.Profiler profiler18 = null;
        builder17.profiler = profiler18;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder17.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = builder17.build();
        retrofit.client.Client.Provider provider23 = builder17.clientProvider;
        builder9.clientProvider = provider23;
        retrofit.client.Client.Provider provider25 = builder9.clientProvider;
        retrofit.RestAdapter.Builder builder26 = builder0.setClient(provider25);
        retrofit.client.Client.Provider provider27 = builder0.clientProvider;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(restAdapter8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(provider23);
        org.junit.Assert.assertNotNull(provider25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(provider27);
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Server server22 = null;
        builder0.server = server22;
        java.util.concurrent.Executor executor24 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        builder0.requestInterceptor = requestInterceptor25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        log35.log("hi!");
        builder0.log = log35;
        retrofit.client.Client.Provider provider41 = null;
        builder0.clientProvider = provider41;
        retrofit.RestAdapter.Log log43 = builder0.log;
        retrofit.ErrorHandler errorHandler44 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter46 = builder45.converter;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter47.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        restAdapter47.requestInterceptor = requestInterceptor49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        restAdapter47.log = log59;
        retrofit.ErrorHandler errorHandler63 = null;
        restAdapter47.errorHandler = errorHandler63;
        retrofit.RestAdapter.Log log65 = restAdapter47.log;
        retrofit.RestAdapter.Builder builder66 = builder45.setLog(log65);
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder69 = builder45.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor70 = builder45.requestInterceptor;
        retrofit.client.Client.Provider provider71 = builder45.clientProvider;
        retrofit.RestAdapter.Builder builder72 = builder0.setClient(provider71);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(provider71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter3.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        restAdapter3.requestInterceptor = requestInterceptor5;
        java.util.concurrent.Executor executor7 = restAdapter3.httpExecutor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.RestAdapter.LogLevel logLevel31 = builder29.logLevel;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter51 = builder50.converter;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor53 = restAdapter52.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        restAdapter52.requestInterceptor = requestInterceptor54;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        restAdapter52.log = log64;
        retrofit.ErrorHandler errorHandler68 = null;
        restAdapter52.errorHandler = errorHandler68;
        retrofit.RestAdapter.Log log70 = restAdapter52.log;
        retrofit.RestAdapter.Builder builder71 = builder50.setLog(log70);
        retrofit.RequestInterceptor requestInterceptor72 = builder50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor73 = builder50.requestInterceptor;
        retrofit.RestAdapter.Builder builder75 = builder50.setServer("hi!");
        retrofit.Server server76 = builder50.server;
        restAdapter32.server = server76;
        builder29.server = server76;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder85 = builder79.setLog(log84);
        retrofit.RestAdapter restAdapter86 = builder79.build();
        java.util.concurrent.Executor executor87 = restAdapter86.httpExecutor;
        builder29.httpExecutor = executor87;
        restAdapter3.callbackExecutor = executor87;
        restAdapter0.callbackExecutor = executor87;
        retrofit.RestAdapter.Log log91 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel92 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor93 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel94 = restAdapter0.getLogLevel();
        retrofit.Server server95 = restAdapter0.server;
        retrofit.Server server96 = restAdapter0.server;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNull(log91);
        org.junit.Assert.assertNull(logLevel92);
        org.junit.Assert.assertNull(executor93);
        org.junit.Assert.assertNull(logLevel94);
        org.junit.Assert.assertNull(server95);
        org.junit.Assert.assertNull(server96);
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter7);
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.client.Client.Provider provider10 = restAdapter9.clientProvider;
        java.util.concurrent.Executor executor11 = restAdapter9.httpExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider13 = null;
        restAdapter12.clientProvider = provider13;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = builder16.logLevel;
        restAdapter12.logLevel = logLevel18;
        boolean boolean20 = logLevel18.log();
        restAdapter9.logLevel = logLevel18;
        retrofit.Profiler profiler22 = restAdapter9.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(provider10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(profiler22);
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.setLogLevel(logLevel4);
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.Server server7 = null;
        restAdapter0.server = server7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        java.util.concurrent.Executor executor11 = restAdapter9.callbackExecutor;
        retrofit.ErrorHandler errorHandler12 = restAdapter9.errorHandler;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = builder21.setLog(log26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter28.requestInterceptor = requestInterceptor32;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter28.logLevel = logLevel34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log26, logLevel34);
        log26.log("Retrofit-Idle");
        restAdapter9.log = log26;
        restAdapter0.log = log26;
        retrofit.RestAdapter.Log log41 = restAdapter0.log;
        retrofit.Profiler profiler42 = restAdapter0.profiler;
        retrofit.Server server43 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log45 = restAdapter0.log;
        retrofit.RestAdapter.Log log46 = restAdapter0.log;
        java.lang.Class<?> wildcardClass47 = log46.getClass();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.converter.Converter converter9 = builder0.converter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter10 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(converter9);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log8 = restAdapter7.log;
        retrofit.ErrorHandler errorHandler9 = restAdapter7.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.Profiler profiler16 = null;
        builder15.profiler = profiler16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder18.setLog(log23);
        retrofit.RestAdapter restAdapter25 = builder18.build();
        retrofit.converter.Converter converter26 = null;
        builder18.converter = converter26;
        retrofit.ErrorHandler errorHandler28 = null;
        builder18.errorHandler = errorHandler28;
        retrofit.RequestInterceptor requestInterceptor30 = builder18.requestInterceptor;
        builder15.requestInterceptor = requestInterceptor30;
        restAdapter7.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.Builder builder33 = builder4.setRequestInterceptor(requestInterceptor30);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = builder34.converter;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter36.requestInterceptor = requestInterceptor38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        restAdapter36.log = log48;
        retrofit.ErrorHandler errorHandler52 = null;
        restAdapter36.errorHandler = errorHandler52;
        retrofit.RestAdapter.Log log54 = restAdapter36.log;
        retrofit.RestAdapter.Builder builder55 = builder34.setLog(log54);
        retrofit.Profiler profiler56 = builder55.profiler;
        retrofit.Profiler profiler57 = builder55.profiler;
        java.util.concurrent.Executor executor58 = builder55.callbackExecutor;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.client.Client.Provider provider64 = builder63.clientProvider;
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        log66.log("");
        builder63.log = log66;
        retrofit.Server server70 = builder63.server;
        builder55.server = server70;
        retrofit.RestAdapter.Builder builder72 = builder33.setServer(server70);
        java.util.concurrent.Executor executor73 = builder33.callbackExecutor;
        retrofit.RestAdapter.Builder builder75 = builder33.setServer("hi!");
        builder33.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(server70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        builder10.logLevel = logLevel12;
        builder0.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.Profiler profiler18 = null;
        builder16.profiler = profiler18;
        retrofit.RestAdapter.Log log20 = builder16.log;
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter23 = builder22.converter;
        retrofit.Profiler profiler24 = null;
        builder22.profiler = profiler24;
        retrofit.RestAdapter.Log log26 = builder22.log;
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter29 = builder28.converter;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter30.requestInterceptor = requestInterceptor32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        restAdapter30.log = log42;
        retrofit.ErrorHandler errorHandler46 = null;
        restAdapter30.errorHandler = errorHandler46;
        retrofit.RestAdapter.Log log48 = restAdapter30.log;
        retrofit.RestAdapter.Builder builder49 = builder28.setLog(log48);
        retrofit.RequestInterceptor requestInterceptor50 = builder28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor51 = builder28.requestInterceptor;
        retrofit.RestAdapter.Builder builder53 = builder28.setServer("hi!");
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter69.logLevel = logLevel71;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        restAdapter69.requestInterceptor = requestInterceptor73;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter69.logLevel = logLevel75;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log67, logLevel75);
        boolean boolean78 = logLevel75.log();
        retrofit.RestAdapter.Builder builder79 = builder53.setLogLevel(logLevel75);
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.httpExecutor = executor81;
        retrofit.RestAdapter.Builder builder84 = builder80.setServer("hi!");
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder86 = builder80.setLog(log85);
        retrofit.RestAdapter restAdapter87 = builder80.build();
        java.util.concurrent.Executor executor88 = restAdapter87.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler89 = restAdapter87.new RestHandler();
        retrofit.converter.Converter converter90 = restAdapter87.converter;
        builder79.converter = converter90;
        retrofit.RestAdapter.Builder builder92 = builder22.setConverter(converter90);
        retrofit.RestAdapter.Builder builder93 = builder16.setConverter(converter90);
        retrofit.RestAdapter.Builder builder94 = builder0.setConverter(converter90);
        retrofit.RestAdapter.Builder builder96 = builder0.setServer("hi!");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(converter90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.Profiler profiler8 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        java.util.concurrent.Executor executor14 = null;
        builder9.httpExecutor = executor14;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log17 = restAdapter16.log;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter16.requestInterceptor = requestInterceptor18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter20.logLevel = logLevel22;
        retrofit.Profiler profiler24 = restAdapter20.profiler;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter20.new RestHandler();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.ErrorHandler errorHandler44 = null;
        restAdapter28.errorHandler = errorHandler44;
        retrofit.RestAdapter.Log log46 = restAdapter28.log;
        retrofit.RestAdapter.Builder builder47 = builder26.setLog(log46);
        retrofit.Profiler profiler48 = builder47.profiler;
        retrofit.RestAdapter.LogLevel logLevel49 = builder47.logLevel;
        restAdapter20.logLevel = logLevel49;
        java.util.concurrent.Executor executor51 = restAdapter20.callbackExecutor;
        retrofit.Server server52 = restAdapter20.server;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter54 = builder53.converter;
        retrofit.Profiler profiler55 = null;
        builder53.profiler = profiler55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.client.Client.Provider provider60 = null;
        builder57.clientProvider = provider60;
        retrofit.RestAdapter.Builder builder63 = builder57.setServer("hi!");
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.RestAdapter.Builder builder68 = builder64.setServer("hi!");
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder64.setLog(log69);
        retrofit.RestAdapter restAdapter71 = builder64.build();
        java.util.concurrent.Executor executor72 = restAdapter71.httpExecutor;
        builder63.callbackExecutor = executor72;
        builder53.callbackExecutor = executor72;
        restAdapter20.httpExecutor = executor72;
        restAdapter16.callbackExecutor = executor72;
        builder9.callbackExecutor = executor72;
        java.util.concurrent.Executor executor78 = builder9.callbackExecutor;
        restAdapter0.httpExecutor = executor78;
        retrofit.Server server80 = restAdapter0.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNotNull(executor72);
        org.junit.Assert.assertNotNull(executor78);
        org.junit.Assert.assertNull(server80);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.client.Client.Provider provider9 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder11 = builder4.setLogLevel(logLevel10);
        retrofit.RequestInterceptor requestInterceptor12 = null;
        builder11.requestInterceptor = requestInterceptor12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = null;
        builder14.converter = converter15;
        retrofit.client.Client.Provider provider17 = null;
        builder14.clientProvider = provider17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        builder14.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.Profiler profiler26 = null;
        builder25.profiler = profiler26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        retrofit.RestAdapter restAdapter35 = builder28.build();
        retrofit.converter.Converter converter36 = null;
        builder28.converter = converter36;
        retrofit.ErrorHandler errorHandler38 = null;
        builder28.errorHandler = errorHandler38;
        retrofit.RequestInterceptor requestInterceptor40 = builder28.requestInterceptor;
        builder25.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter.Builder builder42 = builder14.setRequestInterceptor(requestInterceptor40);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter44 = builder43.converter;
        retrofit.RestAdapter.LogLevel logLevel45 = builder43.logLevel;
        builder43.ensureSaneDefaults();
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = builder55.setLog(log60);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter62.logLevel = logLevel64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        restAdapter62.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter62.logLevel = logLevel68;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log60, logLevel68);
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder71.setLog(log76);
        restAdapter70.log = log76;
        builder43.log = log76;
        java.util.concurrent.Executor executor80 = null;
        builder43.httpExecutor = executor80;
        retrofit.converter.Converter converter82 = null;
        builder43.converter = converter82;
        retrofit.ErrorHandler errorHandler84 = builder43.errorHandler;
        builder42.errorHandler = errorHandler84;
        retrofit.RequestInterceptor requestInterceptor86 = builder42.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter.Builder builder88 = builder0.setRequestInterceptor(requestInterceptor86);
        retrofit.RequestInterceptor requestInterceptor89 = builder0.requestInterceptor;
        retrofit.Profiler profiler90 = null;
        builder0.profiler = profiler90;
        retrofit.Server server92 = builder0.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(requestInterceptor89);
        org.junit.Assert.assertNull(server92);
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.Server server6 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder7.setLog(log12);
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        builder7.logLevel = logLevel23;
        retrofit.Profiler profiler26 = builder7.profiler;
        retrofit.Profiler profiler27 = null;
        builder7.profiler = profiler27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        restAdapter29.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter29.logLevel;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter37 = null;
        restAdapter36.converter = converter37;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter36.requestInterceptor = requestInterceptor39;
        retrofit.Profiler profiler41 = restAdapter36.profiler;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean43 = logLevel42.log();
        restAdapter36.logLevel = logLevel42;
        java.util.concurrent.Executor executor45 = restAdapter36.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter36.getLogLevel();
        restAdapter29.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder48 = builder7.setLogLevel(logLevel46);
        retrofit.RestAdapter.Log log49 = builder7.log;
        retrofit.RestAdapter.Log log50 = builder7.log;
        retrofit.RestAdapter.Builder builder51 = builder0.setLog(log50);
        retrofit.Profiler profiler52 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder53 = builder51.setProfiler(profiler52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.Profiler profiler11 = restAdapter8.profiler;
        retrofit.Profiler profiler12 = null;
        restAdapter8.profiler = profiler12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        builder26.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log22, logLevel42);
        retrofit.converter.Converter converter46 = restAdapter45.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter45.logLevel;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.RestAdapter restAdapter55 = builder48.build();
        java.util.concurrent.Executor executor56 = restAdapter55.httpExecutor;
        restAdapter45.callbackExecutor = executor56;
        retrofit.ErrorHandler errorHandler58 = restAdapter45.errorHandler;
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(errorHandler58);
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter restAdapter10 = builder0.build();
        retrofit.Profiler profiler11 = restAdapter10.profiler;
        retrofit.Profiler profiler12 = restAdapter10.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(profiler12);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.ErrorHandler errorHandler15 = null;
        builder13.errorHandler = errorHandler15;
        retrofit.RequestInterceptor requestInterceptor17 = builder13.requestInterceptor;
        retrofit.RestAdapter.Log log18 = builder13.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(log18);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        java.util.concurrent.Executor executor7 = builder5.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.client.Client.Provider provider6 = null;
        restAdapter0.clientProvider = provider6;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.converter.Converter converter11 = restAdapter9.converter;
        java.util.concurrent.Executor executor12 = restAdapter9.httpExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter9.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        retrofit.RequestInterceptor requestInterceptor37 = builder15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor38 = builder15.requestInterceptor;
        retrofit.RestAdapter.Builder builder40 = builder15.setServer("hi!");
        retrofit.Server server41 = builder15.server;
        retrofit.RestAdapter.LogLevel logLevel42 = builder15.logLevel;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.Server server45 = restAdapter43.server;
        retrofit.client.Client.Provider provider46 = null;
        restAdapter43.clientProvider = provider46;
        retrofit.Server server48 = null;
        restAdapter43.server = server48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter51 = null;
        restAdapter50.converter = converter51;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        restAdapter50.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log56 = restAdapter55.log;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter55.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.LogLevel logLevel59 = null;
        restAdapter55.logLevel = logLevel59;
        retrofit.ErrorHandler errorHandler61 = restAdapter55.errorHandler;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.Profiler profiler67 = null;
        builder66.profiler = profiler67;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        builder66.requestInterceptor = requestInterceptor69;
        retrofit.RestAdapter restAdapter71 = builder66.build();
        retrofit.converter.Converter converter72 = restAdapter71.converter;
        restAdapter55.converter = converter72;
        restAdapter50.converter = converter72;
        restAdapter43.converter = converter72;
        retrofit.RestAdapter.Builder builder76 = builder15.setConverter(converter72);
        restAdapter9.converter = converter72;
        restAdapter0.converter = converter72;
        retrofit.RequestInterceptor requestInterceptor79 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNotNull(converter72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(requestInterceptor79);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder11.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.converter.Converter converter17 = restAdapter16.converter;
        retrofit.RestAdapter.Builder builder18 = builder0.setConverter(converter17);
        java.util.concurrent.Executor executor19 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.client.Client.Provider provider23 = null;
        builder20.clientProvider = provider23;
        retrofit.RestAdapter.Builder builder26 = builder20.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter27.logLevel = logLevel29;
        retrofit.Profiler profiler31 = restAdapter27.profiler;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter27.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter27.requestInterceptor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log35 = restAdapter34.log;
        java.util.concurrent.Executor executor36 = restAdapter34.callbackExecutor;
        retrofit.Profiler profiler37 = restAdapter34.profiler;
        retrofit.Profiler profiler38 = null;
        restAdapter34.profiler = profiler38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        restAdapter34.log = log48;
        restAdapter27.log = log48;
        retrofit.RestAdapter.Builder builder53 = builder20.setLog(log48);
        log48.log("hi!");
        builder0.log = log48;
        java.util.concurrent.Executor executor57 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(executor57);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.ErrorHandler errorHandler24 = builder0.errorHandler;
        retrofit.RestAdapter.Log log25 = builder0.log;
        retrofit.converter.Converter converter26 = builder0.converter;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = builder34.converter;
        retrofit.RestAdapter.LogLevel logLevel36 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = builder38.converter;
        retrofit.RestAdapter.LogLevel logLevel40 = builder38.logLevel;
        builder38.ensureSaneDefaults();
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = builder50.setLog(log55);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter57.logLevel = logLevel59;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        restAdapter57.requestInterceptor = requestInterceptor61;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter57.logLevel = logLevel63;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log55, logLevel63);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder66.setLog(log71);
        restAdapter65.log = log71;
        builder38.log = log71;
        java.util.concurrent.Executor executor75 = null;
        builder38.httpExecutor = executor75;
        retrofit.converter.Converter converter77 = null;
        builder38.converter = converter77;
        retrofit.ErrorHandler errorHandler79 = builder38.errorHandler;
        retrofit.RestAdapter.Builder builder80 = builder33.setErrorHandler(errorHandler79);
        retrofit.Server server81 = builder80.server;
        retrofit.RestAdapter.Builder builder82 = builder0.setServer(server81);
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        retrofit.RestAdapter restAdapter84 = builder82.build();
        java.util.concurrent.Executor executor85 = builder82.httpExecutor;
        retrofit.ErrorHandler errorHandler86 = builder82.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(errorHandler79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(server81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNotNull(errorHandler86);
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.client.Client.Provider provider30 = builder29.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean32 = logLevel31.log();
        builder29.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter34 = builder29.build();
        retrofit.converter.Converter converter35 = restAdapter34.converter;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider37 = null;
        restAdapter36.clientProvider = provider37;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = builder40.converter;
        retrofit.RestAdapter.LogLevel logLevel42 = builder40.logLevel;
        restAdapter36.logLevel = logLevel42;
        boolean boolean44 = logLevel42.log();
        restAdapter34.logLevel = logLevel42;
        retrofit.ErrorHandler errorHandler46 = restAdapter34.errorHandler;
        retrofit.RestAdapter.Builder builder47 = builder21.setErrorHandler(errorHandler46);
        retrofit.Profiler profiler48 = builder47.profiler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(converter35);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(profiler48);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        java.util.concurrent.Executor executor19 = restAdapter18.httpExecutor;
        builder10.callbackExecutor = executor19;
        builder0.callbackExecutor = executor19;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel23 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        retrofit.RestAdapter restAdapter31 = builder24.build();
        retrofit.converter.Converter converter32 = null;
        builder24.converter = converter32;
        retrofit.RestAdapter restAdapter34 = builder24.build();
        retrofit.RestAdapter.LogLevel logLevel35 = builder24.logLevel;
        builder0.logLevel = logLevel35;
        retrofit.client.Client.Provider provider37 = builder0.clientProvider;
        retrofit.converter.Converter converter38 = builder0.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNotNull(converter38);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter.LogLevel logLevel33 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder30.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter37.requestInterceptor = requestInterceptor39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter37.log = log49;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter37.errorHandler = errorHandler53;
        retrofit.RestAdapter.Log log55 = restAdapter37.log;
        retrofit.RestAdapter.Builder builder56 = builder35.setLog(log55);
        retrofit.RequestInterceptor requestInterceptor57 = builder35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor58 = builder35.requestInterceptor;
        retrofit.RestAdapter.Builder builder60 = builder35.setServer("hi!");
        retrofit.Server server61 = builder35.server;
        retrofit.RestAdapter.Builder builder62 = builder30.setServer(server61);
        retrofit.RestAdapter.Builder builder63 = builder0.setServer(server61);
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor65 = restAdapter64.requestInterceptor;
        java.util.concurrent.Executor executor66 = restAdapter64.callbackExecutor;
        retrofit.converter.Converter converter67 = null;
        restAdapter64.converter = converter67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter70 = builder69.converter;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor72 = restAdapter71.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        restAdapter71.requestInterceptor = requestInterceptor73;
        retrofit.Server server75 = null;
        retrofit.client.Client.Provider provider76 = null;
        java.util.concurrent.Executor executor77 = null;
        java.util.concurrent.Executor executor78 = null;
        retrofit.RequestInterceptor requestInterceptor79 = null;
        retrofit.converter.Converter converter80 = null;
        retrofit.Profiler profiler81 = null;
        retrofit.ErrorHandler errorHandler82 = null;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server75, provider76, executor77, executor78, requestInterceptor79, converter80, profiler81, errorHandler82, log83, logLevel84);
        restAdapter71.log = log83;
        retrofit.ErrorHandler errorHandler87 = null;
        restAdapter71.errorHandler = errorHandler87;
        retrofit.RestAdapter.Log log89 = restAdapter71.log;
        retrofit.RestAdapter.Builder builder90 = builder69.setLog(log89);
        restAdapter64.log = log89;
        retrofit.RestAdapter.Builder builder92 = builder0.setLog(log89);
        retrofit.converter.Converter converter93 = builder92.converter;
        retrofit.RestAdapter restAdapter94 = builder92.build();
        java.util.concurrent.Executor executor95 = builder92.callbackExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(converter70);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(converter93);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertNotNull(executor95);
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList14, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", headerList14, typedOutput19);
        java.util.List<retrofit.client.Header> headerList21 = request20.getHeaders();
        java.lang.String str22 = request20.getUrl();
        retrofit.mime.TypedOutput typedOutput23 = request20.getBody();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(typedOutput23);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.Server server22 = builder0.server;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter25.requestInterceptor = requestInterceptor27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        restAdapter25.log = log37;
        retrofit.ErrorHandler errorHandler41 = null;
        restAdapter25.errorHandler = errorHandler41;
        retrofit.RestAdapter.Log log43 = restAdapter25.log;
        retrofit.RestAdapter.Builder builder44 = builder23.setLog(log43);
        retrofit.RequestInterceptor requestInterceptor45 = builder23.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = builder23.requestInterceptor;
        retrofit.RestAdapter.Log log47 = builder23.log;
        builder0.log = log47;
        retrofit.RestAdapter restAdapter49 = builder0.build();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.client.Client.Provider provider53 = null;
        builder50.clientProvider = provider53;
        retrofit.RestAdapter.Builder builder56 = builder50.setServer("hi!");
        java.util.concurrent.Executor executor57 = builder50.callbackExecutor;
        java.util.concurrent.Executor executor58 = builder50.callbackExecutor;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.client.Client.Provider provider64 = builder63.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean66 = logLevel65.log();
        builder63.logLevel = logLevel65;
        retrofit.RestAdapter restAdapter68 = builder63.build();
        retrofit.ErrorHandler errorHandler69 = builder63.errorHandler;
        retrofit.RestAdapter.Builder builder70 = builder50.setErrorHandler(errorHandler69);
        retrofit.RestAdapter.Builder builder71 = builder0.setErrorHandler(errorHandler69);
        retrofit.Server server72 = builder0.server;
        retrofit.converter.Converter converter73 = builder0.converter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(errorHandler69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(converter73);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RestAdapter restAdapter7 = builder4.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter.LogLevel logLevel10 = builder8.logLevel;
        builder8.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder20.setLog(log25);
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter27.logLevel = logLevel29;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter27.requestInterceptor = requestInterceptor31;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter27.logLevel = logLevel33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log25, logLevel33);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        restAdapter35.log = log41;
        builder8.log = log41;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = builder45.callbackExecutor;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        retrofit.RestAdapter.Builder builder58 = builder45.setLogLevel(logLevel56);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log60 = restAdapter59.log;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = builder61.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor63 = builder61.requestInterceptor;
        retrofit.ErrorHandler errorHandler64 = null;
        builder61.errorHandler = errorHandler64;
        retrofit.converter.Converter converter66 = null;
        builder61.converter = converter66;
        retrofit.ErrorHandler errorHandler68 = null;
        builder61.errorHandler = errorHandler68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.RestAdapter.Builder builder74 = builder70.setServer("hi!");
        retrofit.Profiler profiler75 = null;
        builder74.profiler = profiler75;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        builder74.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter restAdapter79 = builder74.build();
        retrofit.converter.Converter converter80 = restAdapter79.converter;
        retrofit.RestAdapter.Builder builder81 = builder61.setConverter(converter80);
        restAdapter59.converter = converter80;
        builder45.converter = converter80;
        retrofit.RestAdapter.Builder builder84 = builder8.setConverter(converter80);
        retrofit.RestAdapter.Builder builder85 = builder4.setConverter(converter80);
        builder85.ensureSaneDefaults();
        java.util.concurrent.Executor executor87 = builder85.httpExecutor;
        retrofit.Profiler profiler88 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder89 = builder85.setProfiler(profiler88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(converter80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(executor87);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder0.requestInterceptor = requestInterceptor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter.LogLevel logLevel10 = builder8.logLevel;
        builder8.ensureSaneDefaults();
        retrofit.client.Client.Provider provider12 = null;
        builder8.clientProvider = provider12;
        retrofit.Profiler profiler14 = builder8.profiler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.RestAdapter.Log log17 = builder15.log;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter37.logLevel = logLevel39;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter37.setLogLevel(logLevel41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log34, logLevel41);
        retrofit.RestAdapter.Builder builder44 = builder15.setLogLevel(logLevel41);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        builder15.log = log50;
        retrofit.RestAdapter.Builder builder53 = builder8.setLog(log50);
        java.util.concurrent.Executor executor54 = builder53.httpExecutor;
        builder0.httpExecutor = executor54;
        retrofit.Profiler profiler56 = null;
        builder0.profiler = profiler56;
        java.util.concurrent.Executor executor58 = builder0.httpExecutor;
        java.util.concurrent.Executor executor59 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNotNull(executor59);
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = builder17.build();
        retrofit.client.Header[] headerArray21 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList22 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList22, headerArray21);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList22, typedOutput24);
        java.lang.String str26 = request25.getMethod();
        java.lang.String str27 = request25.getMethod();
        retrofit.client.Request request28 = restAdapter18.logAndReplaceRequest(request25);
        retrofit.converter.Converter converter29 = restAdapter18.converter;
        builder6.converter = converter29;
        retrofit.Server server31 = builder6.server;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.Profiler profiler34 = null;
        builder32.profiler = profiler34;
        retrofit.RestAdapter.Builder builder37 = builder32.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.client.Client.Provider provider42 = null;
        builder39.clientProvider = provider42;
        retrofit.client.Client.Provider provider44 = builder39.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.Profiler profiler52 = null;
        builder51.profiler = profiler52;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        builder51.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter restAdapter56 = builder51.build();
        retrofit.converter.Converter converter57 = restAdapter56.converter;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("");
        restAdapter56.log = log58;
        retrofit.RestAdapter.Builder builder62 = builder39.setLog(log58);
        retrofit.RestAdapter.Builder builder63 = builder37.setLog(log58);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter65 = builder64.converter;
        retrofit.RestAdapter.LogLevel logLevel66 = builder64.logLevel;
        builder64.ensureSaneDefaults();
        retrofit.client.Client.Provider provider68 = null;
        builder64.clientProvider = provider68;
        retrofit.Server server70 = null;
        retrofit.client.Client.Provider provider71 = null;
        java.util.concurrent.Executor executor72 = null;
        java.util.concurrent.Executor executor73 = null;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        retrofit.converter.Converter converter75 = null;
        retrofit.Profiler profiler76 = null;
        retrofit.ErrorHandler errorHandler77 = null;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("hi!");
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder84 = builder78.setLog(log83);
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel86 = restAdapter85.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter85.logLevel = logLevel87;
        retrofit.RequestInterceptor requestInterceptor89 = null;
        restAdapter85.requestInterceptor = requestInterceptor89;
        retrofit.RestAdapter.LogLevel logLevel91 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter85.logLevel = logLevel91;
        retrofit.RestAdapter restAdapter93 = new retrofit.RestAdapter(server70, provider71, executor72, executor73, requestInterceptor74, converter75, profiler76, errorHandler77, log83, logLevel91);
        builder64.logLevel = logLevel91;
        retrofit.RestAdapter.LogLevel logLevel95 = builder64.logLevel;
        retrofit.RestAdapter.Builder builder96 = builder37.setLogLevel(logLevel95);
        retrofit.ErrorHandler errorHandler97 = builder96.errorHandler;
        retrofit.Server server98 = builder96.server;
        builder6.server = server98;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(headerArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(converter29);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(converter57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(converter65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(logLevel86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNull(errorHandler97);
        org.junit.Assert.assertNotNull(server98);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        java.lang.String str19 = request18.getMethod();
        java.util.List<retrofit.client.Header> headerList20 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", headerList20, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "hi!", headerList20, typedOutput23);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headerList20);
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.converter.Converter converter22 = builder0.converter;
        retrofit.RestAdapter.Log log23 = builder0.log;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter31.logLevel = logLevel33;
        retrofit.Profiler profiler35 = restAdapter31.profiler;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter31.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter31.requestInterceptor = requestInterceptor37;
        retrofit.Profiler profiler39 = null;
        restAdapter31.profiler = profiler39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter41.requestInterceptor;
        retrofit.converter.Converter converter43 = restAdapter41.converter;
        java.util.concurrent.Executor executor44 = null;
        restAdapter41.callbackExecutor = executor44;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter41.logLevel = logLevel46;
        restAdapter31.setLogLevel(logLevel46);
        builder24.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = builder50.setLog(log55);
        log55.log("");
        builder24.log = log55;
        retrofit.RestAdapter.Builder builder60 = builder0.setLog(log55);
        retrofit.converter.Converter converter61 = builder0.converter;
        java.lang.Class<?> wildcardClass62 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.Profiler profiler7 = null;
        builder5.profiler = profiler7;
        retrofit.ErrorHandler errorHandler9 = null;
        builder5.errorHandler = errorHandler9;
        retrofit.RestAdapter.Builder builder12 = builder5.setServer("hi!");
        java.util.concurrent.Executor executor13 = builder5.httpExecutor;
        retrofit.RestAdapter restAdapter14 = builder5.build();
        retrofit.converter.Converter converter15 = restAdapter14.converter;
        restAdapter0.converter = converter15;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(converter15);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder0.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor25 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor26 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler27 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor28 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(errorHandler27);
        org.junit.Assert.assertNotNull(requestInterceptor28);
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = builder4.build();
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getMethod();
        java.lang.String str14 = request12.getMethod();
        retrofit.client.Request request15 = restAdapter5.logAndReplaceRequest(request12);
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter5.requestInterceptor;
        retrofit.converter.Converter converter17 = restAdapter5.converter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(converter17);
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor31 = builder29.requestInterceptor;
        retrofit.ErrorHandler errorHandler32 = null;
        builder29.errorHandler = errorHandler32;
        retrofit.converter.Converter converter34 = null;
        builder29.converter = converter34;
        retrofit.ErrorHandler errorHandler36 = null;
        builder29.errorHandler = errorHandler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.Profiler profiler43 = null;
        builder42.profiler = profiler43;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        builder42.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter restAdapter47 = builder42.build();
        retrofit.converter.Converter converter48 = restAdapter47.converter;
        retrofit.RestAdapter.Builder builder49 = builder29.setConverter(converter48);
        builder28.converter = converter48;
        retrofit.Server server51 = builder28.server;
        java.util.concurrent.Executor executor52 = builder28.httpExecutor;
        retrofit.converter.Converter converter53 = builder28.converter;
        retrofit.RestAdapter.LogLevel logLevel54 = builder28.logLevel;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNotNull(converter48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNotNull(converter53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.converter.Converter converter12 = restAdapter10.converter;
        java.util.concurrent.Executor executor13 = null;
        restAdapter10.callbackExecutor = executor13;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.logLevel = logLevel15;
        restAdapter0.setLogLevel(logLevel15);
        retrofit.RestAdapter.LogLevel logLevel18 = null;
        restAdapter0.logLevel = logLevel18;
        retrofit.Profiler profiler20 = null;
        restAdapter0.profiler = profiler20;
        retrofit.Profiler profiler22 = null;
        restAdapter0.profiler = profiler22;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.RestAdapter.Builder builder12 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.Profiler profiler17 = restAdapter13.profiler;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter13.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter13.requestInterceptor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log21 = restAdapter20.log;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.Profiler profiler23 = restAdapter20.profiler;
        retrofit.Profiler profiler24 = null;
        restAdapter20.profiler = profiler24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        restAdapter20.log = log34;
        restAdapter13.log = log34;
        retrofit.RestAdapter.Builder builder39 = builder6.setLog(log34);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.Profiler profiler45 = null;
        builder44.profiler = profiler45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        builder44.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter restAdapter49 = builder44.build();
        retrofit.converter.Converter converter50 = restAdapter49.converter;
        java.util.concurrent.Executor executor51 = restAdapter49.callbackExecutor;
        builder6.callbackExecutor = executor51;
        builder6.ensureSaneDefaults();
        retrofit.Server server54 = builder6.server;
        retrofit.RestAdapter.Builder builder55 = builder5.setServer(server54);
        retrofit.RestAdapter.Builder builder57 = builder5.setServer("Retrofit-Idle");
        retrofit.Profiler profiler58 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder59 = builder5.setProfiler(profiler58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(converter50);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.RestAdapter.Log log8 = builder0.log;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter11.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter11.requestInterceptor = requestInterceptor13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        restAdapter11.log = log23;
        retrofit.ErrorHandler errorHandler27 = null;
        restAdapter11.errorHandler = errorHandler27;
        retrofit.RestAdapter.Log log29 = restAdapter11.log;
        retrofit.RestAdapter.Builder builder30 = builder9.setLog(log29);
        retrofit.RequestInterceptor requestInterceptor31 = builder9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor32 = builder9.requestInterceptor;
        retrofit.RestAdapter.Builder builder34 = builder9.setServer("hi!");
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder43.setLog(log48);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter50.logLevel = logLevel52;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        restAdapter50.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter50.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log48, logLevel56);
        boolean boolean59 = logLevel56.log();
        retrofit.RestAdapter.Builder builder60 = builder34.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        retrofit.RestAdapter restAdapter68 = builder61.build();
        java.util.concurrent.Executor executor69 = restAdapter68.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter68.new RestHandler();
        retrofit.converter.Converter converter71 = restAdapter68.converter;
        builder60.converter = converter71;
        builder60.ensureSaneDefaults();
        retrofit.converter.Converter converter74 = builder60.converter;
        retrofit.RestAdapter.Builder builder75 = builder0.setConverter(converter74);
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder82 = builder76.setLog(log81);
        retrofit.RestAdapter restAdapter83 = builder76.build();
        retrofit.RestAdapter restAdapter84 = builder76.build();
        retrofit.RestAdapter.LogLevel logLevel85 = restAdapter84.logLevel;
        builder0.logLevel = logLevel85;
        retrofit.RestAdapter.Builder builder88 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder90 = builder0.setServer("hi!");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(executor69);
        org.junit.Assert.assertNotNull(converter71);
        org.junit.Assert.assertNotNull(converter74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.Profiler profiler6 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        java.util.concurrent.Executor executor12 = null;
        builder7.httpExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = builder7.build();
        retrofit.RestAdapter.Builder builder16 = builder7.setServer("hi!");
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.Profiler profiler28 = restAdapter27.profiler;
        java.util.concurrent.Executor executor29 = restAdapter27.httpExecutor;
        retrofit.ErrorHandler errorHandler30 = restAdapter27.errorHandler;
        retrofit.Profiler profiler31 = restAdapter27.profiler;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter49 = null;
        restAdapter48.converter = converter49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter48.requestInterceptor = requestInterceptor51;
        retrofit.Profiler profiler53 = restAdapter48.profiler;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        restAdapter48.logLevel = logLevel54;
        java.util.concurrent.Executor executor57 = restAdapter48.httpExecutor;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log59 = restAdapter58.log;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = builder60.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor62 = builder60.requestInterceptor;
        retrofit.ErrorHandler errorHandler63 = null;
        builder60.errorHandler = errorHandler63;
        retrofit.converter.Converter converter65 = null;
        builder60.converter = converter65;
        retrofit.ErrorHandler errorHandler67 = null;
        builder60.errorHandler = errorHandler67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.Profiler profiler74 = null;
        builder73.profiler = profiler74;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        builder73.requestInterceptor = requestInterceptor76;
        retrofit.RestAdapter restAdapter78 = builder73.build();
        retrofit.converter.Converter converter79 = restAdapter78.converter;
        retrofit.RestAdapter.Builder builder80 = builder60.setConverter(converter79);
        restAdapter58.converter = converter79;
        restAdapter48.converter = converter79;
        restAdapter32.converter = converter79;
        restAdapter27.converter = converter79;
        builder16.converter = converter79;
        restAdapter0.converter = converter79;
        retrofit.client.Response response88 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response90 = restAdapter0.logAndReplaceResponse("", response88, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(converter79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        retrofit.RestAdapter.Builder builder21 = builder8.setLogLevel(logLevel19);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter22.getLogLevel();
        builder21.logLevel = logLevel28;
        retrofit.RestAdapter.Builder builder30 = builder0.setLogLevel(logLevel28);
        retrofit.RequestInterceptor requestInterceptor31 = null;
        builder0.requestInterceptor = requestInterceptor31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.Profiler profiler40 = null;
        builder39.profiler = profiler40;
        retrofit.client.Client.Provider provider42 = builder39.clientProvider;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter43.requestInterceptor = requestInterceptor45;
        java.util.concurrent.Executor executor47 = restAdapter43.httpExecutor;
        java.util.concurrent.Executor executor48 = restAdapter43.httpExecutor;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.Profiler profiler54 = null;
        builder53.profiler = profiler54;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        builder53.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter restAdapter58 = builder53.build();
        retrofit.converter.Converter converter59 = restAdapter58.converter;
        restAdapter43.converter = converter59;
        retrofit.RestAdapter.Builder builder61 = builder39.setConverter(converter59);
        builder0.converter = converter59;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter63.requestInterceptor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.ErrorHandler errorHandler66 = restAdapter63.errorHandler;
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder75.setLog(log80);
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter82.logLevel = logLevel84;
        retrofit.RequestInterceptor requestInterceptor86 = null;
        restAdapter82.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter82.logLevel = logLevel88;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log80, logLevel88);
        log80.log("Retrofit-Idle");
        restAdapter63.log = log80;
        retrofit.RestAdapter.Builder builder94 = builder0.setLog(log80);
        java.util.concurrent.Executor executor95 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel96 = builder0.logLevel;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(converter59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(logLevel83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(executor95);
        org.junit.Assert.assertTrue("'" + logLevel96 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel96.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        builder4.logLevel = logLevel6;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        restAdapter10.log = log35;
        retrofit.RestAdapter.Builder builder38 = builder4.setLog(log35);
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder38.requestInterceptor = requestInterceptor39;
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder43.setLog(log48);
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        builder43.logLevel = logLevel59;
        retrofit.Profiler profiler62 = builder43.profiler;
        retrofit.Profiler profiler63 = null;
        builder43.profiler = profiler63;
        retrofit.RequestInterceptor requestInterceptor65 = builder43.requestInterceptor;
        retrofit.RestAdapter.Log log66 = builder43.log;
        retrofit.RestAdapter.Builder builder67 = builder38.setLog(log66);
        retrofit.Profiler profiler68 = builder38.profiler;
        builder38.ensureSaneDefaults();
        retrofit.Profiler profiler70 = null;
        builder38.profiler = profiler70;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(profiler68);
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.Profiler profiler14 = null;
        builder13.profiler = profiler14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder13.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter restAdapter18 = builder13.build();
        retrofit.converter.Converter converter19 = restAdapter18.converter;
        retrofit.RestAdapter.Builder builder20 = builder0.setConverter(converter19);
        java.util.concurrent.Executor executor21 = builder20.httpExecutor;
        retrofit.ErrorHandler errorHandler22 = builder20.errorHandler;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder23.logLevel = logLevel28;
        retrofit.converter.Converter converter30 = null;
        builder23.converter = converter30;
        retrofit.converter.Converter converter32 = null;
        builder23.converter = converter32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder34.logLevel = logLevel39;
        retrofit.converter.Converter converter41 = null;
        builder34.converter = converter41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        retrofit.converter.Converter converter45 = restAdapter43.converter;
        java.util.concurrent.Executor executor46 = null;
        restAdapter43.callbackExecutor = executor46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor49 = null;
        restAdapter48.httpExecutor = executor49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter48.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.Log log53 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel54;
        restAdapter43.logLevel = logLevel54;
        retrofit.RestAdapter.Builder builder57 = builder34.setLogLevel(logLevel54);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor59 = restAdapter58.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        restAdapter58.requestInterceptor = requestInterceptor60;
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel71);
        restAdapter58.log = log70;
        retrofit.Profiler profiler74 = null;
        restAdapter58.profiler = profiler74;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        restAdapter58.requestInterceptor = requestInterceptor76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("hi!");
        retrofit.Profiler profiler83 = null;
        builder82.profiler = profiler83;
        retrofit.RequestInterceptor requestInterceptor85 = null;
        builder82.requestInterceptor = requestInterceptor85;
        retrofit.RestAdapter restAdapter87 = builder82.build();
        retrofit.converter.Converter converter88 = restAdapter87.converter;
        java.util.concurrent.Executor executor89 = restAdapter87.callbackExecutor;
        restAdapter58.httpExecutor = executor89;
        builder57.callbackExecutor = executor89;
        builder23.callbackExecutor = executor89;
        retrofit.RestAdapter restAdapter93 = builder23.build();
        retrofit.RestAdapter.LogLevel logLevel94 = restAdapter93.logLevel;
        builder20.logLevel = logLevel94;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(converter19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(converter88);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNotNull(restAdapter93);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        builder8.logLevel = logLevel10;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter17 = null;
        restAdapter14.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        restAdapter14.log = log39;
        retrofit.RestAdapter.Builder builder42 = builder8.setLog(log39);
        restAdapter0.log = log39;
        retrofit.converter.Converter converter44 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler47 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Log log48 = restAdapter0.log;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(log48);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.Profiler profiler19 = builder0.profiler;
        retrofit.Profiler profiler20 = null;
        builder0.profiler = profiler20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter22.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter22.logLevel;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter30 = null;
        restAdapter29.converter = converter30;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter29.requestInterceptor = requestInterceptor32;
        retrofit.Profiler profiler34 = restAdapter29.profiler;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        restAdapter29.logLevel = logLevel35;
        java.util.concurrent.Executor executor38 = restAdapter29.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter29.getLogLevel();
        restAdapter22.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder0.setLogLevel(logLevel39);
        retrofit.RestAdapter.Log log42 = builder0.log;
        retrofit.ErrorHandler errorHandler43 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter44 = builder0.build();
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = builder52.converter;
        retrofit.RestAdapter.LogLevel logLevel54 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder51.setLogLevel(logLevel54);
        retrofit.converter.Converter converter56 = builder51.converter;
        java.util.concurrent.Executor executor57 = builder51.callbackExecutor;
        retrofit.converter.Converter converter58 = builder51.converter;
        retrofit.RestAdapter restAdapter59 = builder51.build();
        java.util.concurrent.Executor executor60 = restAdapter59.httpExecutor;
        builder0.httpExecutor = executor60;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(executor60);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.RequestInterceptor requestInterceptor33 = builder11.requestInterceptor;
        java.util.concurrent.Executor executor34 = builder11.httpExecutor;
        retrofit.ErrorHandler errorHandler35 = builder11.errorHandler;
        retrofit.RestAdapter.Log log36 = builder11.log;
        retrofit.converter.Converter converter37 = builder11.converter;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter46 = builder45.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder44.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter50 = builder49.converter;
        retrofit.RestAdapter.LogLevel logLevel51 = builder49.logLevel;
        builder49.ensureSaneDefaults();
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter68.logLevel = logLevel70;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        restAdapter68.requestInterceptor = requestInterceptor72;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter68.logLevel = logLevel74;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log66, logLevel74);
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = null;
        builder77.httpExecutor = executor78;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("hi!");
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder83 = builder77.setLog(log82);
        restAdapter76.log = log82;
        builder49.log = log82;
        java.util.concurrent.Executor executor86 = null;
        builder49.httpExecutor = executor86;
        retrofit.converter.Converter converter88 = null;
        builder49.converter = converter88;
        retrofit.ErrorHandler errorHandler90 = builder49.errorHandler;
        retrofit.RestAdapter.Builder builder91 = builder44.setErrorHandler(errorHandler90);
        retrofit.Server server92 = builder91.server;
        retrofit.RestAdapter.Builder builder93 = builder11.setServer(server92);
        retrofit.RestAdapter.LogLevel logLevel94 = builder93.logLevel;
        restAdapter0.logLevel = logLevel94;
        retrofit.Server server96 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel97 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler98 = null;
        restAdapter0.profiler = profiler98;
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(server92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server96);
        org.junit.Assert.assertTrue("'" + logLevel97 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel97.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        java.lang.String str13 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput14 = request10.getBody();
        java.util.List<retrofit.client.Header> headerList15 = request10.getHeaders();
        java.lang.String str16 = request10.getUrl();
        java.lang.String str17 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request10.getHeaders();
        java.util.List<retrofit.client.Header> headerList19 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList19, typedOutput20);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("Retrofit-Idle", "", headerList19, typedOutput22);
        java.lang.String str24 = request23.getUrl();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder7.setLog(log12);
        retrofit.RestAdapter restAdapter14 = builder7.build();
        java.util.concurrent.Executor executor15 = restAdapter14.httpExecutor;
        builder6.callbackExecutor = executor15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter18 = builder17.converter;
        retrofit.Profiler profiler19 = null;
        builder17.profiler = profiler19;
        retrofit.ErrorHandler errorHandler21 = null;
        builder17.errorHandler = errorHandler21;
        retrofit.Server server23 = builder17.server;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Log log44 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder45 = builder24.setLog(log44);
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder47.setLog(log52);
        retrofit.RestAdapter restAdapter54 = builder47.build();
        java.util.concurrent.Executor executor55 = restAdapter54.httpExecutor;
        builder24.callbackExecutor = executor55;
        builder17.httpExecutor = executor55;
        java.util.concurrent.Executor executor58 = builder17.httpExecutor;
        builder6.httpExecutor = executor58;
        retrofit.RestAdapter.Log log60 = builder6.log;
        retrofit.client.Client client61 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder62 = builder6.setClient(client61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNull(log60);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder5.logLevel = logLevel10;
        retrofit.converter.Converter converter12 = null;
        builder5.converter = converter12;
        retrofit.client.Client.Provider provider14 = null;
        builder5.clientProvider = provider14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        restAdapter18.log = log30;
        retrofit.ErrorHandler errorHandler34 = null;
        restAdapter18.errorHandler = errorHandler34;
        retrofit.RestAdapter.Log log36 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder37 = builder16.setLog(log36);
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = builder39.build();
        java.util.concurrent.Executor executor47 = restAdapter46.httpExecutor;
        builder16.callbackExecutor = executor47;
        builder5.httpExecutor = executor47;
        restAdapter0.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter52 = builder51.converter;
        retrofit.RestAdapter.LogLevel logLevel53 = builder51.logLevel;
        builder51.ensureSaneDefaults();
        retrofit.client.Client.Provider provider55 = null;
        builder51.clientProvider = provider55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter72.logLevel = logLevel74;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        restAdapter72.requestInterceptor = requestInterceptor76;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter72.logLevel = logLevel78;
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log70, logLevel78);
        builder51.logLevel = logLevel78;
        retrofit.client.Client.Provider provider82 = null;
        builder51.clientProvider = provider82;
        retrofit.converter.Converter converter84 = builder51.converter;
        java.util.concurrent.Executor executor85 = builder51.callbackExecutor;
        restAdapter0.callbackExecutor = executor85;
        retrofit.RequestInterceptor requestInterceptor87 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor88 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNull(requestInterceptor87);
        org.junit.Assert.assertNull(requestInterceptor88);
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        java.util.concurrent.Executor executor11 = restAdapter7.httpExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder33 = builder12.setLog(log32);
        retrofit.Profiler profiler34 = builder33.profiler;
        retrofit.RestAdapter.LogLevel logLevel35 = builder33.logLevel;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter36.requestInterceptor = requestInterceptor38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        restAdapter36.log = log48;
        retrofit.ErrorHandler errorHandler52 = null;
        restAdapter36.errorHandler = errorHandler52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter55 = builder54.converter;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter56.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        restAdapter56.requestInterceptor = requestInterceptor58;
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel69);
        restAdapter56.log = log68;
        retrofit.ErrorHandler errorHandler72 = null;
        restAdapter56.errorHandler = errorHandler72;
        retrofit.RestAdapter.Log log74 = restAdapter56.log;
        retrofit.RestAdapter.Builder builder75 = builder54.setLog(log74);
        retrofit.RequestInterceptor requestInterceptor76 = builder54.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor77 = builder54.requestInterceptor;
        retrofit.RestAdapter.Builder builder79 = builder54.setServer("hi!");
        retrofit.Server server80 = builder54.server;
        restAdapter36.server = server80;
        builder33.server = server80;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor84 = null;
        builder83.httpExecutor = executor84;
        retrofit.RestAdapter.Builder builder87 = builder83.setServer("hi!");
        retrofit.RestAdapter.Log log88 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder89 = builder83.setLog(log88);
        retrofit.RestAdapter restAdapter90 = builder83.build();
        java.util.concurrent.Executor executor91 = restAdapter90.httpExecutor;
        builder33.httpExecutor = executor91;
        restAdapter7.callbackExecutor = executor91;
        builder0.callbackExecutor = executor91;
        retrofit.RequestInterceptor requestInterceptor95 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler96 = builder0.errorHandler;
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(requestInterceptor76);
        org.junit.Assert.assertNull(requestInterceptor77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(server80);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(restAdapter90);
        org.junit.Assert.assertNotNull(executor91);
        org.junit.Assert.assertNull(requestInterceptor95);
        org.junit.Assert.assertNull(errorHandler96);
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = null;
        builder15.converter = converter16;
        retrofit.client.Client.Provider provider18 = null;
        builder15.clientProvider = provider18;
        java.util.concurrent.Executor executor20 = builder15.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        builder15.requestInterceptor = requestInterceptor21;
        retrofit.converter.Converter converter23 = null;
        builder15.converter = converter23;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter25.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter25.getLogLevel();
        retrofit.Server server30 = restAdapter25.server;
        java.util.concurrent.Executor executor31 = restAdapter25.callbackExecutor;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter25.errorHandler = errorHandler32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = builder34.converter;
        retrofit.RestAdapter.LogLevel logLevel36 = builder34.logLevel;
        builder34.ensureSaneDefaults();
        retrofit.client.Client.Provider provider38 = null;
        builder34.clientProvider = provider38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter55.requestInterceptor = requestInterceptor59;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter55.logLevel = logLevel61;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log53, logLevel61);
        builder34.logLevel = logLevel61;
        retrofit.client.Client.Provider provider65 = null;
        builder34.clientProvider = provider65;
        retrofit.converter.Converter converter67 = builder34.converter;
        restAdapter25.converter = converter67;
        builder15.converter = converter67;
        retrofit.RestAdapter.Builder builder70 = builder13.setConverter(converter67);
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder71.setLog(log76);
        retrofit.Server server78 = null;
        retrofit.client.Client.Provider provider79 = null;
        java.util.concurrent.Executor executor80 = null;
        java.util.concurrent.Executor executor81 = null;
        retrofit.RequestInterceptor requestInterceptor82 = null;
        retrofit.converter.Converter converter83 = null;
        retrofit.Profiler profiler84 = null;
        retrofit.ErrorHandler errorHandler85 = null;
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server78, provider79, executor80, executor81, requestInterceptor82, converter83, profiler84, errorHandler85, log86, logLevel87);
        builder71.logLevel = logLevel87;
        retrofit.converter.Converter converter90 = builder71.converter;
        retrofit.RequestInterceptor requestInterceptor91 = null;
        builder71.requestInterceptor = requestInterceptor91;
        retrofit.converter.Converter converter93 = builder71.converter;
        retrofit.RestAdapter.Log log94 = builder71.log;
        retrofit.RestAdapter.Builder builder95 = builder70.setLog(log94);
        retrofit.RestAdapter.Log log96 = builder70.log;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder98 = builder70.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter90);
        org.junit.Assert.assertNull(converter93);
        org.junit.Assert.assertNotNull(log94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(log96);
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.converter.Converter converter11 = builder6.converter;
        retrofit.RequestInterceptor requestInterceptor12 = builder6.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter22 = builder21.converter;
        retrofit.Profiler profiler23 = null;
        builder21.profiler = profiler23;
        retrofit.ErrorHandler errorHandler25 = null;
        builder21.errorHandler = errorHandler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.RestAdapter.Builder builder49 = builder21.setLog(log47);
        log47.log("Retrofit-Idle");
        builder13.log = log47;
        retrofit.RestAdapter.Builder builder53 = builder6.setLog(log47);
        retrofit.client.Client.Provider provider54 = builder53.clientProvider;
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = builder56.callbackExecutor;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel67);
        retrofit.RestAdapter.Builder builder69 = builder56.setLogLevel(logLevel67);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log71 = restAdapter70.log;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = builder72.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor74 = builder72.requestInterceptor;
        retrofit.ErrorHandler errorHandler75 = null;
        builder72.errorHandler = errorHandler75;
        retrofit.converter.Converter converter77 = null;
        builder72.converter = converter77;
        retrofit.ErrorHandler errorHandler79 = null;
        builder72.errorHandler = errorHandler79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor82 = null;
        builder81.httpExecutor = executor82;
        retrofit.RestAdapter.Builder builder85 = builder81.setServer("hi!");
        retrofit.Profiler profiler86 = null;
        builder85.profiler = profiler86;
        retrofit.RequestInterceptor requestInterceptor88 = null;
        builder85.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter restAdapter90 = builder85.build();
        retrofit.converter.Converter converter91 = restAdapter90.converter;
        retrofit.RestAdapter.Builder builder92 = builder72.setConverter(converter91);
        restAdapter70.converter = converter91;
        builder56.converter = converter91;
        retrofit.RestAdapter.Builder builder95 = builder53.setConverter(converter91);
        java.util.concurrent.Executor executor96 = builder95.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter90);
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(executor96);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor13 = null;
        builder8.httpExecutor = executor13;
        retrofit.RestAdapter restAdapter15 = builder8.build();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        restAdapter18.log = log30;
        retrofit.ErrorHandler errorHandler34 = null;
        restAdapter18.errorHandler = errorHandler34;
        retrofit.RestAdapter.Log log36 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder37 = builder16.setLog(log36);
        retrofit.Profiler profiler38 = builder37.profiler;
        retrofit.Profiler profiler39 = builder37.profiler;
        java.util.concurrent.Executor executor40 = builder37.callbackExecutor;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = builder41.build();
        java.util.concurrent.Executor executor49 = restAdapter48.httpExecutor;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.client.Client.Provider provider53 = null;
        builder50.clientProvider = provider53;
        retrofit.RestAdapter.Builder builder56 = builder50.setServer("hi!");
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = builder57.setLog(log62);
        retrofit.RestAdapter restAdapter64 = builder57.build();
        java.util.concurrent.Executor executor65 = restAdapter64.httpExecutor;
        builder56.callbackExecutor = executor65;
        retrofit.RestAdapter.Builder builder67 = builder37.setExecutors(executor49, executor65);
        restAdapter15.httpExecutor = executor49;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        restAdapter15.logLevel = logLevel78;
        retrofit.ErrorHandler errorHandler81 = restAdapter15.errorHandler;
        builder0.errorHandler = errorHandler81;
        retrofit.RestAdapter.Log log83 = builder0.log;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNull(log83);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.Profiler profiler11 = restAdapter10.profiler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor14 = restAdapter10.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.callbackExecutor;
        retrofit.RestAdapter.Log log18 = builder16.log;
        retrofit.Server server19 = builder16.server;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log21 = restAdapter20.log;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = builder22.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor24 = builder22.requestInterceptor;
        retrofit.ErrorHandler errorHandler25 = null;
        builder22.errorHandler = errorHandler25;
        retrofit.converter.Converter converter27 = null;
        builder22.converter = converter27;
        retrofit.ErrorHandler errorHandler29 = null;
        builder22.errorHandler = errorHandler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        builder35.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter restAdapter40 = builder35.build();
        retrofit.converter.Converter converter41 = restAdapter40.converter;
        retrofit.RestAdapter.Builder builder42 = builder22.setConverter(converter41);
        restAdapter20.converter = converter41;
        retrofit.RestAdapter.Builder builder44 = builder16.setConverter(converter41);
        restAdapter10.converter = converter41;
        retrofit.converter.Converter converter46 = null;
        restAdapter10.converter = converter46;
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter10.getLogLevel();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(converter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.Server server8 = restAdapter0.server;
        retrofit.client.Client.Provider provider9 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder16 = builder10.setLog(log15);
        retrofit.RequestInterceptor requestInterceptor17 = builder16.requestInterceptor;
        retrofit.RestAdapter restAdapter18 = builder16.build();
        retrofit.Server server19 = builder16.server;
        restAdapter0.server = server19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.Profiler profiler26 = null;
        builder25.profiler = profiler26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder25.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter restAdapter30 = builder25.build();
        retrofit.converter.Converter converter31 = restAdapter30.converter;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        log32.log("");
        restAdapter30.log = log32;
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter30.requestInterceptor;
        retrofit.client.Header[] headerArray41 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList42 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList42, headerArray41);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList42, typedOutput44);
        java.lang.String str46 = request45.getUrl();
        java.util.List<retrofit.client.Header> headerList47 = request45.getHeaders();
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("hi!", "", headerList47, typedOutput48);
        java.lang.String str50 = request49.getMethod();
        retrofit.mime.TypedOutput typedOutput51 = request49.getBody();
        java.lang.String str52 = request49.getMethod();
        retrofit.client.Request request53 = restAdapter30.logAndReplaceRequest(request49);
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter30.logLevel;
        restAdapter0.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.client.Client.Provider provider60 = null;
        builder57.clientProvider = provider60;
        retrofit.RestAdapter.Builder builder63 = builder57.setServer("hi!");
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter64.logLevel = logLevel66;
        retrofit.Profiler profiler68 = restAdapter64.profiler;
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter64.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor70 = restAdapter64.requestInterceptor;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log72 = restAdapter71.log;
        java.util.concurrent.Executor executor73 = restAdapter71.callbackExecutor;
        retrofit.Profiler profiler74 = restAdapter71.profiler;
        retrofit.Profiler profiler75 = null;
        restAdapter71.profiler = profiler75;
        retrofit.Server server77 = null;
        retrofit.client.Client.Provider provider78 = null;
        java.util.concurrent.Executor executor79 = null;
        java.util.concurrent.Executor executor80 = null;
        retrofit.RequestInterceptor requestInterceptor81 = null;
        retrofit.converter.Converter converter82 = null;
        retrofit.Profiler profiler83 = null;
        retrofit.ErrorHandler errorHandler84 = null;
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server77, provider78, executor79, executor80, requestInterceptor81, converter82, profiler83, errorHandler84, log85, logLevel86);
        restAdapter71.log = log85;
        restAdapter64.log = log85;
        retrofit.RestAdapter.Builder builder90 = builder57.setLog(log85);
        log85.log("hi!");
        log85.log("");
        restAdapter0.log = log85;
        retrofit.converter.Converter converter96 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel97 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(converter31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(headerArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(headerList47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNull(typedOutput51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(request53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler68);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(profiler74);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(converter96);
        org.junit.Assert.assertTrue("'" + logLevel97 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel97.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = null;
        builder24.converter = converter25;
        retrofit.client.Client.Provider provider27 = null;
        builder24.clientProvider = provider27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        builder24.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter restAdapter45 = builder38.build();
        retrofit.converter.Converter converter46 = null;
        builder38.converter = converter46;
        retrofit.ErrorHandler errorHandler48 = null;
        builder38.errorHandler = errorHandler48;
        retrofit.RequestInterceptor requestInterceptor50 = builder38.requestInterceptor;
        builder35.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.Builder builder52 = builder24.setRequestInterceptor(requestInterceptor50);
        retrofit.RestAdapter.Builder builder53 = builder0.setRequestInterceptor(requestInterceptor50);
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.Profiler profiler55 = builder53.profiler;
        retrofit.RestAdapter.LogLevel logLevel56 = builder53.logLevel;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.Profiler profiler28 = builder27.profiler;
        retrofit.RestAdapter.LogLevel logLevel29 = builder27.logLevel;
        restAdapter0.logLevel = logLevel29;
        java.util.concurrent.Executor executor31 = restAdapter0.callbackExecutor;
        retrofit.Server server32 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter0.logLevel;
        retrofit.Server server34 = restAdapter0.server;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server34);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder0.profiler;
        retrofit.converter.Converter converter23 = null;
        builder0.converter = converter23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter40.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter40.logLevel = logLevel46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log38, logLevel46);
        retrofit.RestAdapter.Builder builder49 = builder0.setLog(log38);
        java.util.concurrent.Executor executor50 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel51 = builder0.logLevel;
        java.util.concurrent.Executor executor52 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor53 = builder0.requestInterceptor;
        retrofit.RestAdapter.Log log54 = builder0.log;
        log54.log("Retrofit-Idle");
        log54.log("Retrofit-Idle");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(log54);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.client.Client.Provider provider16 = null;
        builder13.clientProvider = provider16;
        retrofit.client.Client.Provider provider18 = builder13.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder20 = builder13.setLogLevel(logLevel19);
        retrofit.RequestInterceptor requestInterceptor21 = null;
        builder20.requestInterceptor = requestInterceptor21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter.LogLevel logLevel25 = builder23.logLevel;
        builder23.ensureSaneDefaults();
        retrofit.client.Client.Provider provider27 = null;
        builder23.clientProvider = provider27;
        retrofit.Profiler profiler29 = builder23.profiler;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = builder30.callbackExecutor;
        retrofit.RestAdapter.Log log32 = builder30.log;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter52.setLogLevel(logLevel56);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log49, logLevel56);
        retrofit.RestAdapter.Builder builder59 = builder30.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder60.setLog(log65);
        builder30.log = log65;
        retrofit.RestAdapter.Builder builder68 = builder23.setLog(log65);
        java.util.concurrent.Executor executor69 = builder68.httpExecutor;
        builder20.callbackExecutor = executor69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.Profiler profiler76 = null;
        builder75.profiler = profiler76;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        builder75.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter restAdapter80 = builder75.build();
        retrofit.converter.Converter converter81 = null;
        builder75.converter = converter81;
        retrofit.client.Client.Provider provider83 = builder75.clientProvider;
        builder20.clientProvider = provider83;
        builder12.clientProvider = provider83;
        retrofit.ErrorHandler errorHandler86 = builder12.errorHandler;
        retrofit.client.Client.Provider provider87 = builder12.clientProvider;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(executor69);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(provider83);
        org.junit.Assert.assertNull(errorHandler86);
        org.junit.Assert.assertNotNull(provider87);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log19, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLogLevel(logLevel26);
        retrofit.ErrorHandler errorHandler30 = null;
        builder29.errorHandler = errorHandler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = builder32.callbackExecutor;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        retrofit.RestAdapter.Builder builder45 = builder32.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder29.setLogLevel(logLevel43);
        builder46.ensureSaneDefaults();
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter56.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        restAdapter56.requestInterceptor = requestInterceptor58;
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel69);
        restAdapter56.log = log68;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean73 = logLevel72.log();
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log68, logLevel72);
        retrofit.RestAdapter.Builder builder75 = builder46.setLog(log68);
        retrofit.converter.Converter converter76 = builder46.converter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder78 = builder46.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(converter76);
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter14.logLevel = logLevel16;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.setLogLevel(logLevel18);
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter14.getLogLevel();
        builder13.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter23 = builder22.converter;
        retrofit.RestAdapter.LogLevel logLevel24 = builder22.logLevel;
        builder22.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor26 = builder22.requestInterceptor;
        builder13.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter28.requestInterceptor;
        java.util.concurrent.Executor executor33 = restAdapter28.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter37.requestInterceptor = requestInterceptor39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter37.log = log49;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter37.errorHandler = errorHandler53;
        retrofit.RestAdapter.Log log55 = restAdapter37.log;
        retrofit.RestAdapter.Builder builder56 = builder35.setLog(log55);
        retrofit.Profiler profiler57 = builder56.profiler;
        retrofit.Profiler profiler58 = builder56.profiler;
        java.util.concurrent.Executor executor59 = builder56.callbackExecutor;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder60.setLog(log65);
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel76);
        builder60.logLevel = logLevel76;
        retrofit.converter.Converter converter79 = builder60.converter;
        retrofit.ErrorHandler errorHandler80 = builder60.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel81 = builder60.logLevel;
        retrofit.Server server82 = builder60.server;
        retrofit.RestAdapter.Builder builder83 = builder56.setServer(server82);
        restAdapter28.server = server82;
        builder13.server = server82;
        retrofit.RestAdapter restAdapter86 = builder13.build();
        retrofit.RestAdapter restAdapter87 = builder13.build();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(profiler58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter79);
        org.junit.Assert.assertNull(errorHandler80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(restAdapter87);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter0.clientProvider = provider9;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(requestInterceptor8);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = builder0.server;
        retrofit.converter.Converter converter27 = builder0.converter;
        retrofit.converter.Converter converter28 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor29 = builder0.requestInterceptor;
        retrofit.Profiler profiler30 = builder0.profiler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(profiler30);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        java.util.concurrent.Executor executor19 = restAdapter18.httpExecutor;
        builder10.callbackExecutor = executor19;
        builder0.callbackExecutor = executor19;
        retrofit.RestAdapter.Log log22 = builder0.log;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter24 = null;
        restAdapter23.converter = converter24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.Profiler profiler28 = null;
        builder26.profiler = profiler28;
        retrofit.ErrorHandler errorHandler30 = null;
        builder26.errorHandler = errorHandler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        restAdapter34.log = log46;
        retrofit.ErrorHandler errorHandler50 = null;
        restAdapter34.errorHandler = errorHandler50;
        retrofit.RestAdapter.Log log52 = restAdapter34.log;
        retrofit.RestAdapter.Builder builder53 = builder32.setLog(log52);
        retrofit.RestAdapter.Builder builder54 = builder26.setLog(log52);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = builder54.setLogLevel(logLevel57);
        restAdapter23.logLevel = logLevel57;
        builder0.logLevel = logLevel57;
        boolean boolean62 = logLevel57.log();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.RequestInterceptor requestInterceptor49 = builder27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor50 = builder27.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = builder27.setServer("hi!");
        retrofit.Server server53 = builder27.server;
        restAdapter9.server = server53;
        retrofit.RestAdapter.Builder builder55 = builder0.setServer(server53);
        java.util.concurrent.Executor executor56 = builder55.callbackExecutor;
        retrofit.converter.Converter converter57 = builder55.converter;
        retrofit.client.Client.Provider provider58 = builder55.clientProvider;
        retrofit.RestAdapter restAdapter59 = builder55.build();
        builder55.ensureSaneDefaults();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(restAdapter59);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.RestAdapter.Log log45 = restAdapter27.log;
        retrofit.RestAdapter.Builder builder46 = builder25.setLog(log45);
        retrofit.RequestInterceptor requestInterceptor47 = builder25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = builder25.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder25.setServer("hi!");
        retrofit.Server server51 = builder25.server;
        restAdapter7.server = server51;
        builder6.server = server51;
        java.util.concurrent.Executor executor54 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        java.util.concurrent.Executor executor60 = null;
        builder55.httpExecutor = executor60;
        retrofit.RestAdapter restAdapter62 = builder55.build();
        retrofit.converter.Converter converter63 = restAdapter62.converter;
        builder6.converter = converter63;
        retrofit.converter.Converter converter65 = builder6.converter;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        builder6.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.client.Client.Provider provider73 = builder72.clientProvider;
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Log log75 = null;
        builder72.log = log75;
        retrofit.ErrorHandler errorHandler77 = builder72.errorHandler;
        retrofit.client.Client.Provider provider78 = builder72.clientProvider;
        retrofit.client.Client.Provider provider79 = builder72.clientProvider;
        builder6.clientProvider = provider79;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNotNull(converter63);
        org.junit.Assert.assertNotNull(converter65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(provider73);
        org.junit.Assert.assertNotNull(errorHandler77);
        org.junit.Assert.assertNotNull(provider78);
        org.junit.Assert.assertNotNull(provider79);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor26 = builder21.httpExecutor;
        retrofit.Profiler profiler27 = builder21.profiler;
        java.util.concurrent.Executor executor28 = builder21.httpExecutor;
        retrofit.client.Client client29 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder30 = builder21.setClient(client29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNull(executor28);
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = null;
        builder6.converter = converter7;
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder6.requestInterceptor = requestInterceptor11;
        retrofit.Profiler profiler13 = builder6.profiler;
        retrofit.Profiler profiler14 = null;
        builder6.profiler = profiler14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor18 = builder16.requestInterceptor;
        java.util.concurrent.Executor executor19 = builder16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel20 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.Profiler profiler26 = null;
        builder25.profiler = profiler26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder25.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter restAdapter30 = builder25.build();
        retrofit.converter.Converter converter31 = null;
        builder25.converter = converter31;
        retrofit.client.Client.Provider provider33 = builder25.clientProvider;
        retrofit.RestAdapter.Builder builder34 = builder16.setClient(provider33);
        retrofit.RestAdapter.Builder builder35 = builder6.setClient(provider33);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = builder36.converter;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter38.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        restAdapter38.requestInterceptor = requestInterceptor40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        restAdapter38.log = log50;
        retrofit.ErrorHandler errorHandler54 = null;
        restAdapter38.errorHandler = errorHandler54;
        retrofit.RestAdapter.Log log56 = restAdapter38.log;
        retrofit.RestAdapter.Builder builder57 = builder36.setLog(log56);
        retrofit.RequestInterceptor requestInterceptor58 = builder36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = builder36.requestInterceptor;
        retrofit.RestAdapter.Builder builder61 = builder36.setServer("hi!");
        java.util.concurrent.Executor executor62 = builder61.httpExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log64 = restAdapter63.log;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.Profiler profiler66 = restAdapter63.profiler;
        retrofit.Profiler profiler67 = null;
        restAdapter63.profiler = profiler67;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        restAdapter63.log = log77;
        log77.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder83 = builder61.setLog(log77);
        builder6.log = log77;
        restAdapter0.log = log77;
        retrofit.Server server86 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor87 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler88 = restAdapter0.profiler;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(provider33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(profiler66);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(server86);
        org.junit.Assert.assertNull(requestInterceptor87);
        org.junit.Assert.assertNull(profiler88);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.converter.Converter converter8 = restAdapter7.converter;
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        retrofit.ErrorHandler errorHandler11 = restAdapter7.errorHandler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.Profiler profiler17 = null;
        builder16.profiler = profiler17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        builder16.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter restAdapter21 = builder16.build();
        retrofit.converter.Converter converter22 = null;
        builder16.converter = converter22;
        retrofit.Profiler profiler24 = null;
        builder16.profiler = profiler24;
        retrofit.RestAdapter.Builder builder27 = builder16.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter28 = builder16.converter;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.client.Client.Provider provider32 = null;
        builder29.clientProvider = provider32;
        retrofit.client.Client.Provider provider34 = builder29.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder36 = builder29.setLogLevel(logLevel35);
        retrofit.RequestInterceptor requestInterceptor37 = null;
        builder36.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter39.logLevel;
        retrofit.converter.Converter converter42 = null;
        restAdapter39.converter = converter42;
        retrofit.ErrorHandler errorHandler44 = restAdapter39.errorHandler;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log46 = restAdapter45.log;
        retrofit.ErrorHandler errorHandler47 = restAdapter45.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.Profiler profiler54 = null;
        builder53.profiler = profiler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder56.setLog(log61);
        retrofit.RestAdapter restAdapter63 = builder56.build();
        retrofit.converter.Converter converter64 = null;
        builder56.converter = converter64;
        retrofit.ErrorHandler errorHandler66 = null;
        builder56.errorHandler = errorHandler66;
        retrofit.RequestInterceptor requestInterceptor68 = builder56.requestInterceptor;
        builder53.requestInterceptor = requestInterceptor68;
        restAdapter45.requestInterceptor = requestInterceptor68;
        retrofit.RequestInterceptor requestInterceptor71 = restAdapter45.requestInterceptor;
        restAdapter39.requestInterceptor = requestInterceptor71;
        retrofit.RestAdapter.Builder builder73 = builder36.setRequestInterceptor(requestInterceptor71);
        retrofit.RestAdapter.Builder builder74 = builder16.setRequestInterceptor(requestInterceptor71);
        restAdapter7.requestInterceptor = requestInterceptor71;
        retrofit.client.Response response77 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response79 = restAdapter7.logAndReplaceResponse("", response77, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(converter8);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNotNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(requestInterceptor71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.RestAdapter.Log log30 = builder0.log;
        log30.log("hi!");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.converter.Converter converter11 = restAdapter9.converter;
        java.util.concurrent.Executor executor12 = null;
        restAdapter9.callbackExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = null;
        restAdapter14.httpExecutor = executor15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter14.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Log log19 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel20;
        restAdapter9.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder23 = builder0.setLogLevel(logLevel20);
        retrofit.RestAdapter.Log log24 = builder23.log;
        retrofit.converter.Converter converter25 = builder23.converter;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = builder26.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor28 = builder26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = builder26.requestInterceptor;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.Profiler profiler35 = null;
        builder34.profiler = profiler35;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        builder34.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter restAdapter39 = builder34.build();
        retrofit.client.Client.Provider provider40 = builder34.clientProvider;
        builder26.clientProvider = provider40;
        retrofit.Profiler profiler42 = null;
        builder26.profiler = profiler42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        builder44.logLevel = logLevel60;
        retrofit.converter.Converter converter63 = builder44.converter;
        retrofit.ErrorHandler errorHandler64 = builder44.errorHandler;
        retrofit.Server server65 = builder44.server;
        builder26.server = server65;
        retrofit.RestAdapter.Builder builder67 = builder23.setServer(server65);
        java.util.concurrent.Executor executor68 = builder67.callbackExecutor;
        retrofit.Profiler profiler69 = null;
        builder67.profiler = profiler69;
        retrofit.converter.Converter converter71 = builder67.converter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(provider40);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(converter71);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.Profiler profiler15 = builder13.profiler;
        java.util.concurrent.Executor executor16 = builder13.httpExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.Profiler profiler22 = null;
        builder21.profiler = profiler22;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        builder21.requestInterceptor = requestInterceptor24;
        retrofit.RestAdapter restAdapter26 = builder21.build();
        retrofit.converter.Converter converter27 = restAdapter26.converter;
        java.util.concurrent.Executor executor28 = restAdapter26.callbackExecutor;
        retrofit.client.Client.Provider provider29 = restAdapter26.clientProvider;
        retrofit.RestAdapter.Log log30 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder31 = builder13.setLog(log30);
        retrofit.RestAdapter.Builder builder33 = builder13.setServer("Retrofit-Idle");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNotNull(converter27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(provider29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = builder23.build();
        retrofit.converter.Converter converter31 = null;
        builder23.converter = converter31;
        retrofit.ErrorHandler errorHandler33 = null;
        builder23.errorHandler = errorHandler33;
        retrofit.RequestInterceptor requestInterceptor35 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.client.Client.Provider provider41 = builder40.clientProvider;
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("");
        builder40.log = log43;
        retrofit.Server server47 = builder40.server;
        builder23.server = server47;
        retrofit.RestAdapter.Builder builder49 = builder0.setServer(server47);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        java.util.concurrent.Executor executor52 = restAdapter50.callbackExecutor;
        retrofit.ErrorHandler errorHandler53 = restAdapter50.errorHandler;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter69.logLevel = logLevel71;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        restAdapter69.requestInterceptor = requestInterceptor73;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter69.logLevel = logLevel75;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log67, logLevel75);
        log67.log("Retrofit-Idle");
        restAdapter50.log = log67;
        log67.log("");
        retrofit.RestAdapter.Builder builder83 = builder0.setLog(log67);
        builder83.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter85 = builder83.build();
        retrofit.Server server86 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder87 = builder83.setServer(server86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter85);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = builder19.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor21 = builder19.requestInterceptor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor23 = restAdapter22.callbackExecutor;
        retrofit.RestAdapter.Log log24 = restAdapter22.log;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.client.Client.Provider provider28 = null;
        builder25.clientProvider = provider28;
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder31.setLog(log36);
        retrofit.RestAdapter restAdapter38 = builder31.build();
        retrofit.converter.Converter converter39 = null;
        builder31.converter = converter39;
        retrofit.ErrorHandler errorHandler41 = null;
        builder31.errorHandler = errorHandler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter44 = builder43.converter;
        retrofit.RestAdapter.LogLevel logLevel45 = builder43.logLevel;
        builder43.ensureSaneDefaults();
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = builder55.setLog(log60);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter62.logLevel = logLevel64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        restAdapter62.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter62.logLevel = logLevel68;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log60, logLevel68);
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder71.setLog(log76);
        restAdapter70.log = log76;
        builder43.log = log76;
        java.util.concurrent.Executor executor80 = null;
        builder43.httpExecutor = executor80;
        retrofit.converter.Converter converter82 = null;
        builder43.converter = converter82;
        retrofit.ErrorHandler errorHandler84 = builder43.errorHandler;
        retrofit.RestAdapter.Builder builder85 = builder31.setErrorHandler(errorHandler84);
        builder25.errorHandler = errorHandler84;
        restAdapter22.errorHandler = errorHandler84;
        retrofit.RestAdapter.Builder builder88 = builder19.setErrorHandler(errorHandler84);
        builder0.errorHandler = errorHandler84;
        retrofit.Profiler profiler90 = builder0.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(profiler90);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder17.setLog(log22);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter24.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter24.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log22, logLevel30);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        restAdapter32.log = log38;
        retrofit.ErrorHandler errorHandler41 = restAdapter32.errorHandler;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        retrofit.client.Client.Provider provider47 = builder46.clientProvider;
        builder46.ensureSaneDefaults();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("");
        builder46.log = log49;
        retrofit.Server server53 = builder46.server;
        restAdapter32.server = server53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor56 = restAdapter55.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter55.requestInterceptor = requestInterceptor57;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel68);
        restAdapter55.log = log67;
        retrofit.Server server71 = restAdapter55.server;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("hi!");
        retrofit.Profiler profiler77 = null;
        builder76.profiler = profiler77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder85 = builder79.setLog(log84);
        retrofit.RestAdapter restAdapter86 = builder79.build();
        retrofit.converter.Converter converter87 = null;
        builder79.converter = converter87;
        retrofit.ErrorHandler errorHandler89 = null;
        builder79.errorHandler = errorHandler89;
        retrofit.RequestInterceptor requestInterceptor91 = builder79.requestInterceptor;
        builder76.requestInterceptor = requestInterceptor91;
        restAdapter55.requestInterceptor = requestInterceptor91;
        restAdapter32.requestInterceptor = requestInterceptor91;
        restAdapter0.requestInterceptor = requestInterceptor91;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(requestInterceptor91);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Server server22 = null;
        builder0.server = server22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Log log44 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder45 = builder24.setLog(log44);
        retrofit.Profiler profiler46 = builder45.profiler;
        retrofit.client.Client.Provider provider47 = builder45.clientProvider;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter50 = builder49.build();
        retrofit.RestAdapter.Log log51 = builder49.log;
        retrofit.RestAdapter restAdapter52 = builder49.build();
        retrofit.converter.Converter converter53 = null;
        restAdapter52.converter = converter53;
        retrofit.Server server55 = restAdapter52.server;
        retrofit.RestAdapter.Builder builder56 = builder0.setServer(server55);
        retrofit.Server server57 = builder56.server;
        builder56.ensureSaneDefaults();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(server57);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel9 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.Profiler profiler15 = null;
        builder14.profiler = profiler15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder14.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter restAdapter19 = builder14.build();
        retrofit.converter.Converter converter20 = restAdapter19.converter;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder30.setLog(log35);
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter37.logLevel = logLevel39;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter37.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter37.logLevel = logLevel43;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log35, logLevel43);
        log35.log("hi!");
        log35.log("Retrofit-Idle");
        log35.log("");
        restAdapter19.log = log35;
        retrofit.RestAdapter.Builder builder53 = builder0.setLog(log35);
        retrofit.RequestInterceptor requestInterceptor54 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor55 = builder0.callbackExecutor;
        retrofit.Profiler profiler56 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder57 = builder0.setProfiler(profiler56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(converter20);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNull(executor55);
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.getHeaders();
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput26);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(headerList25);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request8.getBody();
        java.lang.String str13 = request8.getUrl();
        java.lang.String str14 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList15 = request8.getHeaders();
        java.lang.String str16 = request8.getMethod();
        java.util.List<retrofit.client.Header> headerList17 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList17, typedOutput18);
        java.lang.String str20 = request19.getUrl();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.Profiler profiler17 = restAdapter14.profiler;
        retrofit.Profiler profiler18 = null;
        restAdapter14.profiler = profiler18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter14.log = log28;
        restAdapter7.log = log28;
        retrofit.RestAdapter.Builder builder33 = builder0.setLog(log28);
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter.Builder builder36 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = builder41.build();
        retrofit.RequestInterceptor requestInterceptor43 = builder41.requestInterceptor;
        retrofit.RestAdapter.Builder builder44 = builder36.setRequestInterceptor(requestInterceptor43);
        retrofit.client.Client.Provider provider45 = builder36.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel46 = builder36.logLevel;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request10.getBody();
        retrofit.mime.TypedOutput typedOutput13 = request10.getBody();
        java.lang.String str14 = request10.getMethod();
        java.util.List<retrofit.client.Header> headerList15 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput16 = request10.getBody();
        java.util.List<retrofit.client.Header> headerList17 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList17, typedOutput18);
        java.util.List<retrofit.client.Header> headerList20 = request19.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "Retrofit-Idle", headerList20, typedOutput21);
        java.lang.String str23 = request22.getMethod();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Profiler profiler9 = builder0.profiler;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        java.util.concurrent.Executor executor28 = null;
        restAdapter10.callbackExecutor = executor28;
        retrofit.RestAdapter.Log log30 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder31 = builder0.setLog(log30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter32.logLevel;
        retrofit.converter.Converter converter35 = null;
        restAdapter32.converter = converter35;
        retrofit.ErrorHandler errorHandler37 = restAdapter32.errorHandler;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = null;
        builder38.converter = converter39;
        retrofit.client.Client.Provider provider41 = null;
        builder38.clientProvider = provider41;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        builder38.requestInterceptor = requestInterceptor43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.Profiler profiler50 = null;
        builder49.profiler = profiler50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        retrofit.RestAdapter restAdapter59 = builder52.build();
        retrofit.converter.Converter converter60 = null;
        builder52.converter = converter60;
        retrofit.ErrorHandler errorHandler62 = null;
        builder52.errorHandler = errorHandler62;
        retrofit.RequestInterceptor requestInterceptor64 = builder52.requestInterceptor;
        builder49.requestInterceptor = requestInterceptor64;
        retrofit.RestAdapter.Builder builder66 = builder38.setRequestInterceptor(requestInterceptor64);
        restAdapter32.requestInterceptor = requestInterceptor64;
        retrofit.RestAdapter.Builder builder68 = builder0.setRequestInterceptor(requestInterceptor64);
        retrofit.Profiler profiler69 = null;
        builder68.profiler = profiler69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.Profiler profiler73 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder74 = builder68.setProfiler(profiler73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.client.Client.Provider provider10 = null;
        builder7.clientProvider = provider10;
        retrofit.client.Client.Provider provider12 = builder7.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter25.requestInterceptor = requestInterceptor27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        restAdapter25.log = log37;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean42 = logLevel41.log();
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log37, logLevel41);
        retrofit.RestAdapter.Builder builder44 = builder15.setLog(log37);
        retrofit.Server server45 = builder44.server;
        retrofit.ErrorHandler errorHandler46 = null;
        builder44.errorHandler = errorHandler46;
        retrofit.Profiler profiler48 = null;
        builder44.profiler = profiler48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = builder50.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor52 = builder50.requestInterceptor;
        java.util.concurrent.Executor executor53 = builder50.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel54 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.Profiler profiler60 = null;
        builder59.profiler = profiler60;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        builder59.requestInterceptor = requestInterceptor62;
        retrofit.RestAdapter restAdapter64 = builder59.build();
        retrofit.converter.Converter converter65 = null;
        builder59.converter = converter65;
        retrofit.client.Client.Provider provider67 = builder59.clientProvider;
        retrofit.RestAdapter.Builder builder68 = builder50.setClient(provider67);
        builder44.clientProvider = provider67;
        builder14.clientProvider = provider67;
        restAdapter0.clientProvider = provider67;
        retrofit.Profiler profiler72 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler73 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(provider67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(profiler72);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(requestInterceptor74);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.client.Client.Provider provider10 = restAdapter9.clientProvider;
        java.util.concurrent.Executor executor11 = restAdapter9.httpExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider13 = null;
        restAdapter12.clientProvider = provider13;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = builder16.logLevel;
        restAdapter12.logLevel = logLevel18;
        boolean boolean20 = logLevel18.log();
        restAdapter9.logLevel = logLevel18;
        retrofit.Server server22 = restAdapter9.server;
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter9.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter9.requestInterceptor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(provider10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor24);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log40, logLevel44);
        restAdapter0.logLevel = logLevel44;
        retrofit.client.Header[] headerArray52 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList53 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList53, headerArray52);
        retrofit.mime.TypedOutput typedOutput55 = null;
        retrofit.client.Request request56 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList53, typedOutput55);
        java.lang.String str57 = request56.getUrl();
        java.util.List<retrofit.client.Header> headerList58 = request56.getHeaders();
        java.lang.String str59 = request56.getMethod();
        retrofit.mime.TypedOutput typedOutput60 = request56.getBody();
        java.util.List<retrofit.client.Header> headerList61 = request56.getHeaders();
        java.lang.String str62 = request56.getUrl();
        java.lang.String str63 = request56.getUrl();
        java.util.List<retrofit.client.Header> headerList64 = request56.getHeaders();
        java.util.List<retrofit.client.Header> headerList65 = request56.getHeaders();
        retrofit.mime.TypedOutput typedOutput66 = null;
        retrofit.client.Request request67 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList65, typedOutput66);
        java.lang.String str68 = request67.getMethod();
        retrofit.client.Request request69 = restAdapter0.logAndReplaceRequest(request67);
        java.util.List<retrofit.client.Header> headerList70 = request67.getHeaders();
        java.util.List<retrofit.client.Header> headerList71 = request67.getHeaders();
        java.lang.String str72 = request67.getUrl();
        java.lang.String str73 = request67.getMethod();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(headerArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(headerList58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNull(typedOutput60);
        org.junit.Assert.assertNotNull(headerList61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(headerList64);
        org.junit.Assert.assertNotNull(headerList65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Retrofit-Idle" + "'", str68, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(headerList70);
        org.junit.Assert.assertNotNull(headerList71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Retrofit-Idle" + "'", str72, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Retrofit-Idle" + "'", str73, "Retrofit-Idle");
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.Profiler profiler11 = null;
        builder10.profiler = profiler11;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder10.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter restAdapter15 = builder10.build();
        retrofit.converter.Converter converter16 = restAdapter15.converter;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter15.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNull(logLevel19);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        java.util.concurrent.Executor executor9 = builder4.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter10.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.ErrorHandler errorHandler27 = null;
        restAdapter26.errorHandler = errorHandler27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder29.setLog(log34);
        retrofit.RestAdapter restAdapter36 = builder29.build();
        retrofit.converter.Converter converter37 = null;
        builder29.converter = converter37;
        retrofit.ErrorHandler errorHandler39 = null;
        builder29.errorHandler = errorHandler39;
        retrofit.RequestInterceptor requestInterceptor41 = builder29.requestInterceptor;
        restAdapter26.requestInterceptor = requestInterceptor41;
        restAdapter10.requestInterceptor = requestInterceptor41;
        retrofit.converter.Converter converter44 = restAdapter10.converter;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.RestAdapter.Log log47 = builder45.log;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.RestAdapter.LogLevel logLevel50 = builder48.logLevel;
        builder48.ensureSaneDefaults();
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder60.setLog(log65);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter67.logLevel = logLevel69;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        restAdapter67.requestInterceptor = requestInterceptor71;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter67.logLevel = logLevel73;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log65, logLevel73);
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder82 = builder76.setLog(log81);
        restAdapter75.log = log81;
        builder48.log = log81;
        java.util.concurrent.Executor executor85 = null;
        builder48.httpExecutor = executor85;
        retrofit.converter.Converter converter87 = null;
        builder48.converter = converter87;
        retrofit.ErrorHandler errorHandler89 = builder48.errorHandler;
        retrofit.RestAdapter.Builder builder90 = builder45.setErrorHandler(errorHandler89);
        restAdapter10.errorHandler = errorHandler89;
        builder4.errorHandler = errorHandler89;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor10 = builder8.requestInterceptor;
        retrofit.RestAdapter.Log log11 = builder8.log;
        retrofit.RequestInterceptor requestInterceptor12 = builder8.requestInterceptor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.converter.Converter converter16 = null;
        restAdapter13.converter = converter16;
        retrofit.RestAdapter.Log log18 = restAdapter13.log;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter13.getLogLevel();
        retrofit.client.Client.Provider provider21 = restAdapter13.clientProvider;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder26 = builder22.setServer("hi!");
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder22.setLog(log27);
        retrofit.RestAdapter restAdapter29 = builder22.build();
        java.util.concurrent.Executor executor30 = restAdapter29.httpExecutor;
        java.util.concurrent.Executor executor31 = restAdapter29.httpExecutor;
        restAdapter13.httpExecutor = executor31;
        builder8.httpExecutor = executor31;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNotNull(executor31);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        java.util.concurrent.Executor executor20 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder26 = builder22.setServer("hi!");
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder29.setLog(log34);
        retrofit.RestAdapter restAdapter36 = builder29.build();
        retrofit.converter.Converter converter37 = null;
        builder29.converter = converter37;
        retrofit.ErrorHandler errorHandler39 = null;
        builder29.errorHandler = errorHandler39;
        retrofit.RequestInterceptor requestInterceptor41 = builder29.requestInterceptor;
        builder26.requestInterceptor = requestInterceptor41;
        retrofit.ErrorHandler errorHandler43 = builder26.errorHandler;
        builder26.ensureSaneDefaults();
        retrofit.Profiler profiler45 = builder26.profiler;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor47 = restAdapter46.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        restAdapter46.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter46.getLogLevel();
        retrofit.client.Client.Provider provider51 = null;
        restAdapter46.clientProvider = provider51;
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter46.logLevel;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter54.logLevel = logLevel56;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        restAdapter54.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter54.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter63 = builder62.converter;
        retrofit.Profiler profiler64 = null;
        builder62.profiler = profiler64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.client.Client.Provider provider69 = null;
        builder66.clientProvider = provider69;
        retrofit.RestAdapter.Builder builder72 = builder66.setServer("hi!");
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder73.setLog(log78);
        retrofit.RestAdapter restAdapter80 = builder73.build();
        java.util.concurrent.Executor executor81 = restAdapter80.httpExecutor;
        builder72.callbackExecutor = executor81;
        builder62.callbackExecutor = executor81;
        restAdapter54.httpExecutor = executor81;
        restAdapter46.callbackExecutor = executor81;
        builder26.httpExecutor = executor81;
        restAdapter0.callbackExecutor = executor81;
        java.lang.Class<?> wildcardClass88 = restAdapter0.getClass();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter22.requestInterceptor = requestInterceptor24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        restAdapter22.log = log34;
        retrofit.ErrorHandler errorHandler38 = null;
        restAdapter22.errorHandler = errorHandler38;
        retrofit.converter.Converter converter40 = null;
        restAdapter22.converter = converter40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter50.requestInterceptor = requestInterceptor52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        restAdapter50.log = log62;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean67 = logLevel66.log();
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log62, logLevel66);
        restAdapter22.logLevel = logLevel66;
        restAdapter18.logLevel = logLevel66;
        retrofit.Profiler profiler71 = restAdapter18.profiler;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        restAdapter18.requestInterceptor = requestInterceptor72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder74.setLog(log79);
        retrofit.RestAdapter restAdapter81 = builder74.build();
        java.util.concurrent.Executor executor82 = restAdapter81.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler83 = restAdapter81.new RestHandler();
        retrofit.converter.Converter converter84 = restAdapter81.converter;
        restAdapter18.converter = converter84;
        restAdapter0.converter = converter84;
        retrofit.RestAdapter.LogLevel logLevel87 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler88 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter0.logLevel;
        java.lang.Class<?> wildcardClass90 = restAdapter0.getClass();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNotNull(converter84);
        org.junit.Assert.assertNull(logLevel87);
        org.junit.Assert.assertNull(errorHandler88);
        org.junit.Assert.assertNull(logLevel89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder6.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter13 = builder12.converter;
        builder12.ensureSaneDefaults();
        retrofit.Profiler profiler15 = builder12.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(profiler15);
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.client.Client.Provider provider10 = builder7.clientProvider;
        java.util.concurrent.Executor executor11 = builder7.httpExecutor;
        builder7.ensureSaneDefaults();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        java.util.concurrent.Executor executor33 = restAdapter14.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel34;
        retrofit.converter.Converter converter36 = restAdapter14.converter;
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter14.logLevel;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = null;
        restAdapter38.httpExecutor = executor39;
        retrofit.client.Client.Provider provider41 = restAdapter38.clientProvider;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter42.requestInterceptor;
        java.util.concurrent.Executor executor44 = restAdapter42.callbackExecutor;
        retrofit.ErrorHandler errorHandler45 = restAdapter42.errorHandler;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder54.setLog(log59);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter61.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter61.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log59, logLevel67);
        log59.log("Retrofit-Idle");
        restAdapter42.log = log59;
        restAdapter38.log = log59;
        retrofit.Server server74 = restAdapter38.server;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder75.setLog(log80);
        retrofit.RestAdapter restAdapter82 = builder75.build();
        java.util.concurrent.Executor executor83 = restAdapter82.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter82.new RestHandler();
        retrofit.converter.Converter converter85 = restAdapter82.converter;
        restAdapter38.converter = converter85;
        restAdapter14.converter = converter85;
        retrofit.RestAdapter.Builder builder88 = builder7.setConverter(converter85);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(executor83);
        org.junit.Assert.assertNotNull(converter85);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.Profiler profiler28 = builder27.profiler;
        retrofit.RestAdapter.LogLevel logLevel29 = builder27.logLevel;
        restAdapter0.logLevel = logLevel29;
        java.util.concurrent.Executor executor31 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter32 = restAdapter0.converter;
        java.util.concurrent.Executor executor33 = null;
        restAdapter0.httpExecutor = executor33;
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter0.getLogLevel();
        retrofit.client.Response response37 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response39 = restAdapter0.logAndReplaceResponse("hi!", response37, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.lang.String str9 = request6.getMethod();
        retrofit.mime.TypedOutput typedOutput10 = request6.getBody();
        java.util.List<retrofit.client.Header> headerList11 = request6.getHeaders();
        java.lang.String str12 = request6.getUrl();
        java.lang.String str13 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request6.getHeaders();
        java.lang.String str15 = request6.getUrl();
        java.lang.String str16 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.Server server22 = builder0.server;
        retrofit.client.Client.Provider provider23 = builder0.clientProvider;
        retrofit.Profiler profiler24 = builder0.profiler;
        retrofit.RestAdapter.LogLevel logLevel25 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler26 = builder0.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler26);
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = builder31.callbackExecutor;
        retrofit.RestAdapter.Log log33 = builder31.log;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.setLogLevel(logLevel57);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log50, logLevel57);
        retrofit.RestAdapter.Builder builder60 = builder31.setLogLevel(logLevel57);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter61.setLogLevel(logLevel65);
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter61.getLogLevel();
        builder60.logLevel = logLevel67;
        retrofit.RestAdapter.Builder builder69 = builder29.setLogLevel(logLevel67);
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RequestInterceptor requestInterceptor71 = builder69.requestInterceptor;
        retrofit.Profiler profiler72 = null;
        builder69.profiler = profiler72;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor71);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.Profiler profiler11 = restAdapter10.profiler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.client.Client.Provider provider15 = null;
        builder12.clientProvider = provider15;
        retrofit.client.Client.Provider provider17 = builder12.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder12.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter23 = builder22.converter;
        retrofit.RestAdapter.LogLevel logLevel24 = builder22.logLevel;
        builder22.ensureSaneDefaults();
        retrofit.client.Client.Provider provider26 = null;
        builder22.clientProvider = provider26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter43.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter43.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log41, logLevel49);
        builder22.logLevel = logLevel49;
        retrofit.RestAdapter.LogLevel logLevel53 = builder22.logLevel;
        java.util.concurrent.Executor executor54 = builder22.httpExecutor;
        builder12.callbackExecutor = executor54;
        restAdapter10.callbackExecutor = executor54;
        retrofit.Server server57 = restAdapter10.server;
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter10.getLogLevel();
        java.util.concurrent.Executor executor60 = restAdapter10.httpExecutor;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor60);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.setLogLevel(logLevel4);
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.Server server7 = null;
        restAdapter0.server = server7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        java.util.concurrent.Executor executor11 = restAdapter9.callbackExecutor;
        retrofit.ErrorHandler errorHandler12 = restAdapter9.errorHandler;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = builder21.setLog(log26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter28.requestInterceptor = requestInterceptor32;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter28.logLevel = logLevel34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log26, logLevel34);
        log26.log("Retrofit-Idle");
        restAdapter9.log = log26;
        restAdapter0.log = log26;
        retrofit.RestAdapter.Log log41 = restAdapter0.log;
        java.util.concurrent.Executor executor42 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter0.new RestHandler();
        retrofit.Server server44 = restAdapter0.server;
        retrofit.converter.Converter converter45 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertNull(converter45);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.client.Client.Provider provider10 = null;
        builder7.clientProvider = provider10;
        retrofit.client.Client.Provider provider12 = builder7.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        builder19.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.converter.Converter converter25 = restAdapter24.converter;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        log26.log("");
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder30 = builder7.setLog(log26);
        retrofit.RestAdapter.Builder builder31 = builder5.setLog(log26);
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(converter25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.setLogLevel(logLevel4);
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter9.logLevel;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        builder12.logLevel = logLevel28;
        retrofit.converter.Converter converter31 = builder12.converter;
        retrofit.ErrorHandler errorHandler32 = builder12.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel33 = builder12.logLevel;
        retrofit.converter.Converter converter34 = builder12.converter;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.client.Client.Provider provider38 = null;
        builder35.clientProvider = provider38;
        retrofit.converter.Converter converter40 = null;
        builder35.converter = converter40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        retrofit.Profiler profiler53 = restAdapter52.profiler;
        java.util.concurrent.Executor executor54 = restAdapter52.httpExecutor;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter56 = builder55.converter;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter57.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter57.requestInterceptor = requestInterceptor59;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter57.log = log69;
        retrofit.ErrorHandler errorHandler73 = null;
        restAdapter57.errorHandler = errorHandler73;
        retrofit.RestAdapter.Log log75 = restAdapter57.log;
        retrofit.RestAdapter.Builder builder76 = builder55.setLog(log75);
        retrofit.Profiler profiler77 = builder76.profiler;
        retrofit.client.Client.Provider provider78 = builder76.clientProvider;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter81 = builder80.build();
        retrofit.RestAdapter.Log log82 = builder80.log;
        retrofit.RestAdapter restAdapter83 = builder80.build();
        retrofit.converter.Converter converter84 = null;
        restAdapter83.converter = converter84;
        retrofit.Server server86 = restAdapter83.server;
        restAdapter52.server = server86;
        retrofit.RestAdapter.Builder builder88 = builder35.setServer(server86);
        builder12.server = server86;
        restAdapter9.server = server86;
        restAdapter0.server = server86;
        retrofit.RestAdapter.LogLevel logLevel92 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(profiler77);
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.client.Client.Provider provider11 = builder6.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel12);
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        builder13.ensureSaneDefaults();
        java.util.concurrent.Executor executor16 = builder13.callbackExecutor;
        restAdapter0.httpExecutor = executor16;
        java.util.concurrent.Executor executor18 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertNull(requestInterceptor19);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter21.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter21.logLevel = logLevel27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log19, logLevel27);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder30.setLog(log35);
        restAdapter29.log = log35;
        retrofit.client.Header[] headerArray40 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList41 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList41, headerArray40);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList41, typedOutput43);
        java.lang.String str45 = request44.getUrl();
        java.lang.String str46 = request44.getUrl();
        retrofit.client.Request request47 = restAdapter29.logAndReplaceRequest(request44);
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter29.getLogLevel();
        java.util.concurrent.Executor executor49 = restAdapter29.callbackExecutor;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.client.Client.Provider provider53 = null;
        builder50.clientProvider = provider53;
        retrofit.RestAdapter.Builder builder56 = builder50.setServer("hi!");
        retrofit.Profiler profiler57 = builder50.profiler;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter59 = null;
        builder58.converter = converter59;
        retrofit.client.Client.Provider provider61 = null;
        builder58.clientProvider = provider61;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder58.requestInterceptor = requestInterceptor63;
        retrofit.Profiler profiler65 = builder58.profiler;
        retrofit.Profiler profiler66 = null;
        builder58.profiler = profiler66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = builder68.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor70 = builder68.requestInterceptor;
        java.util.concurrent.Executor executor71 = builder68.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel72 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.Profiler profiler78 = null;
        builder77.profiler = profiler78;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        builder77.requestInterceptor = requestInterceptor80;
        retrofit.RestAdapter restAdapter82 = builder77.build();
        retrofit.converter.Converter converter83 = null;
        builder77.converter = converter83;
        retrofit.client.Client.Provider provider85 = builder77.clientProvider;
        retrofit.RestAdapter.Builder builder86 = builder68.setClient(provider85);
        retrofit.RestAdapter.Builder builder87 = builder58.setClient(provider85);
        retrofit.client.Client.Provider provider88 = builder87.clientProvider;
        builder50.clientProvider = provider88;
        restAdapter29.clientProvider = provider88;
        restAdapter0.clientProvider = provider88;
        retrofit.RequestInterceptor requestInterceptor92 = restAdapter0.requestInterceptor;
        retrofit.Server server93 = restAdapter0.server;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(headerArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(profiler65);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(provider85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(provider88);
        org.junit.Assert.assertNull(requestInterceptor92);
        org.junit.Assert.assertNull(server93);
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter4.logLevel = logLevel6;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor10 = restAdapter4.httpExecutor;
        retrofit.Server server11 = null;
        restAdapter4.server = server11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.ErrorHandler errorHandler16 = restAdapter13.errorHandler;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter32.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter32.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log30, logLevel38);
        log30.log("Retrofit-Idle");
        restAdapter13.log = log30;
        restAdapter4.log = log30;
        log30.log("Retrofit-Idle");
        restAdapter0.log = log30;
        retrofit.ErrorHandler errorHandler48 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor49 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(requestInterceptor49);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.Profiler profiler6 = builder5.profiler;
        retrofit.client.Client.Provider provider7 = builder5.clientProvider;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder16.setLog(log21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter23.logLevel = logLevel25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter23.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter23.logLevel = logLevel29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log21, logLevel29);
        log21.log("hi!");
        builder5.log = log21;
        retrofit.Profiler profiler35 = null;
        builder5.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter47.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        restAdapter47.requestInterceptor = requestInterceptor49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        restAdapter47.log = log59;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean64 = logLevel63.log();
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log59, logLevel63);
        retrofit.RestAdapter.Builder builder66 = builder37.setLog(log59);
        log59.log("hi!");
        retrofit.RestAdapter.Builder builder69 = builder5.setLog(log59);
        retrofit.RequestInterceptor requestInterceptor70 = builder5.requestInterceptor;
        retrofit.client.Client client71 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder72 = builder5.setClient(client71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(requestInterceptor70);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log8 = restAdapter7.log;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.Profiler profiler10 = restAdapter7.profiler;
        retrofit.Profiler profiler11 = null;
        restAdapter7.profiler = profiler11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter7.log = log21;
        restAdapter0.log = log21;
        retrofit.ErrorHandler errorHandler26 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.RequestInterceptor requestInterceptor49 = builder27.requestInterceptor;
        java.util.concurrent.Executor executor50 = builder27.httpExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("hi!");
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder51.setLog(log56);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter59 = builder58.converter;
        retrofit.RestAdapter.LogLevel logLevel60 = builder58.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder57.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter63 = builder62.converter;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor65 = restAdapter64.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        restAdapter64.requestInterceptor = requestInterceptor66;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel77);
        restAdapter64.log = log76;
        retrofit.ErrorHandler errorHandler80 = null;
        restAdapter64.errorHandler = errorHandler80;
        retrofit.RestAdapter.Log log82 = restAdapter64.log;
        retrofit.RestAdapter.Builder builder83 = builder62.setLog(log82);
        retrofit.RequestInterceptor requestInterceptor84 = builder62.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor85 = builder62.requestInterceptor;
        retrofit.RestAdapter.Builder builder87 = builder62.setServer("hi!");
        retrofit.Server server88 = builder62.server;
        retrofit.RestAdapter.Builder builder89 = builder57.setServer(server88);
        retrofit.RestAdapter.Builder builder90 = builder27.setServer(server88);
        java.util.concurrent.Executor executor91 = builder27.callbackExecutor;
        retrofit.RestAdapter.Log log92 = builder27.log;
        restAdapter0.log = log92;
        retrofit.Profiler profiler94 = restAdapter0.profiler;
        retrofit.Profiler profiler95 = null;
        restAdapter0.profiler = profiler95;
        retrofit.Profiler profiler97 = null;
        restAdapter0.profiler = profiler97;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(requestInterceptor84);
        org.junit.Assert.assertNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(server88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(executor91);
        org.junit.Assert.assertNotNull(log92);
        org.junit.Assert.assertNull(profiler94);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Log log25 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder26 = builder5.setLog(log25);
        restAdapter0.log = log25;
        retrofit.Profiler profiler28 = null;
        restAdapter0.profiler = profiler28;
        retrofit.converter.Converter converter30 = null;
        restAdapter0.converter = converter30;
        java.util.concurrent.Executor executor32 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor33 = null;
        restAdapter0.callbackExecutor = executor33;
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler36 = null;
        restAdapter0.profiler = profiler36;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor32);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.converter.Converter converter22 = builder0.converter;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = null;
        builder23.converter = converter24;
        retrofit.client.Client.Provider provider26 = null;
        builder23.clientProvider = provider26;
        retrofit.RestAdapter.Builder builder29 = builder23.setServer("hi!");
        retrofit.Server server30 = builder23.server;
        retrofit.RestAdapter.Builder builder31 = builder0.setServer(server30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.Profiler profiler36 = restAdapter32.profiler;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter32.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter32.requestInterceptor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log40 = restAdapter39.log;
        java.util.concurrent.Executor executor41 = restAdapter39.callbackExecutor;
        retrofit.Profiler profiler42 = restAdapter39.profiler;
        retrofit.Profiler profiler43 = null;
        restAdapter39.profiler = profiler43;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        restAdapter39.log = log53;
        restAdapter32.log = log53;
        log53.log("hi!");
        builder31.log = log53;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter62 = builder61.converter;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter63.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter63.requestInterceptor = requestInterceptor65;
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel76);
        restAdapter63.log = log75;
        retrofit.ErrorHandler errorHandler79 = null;
        restAdapter63.errorHandler = errorHandler79;
        retrofit.RestAdapter.Log log81 = restAdapter63.log;
        retrofit.RestAdapter.Builder builder82 = builder61.setLog(log81);
        retrofit.RequestInterceptor requestInterceptor83 = builder61.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor84 = builder61.requestInterceptor;
        retrofit.RestAdapter.Builder builder86 = builder61.setServer("hi!");
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor88 = builder87.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor89 = builder87.requestInterceptor;
        retrofit.Profiler profiler90 = builder87.profiler;
        retrofit.RestAdapter.LogLevel logLevel91 = builder87.logLevel;
        retrofit.RestAdapter.Builder builder92 = builder86.setLogLevel(logLevel91);
        retrofit.RestAdapter.LogLevel logLevel93 = builder92.logLevel;
        builder31.logLevel = logLevel93;
        retrofit.converter.Converter converter95 = builder31.converter;
        java.util.concurrent.Executor executor96 = builder31.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter62);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(requestInterceptor83);
        org.junit.Assert.assertNull(requestInterceptor84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(executor88);
        org.junit.Assert.assertNull(requestInterceptor89);
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter95);
        org.junit.Assert.assertNull(executor96);
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter0.requestInterceptor = requestInterceptor9;
        java.util.concurrent.Executor executor11 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(logLevel12);
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        java.lang.String str13 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput14 = request10.getBody();
        java.util.List<retrofit.client.Header> headerList15 = request10.getHeaders();
        java.lang.String str16 = request10.getUrl();
        java.lang.String str17 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("Retrofit-Idle", "", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", headerList18, typedOutput21);
        java.lang.String str23 = request22.getMethod();
        java.lang.String str24 = request22.getUrl();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.Profiler profiler8 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log9 = restAdapter0.log;
        retrofit.Server server10 = restAdapter0.server;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(server10);
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.getHeaders();
        java.lang.String str8 = request6.getMethod();
        java.lang.String str9 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getMethod();
        java.lang.String str8 = request6.getUrl();
        retrofit.mime.TypedOutput typedOutput9 = request6.getBody();
        java.lang.String str10 = request6.getUrl();
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        java.lang.String str12 = request6.getUrl();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider10 = builder9.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean12 = logLevel11.log();
        builder9.logLevel = logLevel11;
        builder0.logLevel = logLevel11;
        retrofit.RestAdapter.Log log15 = builder0.log;
        retrofit.converter.Converter converter16 = builder0.converter;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder17.setLog(log22);
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        builder17.logLevel = logLevel33;
        retrofit.converter.Converter converter36 = builder17.converter;
        retrofit.ErrorHandler errorHandler37 = builder17.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel38 = builder17.logLevel;
        retrofit.Server server39 = builder17.server;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = builder40.converter;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter42.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter42.requestInterceptor = requestInterceptor44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        restAdapter42.log = log54;
        retrofit.ErrorHandler errorHandler58 = null;
        restAdapter42.errorHandler = errorHandler58;
        retrofit.RestAdapter.Log log60 = restAdapter42.log;
        retrofit.RestAdapter.Builder builder61 = builder40.setLog(log60);
        retrofit.RequestInterceptor requestInterceptor62 = builder40.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor63 = builder40.requestInterceptor;
        retrofit.RestAdapter.Log log64 = builder40.log;
        builder17.log = log64;
        retrofit.RestAdapter restAdapter66 = builder17.build();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.client.Client.Provider provider70 = null;
        builder67.clientProvider = provider70;
        retrofit.RestAdapter.Builder builder73 = builder67.setServer("hi!");
        java.util.concurrent.Executor executor74 = builder67.callbackExecutor;
        java.util.concurrent.Executor executor75 = builder67.callbackExecutor;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = null;
        builder76.httpExecutor = executor77;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.client.Client.Provider provider81 = builder80.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean83 = logLevel82.log();
        builder80.logLevel = logLevel82;
        retrofit.RestAdapter restAdapter85 = builder80.build();
        retrofit.ErrorHandler errorHandler86 = builder80.errorHandler;
        retrofit.RestAdapter.Builder builder87 = builder67.setErrorHandler(errorHandler86);
        retrofit.RestAdapter.Builder builder88 = builder17.setErrorHandler(errorHandler86);
        retrofit.Server server89 = builder17.server;
        builder0.server = server89;
        retrofit.RequestInterceptor requestInterceptor91 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server39);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(provider81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(server89);
        org.junit.Assert.assertNull(requestInterceptor91);
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel9 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = builder10.converter;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter12.requestInterceptor = requestInterceptor14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        restAdapter12.log = log24;
        retrofit.ErrorHandler errorHandler28 = null;
        restAdapter12.errorHandler = errorHandler28;
        retrofit.RestAdapter.Log log30 = restAdapter12.log;
        retrofit.RestAdapter.Builder builder31 = builder10.setLog(log30);
        retrofit.Profiler profiler32 = builder31.profiler;
        retrofit.RestAdapter.LogLevel logLevel33 = builder31.logLevel;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder35 = builder31.setLogLevel(logLevel34);
        builder0.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.client.Client.Provider provider40 = null;
        builder37.clientProvider = provider40;
        retrofit.client.Client.Provider provider42 = builder37.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder44 = builder37.setLogLevel(logLevel43);
        retrofit.client.Client.Provider provider45 = builder37.clientProvider;
        retrofit.Profiler profiler46 = builder37.profiler;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder47.logLevel = logLevel52;
        retrofit.converter.Converter converter54 = null;
        builder47.converter = converter54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter56.requestInterceptor;
        retrofit.converter.Converter converter58 = restAdapter56.converter;
        java.util.concurrent.Executor executor59 = null;
        restAdapter56.callbackExecutor = executor59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor62 = null;
        restAdapter61.httpExecutor = executor62;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        restAdapter61.requestInterceptor = requestInterceptor64;
        retrofit.RestAdapter.Log log66 = restAdapter61.log;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter61.logLevel = logLevel67;
        restAdapter56.logLevel = logLevel67;
        retrofit.RestAdapter.Builder builder70 = builder47.setLogLevel(logLevel67);
        builder37.logLevel = logLevel67;
        boolean boolean72 = logLevel67.log();
        builder0.logLevel = logLevel67;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = builder74.callbackExecutor;
        retrofit.Server server76 = null;
        retrofit.client.Client.Provider provider77 = null;
        java.util.concurrent.Executor executor78 = null;
        java.util.concurrent.Executor executor79 = null;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        retrofit.converter.Converter converter81 = null;
        retrofit.Profiler profiler82 = null;
        retrofit.ErrorHandler errorHandler83 = null;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server76, provider77, executor78, executor79, requestInterceptor80, converter81, profiler82, errorHandler83, log84, logLevel85);
        retrofit.RestAdapter.Builder builder87 = builder74.setLogLevel(logLevel85);
        builder87.ensureSaneDefaults();
        retrofit.Server server89 = builder87.server;
        builder87.ensureSaneDefaults();
        retrofit.converter.Converter converter91 = builder87.converter;
        retrofit.RestAdapter.Builder builder92 = builder0.setConverter(converter91);
        retrofit.client.Client.Provider provider93 = builder92.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(server89);
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(provider93);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = builder31.callbackExecutor;
        retrofit.RestAdapter.Log log33 = builder31.log;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.setLogLevel(logLevel57);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log50, logLevel57);
        retrofit.RestAdapter.Builder builder60 = builder31.setLogLevel(logLevel57);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter61.setLogLevel(logLevel65);
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter61.getLogLevel();
        builder60.logLevel = logLevel67;
        retrofit.RestAdapter.Builder builder69 = builder29.setLogLevel(logLevel67);
        retrofit.converter.Converter converter70 = builder29.converter;
        retrofit.Profiler profiler71 = builder29.profiler;
        retrofit.RestAdapter.LogLevel logLevel72 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.client.Client.Provider provider76 = null;
        builder73.clientProvider = provider76;
        retrofit.RestAdapter.Builder builder79 = builder73.setServer("hi!");
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.httpExecutor = executor81;
        retrofit.RestAdapter.Builder builder84 = builder80.setServer("hi!");
        retrofit.Profiler profiler85 = null;
        builder84.profiler = profiler85;
        retrofit.RequestInterceptor requestInterceptor87 = null;
        builder84.requestInterceptor = requestInterceptor87;
        retrofit.RestAdapter restAdapter89 = builder84.build();
        retrofit.converter.Converter converter90 = restAdapter89.converter;
        retrofit.RestAdapter.Builder builder91 = builder73.setConverter(converter90);
        retrofit.RestAdapter.LogLevel logLevel92 = builder91.logLevel;
        builder29.logLevel = logLevel92;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter94 = builder29.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(converter70);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(converter90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", headerList14, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", headerList14, typedOutput19);
        java.lang.String str21 = request20.getUrl();
        retrofit.mime.TypedOutput typedOutput22 = request20.getBody();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(typedOutput22);
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RestAdapter.LogLevel logLevel7 = builder4.logLevel;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.converter.Converter converter26 = null;
        restAdapter8.converter = converter26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter36.requestInterceptor = requestInterceptor38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        restAdapter36.log = log48;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log48, logLevel52);
        restAdapter8.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder56 = builder4.setLogLevel(logLevel52);
        java.util.concurrent.Executor executor57 = builder4.httpExecutor;
        retrofit.ErrorHandler errorHandler58 = builder4.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(errorHandler58);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        java.util.concurrent.Executor executor4 = null;
        restAdapter0.callbackExecutor = executor4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.Profiler profiler6 = builder5.profiler;
        retrofit.client.Client.Provider provider7 = builder5.clientProvider;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder16.setLog(log21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter23.logLevel = logLevel25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter23.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter23.logLevel = logLevel29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log21, logLevel29);
        log21.log("hi!");
        builder5.log = log21;
        retrofit.Profiler profiler35 = null;
        builder5.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter47.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        restAdapter47.requestInterceptor = requestInterceptor49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        restAdapter47.log = log59;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean64 = logLevel63.log();
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log59, logLevel63);
        retrofit.RestAdapter.Builder builder66 = builder37.setLog(log59);
        log59.log("hi!");
        retrofit.RestAdapter.Builder builder69 = builder5.setLog(log59);
        java.util.concurrent.Executor executor70 = builder5.callbackExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(executor70);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter5.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter5.logLevel;
        retrofit.converter.Converter converter8 = null;
        restAdapter5.converter = converter8;
        retrofit.ErrorHandler errorHandler10 = restAdapter5.errorHandler;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.client.Client.Provider provider14 = null;
        builder11.clientProvider = provider14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder11.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.Profiler profiler23 = null;
        builder22.profiler = profiler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = builder25.build();
        retrofit.converter.Converter converter33 = null;
        builder25.converter = converter33;
        retrofit.ErrorHandler errorHandler35 = null;
        builder25.errorHandler = errorHandler35;
        retrofit.RequestInterceptor requestInterceptor37 = builder25.requestInterceptor;
        builder22.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter.Builder builder39 = builder11.setRequestInterceptor(requestInterceptor37);
        restAdapter5.requestInterceptor = requestInterceptor37;
        restAdapter0.requestInterceptor = requestInterceptor37;
        java.util.concurrent.Executor executor42 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder44.logLevel = logLevel49;
        retrofit.converter.Converter converter51 = null;
        builder44.converter = converter51;
        retrofit.client.Client.Provider provider53 = null;
        builder44.clientProvider = provider53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter56 = builder55.converter;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter57.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter57.requestInterceptor = requestInterceptor59;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter57.log = log69;
        retrofit.ErrorHandler errorHandler73 = null;
        restAdapter57.errorHandler = errorHandler73;
        retrofit.RestAdapter.Log log75 = restAdapter57.log;
        retrofit.RestAdapter.Builder builder76 = builder55.setLog(log75);
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("hi!");
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder84 = builder78.setLog(log83);
        retrofit.RestAdapter restAdapter85 = builder78.build();
        java.util.concurrent.Executor executor86 = restAdapter85.httpExecutor;
        builder55.callbackExecutor = executor86;
        builder44.httpExecutor = executor86;
        restAdapter0.callbackExecutor = executor86;
        retrofit.RestAdapter.Builder builder90 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor91 = null;
        builder90.httpExecutor = executor91;
        retrofit.RestAdapter.Builder builder94 = builder90.setServer("hi!");
        retrofit.RestAdapter restAdapter95 = builder94.build();
        retrofit.RequestInterceptor requestInterceptor96 = builder94.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor96;
        retrofit.RequestInterceptor requestInterceptor98 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(restAdapter95);
        org.junit.Assert.assertNotNull(requestInterceptor96);
        org.junit.Assert.assertNotNull(requestInterceptor98);
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.Profiler profiler19 = builder0.profiler;
        retrofit.Profiler profiler20 = null;
        builder0.profiler = profiler20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter22.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter22.logLevel;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter30 = null;
        restAdapter29.converter = converter30;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter29.requestInterceptor = requestInterceptor32;
        retrofit.Profiler profiler34 = restAdapter29.profiler;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        restAdapter29.logLevel = logLevel35;
        java.util.concurrent.Executor executor38 = restAdapter29.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter29.getLogLevel();
        restAdapter22.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder0.setLogLevel(logLevel39);
        retrofit.RestAdapter.Log log42 = builder0.log;
        retrofit.ErrorHandler errorHandler43 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder45 = builder0.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor46 = builder45.httpExecutor;
        retrofit.converter.Converter converter47 = null;
        builder45.converter = converter47;
        retrofit.Profiler profiler49 = builder45.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(profiler49);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter19.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter19.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log17, logLevel25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        restAdapter27.log = log33;
        builder0.log = log33;
        retrofit.Server server37 = builder0.server;
        java.util.concurrent.Executor executor38 = null;
        builder0.httpExecutor = executor38;
        retrofit.Profiler profiler40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder41 = builder0.setProfiler(profiler40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(server37);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter4.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter4.requestInterceptor = requestInterceptor6;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter4.getLogLevel();
        retrofit.client.Client.Provider provider9 = null;
        restAdapter4.clientProvider = provider9;
        retrofit.ErrorHandler errorHandler11 = restAdapter4.errorHandler;
        retrofit.client.Client.Provider provider12 = restAdapter4.clientProvider;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter15.requestInterceptor = requestInterceptor17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        restAdapter15.log = log27;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter15.errorHandler = errorHandler31;
        retrofit.RestAdapter.Log log33 = restAdapter15.log;
        retrofit.RestAdapter.Builder builder34 = builder13.setLog(log33);
        retrofit.Profiler profiler35 = builder34.profiler;
        retrofit.Profiler profiler36 = builder34.profiler;
        java.util.concurrent.Executor executor37 = builder34.callbackExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter restAdapter45 = builder38.build();
        java.util.concurrent.Executor executor46 = restAdapter45.httpExecutor;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.client.Client.Provider provider50 = null;
        builder47.clientProvider = provider50;
        retrofit.RestAdapter.Builder builder53 = builder47.setServer("hi!");
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder54.setLog(log59);
        retrofit.RestAdapter restAdapter61 = builder54.build();
        java.util.concurrent.Executor executor62 = restAdapter61.httpExecutor;
        builder53.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = builder34.setExecutors(executor46, executor62);
        restAdapter4.callbackExecutor = executor46;
        restAdapter0.httpExecutor = executor46;
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter0.logLevel;
        retrofit.RestAdapter.Log log68 = restAdapter0.log;
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(executor46);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log68);
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = builder9.callbackExecutor;
        retrofit.RestAdapter.Log log11 = builder9.log;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter31.logLevel = logLevel33;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.setLogLevel(logLevel35);
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log28, logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder9.setLogLevel(logLevel35);
        builder4.logLevel = logLevel35;
        retrofit.Profiler profiler40 = builder4.profiler;
        retrofit.Profiler profiler41 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder42 = builder4.setProfiler(profiler41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(profiler40);
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        builder9.logLevel = logLevel25;
        retrofit.Profiler profiler28 = builder9.profiler;
        retrofit.Profiler profiler29 = null;
        builder9.profiler = profiler29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter31.logLevel = logLevel33;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter31.requestInterceptor = requestInterceptor35;
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter31.logLevel;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter39 = null;
        restAdapter38.converter = converter39;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter38.requestInterceptor = requestInterceptor41;
        retrofit.Profiler profiler43 = restAdapter38.profiler;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        restAdapter38.logLevel = logLevel44;
        java.util.concurrent.Executor executor47 = restAdapter38.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter38.getLogLevel();
        restAdapter31.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder50 = builder9.setLogLevel(logLevel48);
        retrofit.RestAdapter.Log log51 = builder9.log;
        retrofit.RestAdapter.Log log52 = builder9.log;
        restAdapter0.log = log52;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(log52);
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.converter.Converter converter11 = restAdapter9.converter;
        java.util.concurrent.Executor executor12 = null;
        restAdapter9.callbackExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = null;
        restAdapter14.httpExecutor = executor15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter14.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Log log19 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel20;
        restAdapter9.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder23 = builder0.setLogLevel(logLevel20);
        retrofit.RestAdapter.Log log24 = builder23.log;
        retrofit.converter.Converter converter25 = builder23.converter;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.RestAdapter.LogLevel logLevel28 = builder26.logLevel;
        builder26.ensureSaneDefaults();
        retrofit.client.Client.Provider provider30 = null;
        builder26.clientProvider = provider30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder40.setLog(log45);
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter47.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter47.logLevel = logLevel53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log45, logLevel53);
        builder26.logLevel = logLevel53;
        retrofit.RestAdapter.LogLevel logLevel57 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder58 = builder23.setLogLevel(logLevel57);
        java.util.concurrent.Executor executor59 = builder58.callbackExecutor;
        retrofit.Profiler profiler60 = null;
        builder58.profiler = profiler60;
        builder58.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler63 = builder58.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNotNull(errorHandler63);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.Profiler profiler14 = null;
        builder13.profiler = profiler14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder13.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter restAdapter18 = builder13.build();
        retrofit.converter.Converter converter19 = restAdapter18.converter;
        retrofit.RestAdapter.Builder builder20 = builder0.setConverter(converter19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log22 = restAdapter21.log;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = null;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter27.logLevel;
        retrofit.converter.Converter converter30 = null;
        restAdapter27.converter = converter30;
        retrofit.ErrorHandler errorHandler32 = restAdapter27.errorHandler;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log34 = restAdapter33.log;
        retrofit.ErrorHandler errorHandler35 = restAdapter33.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.Profiler profiler42 = null;
        builder41.profiler = profiler42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        retrofit.RestAdapter restAdapter51 = builder44.build();
        retrofit.converter.Converter converter52 = null;
        builder44.converter = converter52;
        retrofit.ErrorHandler errorHandler54 = null;
        builder44.errorHandler = errorHandler54;
        retrofit.RequestInterceptor requestInterceptor56 = builder44.requestInterceptor;
        builder41.requestInterceptor = requestInterceptor56;
        restAdapter33.requestInterceptor = requestInterceptor56;
        restAdapter27.requestInterceptor = requestInterceptor56;
        restAdapter21.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.Builder builder61 = builder20.setRequestInterceptor(requestInterceptor56);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = builder62.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor64 = builder62.requestInterceptor;
        retrofit.ErrorHandler errorHandler65 = null;
        builder62.errorHandler = errorHandler65;
        retrofit.converter.Converter converter67 = null;
        builder62.converter = converter67;
        retrofit.client.Client.Provider provider69 = builder62.clientProvider;
        retrofit.RequestInterceptor requestInterceptor70 = builder62.requestInterceptor;
        retrofit.Server server71 = builder62.server;
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel81);
        log80.log("hi!");
        log80.log("Retrofit-Idle");
        builder62.log = log80;
        retrofit.RestAdapter.Builder builder88 = builder20.setLog(log80);
        retrofit.ErrorHandler errorHandler89 = builder88.errorHandler;
        retrofit.client.Client.Provider provider90 = builder88.clientProvider;
        retrofit.ErrorHandler errorHandler91 = builder88.errorHandler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(converter19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(errorHandler89);
        org.junit.Assert.assertNull(provider90);
        org.junit.Assert.assertNull(errorHandler91);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.Profiler profiler14 = null;
        builder13.profiler = profiler14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder13.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter restAdapter18 = builder13.build();
        retrofit.converter.Converter converter19 = restAdapter18.converter;
        retrofit.RestAdapter.Builder builder20 = builder0.setConverter(converter19);
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder26 = builder22.setServer("hi!");
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        log29.log("");
        builder26.log = log29;
        retrofit.Server server33 = builder26.server;
        builder20.server = server33;
        retrofit.RequestInterceptor requestInterceptor35 = builder20.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(converter19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNull(requestInterceptor35);
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.client.Client.Provider provider8 = null;
        builder5.clientProvider = provider8;
        retrofit.RestAdapter.Builder builder11 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter12.logLevel = logLevel14;
        retrofit.Profiler profiler16 = restAdapter12.profiler;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter12.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter12.requestInterceptor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log20 = restAdapter19.log;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.Profiler profiler22 = restAdapter19.profiler;
        retrofit.Profiler profiler23 = null;
        restAdapter19.profiler = profiler23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter19.log = log33;
        restAdapter12.log = log33;
        retrofit.RestAdapter.Builder builder38 = builder5.setLog(log33);
        java.util.concurrent.Executor executor39 = builder38.callbackExecutor;
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter41.requestInterceptor;
        java.util.concurrent.Executor executor43 = restAdapter41.callbackExecutor;
        retrofit.converter.Converter converter44 = null;
        restAdapter41.converter = converter44;
        retrofit.RestAdapter.Log log46 = restAdapter41.log;
        retrofit.ErrorHandler errorHandler47 = restAdapter41.errorHandler;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.client.Client.Provider provider51 = null;
        builder48.clientProvider = provider51;
        retrofit.RestAdapter.Builder builder54 = builder48.setServer("hi!");
        retrofit.Profiler profiler55 = builder48.profiler;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter57 = null;
        builder56.converter = converter57;
        retrofit.client.Client.Provider provider59 = null;
        builder56.clientProvider = provider59;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        builder56.requestInterceptor = requestInterceptor61;
        retrofit.Profiler profiler63 = builder56.profiler;
        retrofit.Profiler profiler64 = null;
        builder56.profiler = profiler64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = builder66.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor68 = builder66.requestInterceptor;
        java.util.concurrent.Executor executor69 = builder66.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel70 = builder66.logLevel;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.Profiler profiler76 = null;
        builder75.profiler = profiler76;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        builder75.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter restAdapter80 = builder75.build();
        retrofit.converter.Converter converter81 = null;
        builder75.converter = converter81;
        retrofit.client.Client.Provider provider83 = builder75.clientProvider;
        retrofit.RestAdapter.Builder builder84 = builder66.setClient(provider83);
        retrofit.RestAdapter.Builder builder85 = builder56.setClient(provider83);
        retrofit.client.Client.Provider provider86 = builder85.clientProvider;
        builder48.clientProvider = provider86;
        restAdapter41.clientProvider = provider86;
        builder38.clientProvider = provider86;
        retrofit.RequestInterceptor requestInterceptor90 = builder38.requestInterceptor;
        retrofit.ErrorHandler errorHandler91 = builder38.errorHandler;
        retrofit.client.Client.Provider provider92 = builder38.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel93 = builder38.logLevel;
        restAdapter0.logLevel = logLevel93;
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(profiler63);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(provider83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(provider86);
        org.junit.Assert.assertNotNull(requestInterceptor90);
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNotNull(provider92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log4 = restAdapter3.log;
        retrofit.ErrorHandler errorHandler5 = restAdapter3.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter3.new RestHandler();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        restAdapter3.requestInterceptor = requestInterceptor26;
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter3.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.client.Client.Provider provider35 = null;
        builder32.clientProvider = provider35;
        retrofit.RestAdapter.Builder builder38 = builder32.setServer("hi!");
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter39.requestInterceptor;
        java.util.concurrent.Executor executor41 = restAdapter39.callbackExecutor;
        retrofit.converter.Converter converter42 = null;
        restAdapter39.converter = converter42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter45 = builder44.converter;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor47 = restAdapter46.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        restAdapter46.requestInterceptor = requestInterceptor48;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        restAdapter46.log = log58;
        retrofit.ErrorHandler errorHandler62 = null;
        restAdapter46.errorHandler = errorHandler62;
        retrofit.RestAdapter.Log log64 = restAdapter46.log;
        retrofit.RestAdapter.Builder builder65 = builder44.setLog(log64);
        restAdapter39.log = log64;
        retrofit.RestAdapter.Builder builder67 = builder32.setLog(log64);
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter69 = builder68.converter;
        retrofit.Profiler profiler70 = null;
        builder68.profiler = profiler70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.client.Client.Provider provider75 = null;
        builder72.clientProvider = provider75;
        retrofit.RestAdapter.Builder builder78 = builder72.setServer("hi!");
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder85 = builder79.setLog(log84);
        retrofit.RestAdapter restAdapter86 = builder79.build();
        java.util.concurrent.Executor executor87 = restAdapter86.httpExecutor;
        builder78.callbackExecutor = executor87;
        builder68.callbackExecutor = executor87;
        builder67.httpExecutor = executor87;
        restAdapter0.httpExecutor = executor87;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(converter69);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(executor87);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.client.Client.Provider provider19 = null;
        builder16.clientProvider = provider19;
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = builder23.build();
        java.util.concurrent.Executor executor31 = restAdapter30.httpExecutor;
        builder22.callbackExecutor = executor31;
        restAdapter10.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = builder34.converter;
        retrofit.Profiler profiler36 = null;
        builder34.profiler = profiler36;
        retrofit.ErrorHandler errorHandler38 = null;
        builder34.errorHandler = errorHandler38;
        retrofit.Server server40 = builder34.server;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter42 = builder41.converter;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter43.requestInterceptor = requestInterceptor45;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        restAdapter43.log = log55;
        retrofit.ErrorHandler errorHandler59 = null;
        restAdapter43.errorHandler = errorHandler59;
        retrofit.RestAdapter.Log log61 = restAdapter43.log;
        retrofit.RestAdapter.Builder builder62 = builder41.setLog(log61);
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.RestAdapter.Builder builder68 = builder64.setServer("hi!");
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder64.setLog(log69);
        retrofit.RestAdapter restAdapter71 = builder64.build();
        java.util.concurrent.Executor executor72 = restAdapter71.httpExecutor;
        builder41.callbackExecutor = executor72;
        builder34.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder0.setExecutors(executor31, executor72);
        retrofit.RestAdapter restAdapter76 = builder75.build();
        retrofit.Profiler profiler77 = null;
        restAdapter76.profiler = profiler77;
        retrofit.Profiler profiler79 = restAdapter76.profiler;
        java.lang.Throwable throwable80 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter76.logException(throwable80, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNotNull(executor72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNull(profiler79);
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.RequestInterceptor requestInterceptor33 = builder11.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = builder11.requestInterceptor;
        retrofit.RestAdapter.Builder builder36 = builder11.setServer("hi!");
        retrofit.Server server37 = builder11.server;
        retrofit.RestAdapter.Builder builder38 = builder6.setServer(server37);
        retrofit.RestAdapter restAdapter39 = builder6.build();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", headerList14, typedOutput15);
        java.lang.String str17 = request16.getMethod();
        retrofit.mime.TypedOutput typedOutput18 = request16.getBody();
        java.util.List<retrofit.client.Header> headerList19 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("hi!", "hi!", headerList19, typedOutput20);
        java.lang.String str22 = request21.getMethod();
        java.util.List<retrofit.client.Header> headerList23 = request21.getHeaders();
        java.util.List<retrofit.client.Header> headerList24 = request21.getHeaders();
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", headerList24, typedOutput25);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(headerList24);
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel27 = builder0.logLevel;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.Server server30 = restAdapter28.server;
        retrofit.client.Client.Provider provider31 = null;
        restAdapter28.clientProvider = provider31;
        retrofit.Server server33 = null;
        restAdapter28.server = server33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter36 = null;
        restAdapter35.converter = converter36;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter35.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log41 = restAdapter40.log;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter40.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        restAdapter40.logLevel = logLevel44;
        retrofit.ErrorHandler errorHandler46 = restAdapter40.errorHandler;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.Profiler profiler52 = null;
        builder51.profiler = profiler52;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        builder51.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter restAdapter56 = builder51.build();
        retrofit.converter.Converter converter57 = restAdapter56.converter;
        restAdapter40.converter = converter57;
        restAdapter35.converter = converter57;
        restAdapter28.converter = converter57;
        retrofit.RestAdapter.Builder builder61 = builder0.setConverter(converter57);
        retrofit.RestAdapter restAdapter62 = builder61.build();
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter63.logLevel;
        java.util.concurrent.Executor executor66 = restAdapter63.httpExecutor;
        retrofit.converter.Converter converter67 = null;
        restAdapter63.converter = converter67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor70 = restAdapter69.requestInterceptor;
        retrofit.converter.Converter converter71 = restAdapter69.converter;
        java.util.concurrent.Executor executor72 = null;
        restAdapter69.callbackExecutor = executor72;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor75 = null;
        restAdapter74.httpExecutor = executor75;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        restAdapter74.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter.Log log79 = restAdapter74.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter74.logLevel = logLevel80;
        restAdapter69.logLevel = logLevel80;
        restAdapter63.logLevel = logLevel80;
        restAdapter62.logLevel = logLevel80;
        retrofit.RequestInterceptor requestInterceptor85 = restAdapter62.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel86 = restAdapter62.getLogLevel();
        retrofit.converter.Converter converter87 = restAdapter62.converter;
        java.lang.Throwable throwable88 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter62.logException(throwable88, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(converter57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNull(converter71);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(requestInterceptor85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(converter87);
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        java.lang.String str13 = request10.getMethod();
        java.util.List<retrofit.client.Header> headerList14 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("Retrofit-Idle", "", headerList14, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.getHeaders();
        java.lang.String str20 = request18.getMethod();
        java.lang.String str21 = request18.getUrl();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter4.requestInterceptor;
        java.util.concurrent.Executor executor6 = restAdapter4.callbackExecutor;
        retrofit.ErrorHandler errorHandler7 = restAdapter4.errorHandler;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder16.setLog(log21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter23.logLevel = logLevel25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter23.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter23.logLevel = logLevel29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log21, logLevel29);
        log21.log("Retrofit-Idle");
        restAdapter4.log = log21;
        restAdapter0.log = log21;
        log21.log("hi!");
        log21.log("hi!");
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder0.requestInterceptor = requestInterceptor6;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.Server server11 = null;
        builder0.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = null;
        builder13.converter = converter14;
        retrofit.client.Client.Provider provider16 = null;
        builder13.clientProvider = provider16;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        builder13.requestInterceptor = requestInterceptor18;
        retrofit.Profiler profiler20 = builder13.profiler;
        retrofit.converter.Converter converter21 = builder13.converter;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder26 = builder22.setServer("hi!");
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        builder26.logLevel = logLevel28;
        retrofit.RestAdapter restAdapter31 = builder26.build();
        retrofit.ErrorHandler errorHandler32 = builder26.errorHandler;
        retrofit.RestAdapter.Builder builder33 = builder13.setErrorHandler(errorHandler32);
        retrofit.RestAdapter.Builder builder34 = builder0.setErrorHandler(errorHandler32);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.client.Client.Provider provider38 = null;
        builder35.clientProvider = provider38;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        builder35.requestInterceptor = requestInterceptor40;
        retrofit.Profiler profiler42 = builder35.profiler;
        retrofit.converter.Converter converter43 = builder35.converter;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.client.Client.Provider provider49 = builder48.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean51 = logLevel50.log();
        builder48.logLevel = logLevel50;
        retrofit.RestAdapter restAdapter53 = builder48.build();
        retrofit.ErrorHandler errorHandler54 = builder48.errorHandler;
        retrofit.RestAdapter.Builder builder55 = builder35.setErrorHandler(errorHandler54);
        retrofit.converter.Converter converter56 = builder55.converter;
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.ErrorHandler errorHandler59 = builder55.errorHandler;
        retrofit.RestAdapter.Builder builder60 = builder34.setErrorHandler(errorHandler59);
        retrofit.RestAdapter.Log log61 = builder60.log;
        retrofit.ErrorHandler errorHandler62 = builder60.errorHandler;
        retrofit.Profiler profiler63 = null;
        builder60.profiler = profiler63;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(converter10);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(errorHandler62);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.RestAdapter restAdapter16 = builder9.build();
        retrofit.converter.Converter converter17 = null;
        builder9.converter = converter17;
        retrofit.ErrorHandler errorHandler19 = null;
        builder9.errorHandler = errorHandler19;
        retrofit.RequestInterceptor requestInterceptor21 = builder9.requestInterceptor;
        builder0.requestInterceptor = requestInterceptor21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter.LogLevel logLevel25 = builder23.logLevel;
        builder23.ensureSaneDefaults();
        retrofit.Server server27 = builder23.server;
        retrofit.ErrorHandler errorHandler28 = builder23.errorHandler;
        retrofit.RestAdapter.Builder builder29 = builder0.setErrorHandler(errorHandler28);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", headerList14, typedOutput15);
        java.util.List<retrofit.client.Header> headerList17 = request16.getHeaders();
        java.lang.String str18 = request16.getUrl();
        java.util.List<retrofit.client.Header> headerList19 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("", "hi!", headerList19, typedOutput20);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList19, typedOutput22);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(headerList19);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.httpExecutor = executor4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("hi!");
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder3.setLog(log8);
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        builder3.logLevel = logLevel19;
        retrofit.converter.Converter converter22 = builder3.converter;
        retrofit.ErrorHandler errorHandler23 = builder3.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel24 = builder3.logLevel;
        retrofit.Server server25 = builder3.server;
        builder0.server = server25;
        retrofit.client.Client.Provider provider27 = builder0.clientProvider;
        retrofit.RestAdapter.Log log28 = builder0.log;
        retrofit.RestAdapter restAdapter29 = builder0.build();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.Profiler profiler32 = null;
        builder30.profiler = profiler32;
        retrofit.RestAdapter.Log log34 = builder30.log;
        builder30.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder30.requestInterceptor = requestInterceptor36;
        retrofit.RequestInterceptor requestInterceptor38 = builder30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = builder30.requestInterceptor;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log41 = restAdapter40.log;
        retrofit.ErrorHandler errorHandler42 = restAdapter40.errorHandler;
        retrofit.converter.Converter converter43 = null;
        restAdapter40.converter = converter43;
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter40.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter40.requestInterceptor;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = builder47.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor49 = builder47.requestInterceptor;
        retrofit.ErrorHandler errorHandler50 = null;
        builder47.errorHandler = errorHandler50;
        retrofit.converter.Converter converter52 = null;
        builder47.converter = converter52;
        retrofit.ErrorHandler errorHandler54 = null;
        builder47.errorHandler = errorHandler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.Profiler profiler61 = null;
        builder60.profiler = profiler61;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder60.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter restAdapter65 = builder60.build();
        retrofit.converter.Converter converter66 = restAdapter65.converter;
        retrofit.RestAdapter.Builder builder67 = builder47.setConverter(converter66);
        restAdapter40.converter = converter66;
        builder30.converter = converter66;
        retrofit.RestAdapter.Builder builder70 = builder0.setConverter(converter66);
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.client.Client.Provider provider76 = builder75.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean78 = logLevel77.log();
        builder75.logLevel = logLevel77;
        retrofit.RestAdapter restAdapter80 = builder75.build();
        retrofit.converter.Converter converter81 = restAdapter80.converter;
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter80.getLogLevel();
        java.util.concurrent.Executor executor83 = restAdapter80.callbackExecutor;
        java.util.concurrent.Executor executor84 = restAdapter80.callbackExecutor;
        builder70.httpExecutor = executor84;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(converter66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(provider76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(converter81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor83);
        org.junit.Assert.assertNotNull(executor84);
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.lang.String str9 = request6.getMethod();
        retrofit.mime.TypedOutput typedOutput10 = request6.getBody();
        java.util.List<retrofit.client.Header> headerList11 = request6.getHeaders();
        java.lang.String str12 = request6.getUrl();
        java.lang.String str13 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList15 = request6.getHeaders();
        java.lang.String str16 = request6.getUrl();
        java.lang.String str17 = request6.getMethod();
        java.util.List<retrofit.client.Header> headerList18 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList19 = request6.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = request6.getBody();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNull(typedOutput20);
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.ErrorHandler errorHandler10 = restAdapter7.errorHandler;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter26.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter26.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter26.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log24, logLevel32);
        log24.log("Retrofit-Idle");
        restAdapter7.log = log24;
        retrofit.RestAdapter.Builder builder38 = builder0.setLog(log24);
        retrofit.RestAdapter.LogLevel logLevel39 = builder38.logLevel;
        retrofit.RestAdapter.LogLevel logLevel40 = null;
        builder38.logLevel = logLevel40;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.setLogLevel(logLevel4);
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.Server server7 = null;
        restAdapter0.server = server7;
        retrofit.Profiler profiler9 = restAdapter0.profiler;
        retrofit.Profiler profiler10 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter12 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.httpExecutor = executor4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("hi!");
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder3.setLog(log8);
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        builder3.logLevel = logLevel19;
        retrofit.converter.Converter converter22 = builder3.converter;
        retrofit.ErrorHandler errorHandler23 = builder3.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel24 = builder3.logLevel;
        retrofit.Server server25 = builder3.server;
        builder0.server = server25;
        retrofit.client.Client.Provider provider27 = builder0.clientProvider;
        retrofit.RestAdapter.Log log28 = builder0.log;
        retrofit.RestAdapter restAdapter29 = builder0.build();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.Profiler profiler32 = null;
        builder30.profiler = profiler32;
        retrofit.RestAdapter.Log log34 = builder30.log;
        builder30.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder30.requestInterceptor = requestInterceptor36;
        retrofit.RequestInterceptor requestInterceptor38 = builder30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor39 = builder30.requestInterceptor;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log41 = restAdapter40.log;
        retrofit.ErrorHandler errorHandler42 = restAdapter40.errorHandler;
        retrofit.converter.Converter converter43 = null;
        restAdapter40.converter = converter43;
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter40.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter40.requestInterceptor;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = builder47.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor49 = builder47.requestInterceptor;
        retrofit.ErrorHandler errorHandler50 = null;
        builder47.errorHandler = errorHandler50;
        retrofit.converter.Converter converter52 = null;
        builder47.converter = converter52;
        retrofit.ErrorHandler errorHandler54 = null;
        builder47.errorHandler = errorHandler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.Profiler profiler61 = null;
        builder60.profiler = profiler61;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder60.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter restAdapter65 = builder60.build();
        retrofit.converter.Converter converter66 = restAdapter65.converter;
        retrofit.RestAdapter.Builder builder67 = builder47.setConverter(converter66);
        restAdapter40.converter = converter66;
        builder30.converter = converter66;
        retrofit.RestAdapter.Builder builder70 = builder0.setConverter(converter66);
        retrofit.RestAdapter.LogLevel logLevel71 = builder70.logLevel;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(converter66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.converter.Converter converter24 = restAdapter22.converter;
        java.util.concurrent.Executor executor25 = restAdapter22.httpExecutor;
        retrofit.converter.Converter converter26 = null;
        restAdapter22.converter = converter26;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.client.Client.Provider provider32 = null;
        builder29.clientProvider = provider32;
        retrofit.client.Client.Provider provider34 = builder29.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder36 = builder29.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter47.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        restAdapter47.requestInterceptor = requestInterceptor49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        restAdapter47.log = log59;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean64 = logLevel63.log();
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log59, logLevel63);
        retrofit.RestAdapter.Builder builder66 = builder37.setLog(log59);
        retrofit.Server server67 = builder66.server;
        retrofit.ErrorHandler errorHandler68 = null;
        builder66.errorHandler = errorHandler68;
        retrofit.Profiler profiler70 = null;
        builder66.profiler = profiler70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = builder72.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor74 = builder72.requestInterceptor;
        java.util.concurrent.Executor executor75 = builder72.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel76 = builder72.logLevel;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = null;
        builder77.httpExecutor = executor78;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("hi!");
        retrofit.Profiler profiler82 = null;
        builder81.profiler = profiler82;
        retrofit.RequestInterceptor requestInterceptor84 = null;
        builder81.requestInterceptor = requestInterceptor84;
        retrofit.RestAdapter restAdapter86 = builder81.build();
        retrofit.converter.Converter converter87 = null;
        builder81.converter = converter87;
        retrofit.client.Client.Provider provider89 = builder81.clientProvider;
        retrofit.RestAdapter.Builder builder90 = builder72.setClient(provider89);
        builder66.clientProvider = provider89;
        builder36.clientProvider = provider89;
        restAdapter22.clientProvider = provider89;
        retrofit.RestAdapter.Builder builder94 = builder0.setClient(provider89);
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        retrofit.ErrorHandler errorHandler10 = restAdapter8.errorHandler;
        retrofit.Profiler profiler11 = null;
        restAdapter8.profiler = profiler11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter14 = null;
        restAdapter13.converter = converter14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter13.requestInterceptor = requestInterceptor16;
        retrofit.Profiler profiler18 = restAdapter13.profiler;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        restAdapter13.logLevel = logLevel19;
        java.util.concurrent.Executor executor22 = restAdapter13.httpExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log24 = restAdapter23.log;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor27 = builder25.requestInterceptor;
        retrofit.ErrorHandler errorHandler28 = null;
        builder25.errorHandler = errorHandler28;
        retrofit.converter.Converter converter30 = null;
        builder25.converter = converter30;
        retrofit.ErrorHandler errorHandler32 = null;
        builder25.errorHandler = errorHandler32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.Profiler profiler39 = null;
        builder38.profiler = profiler39;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        builder38.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter restAdapter43 = builder38.build();
        retrofit.converter.Converter converter44 = restAdapter43.converter;
        retrofit.RestAdapter.Builder builder45 = builder25.setConverter(converter44);
        restAdapter23.converter = converter44;
        restAdapter13.converter = converter44;
        restAdapter8.converter = converter44;
        retrofit.RestAdapter.Builder builder49 = builder0.setConverter(converter44);
        retrofit.RestAdapter.LogLevel logLevel50 = builder0.logLevel;
        retrofit.Server server51 = builder0.server;
        retrofit.Profiler profiler52 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder53 = builder0.setProfiler(profiler52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(converter44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server51);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider6 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel7 = builder0.logLevel;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.client.Client.Provider provider9 = null;
        builder0.clientProvider = provider9;
        java.util.concurrent.Executor executor11 = builder0.callbackExecutor;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor15 = builder13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = builder13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor17 = builder13.requestInterceptor;
        retrofit.client.Client.Provider provider18 = builder13.clientProvider;
        java.util.concurrent.Executor executor19 = builder13.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log21 = restAdapter20.log;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor23 = restAdapter20.callbackExecutor;
        retrofit.Profiler profiler24 = restAdapter20.profiler;
        retrofit.RestAdapter.Log log25 = restAdapter20.log;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter20.new RestHandler();
        retrofit.RestAdapter.Log log27 = restAdapter20.log;
        java.util.concurrent.Executor executor28 = restAdapter20.httpExecutor;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter29.getLogLevel();
        retrofit.client.Client.Provider provider34 = null;
        restAdapter29.clientProvider = provider34;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter29.logLevel;
        java.util.concurrent.Executor executor37 = restAdapter29.callbackExecutor;
        retrofit.Profiler profiler38 = restAdapter29.profiler;
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter29.requestInterceptor;
        retrofit.converter.Converter converter40 = restAdapter29.converter;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter42 = builder41.converter;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter43.requestInterceptor = requestInterceptor45;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        restAdapter43.log = log55;
        retrofit.ErrorHandler errorHandler59 = null;
        restAdapter43.errorHandler = errorHandler59;
        retrofit.RestAdapter.Log log61 = restAdapter43.log;
        retrofit.RestAdapter.Builder builder62 = builder41.setLog(log61);
        retrofit.Profiler profiler63 = builder62.profiler;
        retrofit.Profiler profiler64 = builder62.profiler;
        java.util.concurrent.Executor executor65 = builder62.callbackExecutor;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder66.setLog(log71);
        retrofit.RestAdapter restAdapter73 = builder66.build();
        java.util.concurrent.Executor executor74 = restAdapter73.httpExecutor;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.client.Client.Provider provider78 = null;
        builder75.clientProvider = provider78;
        retrofit.RestAdapter.Builder builder81 = builder75.setServer("hi!");
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor83 = null;
        builder82.httpExecutor = executor83;
        retrofit.RestAdapter.Builder builder86 = builder82.setServer("hi!");
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder88 = builder82.setLog(log87);
        retrofit.RestAdapter restAdapter89 = builder82.build();
        java.util.concurrent.Executor executor90 = restAdapter89.httpExecutor;
        builder81.callbackExecutor = executor90;
        retrofit.RestAdapter.Builder builder92 = builder62.setExecutors(executor74, executor90);
        java.util.concurrent.Executor executor93 = builder62.httpExecutor;
        restAdapter29.callbackExecutor = executor93;
        restAdapter20.callbackExecutor = executor93;
        builder13.httpExecutor = executor93;
        builder0.callbackExecutor = executor93;
        retrofit.RestAdapter.LogLevel logLevel98 = builder0.logLevel;
        retrofit.Server server99 = builder0.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNull(converter40);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(profiler63);
        org.junit.Assert.assertNull(profiler64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(executor93);
        org.junit.Assert.assertTrue("'" + logLevel98 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel98.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(server99);
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.ErrorHandler errorHandler31 = null;
        builder29.errorHandler = errorHandler31;
        retrofit.Profiler profiler33 = null;
        builder29.profiler = profiler33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log36 = restAdapter35.log;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.Profiler profiler44 = null;
        builder43.profiler = profiler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        retrofit.converter.Converter converter54 = null;
        builder46.converter = converter54;
        retrofit.ErrorHandler errorHandler56 = null;
        builder46.errorHandler = errorHandler56;
        retrofit.RequestInterceptor requestInterceptor58 = builder46.requestInterceptor;
        builder43.requestInterceptor = requestInterceptor58;
        restAdapter35.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.Builder builder61 = builder29.setRequestInterceptor(requestInterceptor58);
        retrofit.Server server62 = builder29.server;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(server62);
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        java.util.List<retrofit.client.Header> headerList4 = null;
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("hi!", "", headerList4, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList8, typedOutput9);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNotNull(headerList8);
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.RequestInterceptor requestInterceptor49 = builder27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor50 = builder27.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = builder27.setServer("hi!");
        retrofit.Server server53 = builder27.server;
        restAdapter9.server = server53;
        retrofit.RestAdapter.Builder builder55 = builder0.setServer(server53);
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter56.logLevel = logLevel58;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.setLogLevel(logLevel60);
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter56.getLogLevel();
        boolean boolean63 = logLevel62.log();
        builder55.logLevel = logLevel62;
        retrofit.RestAdapter.LogLevel logLevel65 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder55.setServer("Retrofit-Idle");
        retrofit.client.Client client68 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder69 = builder67.setClient(client68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter0.requestInterceptor;
        retrofit.client.Client.Provider provider21 = restAdapter0.clientProvider;
        retrofit.ErrorHandler errorHandler22 = restAdapter0.errorHandler;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = null;
        restAdapter23.httpExecutor = executor24;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter23.requestInterceptor = requestInterceptor26;
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter23.requestInterceptor;
        java.util.concurrent.Executor executor29 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter23.getLogLevel();
        retrofit.Profiler profiler31 = restAdapter23.profiler;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.RestAdapter.LogLevel logLevel34 = builder32.logLevel;
        builder32.ensureSaneDefaults();
        retrofit.client.Client.Provider provider36 = null;
        builder32.clientProvider = provider36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter53.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter53.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log51, logLevel59);
        builder32.logLevel = logLevel59;
        retrofit.RequestInterceptor requestInterceptor63 = builder32.requestInterceptor;
        restAdapter23.requestInterceptor = requestInterceptor63;
        restAdapter0.requestInterceptor = requestInterceptor63;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor63);
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder0.profiler;
        retrofit.converter.Converter converter23 = null;
        builder0.converter = converter23;
        retrofit.Profiler profiler25 = null;
        builder0.profiler = profiler25;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.Server server5 = null;
        restAdapter0.server = server5;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.client.Response response9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response11 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response9, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(profiler7);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.RestAdapter restAdapter8 = builder0.build();
        retrofit.RequestInterceptor requestInterceptor9 = builder0.requestInterceptor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNotNull(restAdapter8);
        org.junit.Assert.assertNotNull(requestInterceptor9);
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        java.lang.String str15 = request12.getMethod();
        java.util.List<retrofit.client.Header> headerList16 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.getBody();
        java.util.List<retrofit.client.Header> headerList20 = request18.getHeaders();
        java.util.List<retrofit.client.Header> headerList21 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList21, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList21, typedOutput24);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList21);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.converter.Converter converter8 = null;
        builder0.converter = converter8;
        retrofit.ErrorHandler errorHandler10 = null;
        builder0.errorHandler = errorHandler10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter14.log = log26;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter14.errorHandler = errorHandler30;
        retrofit.RestAdapter.Log log32 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder33 = builder12.setLog(log32);
        retrofit.Profiler profiler34 = builder12.profiler;
        retrofit.converter.Converter converter35 = null;
        builder12.converter = converter35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter52.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter52.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log50, logLevel58);
        retrofit.RestAdapter.Builder builder61 = builder12.setLog(log50);
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel63 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder0.setLogLevel(logLevel63);
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter restAdapter8 = builder0.build();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        java.lang.Throwable throwable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter8.logException(throwable11, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(restAdapter8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(executor10);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider24 = null;
        builder0.clientProvider = provider24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log35 = restAdapter34.log;
        java.util.concurrent.Executor executor36 = restAdapter34.callbackExecutor;
        retrofit.Profiler profiler37 = restAdapter34.profiler;
        retrofit.Profiler profiler38 = null;
        restAdapter34.profiler = profiler38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        restAdapter34.log = log48;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel68);
        builder52.logLevel = logLevel68;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log48, logLevel68);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter72.logLevel = logLevel74;
        restAdapter71.setLogLevel(logLevel74);
        retrofit.RestAdapter.Builder builder77 = builder0.setLogLevel(logLevel74);
        java.util.concurrent.Executor executor78 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder80 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider81 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter82 = builder0.build();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(provider81);
        org.junit.Assert.assertNotNull(restAdapter82);
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log8 = restAdapter7.log;
        retrofit.ErrorHandler errorHandler9 = restAdapter7.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.Profiler profiler16 = null;
        builder15.profiler = profiler16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder18.setLog(log23);
        retrofit.RestAdapter restAdapter25 = builder18.build();
        retrofit.converter.Converter converter26 = null;
        builder18.converter = converter26;
        retrofit.ErrorHandler errorHandler28 = null;
        builder18.errorHandler = errorHandler28;
        retrofit.RequestInterceptor requestInterceptor30 = builder18.requestInterceptor;
        builder15.requestInterceptor = requestInterceptor30;
        restAdapter7.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.Builder builder33 = builder4.setRequestInterceptor(requestInterceptor30);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = builder34.converter;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter36.requestInterceptor = requestInterceptor38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        restAdapter36.log = log48;
        retrofit.ErrorHandler errorHandler52 = null;
        restAdapter36.errorHandler = errorHandler52;
        retrofit.RestAdapter.Log log54 = restAdapter36.log;
        retrofit.RestAdapter.Builder builder55 = builder34.setLog(log54);
        retrofit.Profiler profiler56 = builder55.profiler;
        retrofit.Profiler profiler57 = builder55.profiler;
        java.util.concurrent.Executor executor58 = builder55.callbackExecutor;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.client.Client.Provider provider64 = builder63.clientProvider;
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        log66.log("");
        builder63.log = log66;
        retrofit.Server server70 = builder63.server;
        builder55.server = server70;
        retrofit.RestAdapter.Builder builder72 = builder33.setServer(server70);
        retrofit.RequestInterceptor requestInterceptor73 = builder72.requestInterceptor;
        java.util.concurrent.Executor executor74 = builder72.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel75 = builder72.logLevel;
        retrofit.RestAdapter.Log log76 = builder72.log;
        java.util.concurrent.Executor executor77 = builder72.httpExecutor;
        retrofit.Profiler profiler78 = builder72.profiler;
        retrofit.client.Client.Provider provider79 = builder72.clientProvider;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(server70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNull(profiler78);
        org.junit.Assert.assertNotNull(provider79);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.httpExecutor = executor9;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log12 = restAdapter11.log;
        retrofit.ErrorHandler errorHandler13 = restAdapter11.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder26 = builder22.setServer("hi!");
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder22.setLog(log27);
        retrofit.RestAdapter restAdapter29 = builder22.build();
        retrofit.converter.Converter converter30 = null;
        builder22.converter = converter30;
        retrofit.ErrorHandler errorHandler32 = null;
        builder22.errorHandler = errorHandler32;
        retrofit.RequestInterceptor requestInterceptor34 = builder22.requestInterceptor;
        builder19.requestInterceptor = requestInterceptor34;
        restAdapter11.requestInterceptor = requestInterceptor34;
        restAdapter0.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor39 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler40 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log42 = restAdapter41.log;
        java.util.concurrent.Executor executor43 = restAdapter41.callbackExecutor;
        retrofit.Profiler profiler44 = restAdapter41.profiler;
        retrofit.Profiler profiler45 = null;
        restAdapter41.profiler = profiler45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter41.requestInterceptor = requestInterceptor47;
        retrofit.Server server49 = null;
        restAdapter41.server = server49;
        retrofit.client.Client.Provider provider51 = restAdapter41.clientProvider;
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel61);
        retrofit.ErrorHandler errorHandler63 = null;
        restAdapter62.errorHandler = errorHandler63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = builder65.build();
        retrofit.converter.Converter converter73 = null;
        builder65.converter = converter73;
        retrofit.ErrorHandler errorHandler75 = null;
        builder65.errorHandler = errorHandler75;
        retrofit.RequestInterceptor requestInterceptor77 = builder65.requestInterceptor;
        restAdapter62.requestInterceptor = requestInterceptor77;
        restAdapter41.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor81 = restAdapter80.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter80.logLevel;
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor85 = null;
        builder84.httpExecutor = executor85;
        retrofit.RestAdapter.Builder builder88 = builder84.setServer("hi!");
        retrofit.Profiler profiler89 = null;
        builder88.profiler = profiler89;
        retrofit.RequestInterceptor requestInterceptor91 = null;
        builder88.requestInterceptor = requestInterceptor91;
        retrofit.RestAdapter restAdapter93 = builder88.build();
        retrofit.Server server94 = builder88.server;
        retrofit.Server server95 = builder88.server;
        restAdapter80.server = server95;
        restAdapter41.server = server95;
        restAdapter0.server = server95;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(profiler44);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertNull(logLevel82);
        org.junit.Assert.assertNull(logLevel83);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(restAdapter93);
        org.junit.Assert.assertNotNull(server94);
        org.junit.Assert.assertNotNull(server95);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = builder34.setLog(log39);
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter41.logLevel = logLevel43;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter41.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter41.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log39, logLevel47);
        boolean boolean50 = logLevel47.log();
        retrofit.RestAdapter.Builder builder51 = builder25.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider52 = builder51.clientProvider;
        retrofit.RestAdapter.Builder builder54 = builder51.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor55 = builder54.requestInterceptor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(requestInterceptor55);
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log4 = restAdapter3.log;
        retrofit.ErrorHandler errorHandler5 = restAdapter3.errorHandler;
        retrofit.Profiler profiler6 = null;
        restAdapter3.profiler = profiler6;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter9 = null;
        restAdapter8.converter = converter9;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter8.requestInterceptor = requestInterceptor11;
        retrofit.Profiler profiler13 = restAdapter8.profiler;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        restAdapter8.logLevel = logLevel14;
        java.util.concurrent.Executor executor17 = restAdapter8.httpExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log19 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor22 = builder20.requestInterceptor;
        retrofit.ErrorHandler errorHandler23 = null;
        builder20.errorHandler = errorHandler23;
        retrofit.converter.Converter converter25 = null;
        builder20.converter = converter25;
        retrofit.ErrorHandler errorHandler27 = null;
        builder20.errorHandler = errorHandler27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.Profiler profiler34 = null;
        builder33.profiler = profiler34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder33.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter restAdapter38 = builder33.build();
        retrofit.converter.Converter converter39 = restAdapter38.converter;
        retrofit.RestAdapter.Builder builder40 = builder20.setConverter(converter39);
        restAdapter18.converter = converter39;
        restAdapter8.converter = converter39;
        restAdapter3.converter = converter39;
        builder0.converter = converter39;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter45 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(converter39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log19, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor30 = builder29.httpExecutor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder31.setLog(log36);
        retrofit.RestAdapter restAdapter38 = builder31.build();
        retrofit.converter.Converter converter39 = builder31.converter;
        builder29.converter = converter39;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(converter39);
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.getMethod();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        java.lang.String str17 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("Retrofit-Idle", "", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "Retrofit-Idle", headerList18, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList18, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", headerList18, typedOutput25);
        java.lang.String str27 = request26.getMethod();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        restAdapter5.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        restAdapter5.logLevel = logLevel9;
        retrofit.ErrorHandler errorHandler11 = restAdapter5.errorHandler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.Profiler profiler17 = null;
        builder16.profiler = profiler17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        builder16.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter restAdapter21 = builder16.build();
        retrofit.converter.Converter converter22 = restAdapter21.converter;
        restAdapter5.converter = converter22;
        restAdapter0.converter = converter22;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter0.requestInterceptor = requestInterceptor26;
        retrofit.Profiler profiler28 = restAdapter0.profiler;
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(converter22);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(profiler28);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.client.Client.Provider provider29 = null;
        builder26.clientProvider = provider29;
        retrofit.client.Client.Provider provider31 = builder26.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel32);
        retrofit.RequestInterceptor requestInterceptor34 = null;
        builder33.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = builder36.converter;
        retrofit.RestAdapter.LogLevel logLevel38 = builder36.logLevel;
        builder36.ensureSaneDefaults();
        retrofit.client.Client.Provider provider40 = null;
        builder36.clientProvider = provider40;
        retrofit.Profiler profiler42 = builder36.profiler;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = builder43.callbackExecutor;
        retrofit.RestAdapter.Log log45 = builder43.log;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter65.logLevel = logLevel67;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.setLogLevel(logLevel69);
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log62, logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder43.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder73.setLog(log78);
        builder43.log = log78;
        retrofit.RestAdapter.Builder builder81 = builder36.setLog(log78);
        java.util.concurrent.Executor executor82 = builder81.httpExecutor;
        builder33.callbackExecutor = executor82;
        builder0.callbackExecutor = executor82;
        retrofit.converter.Converter converter85 = builder0.converter;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNull(converter85);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder6.setLog(log11);
        retrofit.Profiler profiler13 = null;
        builder12.profiler = profiler13;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = null;
        restAdapter15.httpExecutor = executor16;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter15.requestInterceptor = requestInterceptor18;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter15.requestInterceptor;
        java.util.concurrent.Executor executor21 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter25.requestInterceptor = requestInterceptor27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        restAdapter25.log = log37;
        retrofit.ErrorHandler errorHandler41 = null;
        restAdapter25.errorHandler = errorHandler41;
        retrofit.RestAdapter.Log log43 = restAdapter25.log;
        retrofit.RestAdapter.Builder builder44 = builder23.setLog(log43);
        retrofit.Profiler profiler45 = builder44.profiler;
        retrofit.Profiler profiler46 = builder44.profiler;
        java.util.concurrent.Executor executor47 = builder44.callbackExecutor;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel64);
        builder48.logLevel = logLevel64;
        retrofit.converter.Converter converter67 = builder48.converter;
        retrofit.ErrorHandler errorHandler68 = builder48.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel69 = builder48.logLevel;
        retrofit.Server server70 = builder48.server;
        retrofit.RestAdapter.Builder builder71 = builder44.setServer(server70);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("hi!");
        retrofit.Profiler profiler77 = null;
        builder76.profiler = profiler77;
        retrofit.RequestInterceptor requestInterceptor79 = null;
        builder76.requestInterceptor = requestInterceptor79;
        retrofit.RestAdapter restAdapter81 = builder76.build();
        retrofit.converter.Converter converter82 = null;
        builder76.converter = converter82;
        retrofit.client.Client.Provider provider84 = builder76.clientProvider;
        builder71.clientProvider = provider84;
        restAdapter15.clientProvider = provider84;
        builder12.clientProvider = provider84;
        retrofit.RestAdapter.Builder builder88 = builder5.setClient(provider84);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter67);
        org.junit.Assert.assertNull(errorHandler68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(provider84);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel27 = builder0.logLevel;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.Server server30 = restAdapter28.server;
        retrofit.client.Client.Provider provider31 = null;
        restAdapter28.clientProvider = provider31;
        retrofit.Server server33 = null;
        restAdapter28.server = server33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter36 = null;
        restAdapter35.converter = converter36;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter35.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log41 = restAdapter40.log;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter40.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        restAdapter40.logLevel = logLevel44;
        retrofit.ErrorHandler errorHandler46 = restAdapter40.errorHandler;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.Profiler profiler52 = null;
        builder51.profiler = profiler52;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        builder51.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter restAdapter56 = builder51.build();
        retrofit.converter.Converter converter57 = restAdapter56.converter;
        restAdapter40.converter = converter57;
        restAdapter35.converter = converter57;
        restAdapter28.converter = converter57;
        retrofit.RestAdapter.Builder builder61 = builder0.setConverter(converter57);
        retrofit.RestAdapter.Log log62 = builder0.log;
        log62.log("Retrofit-Idle");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(converter57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log62);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = builder10.converter;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter12.requestInterceptor = requestInterceptor14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        restAdapter12.log = log24;
        retrofit.ErrorHandler errorHandler28 = null;
        restAdapter12.errorHandler = errorHandler28;
        retrofit.RestAdapter.Log log30 = restAdapter12.log;
        retrofit.RestAdapter.Builder builder31 = builder10.setLog(log30);
        retrofit.RequestInterceptor requestInterceptor32 = builder10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor33 = builder10.requestInterceptor;
        retrofit.RestAdapter.Builder builder35 = builder10.setServer("hi!");
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter51.logLevel = logLevel53;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        restAdapter51.requestInterceptor = requestInterceptor55;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter51.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log49, logLevel57);
        boolean boolean60 = logLevel57.log();
        retrofit.RestAdapter.Builder builder61 = builder35.setLogLevel(logLevel57);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        retrofit.RestAdapter restAdapter69 = builder62.build();
        java.util.concurrent.Executor executor70 = restAdapter69.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter69.new RestHandler();
        retrofit.converter.Converter converter72 = restAdapter69.converter;
        builder61.converter = converter72;
        retrofit.converter.Converter converter74 = builder61.converter;
        restAdapter0.converter = converter74;
        java.util.concurrent.Executor executor76 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(converter72);
        org.junit.Assert.assertNotNull(converter74);
        org.junit.Assert.assertNull(executor76);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.Server server8 = null;
        restAdapter0.server = server8;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter0.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter.LogLevel logLevel15 = builder13.logLevel;
        builder13.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor17 = builder13.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor17;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor17);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        builder21.requestInterceptor = requestInterceptor25;
        retrofit.RequestInterceptor requestInterceptor27 = builder21.requestInterceptor;
        retrofit.Server server28 = builder21.server;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(server28);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.Server server8 = restAdapter7.server;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(server8);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.converter.Converter converter8 = restAdapter0.converter;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(converter8);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.Profiler profiler10 = builder7.profiler;
        retrofit.client.Client.Provider provider11 = builder7.clientProvider;
        retrofit.ErrorHandler errorHandler12 = builder7.errorHandler;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(errorHandler12);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = builder0.server;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter5.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel7 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter5.logLevel = logLevel7;
        retrofit.Profiler profiler9 = restAdapter5.profiler;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter5.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter5.requestInterceptor;
        retrofit.Profiler profiler12 = restAdapter5.profiler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter.LogLevel logLevel15 = builder13.logLevel;
        builder13.ensureSaneDefaults();
        retrofit.client.Client.Provider provider17 = null;
        builder13.clientProvider = provider17;
        retrofit.Profiler profiler19 = builder13.profiler;
        java.util.concurrent.Executor executor20 = builder13.httpExecutor;
        restAdapter5.callbackExecutor = executor20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter22.requestInterceptor = requestInterceptor24;
        java.util.concurrent.Executor executor26 = restAdapter22.httpExecutor;
        java.util.concurrent.Executor executor27 = restAdapter22.httpExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.Profiler profiler33 = null;
        builder32.profiler = profiler33;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        builder32.requestInterceptor = requestInterceptor35;
        retrofit.RestAdapter restAdapter37 = builder32.build();
        retrofit.converter.Converter converter38 = restAdapter37.converter;
        restAdapter22.converter = converter38;
        restAdapter5.converter = converter38;
        builder0.converter = converter38;
        retrofit.client.Client client42 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder43 = builder0.setClient(client42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(converter38);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = request10.getBody();
        java.lang.String str12 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList13 = request10.getHeaders();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList13);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter19.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter19.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log17, logLevel25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        restAdapter27.log = log33;
        builder0.log = log33;
        java.util.concurrent.Executor executor37 = null;
        builder0.httpExecutor = executor37;
        retrofit.converter.Converter converter39 = null;
        builder0.converter = converter39;
        retrofit.RestAdapter.Builder builder42 = builder0.setServer("hi!");
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter45 = builder44.converter;
        retrofit.Profiler profiler46 = null;
        builder44.profiler = profiler46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.client.Client.Provider provider51 = null;
        builder48.clientProvider = provider51;
        retrofit.RestAdapter.Builder builder54 = builder48.setServer("hi!");
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = builder55.setLog(log60);
        retrofit.RestAdapter restAdapter62 = builder55.build();
        java.util.concurrent.Executor executor63 = restAdapter62.httpExecutor;
        builder54.callbackExecutor = executor63;
        builder44.callbackExecutor = executor63;
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        java.util.concurrent.Executor executor72 = null;
        builder67.httpExecutor = executor72;
        retrofit.RestAdapter restAdapter74 = builder67.build();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter74.getLogLevel();
        retrofit.client.Client.Provider provider76 = restAdapter74.clientProvider;
        builder44.clientProvider = provider76;
        retrofit.RestAdapter.Builder builder78 = builder42.setClient(provider76);
        java.util.concurrent.Executor executor79 = builder78.httpExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(executor79);
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        restAdapter0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor29 = builder7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = builder7.requestInterceptor;
        retrofit.RestAdapter.Builder builder32 = builder7.setServer("hi!");
        retrofit.Server server33 = builder7.server;
        restAdapter0.server = server33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = builder35.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor37 = builder35.requestInterceptor;
        retrofit.Profiler profiler38 = builder35.profiler;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.RestAdapter.Log log41 = builder39.log;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter.LogLevel logLevel44 = builder42.logLevel;
        builder42.ensureSaneDefaults();
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = builder54.setLog(log59);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter61.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter61.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log59, logLevel67);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.RestAdapter.Builder builder74 = builder70.setServer("hi!");
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder76 = builder70.setLog(log75);
        restAdapter69.log = log75;
        builder42.log = log75;
        java.util.concurrent.Executor executor79 = null;
        builder42.httpExecutor = executor79;
        retrofit.converter.Converter converter81 = null;
        builder42.converter = converter81;
        retrofit.ErrorHandler errorHandler83 = builder42.errorHandler;
        retrofit.RestAdapter.Builder builder84 = builder39.setErrorHandler(errorHandler83);
        retrofit.RestAdapter.Builder builder85 = builder35.setErrorHandler(errorHandler83);
        restAdapter0.errorHandler = errorHandler83;
        retrofit.RequestInterceptor requestInterceptor87 = restAdapter0.requestInterceptor;
        retrofit.Server server88 = restAdapter0.server;
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(errorHandler83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(requestInterceptor87);
        org.junit.Assert.assertNotNull(server88);
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", headerList12, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        java.lang.String str17 = request14.getUrl();
        java.lang.String str18 = request14.getMethod();
        java.util.List<retrofit.client.Header> headerList19 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("", "", headerList19, typedOutput20);
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(headerList19);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter4.logLevel = logLevel6;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor10 = restAdapter4.httpExecutor;
        retrofit.Server server11 = null;
        restAdapter4.server = server11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.ErrorHandler errorHandler16 = restAdapter13.errorHandler;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter32.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter32.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log30, logLevel38);
        log30.log("Retrofit-Idle");
        restAdapter13.log = log30;
        restAdapter4.log = log30;
        log30.log("Retrofit-Idle");
        restAdapter0.log = log30;
        retrofit.ErrorHandler errorHandler48 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter49 = restAdapter0.converter;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor51 = null;
        restAdapter50.httpExecutor = executor51;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        restAdapter50.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter55.logLevel;
        retrofit.converter.Converter converter58 = null;
        restAdapter55.converter = converter58;
        retrofit.ErrorHandler errorHandler60 = restAdapter55.errorHandler;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter62 = null;
        builder61.converter = converter62;
        retrofit.client.Client.Provider provider64 = null;
        builder61.clientProvider = provider64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        builder61.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.Profiler profiler73 = null;
        builder72.profiler = profiler73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder75.setLog(log80);
        retrofit.RestAdapter restAdapter82 = builder75.build();
        retrofit.converter.Converter converter83 = null;
        builder75.converter = converter83;
        retrofit.ErrorHandler errorHandler85 = null;
        builder75.errorHandler = errorHandler85;
        retrofit.RequestInterceptor requestInterceptor87 = builder75.requestInterceptor;
        builder72.requestInterceptor = requestInterceptor87;
        retrofit.RestAdapter.Builder builder89 = builder61.setRequestInterceptor(requestInterceptor87);
        restAdapter55.requestInterceptor = requestInterceptor87;
        restAdapter50.requestInterceptor = requestInterceptor87;
        java.util.concurrent.Executor executor92 = restAdapter50.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor93 = restAdapter50.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor93;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(requestInterceptor87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(executor92);
        org.junit.Assert.assertNotNull(requestInterceptor93);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor10 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(logLevel11);
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = builder34.setLog(log39);
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter41.logLevel = logLevel43;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter41.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter41.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log39, logLevel47);
        boolean boolean50 = logLevel47.log();
        retrofit.RestAdapter.Builder builder51 = builder25.setLogLevel(logLevel47);
        retrofit.RequestInterceptor requestInterceptor52 = builder25.requestInterceptor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(requestInterceptor52);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor10 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.Profiler profiler33 = builder32.profiler;
        retrofit.client.Client.Provider provider34 = builder32.clientProvider;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler37 = builder32.errorHandler;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor40 = builder38.requestInterceptor;
        java.util.concurrent.Executor executor41 = builder38.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel42 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.Profiler profiler48 = null;
        builder47.profiler = profiler48;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        builder47.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter restAdapter52 = builder47.build();
        retrofit.converter.Converter converter53 = null;
        builder47.converter = converter53;
        retrofit.client.Client.Provider provider55 = builder47.clientProvider;
        retrofit.RestAdapter.Builder builder56 = builder38.setClient(provider55);
        builder32.clientProvider = provider55;
        retrofit.RestAdapter.Builder builder58 = builder0.setClient(provider55);
        retrofit.Profiler profiler59 = null;
        builder0.profiler = profiler59;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder62 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = builder4.build();
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter6.requestInterceptor;
        retrofit.converter.Converter converter8 = restAdapter6.converter;
        java.util.concurrent.Executor executor9 = restAdapter6.httpExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.client.Client.Provider provider15 = builder14.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean17 = logLevel16.log();
        builder14.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter19 = builder14.build();
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter20.requestInterceptor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.converter.Converter converter23 = null;
        restAdapter20.converter = converter23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.RestAdapter.Log log45 = restAdapter27.log;
        retrofit.RestAdapter.Builder builder46 = builder25.setLog(log45);
        restAdapter20.log = log45;
        retrofit.RestAdapter.Builder builder48 = builder14.setLog(log45);
        restAdapter6.log = log45;
        restAdapter5.log = log45;
        java.util.concurrent.Executor executor51 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter5.logLevel;
        retrofit.Profiler profiler53 = restAdapter5.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler53);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter0.clientProvider = provider9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler12 = restAdapter0.profiler;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(profiler12);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder28 = builder0.setLogLevel(logLevel27);
        retrofit.ErrorHandler errorHandler29 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel30 = builder0.logLevel;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = null;
        restAdapter8.httpExecutor = executor9;
        retrofit.Profiler profiler11 = null;
        restAdapter8.profiler = profiler11;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter8.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        retrofit.RequestInterceptor requestInterceptor37 = builder15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor38 = builder15.requestInterceptor;
        retrofit.RestAdapter.Builder builder40 = builder15.setServer("hi!");
        retrofit.Server server41 = builder15.server;
        restAdapter8.server = server41;
        builder0.server = server41;
        retrofit.RestAdapter restAdapter44 = builder0.build();
        retrofit.RestAdapter restAdapter45 = builder0.build();
        retrofit.RestAdapter.Log log46 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter45.logLevel;
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter0.requestInterceptor = requestInterceptor9;
        java.util.concurrent.Executor executor11 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log13 = restAdapter12.log;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.Profiler profiler15 = restAdapter12.profiler;
        retrofit.Profiler profiler16 = null;
        restAdapter12.profiler = profiler16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter12.log = log26;
        log26.log("Retrofit-Idle");
        restAdapter0.log = log26;
        log26.log("Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        java.util.concurrent.Executor executor12 = null;
        builder7.httpExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = builder7.build();
        retrofit.converter.Converter converter15 = restAdapter14.converter;
        restAdapter0.converter = converter15;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter0.getLogLevel();
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.getUrl();
        java.util.List<retrofit.client.Header> headerList26 = request24.getHeaders();
        java.lang.String str27 = request24.getMethod();
        retrofit.mime.TypedOutput typedOutput28 = request24.getBody();
        retrofit.mime.TypedOutput typedOutput29 = request24.getBody();
        java.lang.String str30 = request24.getMethod();
        java.lang.String str31 = request24.getUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request32 = restAdapter0.logAndReplaceRequest(request24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(converter15);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNull(typedOutput29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.Profiler profiler17 = restAdapter14.profiler;
        retrofit.Profiler profiler18 = null;
        restAdapter14.profiler = profiler18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter14.log = log28;
        restAdapter7.log = log28;
        retrofit.RestAdapter.Builder builder33 = builder0.setLog(log28);
        retrofit.Server server34 = builder0.server;
        retrofit.RestAdapter.Log log35 = builder0.log;
        retrofit.Profiler profiler36 = builder0.profiler;
        retrofit.converter.Converter converter37 = builder0.converter;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(converter37);
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Log log9 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.Server server11 = builder0.server;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(server11);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.RestAdapter.Log log10 = restAdapter0.log;
        java.util.concurrent.Executor executor11 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Log log12 = restAdapter0.log;
        java.util.concurrent.Executor executor13 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.RestAdapter.LogLevel logLevel23 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.ErrorHandler errorHandler44 = null;
        restAdapter28.errorHandler = errorHandler44;
        retrofit.RestAdapter.Log log46 = restAdapter28.log;
        retrofit.RestAdapter.Builder builder47 = builder26.setLog(log46);
        retrofit.RequestInterceptor requestInterceptor48 = builder26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor49 = builder26.requestInterceptor;
        retrofit.RestAdapter.Builder builder51 = builder26.setServer("hi!");
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder60.setLog(log65);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter67.logLevel = logLevel69;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        restAdapter67.requestInterceptor = requestInterceptor71;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter67.logLevel = logLevel73;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log65, logLevel73);
        boolean boolean76 = logLevel73.log();
        retrofit.RestAdapter.Builder builder77 = builder51.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("hi!");
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder84 = builder78.setLog(log83);
        retrofit.RestAdapter restAdapter85 = builder78.build();
        java.util.concurrent.Executor executor86 = restAdapter85.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler87 = restAdapter85.new RestHandler();
        retrofit.converter.Converter converter88 = restAdapter85.converter;
        builder77.converter = converter88;
        builder77.ensureSaneDefaults();
        retrofit.Profiler profiler91 = builder77.profiler;
        retrofit.RestAdapter.Log log92 = builder77.log;
        builder21.log = log92;
        retrofit.client.Client.Provider provider94 = builder21.clientProvider;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNotNull(converter88);
        org.junit.Assert.assertNull(profiler91);
        org.junit.Assert.assertNotNull(log92);
        org.junit.Assert.assertNull(provider94);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.client.Client.Provider provider28 = null;
        builder25.clientProvider = provider28;
        retrofit.RestAdapter.Builder builder31 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.Profiler profiler36 = restAdapter32.profiler;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter32.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter32.requestInterceptor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log40 = restAdapter39.log;
        java.util.concurrent.Executor executor41 = restAdapter39.callbackExecutor;
        retrofit.Profiler profiler42 = restAdapter39.profiler;
        retrofit.Profiler profiler43 = null;
        restAdapter39.profiler = profiler43;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        restAdapter39.log = log53;
        restAdapter32.log = log53;
        retrofit.RestAdapter.Builder builder58 = builder25.setLog(log53);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.Profiler profiler64 = null;
        builder63.profiler = profiler64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        builder63.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter restAdapter68 = builder63.build();
        retrofit.converter.Converter converter69 = restAdapter68.converter;
        java.util.concurrent.Executor executor70 = restAdapter68.callbackExecutor;
        builder25.callbackExecutor = executor70;
        retrofit.Server server72 = builder25.server;
        builder24.server = server72;
        retrofit.Profiler profiler74 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder75 = builder24.setProfiler(profiler74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(converter69);
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(server72);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("Retrofit-Idle", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList15, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput29);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor24 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel25 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.RestAdapter restAdapter33 = builder26.build();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter33.getLogLevel();
        boolean boolean36 = logLevel35.log();
        retrofit.RestAdapter.Builder builder37 = builder0.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor18 = builder16.requestInterceptor;
        retrofit.ErrorHandler errorHandler19 = null;
        builder16.errorHandler = errorHandler19;
        retrofit.converter.Converter converter21 = null;
        builder16.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder16.errorHandler = errorHandler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.Profiler profiler30 = null;
        builder29.profiler = profiler30;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        builder29.requestInterceptor = requestInterceptor32;
        retrofit.RestAdapter restAdapter34 = builder29.build();
        retrofit.converter.Converter converter35 = restAdapter34.converter;
        retrofit.RestAdapter.Builder builder36 = builder16.setConverter(converter35);
        restAdapter14.converter = converter35;
        builder0.converter = converter35;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.setLogLevel(logLevel43);
        java.util.concurrent.Executor executor45 = restAdapter39.httpExecutor;
        retrofit.Server server46 = null;
        restAdapter39.server = server46;
        retrofit.Profiler profiler48 = restAdapter39.profiler;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter49.logLevel;
        retrofit.converter.Converter converter52 = null;
        restAdapter49.converter = converter52;
        retrofit.ErrorHandler errorHandler54 = restAdapter49.errorHandler;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log56 = restAdapter55.log;
        retrofit.ErrorHandler errorHandler57 = restAdapter55.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.Profiler profiler64 = null;
        builder63.profiler = profiler64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder66.setLog(log71);
        retrofit.RestAdapter restAdapter73 = builder66.build();
        retrofit.converter.Converter converter74 = null;
        builder66.converter = converter74;
        retrofit.ErrorHandler errorHandler76 = null;
        builder66.errorHandler = errorHandler76;
        retrofit.RequestInterceptor requestInterceptor78 = builder66.requestInterceptor;
        builder63.requestInterceptor = requestInterceptor78;
        restAdapter55.requestInterceptor = requestInterceptor78;
        restAdapter49.requestInterceptor = requestInterceptor78;
        restAdapter39.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter.Builder builder83 = builder0.setRequestInterceptor(requestInterceptor78);
        retrofit.RequestInterceptor requestInterceptor84 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler85 = builder0.errorHandler;
        retrofit.Profiler profiler86 = null;
        builder0.profiler = profiler86;
        retrofit.RequestInterceptor requestInterceptor88 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(converter35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(requestInterceptor84);
        org.junit.Assert.assertNull(errorHandler85);
        org.junit.Assert.assertNotNull(requestInterceptor88);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter restAdapter8 = builder0.build();
        retrofit.converter.Converter converter9 = restAdapter8.converter;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = null;
        builder10.converter = converter11;
        retrofit.client.Client.Provider provider13 = null;
        builder10.clientProvider = provider13;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder10.requestInterceptor = requestInterceptor15;
        retrofit.Profiler profiler17 = builder10.profiler;
        retrofit.Profiler profiler18 = null;
        builder10.profiler = profiler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor22 = builder20.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder20.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel24 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.Profiler profiler30 = null;
        builder29.profiler = profiler30;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        builder29.requestInterceptor = requestInterceptor32;
        retrofit.RestAdapter restAdapter34 = builder29.build();
        retrofit.converter.Converter converter35 = null;
        builder29.converter = converter35;
        retrofit.client.Client.Provider provider37 = builder29.clientProvider;
        retrofit.RestAdapter.Builder builder38 = builder20.setClient(provider37);
        retrofit.RestAdapter.Builder builder39 = builder10.setClient(provider37);
        restAdapter8.clientProvider = provider37;
        retrofit.Profiler profiler41 = null;
        restAdapter8.profiler = profiler41;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(restAdapter8);
        org.junit.Assert.assertNotNull(converter9);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        java.lang.String str14 = request8.getUrl();
        java.lang.String str15 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("Retrofit-Idle", "", headerList16, typedOutput17);
        java.lang.String str19 = request18.getMethod();
        java.util.List<retrofit.client.Header> headerList20 = request18.getHeaders();
        java.util.List<retrofit.client.Header> headerList21 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = request18.getBody();
        java.lang.String str23 = request18.getUrl();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = builder11.callbackExecutor;
        retrofit.RestAdapter.Log log13 = builder11.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.setLogLevel(logLevel37);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log30, logLevel37);
        retrofit.RestAdapter.Builder builder40 = builder11.setLogLevel(logLevel37);
        retrofit.ErrorHandler errorHandler41 = null;
        builder40.errorHandler = errorHandler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = builder43.callbackExecutor;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        retrofit.RestAdapter.Builder builder56 = builder43.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder57 = builder40.setLogLevel(logLevel54);
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        builder10.logLevel = logLevel58;
        retrofit.converter.Converter converter60 = builder10.converter;
        retrofit.converter.Converter converter61 = null;
        builder10.converter = converter61;
        retrofit.client.Client client63 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder64 = builder10.setClient(client63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter60);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Server server22 = null;
        builder0.server = server22;
        retrofit.Profiler profiler24 = null;
        builder0.profiler = profiler24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = builder26.callbackExecutor;
        retrofit.RestAdapter.Log log28 = builder26.log;
        retrofit.Server server29 = builder26.server;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log31 = restAdapter30.log;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = builder32.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor34 = builder32.requestInterceptor;
        retrofit.ErrorHandler errorHandler35 = null;
        builder32.errorHandler = errorHandler35;
        retrofit.converter.Converter converter37 = null;
        builder32.converter = converter37;
        retrofit.ErrorHandler errorHandler39 = null;
        builder32.errorHandler = errorHandler39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.Profiler profiler46 = null;
        builder45.profiler = profiler46;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        builder45.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter restAdapter50 = builder45.build();
        retrofit.converter.Converter converter51 = restAdapter50.converter;
        retrofit.RestAdapter.Builder builder52 = builder32.setConverter(converter51);
        restAdapter30.converter = converter51;
        retrofit.RestAdapter.Builder builder54 = builder26.setConverter(converter51);
        builder0.converter = converter51;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter57 = builder56.converter;
        retrofit.RestAdapter.LogLevel logLevel58 = builder56.logLevel;
        builder56.ensureSaneDefaults();
        retrofit.client.Client.Provider provider60 = null;
        builder56.clientProvider = provider60;
        retrofit.ErrorHandler errorHandler62 = builder56.errorHandler;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter63.requestInterceptor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.ErrorHandler errorHandler66 = restAdapter63.errorHandler;
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder75.setLog(log80);
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter82.logLevel = logLevel84;
        retrofit.RequestInterceptor requestInterceptor86 = null;
        restAdapter82.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter82.logLevel = logLevel88;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log80, logLevel88);
        log80.log("Retrofit-Idle");
        restAdapter63.log = log80;
        retrofit.RestAdapter.Builder builder94 = builder56.setLog(log80);
        retrofit.RestAdapter.Builder builder95 = builder0.setLog(log80);
        retrofit.Profiler profiler96 = null;
        builder0.profiler = profiler96;
        retrofit.Profiler profiler98 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder99 = builder0.setProfiler(profiler98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(converter51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(logLevel83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor10 = builder0.requestInterceptor;
        retrofit.Profiler profiler11 = builder0.profiler;
        retrofit.converter.Converter converter12 = builder0.converter;
        java.util.concurrent.Executor executor13 = builder0.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.client.Client.Provider provider33 = null;
        builder30.clientProvider = provider33;
        retrofit.RestAdapter.Builder builder36 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter37.requestInterceptor;
        java.util.concurrent.Executor executor39 = restAdapter37.callbackExecutor;
        retrofit.converter.Converter converter40 = null;
        restAdapter37.converter = converter40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.ErrorHandler errorHandler60 = null;
        restAdapter44.errorHandler = errorHandler60;
        retrofit.RestAdapter.Log log62 = restAdapter44.log;
        retrofit.RestAdapter.Builder builder63 = builder42.setLog(log62);
        restAdapter37.log = log62;
        retrofit.RestAdapter.Builder builder65 = builder30.setLog(log62);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter67 = builder66.converter;
        retrofit.Profiler profiler68 = null;
        builder66.profiler = profiler68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.client.Client.Provider provider73 = null;
        builder70.clientProvider = provider73;
        retrofit.RestAdapter.Builder builder76 = builder70.setServer("hi!");
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = null;
        builder77.httpExecutor = executor78;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("hi!");
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder83 = builder77.setLog(log82);
        retrofit.RestAdapter restAdapter84 = builder77.build();
        java.util.concurrent.Executor executor85 = restAdapter84.httpExecutor;
        builder76.callbackExecutor = executor85;
        builder66.callbackExecutor = executor85;
        builder65.httpExecutor = executor85;
        builder29.httpExecutor = executor85;
        retrofit.RestAdapter.Builder builder90 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor91 = null;
        builder90.httpExecutor = executor91;
        retrofit.RestAdapter.Builder builder94 = builder90.setServer("hi!");
        retrofit.RestAdapter restAdapter95 = builder94.build();
        retrofit.RequestInterceptor requestInterceptor96 = builder94.requestInterceptor;
        builder29.requestInterceptor = requestInterceptor96;
        retrofit.Profiler profiler98 = builder29.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(converter67);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(restAdapter95);
        org.junit.Assert.assertNotNull(requestInterceptor96);
        org.junit.Assert.assertNull(profiler98);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.RestAdapter.LogLevel logLevel31 = builder29.logLevel;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder33 = builder29.setLogLevel(logLevel32);
        builder0.logLevel = logLevel32;
        retrofit.client.Client.Provider provider35 = builder0.clientProvider;
        retrofit.client.Client.Provider provider36 = builder0.clientProvider;
        retrofit.Server server37 = builder0.server;
        retrofit.Profiler profiler38 = builder0.profiler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(profiler38);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.Server server8 = null;
        restAdapter0.server = server8;
        java.util.concurrent.Executor executor10 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler11 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter0.requestInterceptor;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList21, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = request28.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request30 = restAdapter0.logAndReplaceRequest(request28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(typedOutput29);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        java.util.concurrent.Executor executor14 = null;
        builder9.httpExecutor = executor14;
        retrofit.RestAdapter restAdapter16 = builder9.build();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter18 = builder17.converter;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter19.log = log31;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter19.errorHandler = errorHandler35;
        retrofit.RestAdapter.Log log37 = restAdapter19.log;
        retrofit.RestAdapter.Builder builder38 = builder17.setLog(log37);
        retrofit.Profiler profiler39 = builder38.profiler;
        retrofit.Profiler profiler40 = builder38.profiler;
        java.util.concurrent.Executor executor41 = builder38.callbackExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder48 = builder42.setLog(log47);
        retrofit.RestAdapter restAdapter49 = builder42.build();
        java.util.concurrent.Executor executor50 = restAdapter49.httpExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.client.Client.Provider provider54 = null;
        builder51.clientProvider = provider54;
        retrofit.RestAdapter.Builder builder57 = builder51.setServer("hi!");
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder58.setLog(log63);
        retrofit.RestAdapter restAdapter65 = builder58.build();
        java.util.concurrent.Executor executor66 = restAdapter65.httpExecutor;
        builder57.callbackExecutor = executor66;
        retrofit.RestAdapter.Builder builder68 = builder38.setExecutors(executor50, executor66);
        restAdapter16.httpExecutor = executor50;
        retrofit.Server server70 = null;
        retrofit.client.Client.Provider provider71 = null;
        java.util.concurrent.Executor executor72 = null;
        java.util.concurrent.Executor executor73 = null;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        retrofit.converter.Converter converter75 = null;
        retrofit.Profiler profiler76 = null;
        retrofit.ErrorHandler errorHandler77 = null;
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server70, provider71, executor72, executor73, requestInterceptor74, converter75, profiler76, errorHandler77, log78, logLevel79);
        restAdapter16.logLevel = logLevel79;
        retrofit.ErrorHandler errorHandler82 = restAdapter16.errorHandler;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter84 = builder83.converter;
        retrofit.Profiler profiler85 = null;
        builder83.profiler = profiler85;
        retrofit.ErrorHandler errorHandler87 = null;
        builder83.errorHandler = errorHandler87;
        retrofit.RestAdapter.Builder builder90 = builder83.setServer("hi!");
        java.util.concurrent.Executor executor91 = builder83.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel92 = builder83.logLevel;
        restAdapter16.logLevel = logLevel92;
        retrofit.RestAdapter.Builder builder94 = builder0.setLogLevel(logLevel92);
        java.util.concurrent.Executor executor95 = builder94.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel96 = builder94.logLevel;
        retrofit.Server server97 = builder94.server;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler82);
        org.junit.Assert.assertNull(converter84);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(executor91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(executor95);
        org.junit.Assert.assertTrue("'" + logLevel96 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel96.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server97);
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor8 = builder6.requestInterceptor;
        retrofit.ErrorHandler errorHandler9 = null;
        builder6.errorHandler = errorHandler9;
        retrofit.converter.Converter converter11 = null;
        builder6.converter = converter11;
        retrofit.client.Client.Provider provider13 = builder6.clientProvider;
        retrofit.RequestInterceptor requestInterceptor14 = builder6.requestInterceptor;
        retrofit.Server server15 = builder6.server;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        log24.log("hi!");
        log24.log("Retrofit-Idle");
        builder6.log = log24;
        restAdapter0.log = log24;
        retrofit.converter.Converter converter33 = null;
        restAdapter0.converter = converter33;
        retrofit.RestAdapter.Log log35 = restAdapter0.log;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter55.setLogLevel(logLevel59);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log52, logLevel59);
        retrofit.client.Header[] headerArray66 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList67 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList67, headerArray66);
        retrofit.mime.TypedOutput typedOutput69 = null;
        retrofit.client.Request request70 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList67, typedOutput69);
        java.lang.String str71 = request70.getUrl();
        java.util.List<retrofit.client.Header> headerList72 = request70.getHeaders();
        retrofit.mime.TypedOutput typedOutput73 = null;
        retrofit.client.Request request74 = new retrofit.client.Request("hi!", "", headerList72, typedOutput73);
        java.util.List<retrofit.client.Header> headerList75 = request74.getHeaders();
        java.util.List<retrofit.client.Header> headerList76 = request74.getHeaders();
        java.lang.String str77 = request74.getMethod();
        retrofit.mime.TypedOutput typedOutput78 = request74.getBody();
        retrofit.client.Request request79 = restAdapter61.logAndReplaceRequest(request74);
        retrofit.mime.TypedOutput typedOutput80 = request74.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request81 = restAdapter0.logAndReplaceRequest(request74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(headerList72);
        org.junit.Assert.assertNotNull(headerList75);
        org.junit.Assert.assertNotNull(headerList76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNull(typedOutput78);
        org.junit.Assert.assertNotNull(request79);
        org.junit.Assert.assertNull(typedOutput80);
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = null;
        restAdapter29.httpExecutor = executor30;
        retrofit.Profiler profiler32 = null;
        restAdapter29.profiler = profiler32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter29.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = builder36.converter;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter38.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        restAdapter38.requestInterceptor = requestInterceptor40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        restAdapter38.log = log50;
        retrofit.ErrorHandler errorHandler54 = null;
        restAdapter38.errorHandler = errorHandler54;
        retrofit.RestAdapter.Log log56 = restAdapter38.log;
        retrofit.RestAdapter.Builder builder57 = builder36.setLog(log56);
        retrofit.RequestInterceptor requestInterceptor58 = builder36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = builder36.requestInterceptor;
        retrofit.RestAdapter.Builder builder61 = builder36.setServer("hi!");
        retrofit.Server server62 = builder36.server;
        restAdapter29.server = server62;
        retrofit.RestAdapter.Builder builder64 = builder28.setServer(server62);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter66 = builder65.converter;
        retrofit.RestAdapter.LogLevel logLevel67 = builder65.logLevel;
        builder65.ensureSaneDefaults();
        retrofit.client.Client.Provider provider69 = null;
        builder65.clientProvider = provider69;
        retrofit.Profiler profiler71 = builder65.profiler;
        java.util.concurrent.Executor executor72 = builder65.callbackExecutor;
        builder64.httpExecutor = executor72;
        retrofit.ErrorHandler errorHandler74 = builder64.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNotNull(executor72);
        org.junit.Assert.assertNull(errorHandler74);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.RestAdapter.Log log18 = restAdapter0.log;
        java.util.concurrent.Executor executor19 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log21 = null;
        restAdapter0.log = log21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter23.logLevel = logLevel25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter23.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter23.logLevel;
        restAdapter0.logLevel = logLevel29;
        retrofit.Profiler profiler31 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter0.new RestHandler();
        retrofit.client.Response response34 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response36 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response34, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler31);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.converter.Converter converter11 = null;
        restAdapter8.converter = converter11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter15.requestInterceptor = requestInterceptor17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        restAdapter15.log = log27;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter15.errorHandler = errorHandler31;
        retrofit.RestAdapter.Log log33 = restAdapter15.log;
        retrofit.RestAdapter.Builder builder34 = builder13.setLog(log33);
        restAdapter8.log = log33;
        retrofit.RestAdapter.Log log36 = restAdapter8.log;
        retrofit.RestAdapter.Log log37 = restAdapter8.log;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log39 = restAdapter38.log;
        retrofit.ErrorHandler errorHandler40 = restAdapter38.errorHandler;
        retrofit.converter.Converter converter41 = null;
        restAdapter38.converter = converter41;
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter38.requestInterceptor;
        retrofit.ErrorHandler errorHandler44 = restAdapter38.errorHandler;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.Profiler profiler56 = restAdapter52.profiler;
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter52.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor58 = null;
        restAdapter52.requestInterceptor = requestInterceptor58;
        retrofit.Profiler profiler60 = null;
        restAdapter52.profiler = profiler60;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter62.requestInterceptor;
        retrofit.converter.Converter converter64 = restAdapter62.converter;
        java.util.concurrent.Executor executor65 = null;
        restAdapter62.callbackExecutor = executor65;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter62.logLevel = logLevel67;
        restAdapter52.setLogLevel(logLevel67);
        builder45.logLevel = logLevel67;
        builder45.ensureSaneDefaults();
        java.util.concurrent.Executor executor72 = builder45.httpExecutor;
        restAdapter38.callbackExecutor = executor72;
        restAdapter8.httpExecutor = executor72;
        restAdapter0.callbackExecutor = executor72;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNull(converter64);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor72);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter21.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter21.logLevel = logLevel27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log19, logLevel27);
        builder0.logLevel = logLevel27;
        retrofit.RequestInterceptor requestInterceptor31 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder32.setLog(log37);
        retrofit.RestAdapter restAdapter39 = builder32.build();
        retrofit.converter.Converter converter40 = null;
        builder32.converter = converter40;
        retrofit.RestAdapter restAdapter42 = builder32.build();
        retrofit.Server server43 = builder32.server;
        builder0.server = server43;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(server43);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        retrofit.client.Response response9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response11 = restAdapter0.logAndReplaceResponse("", response9, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(log7);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter restAdapter8 = builder0.build();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = builder9.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor11 = builder9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = builder9.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.Profiler profiler18 = null;
        builder17.profiler = profiler18;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder17.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = builder17.build();
        retrofit.client.Client.Provider provider23 = builder17.clientProvider;
        builder9.clientProvider = provider23;
        retrofit.client.Client.Provider provider25 = builder9.clientProvider;
        retrofit.RestAdapter.Builder builder26 = builder0.setClient(provider25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = builder31.build();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel34 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder0.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = builder36.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor38 = builder36.requestInterceptor;
        retrofit.ErrorHandler errorHandler39 = null;
        builder36.errorHandler = errorHandler39;
        retrofit.converter.Converter converter41 = null;
        builder36.converter = converter41;
        retrofit.ErrorHandler errorHandler43 = null;
        builder36.errorHandler = errorHandler43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.Profiler profiler50 = null;
        builder49.profiler = profiler50;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        builder49.requestInterceptor = requestInterceptor52;
        retrofit.RestAdapter restAdapter54 = builder49.build();
        retrofit.converter.Converter converter55 = restAdapter54.converter;
        retrofit.RestAdapter.Builder builder56 = builder36.setConverter(converter55);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log58 = restAdapter57.log;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter57.requestInterceptor = requestInterceptor59;
        retrofit.RestAdapter.LogLevel logLevel61 = null;
        restAdapter57.logLevel = logLevel61;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter63.logLevel;
        retrofit.converter.Converter converter66 = null;
        restAdapter63.converter = converter66;
        retrofit.ErrorHandler errorHandler68 = restAdapter63.errorHandler;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log70 = restAdapter69.log;
        retrofit.ErrorHandler errorHandler71 = restAdapter69.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter69.new RestHandler();
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.Profiler profiler78 = null;
        builder77.profiler = profiler78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.httpExecutor = executor81;
        retrofit.RestAdapter.Builder builder84 = builder80.setServer("hi!");
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder86 = builder80.setLog(log85);
        retrofit.RestAdapter restAdapter87 = builder80.build();
        retrofit.converter.Converter converter88 = null;
        builder80.converter = converter88;
        retrofit.ErrorHandler errorHandler90 = null;
        builder80.errorHandler = errorHandler90;
        retrofit.RequestInterceptor requestInterceptor92 = builder80.requestInterceptor;
        builder77.requestInterceptor = requestInterceptor92;
        restAdapter69.requestInterceptor = requestInterceptor92;
        restAdapter63.requestInterceptor = requestInterceptor92;
        restAdapter57.requestInterceptor = requestInterceptor92;
        retrofit.RestAdapter.Builder builder97 = builder56.setRequestInterceptor(requestInterceptor92);
        builder0.requestInterceptor = requestInterceptor92;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(restAdapter8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(provider23);
        org.junit.Assert.assertNotNull(provider25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(converter55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertNull(errorHandler68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        java.util.List<retrofit.client.Header> headerList12 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList12, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = request14.getBody();
        retrofit.mime.TypedOutput typedOutput16 = request14.getBody();
        java.lang.String str17 = request14.getMethod();
        java.lang.String str18 = request14.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor26 = builder21.httpExecutor;
        retrofit.Profiler profiler27 = builder21.profiler;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log29 = restAdapter28.log;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.LogLevel logLevel32 = null;
        restAdapter28.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter34.logLevel;
        retrofit.converter.Converter converter37 = null;
        restAdapter34.converter = converter37;
        retrofit.ErrorHandler errorHandler39 = restAdapter34.errorHandler;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log41 = restAdapter40.log;
        retrofit.ErrorHandler errorHandler42 = restAdapter40.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.Profiler profiler49 = null;
        builder48.profiler = profiler49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("hi!");
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder51.setLog(log56);
        retrofit.RestAdapter restAdapter58 = builder51.build();
        retrofit.converter.Converter converter59 = null;
        builder51.converter = converter59;
        retrofit.ErrorHandler errorHandler61 = null;
        builder51.errorHandler = errorHandler61;
        retrofit.RequestInterceptor requestInterceptor63 = builder51.requestInterceptor;
        builder48.requestInterceptor = requestInterceptor63;
        restAdapter40.requestInterceptor = requestInterceptor63;
        restAdapter34.requestInterceptor = requestInterceptor63;
        restAdapter28.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter.Builder builder68 = builder21.setRequestInterceptor(requestInterceptor63);
        retrofit.RestAdapter restAdapter69 = builder21.build();
        retrofit.RestAdapter.LogLevel logLevel70 = builder21.logLevel;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.Server server8 = null;
        builder0.server = server8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        java.util.concurrent.Executor executor15 = null;
        builder10.httpExecutor = executor15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log18 = restAdapter17.log;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.Profiler profiler25 = restAdapter21.profiler;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.Profiler profiler49 = builder48.profiler;
        retrofit.RestAdapter.LogLevel logLevel50 = builder48.logLevel;
        restAdapter21.logLevel = logLevel50;
        java.util.concurrent.Executor executor52 = restAdapter21.callbackExecutor;
        retrofit.Server server53 = restAdapter21.server;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter55 = builder54.converter;
        retrofit.Profiler profiler56 = null;
        builder54.profiler = profiler56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.client.Client.Provider provider61 = null;
        builder58.clientProvider = provider61;
        retrofit.RestAdapter.Builder builder64 = builder58.setServer("hi!");
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = builder65.build();
        java.util.concurrent.Executor executor73 = restAdapter72.httpExecutor;
        builder64.callbackExecutor = executor73;
        builder54.callbackExecutor = executor73;
        restAdapter21.httpExecutor = executor73;
        restAdapter17.callbackExecutor = executor73;
        builder10.callbackExecutor = executor73;
        java.util.concurrent.Executor executor79 = builder10.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor80 = builder10.requestInterceptor;
        java.util.concurrent.Executor executor81 = builder10.callbackExecutor;
        builder0.httpExecutor = executor81;
        retrofit.RestAdapter.Builder builder84 = builder0.setServer("hi!");
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder5.logLevel = logLevel10;
        retrofit.converter.Converter converter12 = null;
        builder5.converter = converter12;
        retrofit.client.Client.Provider provider14 = null;
        builder5.clientProvider = provider14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        restAdapter18.log = log30;
        retrofit.ErrorHandler errorHandler34 = null;
        restAdapter18.errorHandler = errorHandler34;
        retrofit.RestAdapter.Log log36 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder37 = builder16.setLog(log36);
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = builder39.build();
        java.util.concurrent.Executor executor47 = restAdapter46.httpExecutor;
        builder16.callbackExecutor = executor47;
        builder5.httpExecutor = executor47;
        restAdapter0.httpExecutor = executor47;
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter53.requestInterceptor;
        java.util.concurrent.Executor executor55 = restAdapter53.callbackExecutor;
        retrofit.converter.Converter converter56 = null;
        restAdapter53.converter = converter56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter59 = builder58.converter;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor61 = restAdapter60.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        restAdapter60.requestInterceptor = requestInterceptor62;
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel73);
        restAdapter60.log = log72;
        retrofit.ErrorHandler errorHandler76 = null;
        restAdapter60.errorHandler = errorHandler76;
        retrofit.RestAdapter.Log log78 = restAdapter60.log;
        retrofit.RestAdapter.Builder builder79 = builder58.setLog(log78);
        restAdapter53.log = log78;
        retrofit.Profiler profiler81 = null;
        restAdapter53.profiler = profiler81;
        retrofit.converter.Converter converter83 = null;
        restAdapter53.converter = converter83;
        java.util.concurrent.Executor executor85 = restAdapter53.httpExecutor;
        retrofit.RestAdapter.Log log86 = restAdapter53.log;
        restAdapter0.log = log86;
        retrofit.client.Response response89 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response91 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response89, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(executor85);
        org.junit.Assert.assertNotNull(log86);
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", headerList12, typedOutput13);
        java.lang.String str15 = request14.getMethod();
        retrofit.mime.TypedOutput typedOutput16 = request14.getBody();
        java.util.List<retrofit.client.Header> headerList17 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        java.lang.String str20 = request19.getMethod();
        java.lang.String str21 = request19.getMethod();
        retrofit.mime.TypedOutput typedOutput22 = request19.getBody();
        retrofit.mime.TypedOutput typedOutput23 = request19.getBody();
        java.lang.String str24 = request19.getMethod();
        java.lang.String str25 = request19.getMethod();
        retrofit.mime.TypedOutput typedOutput26 = request19.getBody();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertNull(typedOutput23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(typedOutput26);
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.Profiler profiler10 = null;
        restAdapter0.profiler = profiler10;
        retrofit.Profiler profiler12 = null;
        restAdapter0.profiler = profiler12;
        java.util.concurrent.Executor executor14 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor15 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor16 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log19 = restAdapter18.log;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.Profiler profiler21 = restAdapter18.profiler;
        retrofit.Profiler profiler22 = null;
        restAdapter18.profiler = profiler22;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter18.requestInterceptor = requestInterceptor24;
        retrofit.Server server26 = null;
        restAdapter18.server = server26;
        java.util.concurrent.Executor executor28 = restAdapter18.callbackExecutor;
        retrofit.Profiler profiler29 = restAdapter18.profiler;
        java.util.concurrent.Executor executor30 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = null;
        builder31.converter = converter32;
        retrofit.client.Client.Provider provider34 = null;
        builder31.clientProvider = provider34;
        java.util.concurrent.Executor executor36 = builder31.httpExecutor;
        java.util.concurrent.Executor executor37 = null;
        builder31.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean46 = logLevel45.log();
        builder43.logLevel = logLevel45;
        retrofit.RestAdapter restAdapter48 = builder43.build();
        retrofit.RestAdapter.Log log49 = restAdapter48.log;
        builder31.log = log49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor52 = restAdapter51.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter51.logLevel;
        retrofit.client.Client.Provider provider54 = restAdapter51.clientProvider;
        java.util.concurrent.Executor executor55 = restAdapter51.httpExecutor;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.Server server58 = restAdapter56.server;
        retrofit.client.Client.Provider provider59 = null;
        restAdapter56.clientProvider = provider59;
        retrofit.Server server61 = null;
        restAdapter56.server = server61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.httpExecutor = executor64;
        retrofit.RestAdapter.Builder builder67 = builder63.setServer("hi!");
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder69 = builder63.setLog(log68);
        retrofit.Profiler profiler70 = null;
        builder69.profiler = profiler70;
        retrofit.client.Client.Provider provider72 = builder69.clientProvider;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter73.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        restAdapter73.requestInterceptor = requestInterceptor75;
        java.util.concurrent.Executor executor77 = restAdapter73.httpExecutor;
        java.util.concurrent.Executor executor78 = restAdapter73.httpExecutor;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.Profiler profiler84 = null;
        builder83.profiler = profiler84;
        retrofit.RequestInterceptor requestInterceptor86 = null;
        builder83.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter restAdapter88 = builder83.build();
        retrofit.converter.Converter converter89 = restAdapter88.converter;
        restAdapter73.converter = converter89;
        retrofit.RestAdapter.Builder builder91 = builder69.setConverter(converter89);
        restAdapter56.converter = converter89;
        restAdapter51.converter = converter89;
        retrofit.RestAdapter.Builder builder94 = builder31.setConverter(converter89);
        restAdapter18.converter = converter89;
        restAdapter0.converter = converter89;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(provider72);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(converter89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        java.util.List<retrofit.client.Header> headerList13 = request12.getHeaders();
        java.lang.String str14 = request12.getMethod();
        java.lang.String str15 = request12.getUrl();
        java.lang.String str16 = request12.getUrl();
        java.util.List<retrofit.client.Header> headerList17 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        java.lang.String str20 = request19.getUrl();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.client.Client.Provider provider15 = builder14.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean17 = logLevel16.log();
        builder14.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter19 = builder14.build();
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter20.requestInterceptor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.converter.Converter converter23 = null;
        restAdapter20.converter = converter23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = builder25.converter;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.RestAdapter.Log log45 = restAdapter27.log;
        retrofit.RestAdapter.Builder builder46 = builder25.setLog(log45);
        restAdapter20.log = log45;
        retrofit.RestAdapter.Builder builder48 = builder14.setLog(log45);
        retrofit.ErrorHandler errorHandler49 = null;
        builder14.errorHandler = errorHandler49;
        retrofit.client.Client.Provider provider51 = builder14.clientProvider;
        restAdapter0.clientProvider = provider51;
        retrofit.Profiler profiler53 = restAdapter0.profiler;
        retrofit.client.Header[] headerArray58 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList59 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList59, headerArray58);
        retrofit.mime.TypedOutput typedOutput61 = null;
        retrofit.client.Request request62 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList59, typedOutput61);
        java.lang.String str63 = request62.getUrl();
        java.util.List<retrofit.client.Header> headerList64 = request62.getHeaders();
        java.lang.String str65 = request62.getMethod();
        retrofit.mime.TypedOutput typedOutput66 = request62.getBody();
        java.util.List<retrofit.client.Header> headerList67 = request62.getHeaders();
        java.util.List<retrofit.client.Header> headerList68 = request62.getHeaders();
        retrofit.mime.TypedOutput typedOutput69 = null;
        retrofit.client.Request request70 = new retrofit.client.Request("hi!", "hi!", headerList68, typedOutput69);
        java.lang.String str71 = request70.getMethod();
        retrofit.mime.TypedOutput typedOutput72 = request70.getBody();
        retrofit.mime.TypedOutput typedOutput73 = request70.getBody();
        retrofit.mime.TypedOutput typedOutput74 = request70.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request75 = restAdapter0.logAndReplaceRequest(request70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(provider51);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNotNull(headerArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(headerList64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(typedOutput66);
        org.junit.Assert.assertNotNull(headerList67);
        org.junit.Assert.assertNotNull(headerList68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNull(typedOutput72);
        org.junit.Assert.assertNull(typedOutput73);
        org.junit.Assert.assertNull(typedOutput74);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.converter.Converter converter5 = null;
        restAdapter2.converter = converter5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        restAdapter2.log = log27;
        log27.log("");
        log27.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder34 = builder0.setLog(log27);
        builder34.ensureSaneDefaults();
        retrofit.Profiler profiler36 = null;
        builder34.profiler = profiler36;
        retrofit.client.Client client38 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder39 = builder34.setClient(client38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.setLogLevel(logLevel4);
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter9.logLevel;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        builder12.logLevel = logLevel28;
        retrofit.converter.Converter converter31 = builder12.converter;
        retrofit.ErrorHandler errorHandler32 = builder12.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel33 = builder12.logLevel;
        retrofit.converter.Converter converter34 = builder12.converter;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.client.Client.Provider provider38 = null;
        builder35.clientProvider = provider38;
        retrofit.converter.Converter converter40 = null;
        builder35.converter = converter40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        retrofit.Profiler profiler53 = restAdapter52.profiler;
        java.util.concurrent.Executor executor54 = restAdapter52.httpExecutor;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter56 = builder55.converter;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter57.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter57.requestInterceptor = requestInterceptor59;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter57.log = log69;
        retrofit.ErrorHandler errorHandler73 = null;
        restAdapter57.errorHandler = errorHandler73;
        retrofit.RestAdapter.Log log75 = restAdapter57.log;
        retrofit.RestAdapter.Builder builder76 = builder55.setLog(log75);
        retrofit.Profiler profiler77 = builder76.profiler;
        retrofit.client.Client.Provider provider78 = builder76.clientProvider;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter81 = builder80.build();
        retrofit.RestAdapter.Log log82 = builder80.log;
        retrofit.RestAdapter restAdapter83 = builder80.build();
        retrofit.converter.Converter converter84 = null;
        restAdapter83.converter = converter84;
        retrofit.Server server86 = restAdapter83.server;
        restAdapter52.server = server86;
        retrofit.RestAdapter.Builder builder88 = builder35.setServer(server86);
        builder12.server = server86;
        restAdapter9.server = server86;
        restAdapter0.server = server86;
        retrofit.RequestInterceptor requestInterceptor92 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter93 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(profiler77);
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(requestInterceptor92);
        org.junit.Assert.assertNull(converter93);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        java.util.List<retrofit.client.Header> headerList13 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("hi!", "", headerList13, typedOutput14);
        java.lang.String str16 = request15.getMethod();
        java.util.List<retrofit.client.Header> headerList17 = request15.getHeaders();
        java.util.List<retrofit.client.Header> headerList18 = request15.getHeaders();
        java.util.List<retrofit.client.Header> headerList19 = request15.getHeaders();
        java.util.List<retrofit.client.Header> headerList20 = request15.getHeaders();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList20);
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.converter.Converter converter10 = restAdapter7.converter;
        retrofit.client.Client.Provider provider11 = null;
        restAdapter7.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = restAdapter7.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNotNull(converter10);
        org.junit.Assert.assertNotNull(errorHandler13);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        java.util.concurrent.Executor executor12 = null;
        builder7.httpExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = builder7.build();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log16 = restAdapter15.log;
        retrofit.ErrorHandler errorHandler17 = restAdapter15.errorHandler;
        retrofit.client.Client.Provider provider18 = null;
        restAdapter15.clientProvider = provider18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter21 = builder20.converter;
        retrofit.RestAdapter.LogLevel logLevel22 = builder20.logLevel;
        builder20.ensureSaneDefaults();
        retrofit.client.Client.Provider provider24 = null;
        builder20.clientProvider = provider24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = builder34.setLog(log39);
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter41.logLevel = logLevel43;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter41.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter41.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log39, logLevel47);
        builder20.logLevel = logLevel47;
        retrofit.client.Client.Provider provider51 = null;
        builder20.clientProvider = provider51;
        retrofit.converter.Converter converter53 = builder20.converter;
        restAdapter15.converter = converter53;
        retrofit.RestAdapter.Builder builder55 = builder7.setConverter(converter53);
        restAdapter0.converter = converter53;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.Profiler profiler11 = null;
        builder10.profiler = profiler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder13.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = builder13.requestInterceptor;
        builder10.requestInterceptor = requestInterceptor25;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.client.Client.Provider provider31 = null;
        builder28.clientProvider = provider31;
        retrofit.RestAdapter.Builder builder34 = builder28.setServer("hi!");
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.Profiler profiler40 = null;
        builder39.profiler = profiler40;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        builder39.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter restAdapter44 = builder39.build();
        retrofit.converter.Converter converter45 = restAdapter44.converter;
        retrofit.RestAdapter.Builder builder46 = builder28.setConverter(converter45);
        restAdapter0.converter = converter45;
        retrofit.converter.Converter converter48 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.client.Client.Provider provider52 = null;
        builder49.clientProvider = provider52;
        retrofit.client.Client.Provider provider54 = builder49.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder56 = builder49.setLogLevel(logLevel55);
        java.util.concurrent.Executor executor57 = builder56.callbackExecutor;
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.client.Client.Provider provider62 = null;
        builder59.clientProvider = provider62;
        retrofit.RestAdapter.Builder builder65 = builder59.setServer("hi!");
        retrofit.Profiler profiler66 = builder59.profiler;
        retrofit.RestAdapter restAdapter67 = builder59.build();
        retrofit.converter.Converter converter68 = restAdapter67.converter;
        retrofit.RestAdapter.Builder builder69 = builder56.setConverter(converter68);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.client.Client.Provider provider73 = null;
        builder70.clientProvider = provider73;
        retrofit.RestAdapter.Builder builder76 = builder70.setServer("hi!");
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = null;
        builder77.httpExecutor = executor78;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("hi!");
        retrofit.Profiler profiler82 = null;
        builder81.profiler = profiler82;
        retrofit.RequestInterceptor requestInterceptor84 = null;
        builder81.requestInterceptor = requestInterceptor84;
        retrofit.RestAdapter restAdapter86 = builder81.build();
        retrofit.converter.Converter converter87 = restAdapter86.converter;
        retrofit.RestAdapter.Builder builder88 = builder70.setConverter(converter87);
        retrofit.RestAdapter.Builder builder89 = builder56.setConverter(converter87);
        retrofit.converter.Converter converter90 = builder56.converter;
        retrofit.converter.Converter converter91 = builder56.converter;
        retrofit.RestAdapter.Log log92 = builder56.log;
        restAdapter0.log = log92;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(converter45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(converter48);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(profiler66);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(converter68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(converter87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(converter90);
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNotNull(log92);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider8 = null;
        restAdapter7.clientProvider = provider8;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter.LogLevel logLevel13 = builder11.logLevel;
        restAdapter7.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.client.Client.Provider provider18 = null;
        builder15.clientProvider = provider18;
        retrofit.client.Client.Provider provider20 = builder15.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider23 = builder15.clientProvider;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter24.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter24.requestInterceptor = requestInterceptor26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        restAdapter24.log = log36;
        retrofit.ErrorHandler errorHandler40 = null;
        restAdapter24.errorHandler = errorHandler40;
        java.util.concurrent.Executor executor42 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter44 = builder43.converter;
        retrofit.RestAdapter.LogLevel logLevel45 = builder43.logLevel;
        builder43.ensureSaneDefaults();
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = builder55.setLog(log60);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter62.logLevel = logLevel64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        restAdapter62.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter62.logLevel = logLevel68;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log60, logLevel68);
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder71.setLog(log76);
        restAdapter70.log = log76;
        builder43.log = log76;
        java.util.concurrent.Executor executor80 = null;
        builder43.httpExecutor = executor80;
        retrofit.converter.Converter converter82 = null;
        builder43.converter = converter82;
        retrofit.ErrorHandler errorHandler84 = builder43.errorHandler;
        restAdapter24.errorHandler = errorHandler84;
        retrofit.RestAdapter.Builder builder86 = builder15.setErrorHandler(errorHandler84);
        restAdapter7.errorHandler = errorHandler84;
        restAdapter0.errorHandler = errorHandler84;
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter0.logLevel;
        retrofit.RestAdapter.Log log91 = restAdapter0.log;
        retrofit.converter.Converter converter92 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log91);
        org.junit.Assert.assertNull(converter92);
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.client.Client.Provider provider23 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor26 = builder21.httpExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.Profiler profiler29 = null;
        builder27.profiler = profiler29;
        retrofit.ErrorHandler errorHandler31 = null;
        builder27.errorHandler = errorHandler31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter35.requestInterceptor = requestInterceptor37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        restAdapter35.log = log47;
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter35.errorHandler = errorHandler51;
        retrofit.RestAdapter.Log log53 = restAdapter35.log;
        retrofit.RestAdapter.Builder builder54 = builder33.setLog(log53);
        retrofit.RestAdapter.Builder builder55 = builder27.setLog(log53);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = builder56.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor58 = builder56.requestInterceptor;
        retrofit.ErrorHandler errorHandler59 = null;
        builder56.errorHandler = errorHandler59;
        retrofit.converter.Converter converter61 = null;
        builder56.converter = converter61;
        retrofit.ErrorHandler errorHandler63 = null;
        builder56.errorHandler = errorHandler63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.Profiler profiler70 = null;
        builder69.profiler = profiler70;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        builder69.requestInterceptor = requestInterceptor72;
        retrofit.RestAdapter restAdapter74 = builder69.build();
        retrofit.converter.Converter converter75 = restAdapter74.converter;
        retrofit.RestAdapter.Builder builder76 = builder56.setConverter(converter75);
        builder55.converter = converter75;
        retrofit.RestAdapter.Builder builder78 = builder21.setConverter(converter75);
        retrofit.client.Client.Provider provider79 = builder78.clientProvider;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(converter75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(provider79);
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.converter.Converter converter11 = builder6.converter;
        java.util.concurrent.Executor executor12 = builder6.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder6.setLogLevel(logLevel15);
        java.util.concurrent.Executor executor18 = builder17.httpExecutor;
        retrofit.RestAdapter.Log log19 = builder17.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log19);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.ErrorHandler errorHandler10 = builder0.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(errorHandler10);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.converter.Converter converter11 = builder6.converter;
        java.util.concurrent.Executor executor12 = builder6.callbackExecutor;
        retrofit.converter.Converter converter13 = builder6.converter;
        retrofit.RestAdapter restAdapter14 = builder6.build();
        retrofit.client.Client.Provider provider15 = null;
        builder6.clientProvider = provider15;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNotNull(restAdapter14);
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter.LogLevel logLevel17 = builder15.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder14.setLogLevel(logLevel17);
        retrofit.ErrorHandler errorHandler19 = builder14.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel20 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder0.setLogLevel(logLevel20);
        java.util.concurrent.Executor executor22 = builder21.callbackExecutor;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log32 = restAdapter31.log;
        java.util.concurrent.Executor executor33 = restAdapter31.callbackExecutor;
        retrofit.Profiler profiler34 = restAdapter31.profiler;
        retrofit.Profiler profiler35 = null;
        restAdapter31.profiler = profiler35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        restAdapter31.log = log45;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        builder49.logLevel = logLevel65;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log45, logLevel65);
        log45.log("");
        log45.log("");
        retrofit.RestAdapter.Builder builder73 = builder21.setLog(log45);
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder74.setLog(log79);
        retrofit.Server server81 = null;
        retrofit.client.Client.Provider provider82 = null;
        java.util.concurrent.Executor executor83 = null;
        java.util.concurrent.Executor executor84 = null;
        retrofit.RequestInterceptor requestInterceptor85 = null;
        retrofit.converter.Converter converter86 = null;
        retrofit.Profiler profiler87 = null;
        retrofit.ErrorHandler errorHandler88 = null;
        retrofit.RestAdapter.Log log89 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter91 = new retrofit.RestAdapter(server81, provider82, executor83, executor84, requestInterceptor85, converter86, profiler87, errorHandler88, log89, logLevel90);
        builder74.logLevel = logLevel90;
        retrofit.converter.Converter converter93 = builder74.converter;
        retrofit.RequestInterceptor requestInterceptor94 = null;
        builder74.requestInterceptor = requestInterceptor94;
        retrofit.RestAdapter restAdapter96 = builder74.build();
        retrofit.client.Client.Provider provider97 = builder74.clientProvider;
        retrofit.RestAdapter.Builder builder98 = builder21.setClient(provider97);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter93);
        org.junit.Assert.assertNotNull(restAdapter96);
        org.junit.Assert.assertNotNull(provider97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.converter.Converter converter12 = restAdapter10.converter;
        java.util.concurrent.Executor executor13 = null;
        restAdapter10.callbackExecutor = executor13;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.logLevel = logLevel15;
        restAdapter0.setLogLevel(logLevel15);
        retrofit.Profiler profiler18 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(requestInterceptor20);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.Profiler profiler19 = builder0.profiler;
        retrofit.ErrorHandler errorHandler20 = null;
        builder0.errorHandler = errorHandler20;
        retrofit.Profiler profiler22 = builder0.profiler;
        retrofit.ErrorHandler errorHandler23 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        restAdapter34.log = log46;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean51 = logLevel50.log();
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log46, logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder24.setLog(log46);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder54.logLevel = logLevel59;
        retrofit.converter.Converter converter61 = null;
        builder54.converter = converter61;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter63.requestInterceptor;
        retrofit.converter.Converter converter65 = restAdapter63.converter;
        java.util.concurrent.Executor executor66 = null;
        restAdapter63.callbackExecutor = executor66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor69 = null;
        restAdapter68.httpExecutor = executor69;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        restAdapter68.requestInterceptor = requestInterceptor71;
        retrofit.RestAdapter.Log log73 = restAdapter68.log;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter68.logLevel = logLevel74;
        restAdapter63.logLevel = logLevel74;
        retrofit.RestAdapter.Builder builder77 = builder54.setLogLevel(logLevel74);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("hi!");
        retrofit.Profiler profiler83 = null;
        builder82.profiler = profiler83;
        retrofit.RequestInterceptor requestInterceptor85 = null;
        builder82.requestInterceptor = requestInterceptor85;
        retrofit.RestAdapter restAdapter87 = builder82.build();
        retrofit.converter.Converter converter88 = restAdapter87.converter;
        java.util.concurrent.Executor executor89 = restAdapter87.callbackExecutor;
        builder54.httpExecutor = executor89;
        retrofit.RestAdapter restAdapter91 = builder54.build();
        retrofit.client.Client.Provider provider92 = builder54.clientProvider;
        builder24.clientProvider = provider92;
        builder0.clientProvider = provider92;
        retrofit.Server server95 = builder0.server;
        java.util.concurrent.Executor executor96 = builder0.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(converter65);
        org.junit.Assert.assertNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(converter88);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(provider92);
        org.junit.Assert.assertNotNull(server95);
        org.junit.Assert.assertNull(executor96);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.LogLevel logLevel7 = builder5.logLevel;
        builder5.ensureSaneDefaults();
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder17.setLog(log22);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter24.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter24.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log22, logLevel30);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        restAdapter32.log = log38;
        builder5.log = log38;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = builder42.callbackExecutor;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        retrofit.RestAdapter.Builder builder55 = builder42.setLogLevel(logLevel53);
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log57 = restAdapter56.log;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = builder58.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor60 = builder58.requestInterceptor;
        retrofit.ErrorHandler errorHandler61 = null;
        builder58.errorHandler = errorHandler61;
        retrofit.converter.Converter converter63 = null;
        builder58.converter = converter63;
        retrofit.ErrorHandler errorHandler65 = null;
        builder58.errorHandler = errorHandler65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.Profiler profiler72 = null;
        builder71.profiler = profiler72;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        builder71.requestInterceptor = requestInterceptor74;
        retrofit.RestAdapter restAdapter76 = builder71.build();
        retrofit.converter.Converter converter77 = restAdapter76.converter;
        retrofit.RestAdapter.Builder builder78 = builder58.setConverter(converter77);
        restAdapter56.converter = converter77;
        builder42.converter = converter77;
        retrofit.RestAdapter.Builder builder81 = builder5.setConverter(converter77);
        java.util.concurrent.Executor executor82 = builder81.callbackExecutor;
        restAdapter0.callbackExecutor = executor82;
        retrofit.Profiler profiler84 = null;
        restAdapter0.profiler = profiler84;
        retrofit.Server server86 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor87 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(converter77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNull(server86);
        org.junit.Assert.assertNull(requestInterceptor87);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = restAdapter7.httpExecutor;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter7.clientProvider = provider9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter7.logLevel;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log14 = restAdapter13.log;
        retrofit.ErrorHandler errorHandler15 = restAdapter13.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter13.logLevel;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = builder22.build();
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        java.lang.String str31 = request30.getMethod();
        java.lang.String str32 = request30.getMethod();
        retrofit.client.Request request33 = restAdapter23.logAndReplaceRequest(request30);
        retrofit.converter.Converter converter34 = restAdapter23.converter;
        restAdapter13.converter = converter34;
        retrofit.Profiler profiler36 = null;
        restAdapter13.profiler = profiler36;
        retrofit.Server server38 = restAdapter13.server;
        retrofit.converter.Converter converter39 = restAdapter13.converter;
        restAdapter7.converter = converter39;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(converter34);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNotNull(converter39);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.Profiler profiler9 = null;
        builder8.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        retrofit.converter.Converter converter19 = null;
        builder11.converter = converter19;
        retrofit.ErrorHandler errorHandler21 = null;
        builder11.errorHandler = errorHandler21;
        retrofit.RequestInterceptor requestInterceptor23 = builder11.requestInterceptor;
        builder8.requestInterceptor = requestInterceptor23;
        restAdapter0.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.client.Client.Provider provider28 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor31 = builder29.requestInterceptor;
        java.util.concurrent.Executor executor32 = builder29.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel33 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.Profiler profiler39 = null;
        builder38.profiler = profiler39;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        builder38.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter restAdapter43 = builder38.build();
        retrofit.converter.Converter converter44 = null;
        builder38.converter = converter44;
        retrofit.client.Client.Provider provider46 = builder38.clientProvider;
        retrofit.RestAdapter.Builder builder47 = builder29.setClient(provider46);
        restAdapter0.clientProvider = provider46;
        retrofit.client.Client.Provider provider49 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(provider46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(provider49);
        org.junit.Assert.assertNull(logLevel50);
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Server server22 = null;
        builder0.server = server22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.client.Client.Provider provider29 = builder28.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean31 = logLevel30.log();
        builder28.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter33 = builder28.build();
        retrofit.converter.Converter converter34 = restAdapter33.converter;
        retrofit.RestAdapter.Builder builder35 = builder0.setConverter(converter34);
        retrofit.ErrorHandler errorHandler36 = builder0.errorHandler;
        java.util.concurrent.Executor executor37 = builder0.callbackExecutor;
        retrofit.Profiler profiler38 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder39 = builder0.setProfiler(profiler38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(converter34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(executor37);
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.Server server8 = null;
        restAdapter0.server = server8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.client.Client.Provider provider13 = null;
        builder10.clientProvider = provider13;
        retrofit.client.Client.Provider provider15 = builder10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel16);
        retrofit.client.Client.Provider provider18 = builder10.clientProvider;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter19.log = log31;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter19.errorHandler = errorHandler35;
        java.util.concurrent.Executor executor37 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = builder38.converter;
        retrofit.RestAdapter.LogLevel logLevel40 = builder38.logLevel;
        builder38.ensureSaneDefaults();
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = builder50.setLog(log55);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter57.logLevel = logLevel59;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        restAdapter57.requestInterceptor = requestInterceptor61;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter57.logLevel = logLevel63;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log55, logLevel63);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder66.setLog(log71);
        restAdapter65.log = log71;
        builder38.log = log71;
        java.util.concurrent.Executor executor75 = null;
        builder38.httpExecutor = executor75;
        retrofit.converter.Converter converter77 = null;
        builder38.converter = converter77;
        retrofit.ErrorHandler errorHandler79 = builder38.errorHandler;
        restAdapter19.errorHandler = errorHandler79;
        retrofit.RestAdapter.Builder builder81 = builder10.setErrorHandler(errorHandler79);
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor83 = null;
        builder82.httpExecutor = executor83;
        retrofit.RestAdapter.Builder builder86 = builder82.setServer("hi!");
        retrofit.Profiler profiler87 = null;
        builder86.profiler = profiler87;
        retrofit.RequestInterceptor requestInterceptor89 = null;
        builder86.requestInterceptor = requestInterceptor89;
        retrofit.RestAdapter restAdapter91 = builder86.build();
        retrofit.converter.Converter converter92 = null;
        builder86.converter = converter92;
        retrofit.client.Client.Provider provider94 = builder86.clientProvider;
        retrofit.RestAdapter.Builder builder95 = builder10.setClient(provider94);
        restAdapter0.clientProvider = provider94;
        retrofit.converter.Converter converter97 = restAdapter0.converter;
        retrofit.RestAdapter.Log log98 = restAdapter0.log;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(errorHandler79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(provider94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNull(converter97);
        org.junit.Assert.assertNull(log98);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.RestAdapter.Log log8 = restAdapter0.log;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        java.util.concurrent.Executor executor7 = null;
        builder0.callbackExecutor = executor7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.client.Client.Provider provider12 = null;
        builder9.clientProvider = provider12;
        retrofit.RestAdapter.Builder builder15 = builder9.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.Profiler profiler20 = restAdapter16.profiler;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter16.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter16.requestInterceptor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log24 = restAdapter23.log;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.Profiler profiler26 = restAdapter23.profiler;
        retrofit.Profiler profiler27 = null;
        restAdapter23.profiler = profiler27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        restAdapter23.log = log37;
        restAdapter16.log = log37;
        retrofit.RestAdapter.Builder builder42 = builder9.setLog(log37);
        log37.log("hi!");
        builder0.log = log37;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor47 = null;
        restAdapter46.httpExecutor = executor47;
        retrofit.client.Client.Provider provider49 = restAdapter46.clientProvider;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        java.util.concurrent.Executor executor52 = restAdapter50.callbackExecutor;
        retrofit.ErrorHandler errorHandler53 = restAdapter50.errorHandler;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter69.logLevel = logLevel71;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        restAdapter69.requestInterceptor = requestInterceptor73;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter69.logLevel = logLevel75;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log67, logLevel75);
        log67.log("Retrofit-Idle");
        restAdapter50.log = log67;
        restAdapter46.log = log67;
        retrofit.Server server82 = restAdapter46.server;
        retrofit.RestAdapter.Log log83 = restAdapter46.log;
        retrofit.RestAdapter.Builder builder84 = builder0.setLog(log83);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.converter.Converter converter10 = restAdapter0.converter;
        java.util.concurrent.Executor executor11 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler12 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server15 = builder13.server;
        retrofit.RestAdapter.LogLevel logLevel16 = builder13.logLevel;
        java.util.concurrent.Executor executor17 = builder13.httpExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.client.Client.Provider provider23 = builder22.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean25 = logLevel24.log();
        builder22.logLevel = logLevel24;
        builder13.logLevel = logLevel24;
        retrofit.RestAdapter.Builder builder29 = builder13.setServer("Retrofit-Idle");
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter.Log log33 = restAdapter31.log;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.client.Client.Provider provider37 = null;
        builder34.clientProvider = provider37;
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder40.setLog(log45);
        retrofit.RestAdapter restAdapter47 = builder40.build();
        retrofit.converter.Converter converter48 = null;
        builder40.converter = converter48;
        retrofit.ErrorHandler errorHandler50 = null;
        builder40.errorHandler = errorHandler50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = builder52.converter;
        retrofit.RestAdapter.LogLevel logLevel54 = builder52.logLevel;
        builder52.ensureSaneDefaults();
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.RestAdapter.Builder builder68 = builder64.setServer("hi!");
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder64.setLog(log69);
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter71.logLevel = logLevel73;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        restAdapter71.requestInterceptor = requestInterceptor75;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter71.logLevel = logLevel77;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log69, logLevel77);
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.httpExecutor = executor81;
        retrofit.RestAdapter.Builder builder84 = builder80.setServer("hi!");
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder86 = builder80.setLog(log85);
        restAdapter79.log = log85;
        builder52.log = log85;
        java.util.concurrent.Executor executor89 = null;
        builder52.httpExecutor = executor89;
        retrofit.converter.Converter converter91 = null;
        builder52.converter = converter91;
        retrofit.ErrorHandler errorHandler93 = builder52.errorHandler;
        retrofit.RestAdapter.Builder builder94 = builder40.setErrorHandler(errorHandler93);
        builder34.errorHandler = errorHandler93;
        restAdapter31.errorHandler = errorHandler93;
        builder13.errorHandler = errorHandler93;
        restAdapter0.errorHandler = errorHandler93;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(errorHandler93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = builder23.build();
        retrofit.converter.Converter converter31 = null;
        builder23.converter = converter31;
        retrofit.ErrorHandler errorHandler33 = null;
        builder23.errorHandler = errorHandler33;
        retrofit.RequestInterceptor requestInterceptor35 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.client.Client.Provider provider41 = builder40.clientProvider;
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("");
        builder40.log = log43;
        retrofit.Server server47 = builder40.server;
        builder23.server = server47;
        retrofit.RestAdapter.Builder builder49 = builder0.setServer(server47);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        java.util.concurrent.Executor executor52 = restAdapter50.callbackExecutor;
        retrofit.ErrorHandler errorHandler53 = restAdapter50.errorHandler;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter69.logLevel = logLevel71;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        restAdapter69.requestInterceptor = requestInterceptor73;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter69.logLevel = logLevel75;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log67, logLevel75);
        log67.log("Retrofit-Idle");
        restAdapter50.log = log67;
        log67.log("");
        retrofit.RestAdapter.Builder builder83 = builder0.setLog(log67);
        builder83.ensureSaneDefaults();
        java.util.concurrent.Executor executor85 = null;
        builder83.httpExecutor = executor85;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        retrofit.ErrorHandler errorHandler9 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor10 = restAdapter0.callbackExecutor;
        retrofit.Server server11 = restAdapter0.server;
        retrofit.Profiler profiler12 = null;
        restAdapter0.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter14.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter14.getLogLevel();
        retrofit.client.Client.Provider provider19 = null;
        restAdapter14.clientProvider = provider19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter14.logLevel;
        java.util.concurrent.Executor executor22 = restAdapter14.callbackExecutor;
        retrofit.Profiler profiler23 = restAdapter14.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter.LogLevel logLevel26 = builder24.logLevel;
        builder24.ensureSaneDefaults();
        retrofit.client.Client.Provider provider28 = null;
        builder24.clientProvider = provider28;
        retrofit.Profiler profiler30 = builder24.profiler;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = builder31.callbackExecutor;
        retrofit.RestAdapter.Log log33 = builder31.log;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.setLogLevel(logLevel57);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log50, logLevel57);
        retrofit.RestAdapter.Builder builder60 = builder31.setLogLevel(logLevel57);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        builder31.log = log66;
        retrofit.RestAdapter.Builder builder69 = builder24.setLog(log66);
        java.util.concurrent.Executor executor70 = builder69.httpExecutor;
        restAdapter14.httpExecutor = executor70;
        restAdapter0.callbackExecutor = executor70;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(executor70);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log6);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = builder23.build();
        java.util.concurrent.Executor executor31 = restAdapter30.httpExecutor;
        builder0.callbackExecutor = executor31;
        java.util.concurrent.Executor executor33 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter34.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        restAdapter34.log = log46;
        retrofit.ErrorHandler errorHandler50 = null;
        restAdapter34.errorHandler = errorHandler50;
        java.util.concurrent.Executor executor52 = restAdapter34.callbackExecutor;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter54 = builder53.converter;
        retrofit.RestAdapter.LogLevel logLevel55 = builder53.logLevel;
        builder53.ensureSaneDefaults();
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter72.logLevel = logLevel74;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        restAdapter72.requestInterceptor = requestInterceptor76;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter72.logLevel = logLevel78;
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log70, logLevel78);
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor82 = null;
        builder81.httpExecutor = executor82;
        retrofit.RestAdapter.Builder builder85 = builder81.setServer("hi!");
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder87 = builder81.setLog(log86);
        restAdapter80.log = log86;
        builder53.log = log86;
        java.util.concurrent.Executor executor90 = null;
        builder53.httpExecutor = executor90;
        retrofit.converter.Converter converter92 = null;
        builder53.converter = converter92;
        retrofit.ErrorHandler errorHandler94 = builder53.errorHandler;
        restAdapter34.errorHandler = errorHandler94;
        retrofit.RestAdapter.Builder builder96 = builder0.setErrorHandler(errorHandler94);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter97 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(errorHandler94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        java.util.concurrent.Executor executor6 = builder4.httpExecutor;
        retrofit.Profiler profiler7 = null;
        builder4.profiler = profiler7;
        retrofit.client.Client.Provider provider9 = builder4.clientProvider;
        retrofit.Profiler profiler10 = builder4.profiler;
        retrofit.RestAdapter.Log log11 = builder4.log;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter12.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.client.Client.Provider provider21 = builder20.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        builder20.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter25 = builder20.build();
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        java.util.concurrent.Executor executor28 = restAdapter26.callbackExecutor;
        retrofit.converter.Converter converter29 = null;
        restAdapter26.converter = converter29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter33.requestInterceptor = requestInterceptor35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        restAdapter33.log = log45;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter33.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = restAdapter33.log;
        retrofit.RestAdapter.Builder builder52 = builder31.setLog(log51);
        restAdapter26.log = log51;
        retrofit.RestAdapter.Builder builder54 = builder20.setLog(log51);
        restAdapter12.log = log51;
        log51.log("");
        builder4.log = log51;
        java.util.concurrent.Executor executor59 = null;
        builder4.callbackExecutor = executor59;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log13 = restAdapter12.log;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.Profiler profiler15 = restAdapter12.profiler;
        retrofit.Profiler profiler16 = null;
        restAdapter12.profiler = profiler16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter12.log = log26;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder30.setLog(log35);
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        builder30.logLevel = logLevel46;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log26, logLevel46);
        restAdapter0.logLevel = logLevel46;
        retrofit.Profiler profiler51 = restAdapter0.profiler;
        java.util.concurrent.Executor executor52 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor53 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(requestInterceptor53);
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.converter.Converter converter9 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor10 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter.Log log18 = builder11.log;
        retrofit.ErrorHandler errorHandler19 = null;
        builder11.errorHandler = errorHandler19;
        retrofit.RestAdapter restAdapter21 = builder11.build();
        retrofit.ErrorHandler errorHandler22 = builder11.errorHandler;
        builder0.errorHandler = errorHandler22;
        retrofit.RestAdapter restAdapter24 = builder0.build();
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = null;
        restAdapter25.httpExecutor = executor26;
        retrofit.Profiler profiler28 = null;
        restAdapter25.profiler = profiler28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter25.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.Profiler profiler35 = null;
        builder33.profiler = profiler35;
        retrofit.RestAdapter.Builder builder38 = builder33.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter39 = builder38.converter;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.client.Client.Provider provider43 = null;
        builder40.clientProvider = provider43;
        retrofit.client.Client.Provider provider45 = builder40.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel46);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.Profiler profiler53 = null;
        builder52.profiler = profiler53;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        builder52.requestInterceptor = requestInterceptor55;
        retrofit.RestAdapter restAdapter57 = builder52.build();
        retrofit.converter.Converter converter58 = restAdapter57.converter;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        log59.log("");
        restAdapter57.log = log59;
        retrofit.RestAdapter.Builder builder63 = builder40.setLog(log59);
        retrofit.RestAdapter.Builder builder64 = builder38.setLog(log59);
        retrofit.RestAdapter restAdapter65 = builder38.build();
        retrofit.RequestInterceptor requestInterceptor66 = builder38.requestInterceptor;
        restAdapter25.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.Builder builder68 = builder0.setRequestInterceptor(requestInterceptor66);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNotNull(converter58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = builder8.build();
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        java.lang.String str17 = request16.getMethod();
        java.lang.String str18 = request16.getMethod();
        retrofit.client.Request request19 = restAdapter9.logAndReplaceRequest(request16);
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter9.requestInterceptor;
        java.util.concurrent.Executor executor21 = null;
        restAdapter9.httpExecutor = executor21;
        retrofit.client.Header[] headerArray33 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList34 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList34, headerArray33);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList34, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList34, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList34, typedOutput40);
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList34, typedOutput42);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("Retrofit-Idle", "hi!", (java.util.List<retrofit.client.Header>) headerList34, typedOutput44);
        java.lang.String str46 = request45.getUrl();
        retrofit.mime.TypedOutput typedOutput47 = request45.getBody();
        retrofit.client.Request request48 = restAdapter9.logAndReplaceRequest(request45);
        java.util.List<retrofit.client.Header> headerList49 = request48.getHeaders();
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList49, typedOutput50);
        retrofit.mime.TypedOutput typedOutput52 = null;
        retrofit.client.Request request53 = new retrofit.client.Request("", "", headerList49, typedOutput52);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(headerArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNull(typedOutput47);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertNotNull(headerList49);
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        builder10.logLevel = logLevel12;
        builder0.logLevel = logLevel12;
        retrofit.ErrorHandler errorHandler16 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor17 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder18.setLog(log23);
        retrofit.ErrorHandler errorHandler25 = builder18.errorHandler;
        retrofit.client.Client.Provider provider26 = builder18.clientProvider;
        retrofit.Server server27 = null;
        builder18.server = server27;
        retrofit.converter.Converter converter29 = null;
        builder18.converter = converter29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter31.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        restAdapter31.requestInterceptor = requestInterceptor33;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter31.errorHandler = errorHandler35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter47.errorHandler = errorHandler48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = builder50.setLog(log55);
        retrofit.RestAdapter restAdapter57 = builder50.build();
        retrofit.converter.Converter converter58 = null;
        builder50.converter = converter58;
        retrofit.ErrorHandler errorHandler60 = null;
        builder50.errorHandler = errorHandler60;
        retrofit.RequestInterceptor requestInterceptor62 = builder50.requestInterceptor;
        restAdapter47.requestInterceptor = requestInterceptor62;
        restAdapter31.requestInterceptor = requestInterceptor62;
        retrofit.RestAdapter.Builder builder65 = builder18.setRequestInterceptor(requestInterceptor62);
        retrofit.RequestInterceptor requestInterceptor66 = builder65.requestInterceptor;
        retrofit.RestAdapter.Builder builder67 = builder0.setRequestInterceptor(requestInterceptor66);
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter restAdapter10 = builder0.build();
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter15.requestInterceptor = requestInterceptor17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        restAdapter15.log = log27;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter15.errorHandler = errorHandler31;
        retrofit.RestAdapter.Log log33 = restAdapter15.log;
        retrofit.RestAdapter.Builder builder34 = builder13.setLog(log33);
        retrofit.RequestInterceptor requestInterceptor35 = builder13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor36 = builder13.requestInterceptor;
        retrofit.RestAdapter.Builder builder38 = builder13.setServer("hi!");
        retrofit.Server server39 = builder13.server;
        retrofit.RestAdapter.LogLevel logLevel40 = builder13.logLevel;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.Server server43 = restAdapter41.server;
        retrofit.client.Client.Provider provider44 = null;
        restAdapter41.clientProvider = provider44;
        retrofit.Server server46 = null;
        restAdapter41.server = server46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter49 = null;
        restAdapter48.converter = converter49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter48.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log54 = restAdapter53.log;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        restAdapter53.requestInterceptor = requestInterceptor55;
        retrofit.RestAdapter.LogLevel logLevel57 = null;
        restAdapter53.logLevel = logLevel57;
        retrofit.ErrorHandler errorHandler59 = restAdapter53.errorHandler;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.Profiler profiler65 = null;
        builder64.profiler = profiler65;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        builder64.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter restAdapter69 = builder64.build();
        retrofit.converter.Converter converter70 = restAdapter69.converter;
        restAdapter53.converter = converter70;
        restAdapter48.converter = converter70;
        restAdapter41.converter = converter70;
        retrofit.RestAdapter.Builder builder74 = builder13.setConverter(converter70);
        restAdapter10.converter = converter70;
        retrofit.Server server76 = restAdapter10.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(converter70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(server76);
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter19.log = log31;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log31, logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder9.setLog(log31);
        retrofit.Server server39 = builder38.server;
        retrofit.RequestInterceptor requestInterceptor40 = builder38.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel41 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder42 = builder8.setLogLevel(logLevel41);
        retrofit.Profiler profiler43 = null;
        builder42.profiler = profiler43;
        retrofit.Profiler profiler45 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder46 = builder42.setProfiler(profiler45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(requestInterceptor7);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.Profiler profiler20 = restAdapter16.profiler;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter16.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter16.requestInterceptor = requestInterceptor22;
        retrofit.Profiler profiler24 = null;
        restAdapter16.profiler = profiler24;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.converter.Converter converter28 = restAdapter26.converter;
        java.util.concurrent.Executor executor29 = null;
        restAdapter26.callbackExecutor = executor29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter26.logLevel = logLevel31;
        restAdapter16.setLogLevel(logLevel31);
        builder9.logLevel = logLevel31;
        builder9.ensureSaneDefaults();
        java.util.concurrent.Executor executor36 = builder9.httpExecutor;
        retrofit.client.Client.Provider provider37 = builder9.clientProvider;
        restAdapter0.clientProvider = provider37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor41 = builder39.requestInterceptor;
        retrofit.ErrorHandler errorHandler42 = null;
        builder39.errorHandler = errorHandler42;
        retrofit.converter.Converter converter44 = null;
        builder39.converter = converter44;
        retrofit.client.Client.Provider provider46 = builder39.clientProvider;
        retrofit.RequestInterceptor requestInterceptor47 = builder39.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel48 = builder39.logLevel;
        builder39.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor50 = builder39.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.RestAdapter.Builder builder57 = builder53.setServer("hi!");
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder53.setLog(log58);
        retrofit.ErrorHandler errorHandler60 = builder53.errorHandler;
        retrofit.client.Client.Provider provider61 = builder53.clientProvider;
        retrofit.Server server62 = null;
        builder53.server = server62;
        builder53.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler65 = builder53.errorHandler;
        java.lang.reflect.Method method66 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj68 = restHandler52.invoke((java.lang.Object) builder53, method66, objArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNotNull(errorHandler65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.converter.Converter converter5 = null;
        restAdapter2.converter = converter5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        restAdapter2.log = log27;
        log27.log("");
        log27.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder34 = builder0.setLog(log27);
        retrofit.Profiler profiler35 = null;
        builder0.profiler = profiler35;
        retrofit.Profiler profiler37 = null;
        builder0.profiler = profiler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter40 = builder39.converter;
        retrofit.Profiler profiler41 = null;
        builder39.profiler = profiler41;
        retrofit.RestAdapter.Log log43 = builder39.log;
        builder39.ensureSaneDefaults();
        retrofit.converter.Converter converter45 = builder39.converter;
        java.util.concurrent.Executor executor46 = builder39.httpExecutor;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        retrofit.ErrorHandler errorHandler58 = null;
        restAdapter57.errorHandler = errorHandler58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder60.setLog(log65);
        retrofit.RestAdapter restAdapter67 = builder60.build();
        retrofit.converter.Converter converter68 = null;
        builder60.converter = converter68;
        retrofit.ErrorHandler errorHandler70 = null;
        builder60.errorHandler = errorHandler70;
        retrofit.RequestInterceptor requestInterceptor72 = builder60.requestInterceptor;
        restAdapter57.requestInterceptor = requestInterceptor72;
        retrofit.RestAdapter.Builder builder74 = builder39.setRequestInterceptor(requestInterceptor72);
        retrofit.RestAdapter.Builder builder75 = builder0.setRequestInterceptor(requestInterceptor72);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(converter40);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertNotNull(converter45);
        org.junit.Assert.assertNotNull(executor46);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(requestInterceptor72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor26);
        retrofit.client.Client.Provider provider29 = null;
        builder28.clientProvider = provider29;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("");
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log31);
        retrofit.RequestInterceptor requestInterceptor35 = builder34.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel36 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder37.setLog(log42);
        retrofit.RestAdapter restAdapter44 = builder37.build();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RestAdapter.Builder builder46 = builder34.setRequestInterceptor(requestInterceptor45);
        retrofit.Server server47 = builder46.server;
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(server47);
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.converter.Converter converter22 = builder0.converter;
        retrofit.RestAdapter.Log log23 = builder0.log;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.RestAdapter.Log log26 = builder24.log;
        retrofit.Server server27 = builder24.server;
        retrofit.converter.Converter converter28 = builder24.converter;
        retrofit.RestAdapter.Log log29 = builder24.log;
        retrofit.Server server30 = builder24.server;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = builder31.errorHandler;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter33.requestInterceptor = requestInterceptor35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        restAdapter33.log = log45;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter33.errorHandler = errorHandler49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter52 = builder51.converter;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter53.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        restAdapter53.requestInterceptor = requestInterceptor55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        restAdapter53.log = log65;
        retrofit.ErrorHandler errorHandler69 = null;
        restAdapter53.errorHandler = errorHandler69;
        retrofit.RestAdapter.Log log71 = restAdapter53.log;
        retrofit.RestAdapter.Builder builder72 = builder51.setLog(log71);
        retrofit.RequestInterceptor requestInterceptor73 = builder51.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor74 = builder51.requestInterceptor;
        retrofit.RestAdapter.Builder builder76 = builder51.setServer("hi!");
        retrofit.Server server77 = builder51.server;
        restAdapter33.server = server77;
        builder31.server = server77;
        builder24.server = server77;
        builder0.server = server77;
        retrofit.converter.Converter converter82 = builder0.converter;
        retrofit.RestAdapter.Builder builder84 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel85 = builder0.logLevel;
        retrofit.RequestInterceptor requestInterceptor86 = builder0.requestInterceptor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertNull(converter82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor86);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.converter.Converter converter10 = null;
        builder4.converter = converter10;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter12.requestInterceptor = requestInterceptor14;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter12.getLogLevel();
        retrofit.client.Client.Provider provider17 = null;
        restAdapter12.clientProvider = provider17;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter12.logLevel;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter20.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter20.requestInterceptor = requestInterceptor24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter20.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter29 = builder28.converter;
        retrofit.Profiler profiler30 = null;
        builder28.profiler = profiler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.client.Client.Provider provider35 = null;
        builder32.clientProvider = provider35;
        retrofit.RestAdapter.Builder builder38 = builder32.setServer("hi!");
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = builder39.build();
        java.util.concurrent.Executor executor47 = restAdapter46.httpExecutor;
        builder38.callbackExecutor = executor47;
        builder28.callbackExecutor = executor47;
        restAdapter20.httpExecutor = executor47;
        restAdapter12.callbackExecutor = executor47;
        builder4.callbackExecutor = executor47;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.client.Client.Provider provider56 = null;
        builder53.clientProvider = provider56;
        retrofit.client.Client.Provider provider58 = builder53.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel59);
        retrofit.Profiler profiler61 = null;
        builder53.profiler = profiler61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter64 = builder63.converter;
        retrofit.RestAdapter.LogLevel logLevel65 = builder63.logLevel;
        builder63.ensureSaneDefaults();
        retrofit.client.Client.Provider provider67 = null;
        builder63.clientProvider = provider67;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = null;
        builder77.httpExecutor = executor78;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("hi!");
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder83 = builder77.setLog(log82);
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel85 = restAdapter84.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter84.logLevel = logLevel86;
        retrofit.RequestInterceptor requestInterceptor88 = null;
        restAdapter84.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter84.logLevel = logLevel90;
        retrofit.RestAdapter restAdapter92 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log82, logLevel90);
        builder63.logLevel = logLevel90;
        retrofit.RestAdapter.LogLevel logLevel94 = builder63.logLevel;
        java.util.concurrent.Executor executor95 = builder63.httpExecutor;
        builder53.callbackExecutor = executor95;
        builder4.httpExecutor = executor95;
        retrofit.client.Client client98 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder99 = builder4.setClient(client98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(converter64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(logLevel85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor95);
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.converter.Converter converter10 = restAdapter0.converter;
        java.util.concurrent.Executor executor11 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.ErrorHandler errorHandler19 = builder12.errorHandler;
        retrofit.client.Client.Provider provider20 = builder12.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel21 = builder12.logLevel;
        retrofit.RestAdapter.LogLevel logLevel22 = builder12.logLevel;
        restAdapter0.logLevel = logLevel22;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList29, typedOutput33);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request35 = restAdapter0.logAndReplaceRequest(request34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder4.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.converter.Converter converter10 = restAdapter9.converter;
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        log11.log("");
        restAdapter9.log = log11;
        java.util.concurrent.Executor executor15 = restAdapter9.callbackExecutor;
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        java.lang.String str29 = request28.getMethod();
        retrofit.mime.TypedOutput typedOutput30 = request28.getBody();
        retrofit.mime.TypedOutput typedOutput31 = request28.getBody();
        java.lang.String str32 = request28.getMethod();
        java.util.List<retrofit.client.Header> headerList33 = request28.getHeaders();
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("Retrofit-Idle", "", headerList33, typedOutput34);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("", "Retrofit-Idle", headerList33, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList33, typedOutput38);
        retrofit.client.Request request40 = restAdapter9.logAndReplaceRequest(request39);
        retrofit.Server server41 = restAdapter9.server;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log43 = restAdapter42.log;
        java.util.concurrent.Executor executor44 = restAdapter42.callbackExecutor;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder45.logLevel = logLevel50;
        retrofit.converter.Converter converter52 = null;
        builder45.converter = converter52;
        retrofit.client.Client.Provider provider54 = null;
        builder45.clientProvider = provider54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter57 = builder56.converter;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor59 = restAdapter58.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        restAdapter58.requestInterceptor = requestInterceptor60;
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel71);
        restAdapter58.log = log70;
        retrofit.ErrorHandler errorHandler74 = null;
        restAdapter58.errorHandler = errorHandler74;
        retrofit.RestAdapter.Log log76 = restAdapter58.log;
        retrofit.RestAdapter.Builder builder77 = builder56.setLog(log76);
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder85 = builder79.setLog(log84);
        retrofit.RestAdapter restAdapter86 = builder79.build();
        java.util.concurrent.Executor executor87 = restAdapter86.httpExecutor;
        builder56.callbackExecutor = executor87;
        builder45.httpExecutor = executor87;
        restAdapter42.callbackExecutor = executor87;
        restAdapter9.httpExecutor = executor87;
        retrofit.Server server92 = restAdapter9.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(converter10);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNotNull(server92);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter4.logLevel = logLevel6;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor10 = restAdapter4.httpExecutor;
        retrofit.Server server11 = null;
        restAdapter4.server = server11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.ErrorHandler errorHandler16 = restAdapter13.errorHandler;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter32.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter32.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log30, logLevel38);
        log30.log("Retrofit-Idle");
        restAdapter13.log = log30;
        restAdapter4.log = log30;
        log30.log("Retrofit-Idle");
        restAdapter0.log = log30;
        retrofit.ErrorHandler errorHandler48 = restAdapter0.errorHandler;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter68.logLevel = logLevel70;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter68.setLogLevel(logLevel72);
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log65, logLevel72);
        restAdapter0.log = log65;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor8 = builder6.requestInterceptor;
        retrofit.ErrorHandler errorHandler9 = null;
        builder6.errorHandler = errorHandler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.Profiler profiler33 = builder32.profiler;
        retrofit.Profiler profiler34 = builder32.profiler;
        java.util.concurrent.Executor executor35 = builder32.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.RestAdapter restAdapter43 = builder36.build();
        java.util.concurrent.Executor executor44 = restAdapter43.httpExecutor;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.client.Client.Provider provider48 = null;
        builder45.clientProvider = provider48;
        retrofit.RestAdapter.Builder builder51 = builder45.setServer("hi!");
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLog(log57);
        retrofit.RestAdapter restAdapter59 = builder52.build();
        java.util.concurrent.Executor executor60 = restAdapter59.httpExecutor;
        builder51.callbackExecutor = executor60;
        retrofit.RestAdapter.Builder builder62 = builder32.setExecutors(executor44, executor60);
        builder6.callbackExecutor = executor44;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.RestAdapter.Builder builder68 = builder64.setServer("hi!");
        retrofit.Profiler profiler69 = null;
        builder68.profiler = profiler69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder71.setLog(log76);
        retrofit.RestAdapter restAdapter78 = builder71.build();
        retrofit.converter.Converter converter79 = null;
        builder71.converter = converter79;
        retrofit.ErrorHandler errorHandler81 = null;
        builder71.errorHandler = errorHandler81;
        retrofit.RequestInterceptor requestInterceptor83 = builder71.requestInterceptor;
        builder68.requestInterceptor = requestInterceptor83;
        retrofit.RestAdapter.Builder builder85 = builder6.setRequestInterceptor(requestInterceptor83);
        retrofit.Profiler profiler86 = builder85.profiler;
        builder85.ensureSaneDefaults();
        java.util.concurrent.Executor executor88 = builder85.callbackExecutor;
        restAdapter0.httpExecutor = executor88;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(profiler86);
        org.junit.Assert.assertNotNull(executor88);
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        java.util.concurrent.Executor executor19 = restAdapter18.httpExecutor;
        builder10.callbackExecutor = executor19;
        builder0.callbackExecutor = executor19;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        java.util.concurrent.Executor executor28 = null;
        builder23.httpExecutor = executor28;
        retrofit.RestAdapter restAdapter30 = builder23.build();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.client.Client.Provider provider32 = restAdapter30.clientProvider;
        builder0.clientProvider = provider32;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log36 = restAdapter35.log;
        java.util.concurrent.Executor executor37 = restAdapter35.callbackExecutor;
        retrofit.Profiler profiler38 = restAdapter35.profiler;
        retrofit.Profiler profiler39 = null;
        restAdapter35.profiler = profiler39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        restAdapter35.log = log49;
        retrofit.Server server53 = null;
        restAdapter35.server = server53;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter35.logLevel;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.Profiler profiler61 = null;
        builder60.profiler = profiler61;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder60.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter restAdapter65 = builder60.build();
        retrofit.converter.Converter converter66 = restAdapter65.converter;
        restAdapter35.converter = converter66;
        retrofit.RestAdapter.Builder builder68 = builder0.setConverter(converter66);
        retrofit.RestAdapter.Builder builder70 = builder68.setServer("Retrofit-Idle");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider32);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(converter66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.Server server5 = null;
        restAdapter0.server = server5;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler10 = null;
        restAdapter0.profiler = profiler10;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(logLevel12);
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter6 = builder5.build();
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.lang.String str14 = request13.getUrl();
        java.util.List<retrofit.client.Header> headerList15 = request13.getHeaders();
        java.lang.String str16 = request13.getMethod();
        retrofit.mime.TypedOutput typedOutput17 = request13.getBody();
        java.lang.String str18 = request13.getUrl();
        java.lang.String str19 = request13.getUrl();
        java.util.List<retrofit.client.Header> headerList20 = request13.getHeaders();
        java.lang.String str21 = request13.getMethod();
        java.util.List<retrofit.client.Header> headerList22 = request13.getHeaders();
        java.lang.String str23 = request13.getUrl();
        retrofit.client.Request request24 = restAdapter6.logAndReplaceRequest(request13);
        java.util.List<retrofit.client.Header> headerList25 = request13.getHeaders();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(restAdapter6);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(headerList25);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.ErrorHandler errorHandler31 = builder29.errorHandler;
        java.util.concurrent.Executor executor32 = builder29.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(executor32);
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.Profiler profiler7 = builder0.profiler;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.client.Client.Provider provider12 = null;
        builder9.clientProvider = provider12;
        retrofit.client.Client.Provider provider14 = builder9.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider17 = builder9.clientProvider;
        retrofit.Profiler profiler18 = builder9.profiler;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter19.requestInterceptor = requestInterceptor21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        restAdapter19.log = log31;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter19.errorHandler = errorHandler35;
        java.util.concurrent.Executor executor37 = null;
        restAdapter19.callbackExecutor = executor37;
        retrofit.RestAdapter.Log log39 = restAdapter19.log;
        retrofit.RestAdapter.Builder builder40 = builder9.setLog(log39);
        builder0.log = log39;
        java.util.concurrent.Executor executor42 = builder0.callbackExecutor;
        retrofit.ErrorHandler errorHandler43 = builder0.errorHandler;
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(errorHandler43);
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.client.Client.Provider provider9 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder11 = builder4.setLogLevel(logLevel10);
        retrofit.RequestInterceptor requestInterceptor12 = null;
        builder11.requestInterceptor = requestInterceptor12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = null;
        builder14.converter = converter15;
        retrofit.client.Client.Provider provider17 = null;
        builder14.clientProvider = provider17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        builder14.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.Profiler profiler26 = null;
        builder25.profiler = profiler26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        retrofit.RestAdapter restAdapter35 = builder28.build();
        retrofit.converter.Converter converter36 = null;
        builder28.converter = converter36;
        retrofit.ErrorHandler errorHandler38 = null;
        builder28.errorHandler = errorHandler38;
        retrofit.RequestInterceptor requestInterceptor40 = builder28.requestInterceptor;
        builder25.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter.Builder builder42 = builder14.setRequestInterceptor(requestInterceptor40);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter44 = builder43.converter;
        retrofit.RestAdapter.LogLevel logLevel45 = builder43.logLevel;
        builder43.ensureSaneDefaults();
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = builder55.setLog(log60);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter62.logLevel = logLevel64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        restAdapter62.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter62.logLevel = logLevel68;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log60, logLevel68);
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder71.setLog(log76);
        restAdapter70.log = log76;
        builder43.log = log76;
        java.util.concurrent.Executor executor80 = null;
        builder43.httpExecutor = executor80;
        retrofit.converter.Converter converter82 = null;
        builder43.converter = converter82;
        retrofit.ErrorHandler errorHandler84 = builder43.errorHandler;
        builder42.errorHandler = errorHandler84;
        retrofit.RequestInterceptor requestInterceptor86 = builder42.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor86;
        restAdapter0.requestInterceptor = requestInterceptor86;
        retrofit.client.Client.Provider provider89 = restAdapter0.clientProvider;
        retrofit.ErrorHandler errorHandler90 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor91 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler92 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertNull(provider89);
        org.junit.Assert.assertNull(errorHandler90);
        org.junit.Assert.assertNull(executor91);
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log19, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLogLevel(logLevel26);
        retrofit.ErrorHandler errorHandler30 = null;
        builder29.errorHandler = errorHandler30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = builder32.callbackExecutor;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        retrofit.RestAdapter.Builder builder45 = builder32.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder29.setLogLevel(logLevel43);
        builder46.ensureSaneDefaults();
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter56.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        restAdapter56.requestInterceptor = requestInterceptor58;
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel69);
        restAdapter56.log = log68;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean73 = logLevel72.log();
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log68, logLevel72);
        retrofit.RestAdapter.Builder builder75 = builder46.setLog(log68);
        builder46.ensureSaneDefaults();
        retrofit.Server server77 = builder46.server;
        retrofit.converter.Converter converter78 = builder46.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertNotNull(converter78);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        retrofit.converter.Converter converter3 = builder0.converter;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.Profiler profiler6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setProfiler(profiler6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.util.List<retrofit.client.Header> headerList11 = request10.getHeaders();
        java.lang.String str12 = request10.getMethod();
        java.lang.String str13 = request10.getUrl();
        java.lang.String str14 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList15 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput16 = request10.getBody();
        retrofit.mime.TypedOutput typedOutput17 = request10.getBody();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNull(typedOutput17);
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.Profiler profiler11 = null;
        builder10.profiler = profiler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder13.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = builder13.requestInterceptor;
        builder10.requestInterceptor = requestInterceptor25;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.client.Client.Provider provider31 = null;
        builder28.clientProvider = provider31;
        retrofit.RestAdapter.Builder builder34 = builder28.setServer("hi!");
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.Profiler profiler40 = null;
        builder39.profiler = profiler40;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        builder39.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter restAdapter44 = builder39.build();
        retrofit.converter.Converter converter45 = restAdapter44.converter;
        retrofit.RestAdapter.Builder builder46 = builder28.setConverter(converter45);
        restAdapter0.converter = converter45;
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter0.logLevel;
        java.lang.Throwable throwable49 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable49, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(converter45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.RestAdapter.Log log7 = builder0.log;
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.Server server11 = restAdapter9.server;
        retrofit.client.Client.Provider provider12 = null;
        restAdapter9.clientProvider = provider12;
        retrofit.client.Client.Provider provider14 = null;
        restAdapter9.clientProvider = provider14;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter16.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter16.requestInterceptor = requestInterceptor18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter16.log = log28;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter16.errorHandler = errorHandler32;
        retrofit.RestAdapter.Log log34 = restAdapter16.log;
        java.util.concurrent.Executor executor35 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel36;
        restAdapter9.logLevel = logLevel36;
        builder0.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = builder40.converter;
        retrofit.Profiler profiler42 = null;
        builder40.profiler = profiler42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.client.Client.Provider provider47 = null;
        builder44.clientProvider = provider47;
        retrofit.RestAdapter.Builder builder50 = builder44.setServer("hi!");
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("hi!");
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder51.setLog(log56);
        retrofit.RestAdapter restAdapter58 = builder51.build();
        java.util.concurrent.Executor executor59 = restAdapter58.httpExecutor;
        builder50.callbackExecutor = executor59;
        builder40.callbackExecutor = executor59;
        builder40.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor63 = builder40.requestInterceptor;
        builder0.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter.LogLevel logLevel65 = builder0.logLevel;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(requestInterceptor63);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.converter.Converter converter10 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler11 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = builder16.build();
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.getMethod();
        java.lang.String str26 = request24.getMethod();
        retrofit.client.Request request27 = restAdapter17.logAndReplaceRequest(request24);
        retrofit.converter.Converter converter28 = restAdapter17.converter;
        java.util.concurrent.Executor executor29 = restAdapter17.httpExecutor;
        restAdapter0.callbackExecutor = executor29;
        retrofit.Profiler profiler31 = null;
        restAdapter0.profiler = profiler31;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(converter28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNull(logLevel33);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = null;
        builder9.converter = converter10;
        retrofit.client.Client.Provider provider12 = null;
        builder9.clientProvider = provider12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder9.requestInterceptor = requestInterceptor14;
        retrofit.Profiler profiler16 = builder9.profiler;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        java.util.concurrent.Executor executor19 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        java.util.concurrent.Executor executor21 = restAdapter17.httpExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log23 = restAdapter22.log;
        retrofit.ErrorHandler errorHandler24 = restAdapter22.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.Profiler profiler31 = null;
        builder30.profiler = profiler31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        retrofit.converter.Converter converter41 = null;
        builder33.converter = converter41;
        retrofit.ErrorHandler errorHandler43 = null;
        builder33.errorHandler = errorHandler43;
        retrofit.RequestInterceptor requestInterceptor45 = builder33.requestInterceptor;
        builder30.requestInterceptor = requestInterceptor45;
        restAdapter22.requestInterceptor = requestInterceptor45;
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter22.requestInterceptor;
        restAdapter17.requestInterceptor = requestInterceptor48;
        builder9.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter.Builder builder51 = builder0.setRequestInterceptor(requestInterceptor48);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = builder52.converter;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter54.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter54.requestInterceptor = requestInterceptor56;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel67);
        restAdapter54.log = log66;
        retrofit.ErrorHandler errorHandler70 = null;
        restAdapter54.errorHandler = errorHandler70;
        retrofit.RestAdapter.Log log72 = restAdapter54.log;
        retrofit.RestAdapter.Builder builder73 = builder52.setLog(log72);
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder76 = builder52.setServer("Retrofit-Idle");
        retrofit.Server server77 = builder76.server;
        java.util.concurrent.Executor executor78 = builder76.httpExecutor;
        builder0.callbackExecutor = executor78;
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertNotNull(executor78);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter3.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        restAdapter3.requestInterceptor = requestInterceptor5;
        java.util.concurrent.Executor executor7 = restAdapter3.httpExecutor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.RestAdapter.LogLevel logLevel31 = builder29.logLevel;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter51 = builder50.converter;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor53 = restAdapter52.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        restAdapter52.requestInterceptor = requestInterceptor54;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        restAdapter52.log = log64;
        retrofit.ErrorHandler errorHandler68 = null;
        restAdapter52.errorHandler = errorHandler68;
        retrofit.RestAdapter.Log log70 = restAdapter52.log;
        retrofit.RestAdapter.Builder builder71 = builder50.setLog(log70);
        retrofit.RequestInterceptor requestInterceptor72 = builder50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor73 = builder50.requestInterceptor;
        retrofit.RestAdapter.Builder builder75 = builder50.setServer("hi!");
        retrofit.Server server76 = builder50.server;
        restAdapter32.server = server76;
        builder29.server = server76;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder85 = builder79.setLog(log84);
        retrofit.RestAdapter restAdapter86 = builder79.build();
        java.util.concurrent.Executor executor87 = restAdapter86.httpExecutor;
        builder29.httpExecutor = executor87;
        restAdapter3.callbackExecutor = executor87;
        restAdapter0.callbackExecutor = executor87;
        retrofit.RestAdapter.Log log91 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel92 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor93 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor94 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log95 = restAdapter0.log;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNull(log91);
        org.junit.Assert.assertNull(logLevel92);
        org.junit.Assert.assertNull(executor93);
        org.junit.Assert.assertNull(executor94);
        org.junit.Assert.assertNull(log95);
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.Server server5 = restAdapter0.server;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter7 = null;
        restAdapter0.converter = converter7;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler10 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler11 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(logLevel12);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider10 = builder9.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean12 = logLevel11.log();
        builder9.logLevel = logLevel11;
        builder0.logLevel = logLevel11;
        retrofit.RestAdapter.Log log15 = builder0.log;
        retrofit.converter.Converter converter16 = builder0.converter;
        retrofit.Profiler profiler17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder0.setProfiler(profiler17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(converter16);
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        restAdapter0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor29 = builder7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = builder7.requestInterceptor;
        retrofit.RestAdapter.Builder builder32 = builder7.setServer("hi!");
        retrofit.Server server33 = builder7.server;
        restAdapter0.server = server33;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter0.requestInterceptor = requestInterceptor35;
        retrofit.client.Client.Provider provider37 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log38 = restAdapter0.log;
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNull(log38);
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = builder0.clientProvider;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter5 = null;
        builder4.converter = converter5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        builder4.requestInterceptor = requestInterceptor9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.Profiler profiler16 = null;
        builder15.profiler = profiler16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder18.setLog(log23);
        retrofit.RestAdapter restAdapter25 = builder18.build();
        retrofit.converter.Converter converter26 = null;
        builder18.converter = converter26;
        retrofit.ErrorHandler errorHandler28 = null;
        builder18.errorHandler = errorHandler28;
        retrofit.RequestInterceptor requestInterceptor30 = builder18.requestInterceptor;
        builder15.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.Builder builder32 = builder4.setRequestInterceptor(requestInterceptor30);
        retrofit.client.Client.Provider provider33 = null;
        builder32.clientProvider = provider33;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        log35.log("");
        retrofit.RestAdapter.Builder builder38 = builder32.setLog(log35);
        retrofit.RequestInterceptor requestInterceptor39 = builder38.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel40 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = builder41.build();
        retrofit.RequestInterceptor requestInterceptor49 = restAdapter48.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder38.setRequestInterceptor(requestInterceptor49);
        builder0.requestInterceptor = requestInterceptor49;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.Profiler profiler9 = null;
        builder8.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        retrofit.converter.Converter converter19 = null;
        builder11.converter = converter19;
        retrofit.ErrorHandler errorHandler21 = null;
        builder11.errorHandler = errorHandler21;
        retrofit.RequestInterceptor requestInterceptor23 = builder11.requestInterceptor;
        builder8.requestInterceptor = requestInterceptor23;
        restAdapter0.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        java.util.concurrent.Executor executor28 = restAdapter26.callbackExecutor;
        retrofit.converter.Converter converter29 = null;
        restAdapter26.converter = converter29;
        retrofit.RestAdapter.Log log31 = restAdapter26.log;
        retrofit.ErrorHandler errorHandler32 = restAdapter26.errorHandler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.client.Client.Provider provider36 = null;
        builder33.clientProvider = provider36;
        retrofit.RestAdapter.Builder builder39 = builder33.setServer("hi!");
        retrofit.Profiler profiler40 = builder33.profiler;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter42 = null;
        builder41.converter = converter42;
        retrofit.client.Client.Provider provider44 = null;
        builder41.clientProvider = provider44;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        builder41.requestInterceptor = requestInterceptor46;
        retrofit.Profiler profiler48 = builder41.profiler;
        retrofit.Profiler profiler49 = null;
        builder41.profiler = profiler49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = builder51.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor53 = builder51.requestInterceptor;
        java.util.concurrent.Executor executor54 = builder51.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel55 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.Profiler profiler61 = null;
        builder60.profiler = profiler61;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder60.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter restAdapter65 = builder60.build();
        retrofit.converter.Converter converter66 = null;
        builder60.converter = converter66;
        retrofit.client.Client.Provider provider68 = builder60.clientProvider;
        retrofit.RestAdapter.Builder builder69 = builder51.setClient(provider68);
        retrofit.RestAdapter.Builder builder70 = builder41.setClient(provider68);
        retrofit.client.Client.Provider provider71 = builder70.clientProvider;
        builder33.clientProvider = provider71;
        restAdapter26.clientProvider = provider71;
        restAdapter0.clientProvider = provider71;
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = builder76.callbackExecutor;
        retrofit.RestAdapter.Log log78 = builder76.log;
        retrofit.Server server79 = builder76.server;
        retrofit.converter.Converter converter80 = builder76.converter;
        retrofit.RestAdapter.LogLevel logLevel81 = builder76.logLevel;
        restAdapter0.logLevel = logLevel81;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(provider68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(provider71);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertNull(server79);
        org.junit.Assert.assertNull(converter80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = null;
        restAdapter10.errorHandler = errorHandler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder13.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = builder13.requestInterceptor;
        restAdapter10.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter27.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.log = log39;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter27.errorHandler = errorHandler43;
        retrofit.converter.Converter converter45 = null;
        restAdapter27.converter = converter45;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor56 = restAdapter55.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter55.requestInterceptor = requestInterceptor57;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel68);
        restAdapter55.log = log67;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean72 = logLevel71.log();
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log67, logLevel71);
        restAdapter27.logLevel = logLevel71;
        restAdapter10.setLogLevel(logLevel71);
        retrofit.client.Header[] headerArray78 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList79 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList79, headerArray78);
        retrofit.mime.TypedOutput typedOutput81 = null;
        retrofit.client.Request request82 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList79, typedOutput81);
        java.lang.String str83 = request82.getUrl();
        java.util.List<retrofit.client.Header> headerList84 = request82.getHeaders();
        java.lang.String str85 = request82.getMethod();
        java.util.List<retrofit.client.Header> headerList86 = request82.getHeaders();
        retrofit.client.Request request87 = restAdapter10.logAndReplaceRequest(request82);
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor89 = null;
        restAdapter88.httpExecutor = executor89;
        retrofit.RequestInterceptor requestInterceptor91 = null;
        restAdapter88.requestInterceptor = requestInterceptor91;
        retrofit.RestAdapter.Log log93 = restAdapter88.log;
        retrofit.RestAdapter.LogLevel logLevel94 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter88.logLevel = logLevel94;
        restAdapter10.setLogLevel(logLevel94);
        retrofit.Server server97 = restAdapter10.server;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(headerArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(headerList84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(headerList86);
        org.junit.Assert.assertNotNull(request87);
        org.junit.Assert.assertNull(log93);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server97);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.lang.String str9 = request6.getMethod();
        retrofit.mime.TypedOutput typedOutput10 = request6.getBody();
        java.util.List<retrofit.client.Header> headerList11 = request6.getHeaders();
        java.lang.String str12 = request6.getUrl();
        java.lang.String str13 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request6.getHeaders();
        java.lang.String str15 = request6.getMethod();
        java.lang.String str16 = request6.getUrl();
        java.lang.String str17 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request6.getHeaders();
        java.lang.String str19 = request6.getUrl();
        java.lang.String str20 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        restAdapter0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor29 = builder7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = builder7.requestInterceptor;
        retrofit.RestAdapter.Builder builder32 = builder7.setServer("hi!");
        retrofit.Server server33 = builder7.server;
        restAdapter0.server = server33;
        java.util.concurrent.Executor executor35 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(logLevel36);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter10 = null;
        restAdapter0.converter = converter10;
        retrofit.client.Client.Provider provider12 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter13 = restAdapter0.converter;
        java.util.concurrent.Executor executor14 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel9 = builder0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel10 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.ErrorHandler errorHandler18 = builder11.errorHandler;
        retrofit.client.Client.Provider provider19 = builder11.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel20 = builder11.logLevel;
        retrofit.Server server21 = null;
        builder11.server = server21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter.LogLevel logLevel25 = builder23.logLevel;
        builder23.ensureSaneDefaults();
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = builder35.setLog(log40);
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter42.logLevel = logLevel44;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter42.requestInterceptor = requestInterceptor46;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter42.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log40, logLevel48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("hi!");
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder51.setLog(log56);
        restAdapter50.log = log56;
        builder23.log = log56;
        java.util.concurrent.Executor executor60 = null;
        builder23.httpExecutor = executor60;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter62.logLevel = logLevel64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        restAdapter62.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter62.logLevel = logLevel68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter71 = builder70.converter;
        retrofit.Profiler profiler72 = null;
        builder70.profiler = profiler72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.client.Client.Provider provider77 = null;
        builder74.clientProvider = provider77;
        retrofit.RestAdapter.Builder builder80 = builder74.setServer("hi!");
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor82 = null;
        builder81.httpExecutor = executor82;
        retrofit.RestAdapter.Builder builder85 = builder81.setServer("hi!");
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder87 = builder81.setLog(log86);
        retrofit.RestAdapter restAdapter88 = builder81.build();
        java.util.concurrent.Executor executor89 = restAdapter88.httpExecutor;
        builder80.callbackExecutor = executor89;
        builder70.callbackExecutor = executor89;
        restAdapter62.httpExecutor = executor89;
        builder23.callbackExecutor = executor89;
        builder11.callbackExecutor = executor89;
        builder0.httpExecutor = executor89;
        retrofit.RestAdapter.LogLevel logLevel96 = builder0.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter71);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertTrue("'" + logLevel96 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel96.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        java.util.List<retrofit.client.Header> headerList12 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList12, typedOutput13);
        java.lang.String str15 = request14.getUrl();
        java.lang.String str16 = request14.getMethod();
        java.lang.String str17 = request14.getMethod();
        java.lang.String str18 = request14.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        java.util.concurrent.Executor executor27 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter29 = builder28.converter;
        retrofit.RestAdapter.LogLevel logLevel30 = builder28.logLevel;
        builder28.ensureSaneDefaults();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = builder40.setLog(log45);
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter47.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter47.logLevel = logLevel53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log45, logLevel53);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder56.setLog(log61);
        restAdapter55.log = log61;
        builder28.log = log61;
        java.util.concurrent.Executor executor65 = null;
        builder28.httpExecutor = executor65;
        retrofit.converter.Converter converter67 = null;
        builder28.converter = converter67;
        retrofit.ErrorHandler errorHandler69 = builder28.errorHandler;
        restAdapter9.errorHandler = errorHandler69;
        retrofit.RestAdapter.Builder builder71 = builder0.setErrorHandler(errorHandler69);
        java.util.concurrent.Executor executor72 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log73 = builder0.log;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(errorHandler69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertNull(log73);
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Server server9 = null;
        builder0.server = server9;
        retrofit.converter.Converter converter11 = null;
        builder0.converter = converter11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.RestAdapter.Log log15 = builder13.log;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter35.logLevel = logLevel37;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.setLogLevel(logLevel39);
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log32, logLevel39);
        retrofit.RestAdapter.Builder builder42 = builder13.setLogLevel(logLevel39);
        retrofit.ErrorHandler errorHandler43 = null;
        builder42.errorHandler = errorHandler43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = builder45.callbackExecutor;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        retrofit.RestAdapter.Builder builder58 = builder45.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder59 = builder42.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder60 = builder0.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = builder61.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor63 = builder61.requestInterceptor;
        retrofit.ErrorHandler errorHandler64 = null;
        builder61.errorHandler = errorHandler64;
        retrofit.converter.Converter converter66 = null;
        builder61.converter = converter66;
        retrofit.ErrorHandler errorHandler68 = null;
        builder61.errorHandler = errorHandler68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = null;
        builder70.httpExecutor = executor71;
        retrofit.RestAdapter.Builder builder74 = builder70.setServer("hi!");
        retrofit.Profiler profiler75 = null;
        builder74.profiler = profiler75;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        builder74.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter restAdapter79 = builder74.build();
        retrofit.converter.Converter converter80 = restAdapter79.converter;
        retrofit.RestAdapter.Builder builder81 = builder61.setConverter(converter80);
        retrofit.RestAdapter.Builder builder82 = builder60.setConverter(converter80);
        retrofit.Profiler profiler83 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder84 = builder82.setProfiler(profiler83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(converter80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.Server server5 = restAdapter0.server;
        retrofit.Profiler profiler6 = restAdapter0.profiler;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.httpExecutor;
        java.util.concurrent.Executor executor11 = restAdapter9.httpExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter19.logLevel;
        retrofit.converter.Converter converter22 = null;
        restAdapter19.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = restAdapter19.errorHandler;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter26 = null;
        builder25.converter = converter26;
        retrofit.client.Client.Provider provider28 = null;
        builder25.clientProvider = provider28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        builder25.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.Profiler profiler37 = null;
        builder36.profiler = profiler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log44);
        retrofit.RestAdapter restAdapter46 = builder39.build();
        retrofit.converter.Converter converter47 = null;
        builder39.converter = converter47;
        retrofit.ErrorHandler errorHandler49 = null;
        builder39.errorHandler = errorHandler49;
        retrofit.RequestInterceptor requestInterceptor51 = builder39.requestInterceptor;
        builder36.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.Builder builder53 = builder25.setRequestInterceptor(requestInterceptor51);
        restAdapter19.requestInterceptor = requestInterceptor51;
        builder12.requestInterceptor = requestInterceptor51;
        retrofit.RequestInterceptor requestInterceptor56 = builder12.requestInterceptor;
        retrofit.RestAdapter restAdapter57 = builder12.build();
        java.util.concurrent.Executor executor58 = restAdapter57.callbackExecutor;
        restAdapter9.callbackExecutor = executor58;
        restAdapter0.callbackExecutor = executor58;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.client.Client.Provider provider64 = null;
        builder61.clientProvider = provider64;
        retrofit.client.Client.Provider provider66 = builder61.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder68 = builder61.setLogLevel(logLevel67);
        java.util.concurrent.Executor executor69 = builder68.callbackExecutor;
        builder68.ensureSaneDefaults();
        java.util.concurrent.Executor executor71 = builder68.callbackExecutor;
        restAdapter0.callbackExecutor = executor71;
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNull(provider66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNotNull(executor71);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder10.logLevel = logLevel15;
        retrofit.converter.Converter converter17 = null;
        builder10.converter = converter17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter19.requestInterceptor;
        retrofit.converter.Converter converter21 = restAdapter19.converter;
        java.util.concurrent.Executor executor22 = null;
        restAdapter19.callbackExecutor = executor22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = null;
        restAdapter24.httpExecutor = executor25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter24.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.Log log29 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter24.logLevel = logLevel30;
        restAdapter19.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder33 = builder10.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder34 = builder8.setLogLevel(logLevel30);
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        java.lang.String str21 = request20.getUrl();
        java.util.List<retrofit.client.Header> headerList22 = request20.getHeaders();
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", headerList22, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList22, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", headerList22, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList22, typedOutput29);
        java.lang.String str31 = request30.getMethod();
        retrofit.mime.TypedOutput typedOutput32 = request30.getBody();
        retrofit.mime.TypedOutput typedOutput33 = request30.getBody();
        java.lang.String str34 = request30.getUrl();
        java.util.List<retrofit.client.Header> headerList35 = request30.getHeaders();
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("", "Retrofit-Idle", headerList35, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList35, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList35, typedOutput40);
        retrofit.mime.TypedOutput typedOutput42 = request41.getBody();
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertNull(typedOutput42);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.Profiler profiler11 = null;
        builder10.profiler = profiler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder13.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = builder13.requestInterceptor;
        builder10.requestInterceptor = requestInterceptor25;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.Server server28 = restAdapter0.server;
        retrofit.Profiler profiler29 = restAdapter0.profiler;
        retrofit.Server server30 = restAdapter0.server;
        retrofit.converter.Converter converter31 = restAdapter0.converter;
        retrofit.client.Response response33 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response35 = restAdapter0.logAndReplaceResponse("", response33, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(converter31);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder28.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.client.Client.Provider provider37 = null;
        builder34.clientProvider = provider37;
        retrofit.client.Client.Provider provider39 = builder34.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor53 = restAdapter52.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        restAdapter52.requestInterceptor = requestInterceptor54;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        restAdapter52.log = log64;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean69 = logLevel68.log();
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log64, logLevel68);
        retrofit.RestAdapter.Builder builder71 = builder42.setLog(log64);
        retrofit.Server server72 = builder71.server;
        retrofit.ErrorHandler errorHandler73 = null;
        builder71.errorHandler = errorHandler73;
        retrofit.Profiler profiler75 = null;
        builder71.profiler = profiler75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = builder77.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor79 = builder77.requestInterceptor;
        java.util.concurrent.Executor executor80 = builder77.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel81 = builder77.logLevel;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor83 = null;
        builder82.httpExecutor = executor83;
        retrofit.RestAdapter.Builder builder86 = builder82.setServer("hi!");
        retrofit.Profiler profiler87 = null;
        builder86.profiler = profiler87;
        retrofit.RequestInterceptor requestInterceptor89 = null;
        builder86.requestInterceptor = requestInterceptor89;
        retrofit.RestAdapter restAdapter91 = builder86.build();
        retrofit.converter.Converter converter92 = null;
        builder86.converter = converter92;
        retrofit.client.Client.Provider provider94 = builder86.clientProvider;
        retrofit.RestAdapter.Builder builder95 = builder77.setClient(provider94);
        builder71.clientProvider = provider94;
        builder41.clientProvider = provider94;
        builder33.clientProvider = provider94;
        retrofit.client.Client.Provider provider99 = builder33.clientProvider;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNull(requestInterceptor79);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(provider94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(provider99);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log8 = restAdapter7.log;
        retrofit.ErrorHandler errorHandler9 = restAdapter7.errorHandler;
        retrofit.converter.Converter converter10 = null;
        restAdapter7.converter = converter10;
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter7.requestInterceptor;
        retrofit.ErrorHandler errorHandler13 = null;
        restAdapter7.errorHandler = errorHandler13;
        retrofit.ErrorHandler errorHandler15 = restAdapter7.errorHandler;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        restAdapter18.log = log30;
        retrofit.ErrorHandler errorHandler34 = null;
        restAdapter18.errorHandler = errorHandler34;
        retrofit.RestAdapter.Log log36 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder37 = builder16.setLog(log36);
        retrofit.Profiler profiler38 = builder37.profiler;
        retrofit.client.Client.Provider provider39 = builder37.clientProvider;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter42 = builder41.build();
        retrofit.RestAdapter.Log log43 = builder41.log;
        retrofit.client.Client.Provider provider44 = builder41.clientProvider;
        restAdapter7.clientProvider = provider44;
        restAdapter0.clientProvider = provider44;
        retrofit.ErrorHandler errorHandler47 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Log log48 = restAdapter0.log;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(provider44);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(log48);
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.callbackExecutor;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        retrofit.RestAdapter.Builder builder18 = builder5.setLogLevel(logLevel16);
        java.util.concurrent.Executor executor19 = builder18.callbackExecutor;
        retrofit.Profiler profiler20 = builder18.profiler;
        java.util.concurrent.Executor executor21 = builder18.httpExecutor;
        retrofit.converter.Converter converter22 = builder18.converter;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = builder23.build();
        retrofit.converter.Converter converter31 = null;
        builder23.converter = converter31;
        retrofit.ErrorHandler errorHandler33 = null;
        builder23.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.RestAdapter.LogLevel logLevel37 = builder35.logLevel;
        builder35.ensureSaneDefaults();
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder47.setLog(log52);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter54.logLevel = logLevel56;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        restAdapter54.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter54.logLevel = logLevel60;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log52, logLevel60);
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.httpExecutor = executor64;
        retrofit.RestAdapter.Builder builder67 = builder63.setServer("hi!");
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder69 = builder63.setLog(log68);
        restAdapter62.log = log68;
        builder35.log = log68;
        java.util.concurrent.Executor executor72 = null;
        builder35.httpExecutor = executor72;
        retrofit.converter.Converter converter74 = null;
        builder35.converter = converter74;
        retrofit.ErrorHandler errorHandler76 = builder35.errorHandler;
        retrofit.RestAdapter.Builder builder77 = builder23.setErrorHandler(errorHandler76);
        builder18.errorHandler = errorHandler76;
        restAdapter0.errorHandler = errorHandler76;
        retrofit.Server server80 = null;
        retrofit.client.Client.Provider provider81 = null;
        java.util.concurrent.Executor executor82 = null;
        java.util.concurrent.Executor executor83 = null;
        retrofit.RequestInterceptor requestInterceptor84 = null;
        retrofit.converter.Converter converter85 = null;
        retrofit.Profiler profiler86 = null;
        retrofit.ErrorHandler errorHandler87 = null;
        retrofit.RestAdapter.Log log88 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server80, provider81, executor82, executor83, requestInterceptor84, converter85, profiler86, errorHandler87, log88, logLevel89);
        log88.log("hi!");
        log88.log("Retrofit-Idle");
        log88.log("hi!");
        log88.log("");
        restAdapter0.log = log88;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(errorHandler76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = builder23.build();
        retrofit.converter.Converter converter31 = null;
        builder23.converter = converter31;
        retrofit.ErrorHandler errorHandler33 = null;
        builder23.errorHandler = errorHandler33;
        retrofit.RequestInterceptor requestInterceptor35 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.client.Client.Provider provider41 = builder40.clientProvider;
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("");
        builder40.log = log43;
        retrofit.Server server47 = builder40.server;
        builder23.server = server47;
        retrofit.RestAdapter.Builder builder49 = builder0.setServer(server47);
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        retrofit.ErrorHandler errorHandler61 = null;
        restAdapter60.errorHandler = errorHandler61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.httpExecutor = executor64;
        retrofit.RestAdapter.Builder builder67 = builder63.setServer("hi!");
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder69 = builder63.setLog(log68);
        retrofit.RestAdapter restAdapter70 = builder63.build();
        retrofit.converter.Converter converter71 = null;
        builder63.converter = converter71;
        retrofit.ErrorHandler errorHandler73 = null;
        builder63.errorHandler = errorHandler73;
        retrofit.RequestInterceptor requestInterceptor75 = builder63.requestInterceptor;
        restAdapter60.requestInterceptor = requestInterceptor75;
        retrofit.RestAdapter.Builder builder77 = builder0.setRequestInterceptor(requestInterceptor75);
        retrofit.Server server78 = builder0.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNotNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(server78);
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter5 = builder4.converter;
        retrofit.RestAdapter.LogLevel logLevel6 = builder4.logLevel;
        builder4.ensureSaneDefaults();
        retrofit.Server server8 = builder4.server;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLog(log14);
        retrofit.RestAdapter restAdapter16 = builder9.build();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter16.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.RequestInterceptor requestInterceptor20 = builder4.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor20;
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter23 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNull(converter23);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler6 = null;
        restAdapter0.profiler = profiler6;
        retrofit.RestAdapter.Log log8 = restAdapter0.log;
        retrofit.client.Client.Provider provider9 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.ErrorHandler errorHandler18 = builder11.errorHandler;
        retrofit.client.Client.Provider provider19 = builder11.clientProvider;
        retrofit.Server server20 = null;
        builder11.server = server20;
        retrofit.converter.Converter converter22 = null;
        builder11.converter = converter22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.RestAdapter.Log log26 = builder24.log;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.setLogLevel(logLevel50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log43, logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder24.setLogLevel(logLevel50);
        retrofit.ErrorHandler errorHandler54 = null;
        builder53.errorHandler = errorHandler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = builder56.callbackExecutor;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel67);
        retrofit.RestAdapter.Builder builder69 = builder56.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder70 = builder53.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder71 = builder11.setLogLevel(logLevel67);
        restAdapter0.setLogLevel(logLevel67);
        retrofit.RequestInterceptor requestInterceptor73 = restAdapter0.requestInterceptor;
        retrofit.client.Client.Provider provider74 = restAdapter0.clientProvider;
        retrofit.Profiler profiler75 = restAdapter0.profiler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertNull(profiler75);
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RestAdapter.Log log2 = builder0.log;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.RestAdapter.LogLevel logLevel5 = builder3.logLevel;
        builder3.ensureSaneDefaults();
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder15.setLog(log20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter22.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter22.logLevel = logLevel28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log20, logLevel28);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder31.setLog(log36);
        restAdapter30.log = log36;
        builder3.log = log36;
        java.util.concurrent.Executor executor40 = null;
        builder3.httpExecutor = executor40;
        retrofit.converter.Converter converter42 = null;
        builder3.converter = converter42;
        retrofit.ErrorHandler errorHandler44 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder45 = builder0.setErrorHandler(errorHandler44);
        retrofit.Server server46 = builder0.server;
        retrofit.client.Client.Provider provider47 = builder0.clientProvider;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder49 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(errorHandler44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertNull(provider47);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.Server server8 = restAdapter0.server;
        retrofit.client.Header[] headerArray17 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList18 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList18, headerArray17);
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList18, typedOutput20);
        java.lang.String str22 = request21.getUrl();
        java.util.List<retrofit.client.Header> headerList23 = request21.getHeaders();
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "", headerList23, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("hi!", "hi!", headerList23, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "hi!", headerList23, typedOutput28);
        java.lang.String str30 = request29.getUrl();
        java.lang.String str31 = request29.getMethod();
        java.util.List<retrofit.client.Header> headerList32 = request29.getHeaders();
        retrofit.mime.TypedOutput typedOutput33 = request29.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request34 = restAdapter0.logAndReplaceRequest(request29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNotNull(headerArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNull(typedOutput33);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.callbackExecutor = executor18;
        retrofit.RestAdapter.Log log20 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler22 = restAdapter0.errorHandler;
        retrofit.client.Response response24 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response26 = restAdapter0.logAndReplaceResponse("", response24, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(errorHandler22);
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter5.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        restAdapter5.requestInterceptor = requestInterceptor7;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        restAdapter5.log = log17;
        retrofit.ErrorHandler errorHandler21 = null;
        restAdapter5.errorHandler = errorHandler21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = builder23.converter;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter25.requestInterceptor = requestInterceptor27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        restAdapter25.log = log37;
        retrofit.ErrorHandler errorHandler41 = null;
        restAdapter25.errorHandler = errorHandler41;
        retrofit.RestAdapter.Log log43 = restAdapter25.log;
        retrofit.RestAdapter.Builder builder44 = builder23.setLog(log43);
        retrofit.RequestInterceptor requestInterceptor45 = builder23.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder48 = builder23.setServer("hi!");
        retrofit.Server server49 = builder23.server;
        restAdapter5.server = server49;
        builder0.server = server49;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter53 = builder52.converter;
        retrofit.Profiler profiler54 = null;
        builder52.profiler = profiler54;
        retrofit.RestAdapter.Log log56 = builder52.log;
        builder52.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor58 = null;
        builder52.requestInterceptor = requestInterceptor58;
        retrofit.ErrorHandler errorHandler60 = null;
        builder52.errorHandler = errorHandler60;
        retrofit.converter.Converter converter62 = builder52.converter;
        retrofit.RestAdapter.Builder builder63 = builder0.setConverter(converter62);
        retrofit.RestAdapter restAdapter64 = builder63.build();
        retrofit.Profiler profiler65 = null;
        builder63.profiler = profiler65;
        java.util.concurrent.Executor executor67 = builder63.callbackExecutor;
        java.util.concurrent.Executor executor68 = builder63.callbackExecutor;
        retrofit.Server server69 = builder63.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertNotNull(converter62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(executor67);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(server69);
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.Profiler profiler13 = null;
        builder12.profiler = profiler13;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder12.requestInterceptor = requestInterceptor15;
        retrofit.RestAdapter restAdapter17 = builder12.build();
        retrofit.converter.Converter converter18 = restAdapter17.converter;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        log19.log("");
        restAdapter17.log = log19;
        retrofit.RestAdapter.Builder builder23 = builder0.setLog(log19);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log25 = restAdapter24.log;
        retrofit.ErrorHandler errorHandler26 = restAdapter24.errorHandler;
        retrofit.converter.Converter converter27 = null;
        restAdapter24.converter = converter27;
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter24.requestInterceptor;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter24.errorHandler = errorHandler30;
        retrofit.ErrorHandler errorHandler32 = restAdapter24.errorHandler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter35.requestInterceptor = requestInterceptor37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        restAdapter35.log = log47;
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter35.errorHandler = errorHandler51;
        retrofit.RestAdapter.Log log53 = restAdapter35.log;
        retrofit.RestAdapter.Builder builder54 = builder33.setLog(log53);
        retrofit.Profiler profiler55 = builder54.profiler;
        retrofit.client.Client.Provider provider56 = builder54.clientProvider;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter59 = builder58.build();
        retrofit.RestAdapter.Log log60 = builder58.log;
        retrofit.client.Client.Provider provider61 = builder58.clientProvider;
        restAdapter24.clientProvider = provider61;
        retrofit.RestAdapter.Builder builder63 = builder0.setClient(provider61);
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel73);
        log72.log("hi!");
        log72.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder79 = builder63.setLog(log72);
        builder79.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor82 = null;
        builder81.httpExecutor = executor82;
        retrofit.RestAdapter.Builder builder85 = builder81.setServer("hi!");
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder87 = builder81.setLog(log86);
        retrofit.RestAdapter restAdapter88 = builder81.build();
        retrofit.Server server89 = restAdapter88.server;
        retrofit.RestAdapter.LogLevel logLevel90 = null;
        restAdapter88.logLevel = logLevel90;
        retrofit.client.Client.Provider provider92 = restAdapter88.clientProvider;
        retrofit.RestAdapter.Builder builder93 = builder79.setClient(provider92);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNotNull(converter18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(provider61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(server89);
        org.junit.Assert.assertNotNull(provider92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter15.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log13, logLevel21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder24.setLog(log29);
        restAdapter23.log = log29;
        java.util.concurrent.Executor executor32 = restAdapter23.callbackExecutor;
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor32);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLog(log13);
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        builder8.logLevel = logLevel24;
        retrofit.converter.Converter converter27 = builder8.converter;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder8.requestInterceptor = requestInterceptor28;
        builder8.ensureSaneDefaults();
        builder8.ensureSaneDefaults();
        retrofit.client.Client.Provider provider32 = builder8.clientProvider;
        java.util.concurrent.Executor executor33 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = builder34.converter;
        retrofit.RestAdapter.LogLevel logLevel36 = builder34.logLevel;
        builder34.ensureSaneDefaults();
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter53.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter53.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log51, logLevel59);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        restAdapter61.log = log67;
        builder34.log = log67;
        java.util.concurrent.Executor executor71 = null;
        builder34.httpExecutor = executor71;
        retrofit.converter.Converter converter73 = null;
        builder34.converter = converter73;
        java.util.concurrent.Executor executor75 = builder34.callbackExecutor;
        retrofit.RestAdapter.Builder builder76 = builder0.setExecutors(executor33, executor75);
        builder76.ensureSaneDefaults();
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNotNull(provider32);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(executor75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.client.Client.Provider provider15 = null;
        builder12.clientProvider = provider15;
        retrofit.RestAdapter.Builder builder18 = builder12.setServer("hi!");
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = builder19.build();
        java.util.concurrent.Executor executor27 = restAdapter26.httpExecutor;
        builder18.callbackExecutor = executor27;
        builder8.callbackExecutor = executor27;
        restAdapter0.httpExecutor = executor27;
        retrofit.client.Client.Provider provider31 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNull(provider31);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.httpExecutor = executor9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor13 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler14 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter0.requestInterceptor;
        retrofit.Server server16 = null;
        restAdapter0.server = server16;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(requestInterceptor15);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.ErrorHandler errorHandler12 = null;
        builder8.errorHandler = errorHandler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter16.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter16.requestInterceptor = requestInterceptor18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter16.log = log28;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter16.errorHandler = errorHandler32;
        retrofit.RestAdapter.Log log34 = restAdapter16.log;
        retrofit.RestAdapter.Builder builder35 = builder14.setLog(log34);
        retrofit.RestAdapter.Builder builder36 = builder8.setLog(log34);
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter37.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder36.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        retrofit.Profiler profiler47 = null;
        builder46.profiler = profiler47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        retrofit.converter.Converter converter57 = null;
        builder49.converter = converter57;
        retrofit.ErrorHandler errorHandler59 = null;
        builder49.errorHandler = errorHandler59;
        retrofit.RequestInterceptor requestInterceptor61 = builder49.requestInterceptor;
        builder46.requestInterceptor = requestInterceptor61;
        retrofit.RestAdapter.Builder builder63 = builder36.setRequestInterceptor(requestInterceptor61);
        builder7.requestInterceptor = requestInterceptor61;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log66 = restAdapter65.log;
        java.util.concurrent.Executor executor67 = restAdapter65.callbackExecutor;
        retrofit.Profiler profiler68 = restAdapter65.profiler;
        retrofit.Profiler profiler69 = null;
        restAdapter65.profiler = profiler69;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        restAdapter65.requestInterceptor = requestInterceptor71;
        retrofit.client.Client.Provider provider73 = restAdapter65.clientProvider;
        retrofit.ErrorHandler errorHandler74 = restAdapter65.errorHandler;
        java.util.concurrent.Executor executor75 = restAdapter65.callbackExecutor;
        retrofit.Server server76 = restAdapter65.server;
        retrofit.Profiler profiler77 = null;
        restAdapter65.profiler = profiler77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter80 = builder79.converter;
        retrofit.Profiler profiler81 = null;
        builder79.profiler = profiler81;
        retrofit.RestAdapter.Log log83 = builder79.log;
        builder79.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor85 = null;
        builder79.requestInterceptor = requestInterceptor85;
        retrofit.ErrorHandler errorHandler87 = null;
        builder79.errorHandler = errorHandler87;
        retrofit.client.Client.Provider provider89 = builder79.clientProvider;
        restAdapter65.clientProvider = provider89;
        retrofit.RestAdapter.Builder builder91 = builder7.setClient(provider89);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(log66);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(profiler68);
        org.junit.Assert.assertNull(provider73);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertNull(converter80);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.converter.Converter converter22 = builder0.converter;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.ErrorHandler errorHandler24 = builder0.errorHandler;
        retrofit.Profiler profiler25 = null;
        builder0.profiler = profiler25;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler24);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log8 = restAdapter7.log;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.Profiler profiler10 = restAdapter7.profiler;
        retrofit.Profiler profiler11 = null;
        restAdapter7.profiler = profiler11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter7.log = log21;
        restAdapter0.log = log21;
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder27.logLevel = logLevel32;
        retrofit.converter.Converter converter34 = null;
        builder27.converter = converter34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter36.requestInterceptor;
        retrofit.converter.Converter converter38 = restAdapter36.converter;
        java.util.concurrent.Executor executor39 = null;
        restAdapter36.callbackExecutor = executor39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor42 = null;
        restAdapter41.httpExecutor = executor42;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter41.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.Log log46 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel47;
        restAdapter36.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder50 = builder27.setLogLevel(logLevel47);
        retrofit.RestAdapter.Log log51 = builder50.log;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log53 = restAdapter52.log;
        java.util.concurrent.Executor executor54 = restAdapter52.callbackExecutor;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor56 = restAdapter55.requestInterceptor;
        retrofit.converter.Converter converter57 = restAdapter55.converter;
        java.util.concurrent.Executor executor58 = null;
        restAdapter55.callbackExecutor = executor58;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter55.logLevel = logLevel60;
        restAdapter52.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder63 = builder50.setLogLevel(logLevel60);
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean65 = logLevel64.log();
        retrofit.RestAdapter.Builder builder66 = builder63.setLogLevel(logLevel64);
        restAdapter0.setLogLevel(logLevel64);
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.Profiler profiler11 = restAdapter8.profiler;
        retrofit.Profiler profiler12 = null;
        restAdapter8.profiler = profiler12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        builder26.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log22, logLevel42);
        retrofit.converter.Converter converter46 = restAdapter45.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter45.logLevel;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        retrofit.RestAdapter restAdapter55 = builder48.build();
        java.util.concurrent.Executor executor56 = restAdapter55.httpExecutor;
        restAdapter45.callbackExecutor = executor56;
        retrofit.client.Client.Provider provider58 = restAdapter45.clientProvider;
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(provider58);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter4.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter4.requestInterceptor = requestInterceptor6;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel17);
        restAdapter4.log = log16;
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter4.errorHandler = errorHandler20;
        retrofit.converter.Converter converter22 = null;
        restAdapter4.converter = converter22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log44, logLevel48);
        restAdapter4.logLevel = logLevel48;
        retrofit.client.Header[] headerArray56 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList57 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList57, headerArray56);
        retrofit.mime.TypedOutput typedOutput59 = null;
        retrofit.client.Request request60 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList57, typedOutput59);
        java.lang.String str61 = request60.getUrl();
        java.util.List<retrofit.client.Header> headerList62 = request60.getHeaders();
        java.lang.String str63 = request60.getMethod();
        retrofit.mime.TypedOutput typedOutput64 = request60.getBody();
        java.util.List<retrofit.client.Header> headerList65 = request60.getHeaders();
        java.lang.String str66 = request60.getUrl();
        java.lang.String str67 = request60.getUrl();
        java.util.List<retrofit.client.Header> headerList68 = request60.getHeaders();
        java.util.List<retrofit.client.Header> headerList69 = request60.getHeaders();
        retrofit.mime.TypedOutput typedOutput70 = null;
        retrofit.client.Request request71 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList69, typedOutput70);
        java.lang.String str72 = request71.getMethod();
        retrofit.client.Request request73 = restAdapter4.logAndReplaceRequest(request71);
        java.lang.String str74 = request73.getUrl();
        java.util.List<retrofit.client.Header> headerList75 = request73.getHeaders();
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("", "Retrofit-Idle", headerList75, typedOutput76);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("hi!", "", headerList75, typedOutput78);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(headerArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(headerList62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(typedOutput64);
        org.junit.Assert.assertNotNull(headerList65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(headerList68);
        org.junit.Assert.assertNotNull(headerList69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Retrofit-Idle" + "'", str72, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Retrofit-Idle" + "'", str74, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(headerList75);
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel27 = builder0.logLevel;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.Server server30 = restAdapter28.server;
        retrofit.client.Client.Provider provider31 = null;
        restAdapter28.clientProvider = provider31;
        retrofit.Server server33 = null;
        restAdapter28.server = server33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter36 = null;
        restAdapter35.converter = converter36;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter35.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log41 = restAdapter40.log;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter40.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        restAdapter40.logLevel = logLevel44;
        retrofit.ErrorHandler errorHandler46 = restAdapter40.errorHandler;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.Profiler profiler52 = null;
        builder51.profiler = profiler52;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        builder51.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter restAdapter56 = builder51.build();
        retrofit.converter.Converter converter57 = restAdapter56.converter;
        restAdapter40.converter = converter57;
        restAdapter35.converter = converter57;
        restAdapter28.converter = converter57;
        retrofit.RestAdapter.Builder builder61 = builder0.setConverter(converter57);
        retrofit.RestAdapter restAdapter62 = builder61.build();
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter62.new RestHandler();
        retrofit.Profiler profiler64 = restAdapter62.profiler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(converter57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNull(profiler64);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder6.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor13 = builder6.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = builder6.build();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(restAdapter14);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = builder11.callbackExecutor;
        retrofit.RestAdapter.Log log13 = builder11.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.setLogLevel(logLevel37);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log30, logLevel37);
        retrofit.RestAdapter.Builder builder40 = builder11.setLogLevel(logLevel37);
        retrofit.ErrorHandler errorHandler41 = null;
        builder40.errorHandler = errorHandler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = builder43.callbackExecutor;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        retrofit.RestAdapter.Builder builder56 = builder43.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder57 = builder40.setLogLevel(logLevel54);
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        builder10.logLevel = logLevel58;
        retrofit.converter.Converter converter60 = builder10.converter;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.Profiler profiler66 = null;
        builder65.profiler = profiler66;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        builder65.requestInterceptor = requestInterceptor68;
        retrofit.RestAdapter restAdapter70 = builder65.build();
        retrofit.converter.Converter converter71 = restAdapter70.converter;
        retrofit.RequestInterceptor requestInterceptor72 = restAdapter70.requestInterceptor;
        retrofit.RestAdapter.Builder builder73 = builder10.setRequestInterceptor(requestInterceptor72);
        java.util.concurrent.Executor executor74 = builder73.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNotNull(converter71);
        org.junit.Assert.assertNotNull(requestInterceptor72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(executor74);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = builder34.setLog(log39);
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter41.logLevel = logLevel43;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        restAdapter41.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter41.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log39, logLevel47);
        boolean boolean50 = logLevel47.log();
        retrofit.RestAdapter.Builder builder51 = builder25.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider52 = builder51.clientProvider;
        retrofit.RestAdapter.Builder builder54 = builder51.setServer("hi!");
        retrofit.Server server55 = builder54.server;
        retrofit.RestAdapter restAdapter56 = builder54.build();
        retrofit.ErrorHandler errorHandler57 = restAdapter56.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(errorHandler57);
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.Profiler profiler9 = null;
        builder8.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        retrofit.converter.Converter converter19 = null;
        builder11.converter = converter19;
        retrofit.ErrorHandler errorHandler21 = null;
        builder11.errorHandler = errorHandler21;
        retrofit.RequestInterceptor requestInterceptor23 = builder11.requestInterceptor;
        builder8.requestInterceptor = requestInterceptor23;
        restAdapter0.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.Profiler profiler49 = builder48.profiler;
        retrofit.client.Client.Provider provider50 = builder48.clientProvider;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter53 = builder52.build();
        retrofit.RestAdapter.Log log54 = builder52.log;
        retrofit.RestAdapter restAdapter55 = builder52.build();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.Log log57 = restAdapter55.log;
        java.lang.reflect.Method method58 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj60 = restHandler26.invoke((java.lang.Object) restAdapter55, method58, objArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNull(provider50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = builder4.build();
        retrofit.RestAdapter.LogLevel logLevel6 = null;
        restAdapter5.logLevel = logLevel6;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.Server server10 = restAdapter8.server;
        retrofit.client.Client.Provider provider11 = null;
        restAdapter8.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter8.requestInterceptor;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        restAdapter5.log = log22;
        retrofit.Server server27 = null;
        restAdapter5.server = server27;
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter5.requestInterceptor;
        retrofit.converter.Converter converter30 = restAdapter5.converter;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder31.setLog(log36);
        retrofit.RestAdapter restAdapter38 = builder31.build();
        retrofit.converter.Converter converter39 = null;
        builder31.converter = converter39;
        retrofit.ErrorHandler errorHandler41 = null;
        builder31.errorHandler = errorHandler41;
        retrofit.RequestInterceptor requestInterceptor43 = builder31.requestInterceptor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.client.Client.Provider provider49 = builder48.clientProvider;
        builder48.ensureSaneDefaults();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("");
        builder48.log = log51;
        retrofit.Server server55 = builder48.server;
        builder31.server = server55;
        restAdapter5.server = server55;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(converter30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(server55);
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter7.logLevel;
        retrofit.Server server10 = restAdapter7.server;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter7.getLogLevel();
        retrofit.client.Client.Provider provider12 = restAdapter7.clientProvider;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter15.requestInterceptor = requestInterceptor17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        restAdapter15.log = log27;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter15.errorHandler = errorHandler31;
        retrofit.RestAdapter.Log log33 = restAdapter15.log;
        retrofit.RestAdapter.Builder builder34 = builder13.setLog(log33);
        retrofit.Profiler profiler35 = builder34.profiler;
        retrofit.Profiler profiler36 = builder34.profiler;
        java.util.concurrent.Executor executor37 = builder34.callbackExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        builder38.logLevel = logLevel54;
        retrofit.converter.Converter converter57 = builder38.converter;
        retrofit.ErrorHandler errorHandler58 = builder38.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel59 = builder38.logLevel;
        retrofit.Server server60 = builder38.server;
        retrofit.RestAdapter.Builder builder61 = builder34.setServer(server60);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.Profiler profiler67 = null;
        builder66.profiler = profiler67;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        builder66.requestInterceptor = requestInterceptor69;
        retrofit.RestAdapter restAdapter71 = builder66.build();
        retrofit.converter.Converter converter72 = null;
        builder66.converter = converter72;
        retrofit.client.Client.Provider provider74 = builder66.clientProvider;
        builder61.clientProvider = provider74;
        restAdapter7.clientProvider = provider74;
        restAdapter0.clientProvider = provider74;
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler79 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter0.logLevel;
        retrofit.RestAdapter.Log log81 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel82 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNotNull(provider74);
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(log81);
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log40, logLevel44);
        restAdapter0.logLevel = logLevel44;
        java.util.concurrent.Executor executor48 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter49.logLevel = logLevel51;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        restAdapter49.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter49.logLevel = logLevel55;
        retrofit.converter.Converter converter57 = restAdapter49.converter;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter59 = builder58.converter;
        retrofit.Profiler profiler60 = null;
        builder58.profiler = profiler60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.client.Client.Provider provider65 = null;
        builder62.clientProvider = provider65;
        retrofit.RestAdapter.Builder builder68 = builder62.setServer("hi!");
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder69.setLog(log74);
        retrofit.RestAdapter restAdapter76 = builder69.build();
        java.util.concurrent.Executor executor77 = restAdapter76.httpExecutor;
        builder68.callbackExecutor = executor77;
        builder58.callbackExecutor = executor77;
        restAdapter49.callbackExecutor = executor77;
        restAdapter0.callbackExecutor = executor77;
        retrofit.Profiler profiler82 = null;
        restAdapter0.profiler = profiler82;
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter0.logLevel;
        retrofit.client.Response response86 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response88 = restAdapter0.logAndReplaceResponse("", response86, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter9 = builder0.build();
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = null;
        restAdapter11.httpExecutor = executor12;
        retrofit.client.Client.Provider provider14 = restAdapter11.clientProvider;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        java.util.concurrent.Executor executor17 = restAdapter15.callbackExecutor;
        retrofit.ErrorHandler errorHandler18 = restAdapter15.errorHandler;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter34.logLevel = logLevel36;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter34.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter34.logLevel = logLevel40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log32, logLevel40);
        log32.log("Retrofit-Idle");
        restAdapter15.log = log32;
        restAdapter11.log = log32;
        retrofit.Server server47 = restAdapter11.server;
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter11.requestInterceptor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor50 = restAdapter49.requestInterceptor;
        java.util.concurrent.Executor executor51 = restAdapter49.callbackExecutor;
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        java.util.concurrent.Executor executor53 = restAdapter49.httpExecutor;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log55 = restAdapter54.log;
        retrofit.ErrorHandler errorHandler56 = restAdapter54.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.Profiler profiler63 = null;
        builder62.profiler = profiler63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = builder65.build();
        retrofit.converter.Converter converter73 = null;
        builder65.converter = converter73;
        retrofit.ErrorHandler errorHandler75 = null;
        builder65.errorHandler = errorHandler75;
        retrofit.RequestInterceptor requestInterceptor77 = builder65.requestInterceptor;
        builder62.requestInterceptor = requestInterceptor77;
        restAdapter54.requestInterceptor = requestInterceptor77;
        retrofit.RequestInterceptor requestInterceptor80 = restAdapter54.requestInterceptor;
        restAdapter49.requestInterceptor = requestInterceptor80;
        retrofit.RequestInterceptor requestInterceptor82 = restAdapter49.requestInterceptor;
        restAdapter11.requestInterceptor = requestInterceptor82;
        retrofit.RestAdapter.Builder builder84 = builder0.setRequestInterceptor(requestInterceptor82);
        builder84.ensureSaneDefaults();
        retrofit.Profiler profiler86 = builder84.profiler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(converter10);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(profiler86);
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.Server server5 = null;
        restAdapter0.server = server5;
        retrofit.client.Client.Provider provider7 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.client.Client.Provider provider30 = builder8.clientProvider;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter restAdapter45 = builder38.build();
        retrofit.converter.Converter converter46 = null;
        builder38.converter = converter46;
        retrofit.ErrorHandler errorHandler48 = null;
        builder38.errorHandler = errorHandler48;
        retrofit.RequestInterceptor requestInterceptor50 = builder38.requestInterceptor;
        builder35.requestInterceptor = requestInterceptor50;
        builder8.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.Log log53 = builder8.log;
        log53.log("hi!");
        log53.log("Retrofit-Idle");
        restAdapter0.log = log53;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(log53);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        java.lang.String str14 = request8.getUrl();
        java.lang.String str15 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList17 = request8.getHeaders();
        java.lang.String str18 = request8.getUrl();
        retrofit.mime.TypedOutput typedOutput19 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList20 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList20, typedOutput21);
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNotNull(headerList20);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder28.setLogLevel(logLevel31);
        retrofit.Server server34 = builder28.server;
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = null;
        builder36.converter = converter37;
        retrofit.client.Client.Provider provider39 = null;
        builder36.clientProvider = provider39;
        java.util.concurrent.Executor executor41 = builder36.httpExecutor;
        retrofit.Profiler profiler42 = builder36.profiler;
        retrofit.RestAdapter.Log log43 = builder36.log;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.callbackExecutor;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        retrofit.RestAdapter.Builder builder57 = builder44.setLogLevel(logLevel55);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter58.logLevel = logLevel60;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.setLogLevel(logLevel62);
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter58.getLogLevel();
        builder57.logLevel = logLevel64;
        retrofit.RestAdapter.Builder builder66 = builder36.setLogLevel(logLevel64);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor68 = restAdapter67.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        restAdapter67.requestInterceptor = requestInterceptor69;
        java.util.concurrent.Executor executor71 = restAdapter67.httpExecutor;
        java.util.concurrent.Executor executor72 = restAdapter67.httpExecutor;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.Profiler profiler78 = null;
        builder77.profiler = profiler78;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        builder77.requestInterceptor = requestInterceptor80;
        retrofit.RestAdapter restAdapter82 = builder77.build();
        retrofit.converter.Converter converter83 = restAdapter82.converter;
        restAdapter67.converter = converter83;
        builder66.converter = converter83;
        retrofit.RestAdapter.Builder builder86 = builder28.setConverter(converter83);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(converter83);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider10 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter.LogLevel logLevel13 = builder11.logLevel;
        builder11.ensureSaneDefaults();
        retrofit.client.Client.Provider provider15 = null;
        builder11.clientProvider = provider15;
        retrofit.Profiler profiler17 = builder11.profiler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = builder18.callbackExecutor;
        retrofit.RestAdapter.Log log20 = builder18.log;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.setLogLevel(logLevel44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log37, logLevel44);
        retrofit.RestAdapter.Builder builder47 = builder18.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.httpExecutor = executor49;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("hi!");
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLog(log53);
        builder18.log = log53;
        retrofit.RestAdapter.Builder builder56 = builder11.setLog(log53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter58 = builder57.converter;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor60 = restAdapter59.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        restAdapter59.requestInterceptor = requestInterceptor61;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel72);
        restAdapter59.log = log71;
        retrofit.ErrorHandler errorHandler75 = null;
        restAdapter59.errorHandler = errorHandler75;
        retrofit.RestAdapter.Log log77 = restAdapter59.log;
        retrofit.RestAdapter.Builder builder78 = builder57.setLog(log77);
        retrofit.RequestInterceptor requestInterceptor79 = builder57.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor80 = builder57.requestInterceptor;
        retrofit.RestAdapter.Log log81 = builder57.log;
        builder56.log = log81;
        java.util.concurrent.Executor executor83 = builder56.httpExecutor;
        builder0.callbackExecutor = executor83;
        retrofit.client.Client.Provider provider85 = builder0.clientProvider;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(requestInterceptor79);
        org.junit.Assert.assertNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(executor83);
        org.junit.Assert.assertNull(provider85);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter22.requestInterceptor = requestInterceptor24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        restAdapter22.log = log34;
        retrofit.ErrorHandler errorHandler38 = null;
        restAdapter22.errorHandler = errorHandler38;
        retrofit.converter.Converter converter40 = null;
        restAdapter22.converter = converter40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter50.requestInterceptor = requestInterceptor52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        restAdapter50.log = log62;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean67 = logLevel66.log();
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log62, logLevel66);
        restAdapter22.logLevel = logLevel66;
        restAdapter18.logLevel = logLevel66;
        retrofit.Profiler profiler71 = restAdapter18.profiler;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        restAdapter18.requestInterceptor = requestInterceptor72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer("hi!");
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder74.setLog(log79);
        retrofit.RestAdapter restAdapter81 = builder74.build();
        java.util.concurrent.Executor executor82 = restAdapter81.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler83 = restAdapter81.new RestHandler();
        retrofit.converter.Converter converter84 = restAdapter81.converter;
        restAdapter18.converter = converter84;
        restAdapter0.converter = converter84;
        retrofit.RequestInterceptor requestInterceptor87 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor88 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter89 = restAdapter0.converter;
        retrofit.Profiler profiler90 = null;
        restAdapter0.profiler = profiler90;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNotNull(converter84);
        org.junit.Assert.assertNull(requestInterceptor87);
        org.junit.Assert.assertNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(converter89);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.Profiler profiler9 = null;
        builder8.profiler = profiler9;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder8.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.client.Client.Provider provider14 = builder8.clientProvider;
        builder0.clientProvider = provider14;
        retrofit.ErrorHandler errorHandler16 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder17.setLog(log22);
        retrofit.RestAdapter restAdapter24 = builder17.build();
        retrofit.converter.Converter converter25 = null;
        builder17.converter = converter25;
        retrofit.ErrorHandler errorHandler27 = null;
        builder17.errorHandler = errorHandler27;
        retrofit.RequestInterceptor requestInterceptor29 = builder17.requestInterceptor;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.client.Client.Provider provider35 = builder34.clientProvider;
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        log37.log("");
        builder34.log = log37;
        retrofit.Server server41 = builder34.server;
        builder17.server = server41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder43.setLog(log48);
        retrofit.RestAdapter restAdapter50 = builder43.build();
        java.util.concurrent.Executor executor51 = restAdapter50.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter50.new RestHandler();
        retrofit.converter.Converter converter53 = restAdapter50.converter;
        builder17.converter = converter53;
        retrofit.RestAdapter.Builder builder55 = builder0.setConverter(converter53);
        java.lang.Class<?> wildcardClass56 = converter53.getClass();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNotNull(provider14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNotNull(converter53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder12.setLog(log17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter19.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter19.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log17, logLevel25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        restAdapter27.log = log33;
        builder0.log = log33;
        java.util.concurrent.Executor executor37 = null;
        builder0.httpExecutor = executor37;
        retrofit.converter.Converter converter39 = null;
        builder0.converter = converter39;
        retrofit.RestAdapter.Builder builder42 = builder0.setServer("hi!");
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = builder42.build();
        java.util.concurrent.Executor executor45 = null;
        builder42.httpExecutor = executor45;
        retrofit.client.Client.Provider provider47 = builder42.clientProvider;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(provider47);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Log log9 = builder0.log;
        java.util.concurrent.Executor executor10 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.client.Client.Provider provider14 = null;
        builder11.clientProvider = provider14;
        java.util.concurrent.Executor executor16 = builder11.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder11.requestInterceptor = requestInterceptor17;
        retrofit.converter.Converter converter19 = null;
        builder11.converter = converter19;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter22 = null;
        restAdapter21.converter = converter22;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter21.requestInterceptor = requestInterceptor24;
        retrofit.Profiler profiler26 = restAdapter21.profiler;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        restAdapter21.logLevel = logLevel27;
        java.util.concurrent.Executor executor30 = restAdapter21.httpExecutor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = builder31.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor33 = builder31.requestInterceptor;
        retrofit.ErrorHandler errorHandler34 = null;
        builder31.errorHandler = errorHandler34;
        retrofit.converter.Converter converter36 = null;
        builder31.converter = converter36;
        retrofit.ErrorHandler errorHandler38 = null;
        builder31.errorHandler = errorHandler38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter40.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter40.requestInterceptor = requestInterceptor42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        restAdapter40.log = log52;
        retrofit.ErrorHandler errorHandler56 = null;
        restAdapter40.errorHandler = errorHandler56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter59 = builder58.converter;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor61 = restAdapter60.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        restAdapter60.requestInterceptor = requestInterceptor62;
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel73);
        restAdapter60.log = log72;
        retrofit.ErrorHandler errorHandler76 = null;
        restAdapter60.errorHandler = errorHandler76;
        retrofit.RestAdapter.Log log78 = restAdapter60.log;
        retrofit.RestAdapter.Builder builder79 = builder58.setLog(log78);
        retrofit.RequestInterceptor requestInterceptor80 = builder58.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor81 = builder58.requestInterceptor;
        retrofit.RestAdapter.Builder builder83 = builder58.setServer("hi!");
        retrofit.Server server84 = builder58.server;
        restAdapter40.server = server84;
        retrofit.RestAdapter.Builder builder86 = builder31.setServer(server84);
        restAdapter21.server = server84;
        retrofit.RestAdapter.Builder builder88 = builder11.setServer(server84);
        retrofit.Server server89 = builder88.server;
        builder0.server = server89;
        retrofit.Profiler profiler91 = null;
        builder0.profiler = profiler91;
        retrofit.Server server93 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel94 = builder0.logLevel;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(requestInterceptor80);
        org.junit.Assert.assertNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(server89);
        org.junit.Assert.assertNotNull(server93);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.RestAdapter restAdapter18 = builder11.build();
        java.util.concurrent.Executor executor19 = restAdapter18.httpExecutor;
        builder10.callbackExecutor = executor19;
        builder0.callbackExecutor = executor19;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Log log44 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder45 = builder24.setLog(log44);
        retrofit.RequestInterceptor requestInterceptor46 = builder24.requestInterceptor;
        builder24.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor48 = builder24.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel49 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder0.setLogLevel(logLevel49);
        retrofit.RequestInterceptor requestInterceptor51 = builder50.requestInterceptor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor51);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.httpExecutor = executor4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("hi!");
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = builder3.setLog(log8);
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        builder3.logLevel = logLevel19;
        retrofit.converter.Converter converter22 = builder3.converter;
        retrofit.ErrorHandler errorHandler23 = builder3.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel24 = builder3.logLevel;
        retrofit.Server server25 = builder3.server;
        builder0.server = server25;
        retrofit.Server server27 = builder0.server;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter29 = builder28.converter;
        retrofit.Profiler profiler30 = null;
        builder28.profiler = profiler30;
        retrofit.RestAdapter.Log log32 = builder28.log;
        builder28.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor34 = null;
        builder28.requestInterceptor = requestInterceptor34;
        retrofit.converter.Converter converter36 = builder28.converter;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter37.logLevel;
        retrofit.converter.Converter converter40 = null;
        restAdapter37.converter = converter40;
        retrofit.ErrorHandler errorHandler42 = restAdapter37.errorHandler;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = builder43.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor45 = builder43.requestInterceptor;
        retrofit.ErrorHandler errorHandler46 = null;
        builder43.errorHandler = errorHandler46;
        retrofit.converter.Converter converter48 = null;
        builder43.converter = converter48;
        retrofit.client.Client.Provider provider50 = builder43.clientProvider;
        retrofit.RequestInterceptor requestInterceptor51 = builder43.requestInterceptor;
        retrofit.Server server52 = builder43.server;
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel62);
        log61.log("hi!");
        log61.log("Retrofit-Idle");
        builder43.log = log61;
        restAdapter37.log = log61;
        builder28.log = log61;
        log61.log("Retrofit-Idle");
        builder0.log = log61;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNotNull(converter36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(provider50);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider8 = null;
        restAdapter0.clientProvider = provider8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.client.Client.Provider provider13 = null;
        builder10.clientProvider = provider13;
        retrofit.client.Client.Provider provider15 = builder10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log40, logLevel44);
        retrofit.RestAdapter.Builder builder47 = builder18.setLog(log40);
        retrofit.Server server48 = builder47.server;
        retrofit.ErrorHandler errorHandler49 = null;
        builder47.errorHandler = errorHandler49;
        retrofit.Profiler profiler51 = null;
        builder47.profiler = profiler51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = builder53.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor55 = builder53.requestInterceptor;
        java.util.concurrent.Executor executor56 = builder53.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel57 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.Profiler profiler63 = null;
        builder62.profiler = profiler63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        builder62.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter restAdapter67 = builder62.build();
        retrofit.converter.Converter converter68 = null;
        builder62.converter = converter68;
        retrofit.client.Client.Provider provider70 = builder62.clientProvider;
        retrofit.RestAdapter.Builder builder71 = builder53.setClient(provider70);
        builder47.clientProvider = provider70;
        builder17.clientProvider = provider70;
        restAdapter0.clientProvider = provider70;
        java.lang.Throwable throwable75 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable75, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(provider70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.converter.Converter converter12 = restAdapter10.converter;
        java.util.concurrent.Executor executor13 = null;
        restAdapter10.callbackExecutor = executor13;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.logLevel = logLevel15;
        restAdapter0.setLogLevel(logLevel15);
        retrofit.RestAdapter.LogLevel logLevel18 = null;
        restAdapter0.logLevel = logLevel18;
        retrofit.client.Client.Provider provider20 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider20);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.Profiler profiler31 = builder29.profiler;
        java.util.concurrent.Executor executor32 = builder29.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        java.util.concurrent.Executor executor41 = restAdapter40.httpExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.RestAdapter.Builder builder48 = builder42.setServer("hi!");
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        java.util.concurrent.Executor executor57 = restAdapter56.httpExecutor;
        builder48.callbackExecutor = executor57;
        retrofit.RestAdapter.Builder builder59 = builder29.setExecutors(executor41, executor57);
        restAdapter7.httpExecutor = executor41;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        restAdapter7.logLevel = logLevel70;
        retrofit.ErrorHandler errorHandler73 = restAdapter7.errorHandler;
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter7.getLogLevel();
        retrofit.Server server76 = restAdapter7.server;
        java.util.concurrent.Executor executor77 = restAdapter7.callbackExecutor;
        java.lang.Class<?> wildcardClass78 = restAdapter7.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler73);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor26);
        retrofit.client.Client client29 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder30 = builder0.setClient(client29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter5.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        restAdapter5.requestInterceptor = requestInterceptor7;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        restAdapter5.log = log17;
        retrofit.ErrorHandler errorHandler21 = null;
        restAdapter5.errorHandler = errorHandler21;
        retrofit.converter.Converter converter23 = null;
        restAdapter5.converter = converter23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter33.requestInterceptor = requestInterceptor35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        restAdapter33.log = log45;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean50 = logLevel49.log();
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log45, logLevel49);
        restAdapter5.logLevel = logLevel49;
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter5.logLevel;
        boolean boolean54 = logLevel53.log();
        restAdapter0.logLevel = logLevel53;
        retrofit.RequestInterceptor requestInterceptor56 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler58 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNull(errorHandler58);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.RestAdapter.LogLevel logLevel12 = null;
        restAdapter8.logLevel = logLevel12;
        retrofit.ErrorHandler errorHandler14 = restAdapter8.errorHandler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        builder19.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.converter.Converter converter25 = restAdapter24.converter;
        restAdapter8.converter = converter25;
        retrofit.client.Client.Provider provider27 = restAdapter8.clientProvider;
        retrofit.converter.Converter converter28 = restAdapter8.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log30 = restAdapter29.log;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log42 = restAdapter41.log;
        java.util.concurrent.Executor executor43 = restAdapter41.callbackExecutor;
        retrofit.Profiler profiler44 = restAdapter41.profiler;
        retrofit.Profiler profiler45 = null;
        restAdapter41.profiler = profiler45;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        restAdapter41.log = log55;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = builder59.setLog(log64);
        retrofit.Server server66 = null;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log74, logLevel75);
        builder59.logLevel = logLevel75;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log55, logLevel75);
        restAdapter29.logLevel = logLevel75;
        restAdapter8.logLevel = logLevel75;
        retrofit.converter.Converter converter81 = restAdapter8.converter;
        restAdapter0.converter = converter81;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(converter25);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNotNull(converter28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(profiler44);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(converter81);
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider10 = builder9.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean12 = logLevel11.log();
        builder9.logLevel = logLevel11;
        builder0.logLevel = logLevel11;
        retrofit.RestAdapter.Log log15 = builder0.log;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = builder16.logLevel;
        builder16.ensureSaneDefaults();
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter35.logLevel = logLevel37;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter35.requestInterceptor = requestInterceptor39;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter35.logLevel = logLevel41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log33, logLevel41);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        restAdapter43.log = log49;
        builder16.log = log49;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = builder53.callbackExecutor;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel64);
        retrofit.RestAdapter.Builder builder66 = builder53.setLogLevel(logLevel64);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log68 = restAdapter67.log;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = builder69.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor71 = builder69.requestInterceptor;
        retrofit.ErrorHandler errorHandler72 = null;
        builder69.errorHandler = errorHandler72;
        retrofit.converter.Converter converter74 = null;
        builder69.converter = converter74;
        retrofit.ErrorHandler errorHandler76 = null;
        builder69.errorHandler = errorHandler76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("hi!");
        retrofit.Profiler profiler83 = null;
        builder82.profiler = profiler83;
        retrofit.RequestInterceptor requestInterceptor85 = null;
        builder82.requestInterceptor = requestInterceptor85;
        retrofit.RestAdapter restAdapter87 = builder82.build();
        retrofit.converter.Converter converter88 = restAdapter87.converter;
        retrofit.RestAdapter.Builder builder89 = builder69.setConverter(converter88);
        restAdapter67.converter = converter88;
        builder53.converter = converter88;
        retrofit.RestAdapter.Builder builder92 = builder16.setConverter(converter88);
        java.util.concurrent.Executor executor93 = builder92.callbackExecutor;
        builder0.httpExecutor = executor93;
        retrofit.RestAdapter.LogLevel logLevel95 = builder0.logLevel;
        boolean boolean96 = logLevel95.log();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(converter88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(executor93);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder0.requestInterceptor = requestInterceptor6;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.converter.Converter converter9 = builder0.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(provider8);
        org.junit.Assert.assertNotNull(converter9);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.Profiler profiler10 = builder7.profiler;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.client.Client.Provider provider14 = null;
        builder11.clientProvider = provider14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder11.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.Profiler profiler23 = null;
        builder22.profiler = profiler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = builder25.build();
        retrofit.converter.Converter converter33 = null;
        builder25.converter = converter33;
        retrofit.ErrorHandler errorHandler35 = null;
        builder25.errorHandler = errorHandler35;
        retrofit.RequestInterceptor requestInterceptor37 = builder25.requestInterceptor;
        builder22.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter.Builder builder39 = builder11.setRequestInterceptor(requestInterceptor37);
        retrofit.client.Client.Provider provider40 = null;
        builder39.clientProvider = provider40;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        log42.log("");
        retrofit.RestAdapter.Builder builder45 = builder39.setLog(log42);
        retrofit.RequestInterceptor requestInterceptor46 = builder39.requestInterceptor;
        builder7.requestInterceptor = requestInterceptor46;
        builder7.ensureSaneDefaults();
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(requestInterceptor46);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor26);
        builder28.ensureSaneDefaults();
        java.util.concurrent.Executor executor30 = builder28.callbackExecutor;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter31 = builder28.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor30);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = builder31.callbackExecutor;
        retrofit.RestAdapter.Log log33 = builder31.log;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.setLogLevel(logLevel57);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log50, logLevel57);
        retrofit.RestAdapter.Builder builder60 = builder31.setLogLevel(logLevel57);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter61.setLogLevel(logLevel65);
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter61.getLogLevel();
        builder60.logLevel = logLevel67;
        retrofit.RestAdapter.Builder builder69 = builder29.setLogLevel(logLevel67);
        retrofit.Server server70 = builder69.server;
        retrofit.RestAdapter.Log log71 = builder69.log;
        log71.log("");
        java.lang.Class<?> wildcardClass74 = log71.getClass();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Log log9 = builder0.log;
        java.util.concurrent.Executor executor10 = builder0.callbackExecutor;
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor12 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.Profiler profiler18 = null;
        builder17.profiler = profiler18;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder17.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = builder17.build();
        retrofit.client.Client.Provider provider23 = builder17.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel24 = builder17.logLevel;
        builder0.logLevel = logLevel24;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log27 = restAdapter26.log;
        java.util.concurrent.Executor executor28 = restAdapter26.callbackExecutor;
        retrofit.Profiler profiler29 = restAdapter26.profiler;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder31.setLog(log36);
        retrofit.RestAdapter restAdapter38 = builder31.build();
        java.util.concurrent.Executor executor39 = restAdapter38.httpExecutor;
        retrofit.client.Client.Provider provider40 = null;
        restAdapter38.clientProvider = provider40;
        retrofit.Profiler profiler42 = restAdapter38.profiler;
        retrofit.Server server43 = restAdapter38.server;
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter38.logLevel;
        java.util.concurrent.Executor executor45 = restAdapter38.httpExecutor;
        restAdapter26.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder47.setLog(log52);
        retrofit.RestAdapter restAdapter54 = builder47.build();
        java.util.concurrent.Executor executor55 = restAdapter54.httpExecutor;
        java.util.concurrent.Executor executor56 = restAdapter54.httpExecutor;
        retrofit.RestAdapter.Builder builder57 = builder0.setExecutors(executor45, executor56);
        java.util.concurrent.Executor executor58 = builder57.httpExecutor;
        retrofit.Profiler profiler59 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder60 = builder57.setProfiler(profiler59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(executor12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(provider23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(executor58);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.Server server10 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(server10);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        retrofit.converter.Converter converter24 = restAdapter22.converter;
        java.util.concurrent.Executor executor25 = restAdapter22.httpExecutor;
        retrofit.converter.Converter converter26 = null;
        restAdapter22.converter = converter26;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.client.Client.Provider provider32 = null;
        builder29.clientProvider = provider32;
        retrofit.client.Client.Provider provider34 = builder29.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder36 = builder29.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter47.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        restAdapter47.requestInterceptor = requestInterceptor49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        restAdapter47.log = log59;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean64 = logLevel63.log();
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log59, logLevel63);
        retrofit.RestAdapter.Builder builder66 = builder37.setLog(log59);
        retrofit.Server server67 = builder66.server;
        retrofit.ErrorHandler errorHandler68 = null;
        builder66.errorHandler = errorHandler68;
        retrofit.Profiler profiler70 = null;
        builder66.profiler = profiler70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = builder72.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor74 = builder72.requestInterceptor;
        java.util.concurrent.Executor executor75 = builder72.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel76 = builder72.logLevel;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = null;
        builder77.httpExecutor = executor78;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("hi!");
        retrofit.Profiler profiler82 = null;
        builder81.profiler = profiler82;
        retrofit.RequestInterceptor requestInterceptor84 = null;
        builder81.requestInterceptor = requestInterceptor84;
        retrofit.RestAdapter restAdapter86 = builder81.build();
        retrofit.converter.Converter converter87 = null;
        builder81.converter = converter87;
        retrofit.client.Client.Provider provider89 = builder81.clientProvider;
        retrofit.RestAdapter.Builder builder90 = builder72.setClient(provider89);
        builder66.clientProvider = provider89;
        builder36.clientProvider = provider89;
        restAdapter22.clientProvider = provider89;
        retrofit.RestAdapter.Builder builder94 = builder0.setClient(provider89);
        retrofit.Profiler profiler95 = null;
        builder0.profiler = profiler95;
        retrofit.RestAdapter.Log log97 = builder0.log;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(log97);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter.LogLevel logLevel8 = builder6.logLevel;
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = null;
        restAdapter10.httpExecutor = executor11;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter10.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        restAdapter18.requestInterceptor = requestInterceptor20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        restAdapter18.log = log30;
        retrofit.ErrorHandler errorHandler34 = null;
        restAdapter18.errorHandler = errorHandler34;
        retrofit.RestAdapter.Log log36 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder37 = builder16.setLog(log36);
        retrofit.Profiler profiler38 = builder37.profiler;
        retrofit.RestAdapter.LogLevel logLevel39 = builder37.logLevel;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter40.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter40.requestInterceptor = requestInterceptor42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        restAdapter40.log = log52;
        retrofit.ErrorHandler errorHandler56 = null;
        restAdapter40.errorHandler = errorHandler56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter59 = builder58.converter;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor61 = restAdapter60.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        restAdapter60.requestInterceptor = requestInterceptor62;
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel73);
        restAdapter60.log = log72;
        retrofit.ErrorHandler errorHandler76 = null;
        restAdapter60.errorHandler = errorHandler76;
        retrofit.RestAdapter.Log log78 = restAdapter60.log;
        retrofit.RestAdapter.Builder builder79 = builder58.setLog(log78);
        retrofit.RequestInterceptor requestInterceptor80 = builder58.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor81 = builder58.requestInterceptor;
        retrofit.RestAdapter.Builder builder83 = builder58.setServer("hi!");
        retrofit.Server server84 = builder58.server;
        restAdapter40.server = server84;
        builder37.server = server84;
        restAdapter10.server = server84;
        builder6.server = server84;
        java.util.concurrent.Executor executor89 = builder6.callbackExecutor;
        retrofit.client.Client.Provider provider90 = builder6.clientProvider;
        retrofit.RestAdapter.Builder builder91 = builder0.setClient(provider90);
        retrofit.RestAdapter.Log log92 = builder0.log;
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(requestInterceptor80);
        org.junit.Assert.assertNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNotNull(provider90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(log92);
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request10.getBody();
        retrofit.mime.TypedOutput typedOutput13 = request10.getBody();
        java.lang.String str14 = request10.getMethod();
        java.util.List<retrofit.client.Header> headerList15 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput16 = request10.getBody();
        java.util.List<retrofit.client.Header> headerList17 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("", "Retrofit-Idle", headerList17, typedOutput18);
        java.util.List<retrofit.client.Header> headerList20 = request19.getHeaders();
        java.util.List<retrofit.client.Header> headerList21 = request19.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList21, typedOutput22);
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList21);
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        restAdapter0.logLevel = logLevel6;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = builder12.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor14 = builder12.requestInterceptor;
        retrofit.ErrorHandler errorHandler15 = null;
        builder12.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = null;
        builder12.converter = converter17;
        retrofit.ErrorHandler errorHandler19 = null;
        builder12.errorHandler = errorHandler19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.Profiler profiler26 = null;
        builder25.profiler = profiler26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder25.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter restAdapter30 = builder25.build();
        retrofit.converter.Converter converter31 = restAdapter30.converter;
        retrofit.RestAdapter.Builder builder32 = builder12.setConverter(converter31);
        restAdapter10.converter = converter31;
        restAdapter0.converter = converter31;
        retrofit.RestAdapter.Log log35 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = builder38.converter;
        retrofit.Profiler profiler40 = null;
        builder38.profiler = profiler40;
        retrofit.ErrorHandler errorHandler42 = null;
        builder38.errorHandler = errorHandler42;
        retrofit.RestAdapter.Builder builder45 = builder38.setServer("hi!");
        java.util.concurrent.Executor executor46 = builder38.httpExecutor;
        retrofit.RestAdapter restAdapter47 = builder38.build();
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log49 = restAdapter48.log;
        java.util.concurrent.Executor executor50 = restAdapter48.callbackExecutor;
        java.util.concurrent.Executor executor51 = restAdapter48.callbackExecutor;
        retrofit.Profiler profiler52 = restAdapter48.profiler;
        retrofit.RestAdapter.Log log53 = restAdapter48.log;
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.RestAdapter restAdapter60 = builder59.build();
        retrofit.client.Header[] headerArray63 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList64 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList64, headerArray63);
        retrofit.mime.TypedOutput typedOutput66 = null;
        retrofit.client.Request request67 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList64, typedOutput66);
        java.lang.String str68 = request67.getMethod();
        java.lang.String str69 = request67.getMethod();
        retrofit.client.Request request70 = restAdapter60.logAndReplaceRequest(request67);
        retrofit.RequestInterceptor requestInterceptor71 = restAdapter60.requestInterceptor;
        restAdapter48.requestInterceptor = requestInterceptor71;
        restAdapter47.requestInterceptor = requestInterceptor71;
        restAdapter0.requestInterceptor = requestInterceptor71;
        retrofit.converter.Converter converter75 = restAdapter0.converter;
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(converter31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(headerArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(request70);
        org.junit.Assert.assertNotNull(requestInterceptor71);
        org.junit.Assert.assertNotNull(converter75);
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Profiler profiler9 = builder0.profiler;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        java.util.concurrent.Executor executor28 = null;
        restAdapter10.callbackExecutor = executor28;
        retrofit.RestAdapter.Log log30 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder31 = builder0.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.Profiler profiler33 = builder31.profiler;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler33);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        builder8.logLevel = logLevel10;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter17 = null;
        restAdapter14.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        restAdapter14.log = log39;
        retrofit.RestAdapter.Builder builder42 = builder8.setLog(log39);
        restAdapter0.log = log39;
        retrofit.converter.Converter converter44 = restAdapter0.converter;
        retrofit.converter.Converter converter45 = restAdapter0.converter;
        java.util.concurrent.Executor executor46 = restAdapter0.callbackExecutor;
        java.lang.Throwable throwable47 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable47, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(executor46);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel27 = builder0.logLevel;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.Server server30 = restAdapter28.server;
        retrofit.client.Client.Provider provider31 = null;
        restAdapter28.clientProvider = provider31;
        retrofit.Server server33 = null;
        restAdapter28.server = server33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter36 = null;
        restAdapter35.converter = converter36;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter35.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log41 = restAdapter40.log;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter40.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        restAdapter40.logLevel = logLevel44;
        retrofit.ErrorHandler errorHandler46 = restAdapter40.errorHandler;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.Profiler profiler52 = null;
        builder51.profiler = profiler52;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        builder51.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter restAdapter56 = builder51.build();
        retrofit.converter.Converter converter57 = restAdapter56.converter;
        restAdapter40.converter = converter57;
        restAdapter35.converter = converter57;
        restAdapter28.converter = converter57;
        retrofit.RestAdapter.Builder builder61 = builder0.setConverter(converter57);
        retrofit.RestAdapter.LogLevel logLevel62 = null;
        builder0.logLevel = logLevel62;
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor65 = builder0.httpExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(converter57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executor65);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Log log25 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder26 = builder5.setLog(log25);
        restAdapter0.log = log25;
        log25.log("");
        log25.log("");
        log25.log("Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter9 = builder0.build();
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder18.setLog(log23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter25.logLevel = logLevel27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter25.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter25.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log23, logLevel31);
        restAdapter9.logLevel = logLevel31;
        retrofit.Server server35 = restAdapter9.server;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server35);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        java.lang.String str13 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput14 = request10.getBody();
        java.util.List<retrofit.client.Header> headerList15 = request10.getHeaders();
        java.lang.String str16 = request10.getUrl();
        java.lang.String str17 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request10.getHeaders();
        java.lang.String str19 = request10.getMethod();
        java.lang.String str20 = request10.getUrl();
        java.lang.String str21 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList22 = request10.getHeaders();
        java.util.List<retrofit.client.Header> headerList23 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "", headerList23, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", headerList23, typedOutput26);
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertNotNull(headerList23);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter restAdapter22 = builder0.build();
        retrofit.Server server23 = builder0.server;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.Profiler profiler28 = restAdapter24.profiler;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter24.errorHandler = errorHandler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        java.util.concurrent.Executor executor36 = null;
        builder31.httpExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = builder31.build();
        retrofit.converter.Converter converter39 = restAdapter38.converter;
        restAdapter24.converter = converter39;
        retrofit.RestAdapter.Builder builder41 = builder0.setConverter(converter39);
        retrofit.Profiler profiler42 = null;
        builder41.profiler = profiler42;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(converter39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.converter.Converter converter22 = builder0.converter;
        retrofit.RestAdapter.Log log23 = builder0.log;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Log log44 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder45 = builder24.setLog(log44);
        retrofit.Profiler profiler46 = builder45.profiler;
        retrofit.client.Client.Provider provider47 = builder45.clientProvider;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler50 = builder45.errorHandler;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = builder51.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor53 = builder51.requestInterceptor;
        java.util.concurrent.Executor executor54 = builder51.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel55 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.Profiler profiler61 = null;
        builder60.profiler = profiler61;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder60.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter restAdapter65 = builder60.build();
        retrofit.converter.Converter converter66 = null;
        builder60.converter = converter66;
        retrofit.client.Client.Provider provider68 = builder60.clientProvider;
        retrofit.RestAdapter.Builder builder69 = builder51.setClient(provider68);
        builder45.clientProvider = provider68;
        retrofit.RestAdapter.Builder builder71 = builder0.setClient(provider68);
        builder71.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(provider68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter7.setLogLevel(logLevel11);
        retrofit.Server server13 = restAdapter7.server;
        retrofit.converter.Converter converter14 = restAdapter7.converter;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder15.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = builder40.converter;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter42.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter42.requestInterceptor = requestInterceptor44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        restAdapter42.log = log54;
        retrofit.ErrorHandler errorHandler58 = null;
        restAdapter42.errorHandler = errorHandler58;
        retrofit.RestAdapter.Log log60 = restAdapter42.log;
        retrofit.RestAdapter.Builder builder61 = builder40.setLog(log60);
        retrofit.Profiler profiler62 = builder61.profiler;
        retrofit.client.Client.Provider provider63 = builder61.clientProvider;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter66 = builder65.build();
        retrofit.RestAdapter.Log log67 = builder65.log;
        retrofit.client.Client.Provider provider68 = builder65.clientProvider;
        retrofit.RestAdapter.Builder builder69 = builder15.setClient(provider68);
        restAdapter7.clientProvider = provider68;
        restAdapter0.clientProvider = provider68;
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter0.logLevel;
        retrofit.client.Response response74 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response76 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response74, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(provider68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider1 = null;
        restAdapter0.clientProvider = provider1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter6.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter6.logLevel = logLevel8;
        retrofit.Profiler profiler10 = restAdapter6.profiler;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter6.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter6.requestInterceptor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log14 = restAdapter13.log;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.Profiler profiler16 = restAdapter13.profiler;
        retrofit.Profiler profiler17 = null;
        restAdapter13.profiler = profiler17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        restAdapter13.log = log27;
        restAdapter6.log = log27;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter6.getLogLevel();
        boolean boolean33 = logLevel32.log();
        restAdapter0.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.client.Client.Provider provider38 = null;
        builder35.clientProvider = provider38;
        retrofit.RestAdapter.Builder builder41 = builder35.setServer("hi!");
        retrofit.Profiler profiler42 = builder35.profiler;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter44 = builder43.converter;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter45.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter45.requestInterceptor = requestInterceptor47;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel58);
        restAdapter45.log = log57;
        retrofit.ErrorHandler errorHandler61 = null;
        restAdapter45.errorHandler = errorHandler61;
        retrofit.RestAdapter.Log log63 = restAdapter45.log;
        retrofit.RestAdapter.Builder builder64 = builder43.setLog(log63);
        retrofit.RequestInterceptor requestInterceptor65 = builder43.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor66 = builder43.requestInterceptor;
        retrofit.RestAdapter.Log log67 = builder43.log;
        builder35.log = log67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor70 = restAdapter69.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        restAdapter69.requestInterceptor = requestInterceptor71;
        java.util.concurrent.Executor executor73 = restAdapter69.httpExecutor;
        java.util.concurrent.Executor executor74 = restAdapter69.httpExecutor;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("hi!");
        retrofit.Profiler profiler80 = null;
        builder79.profiler = profiler80;
        retrofit.RequestInterceptor requestInterceptor82 = null;
        builder79.requestInterceptor = requestInterceptor82;
        retrofit.RestAdapter restAdapter84 = builder79.build();
        retrofit.converter.Converter converter85 = restAdapter84.converter;
        restAdapter69.converter = converter85;
        builder35.converter = converter85;
        restAdapter0.converter = converter85;
        java.lang.Throwable throwable89 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable89, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(converter85);
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter29.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        restAdapter29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.log = log41;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter29.errorHandler = errorHandler45;
        retrofit.RestAdapter.Log log47 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder48 = builder27.setLog(log47);
        retrofit.RequestInterceptor requestInterceptor49 = builder27.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor50 = builder27.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = builder27.setServer("hi!");
        retrofit.Server server53 = builder27.server;
        restAdapter9.server = server53;
        builder7.server = server53;
        retrofit.RestAdapter.Builder builder56 = builder0.setServer(server53);
        retrofit.RestAdapter restAdapter57 = builder0.build();
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider59 = builder0.clientProvider;
        retrofit.client.Client.Provider provider60 = builder0.clientProvider;
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNotNull(provider59);
        org.junit.Assert.assertNotNull(provider60);
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter19 = builder18.converter;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter20.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter20.requestInterceptor = requestInterceptor22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        restAdapter20.log = log32;
        retrofit.ErrorHandler errorHandler36 = null;
        restAdapter20.errorHandler = errorHandler36;
        retrofit.RestAdapter.Log log38 = restAdapter20.log;
        retrofit.RestAdapter.Builder builder39 = builder18.setLog(log38);
        retrofit.RequestInterceptor requestInterceptor40 = builder18.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor41 = builder18.requestInterceptor;
        retrofit.RestAdapter.Builder builder43 = builder18.setServer("hi!");
        retrofit.Server server44 = builder18.server;
        restAdapter0.server = server44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter47 = builder46.converter;
        retrofit.RestAdapter.LogLevel logLevel48 = builder46.logLevel;
        builder46.ensureSaneDefaults();
        retrofit.client.Client.Provider provider50 = null;
        builder46.clientProvider = provider50;
        retrofit.Profiler profiler52 = builder46.profiler;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = builder53.callbackExecutor;
        retrofit.RestAdapter.Log log55 = builder53.log;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel73);
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter75.logLevel = logLevel77;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.setLogLevel(logLevel79);
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log72, logLevel79);
        retrofit.RestAdapter.Builder builder82 = builder53.setLogLevel(logLevel79);
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor84 = null;
        builder83.httpExecutor = executor84;
        retrofit.RestAdapter.Builder builder87 = builder83.setServer("hi!");
        retrofit.RestAdapter.Log log88 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder89 = builder83.setLog(log88);
        builder53.log = log88;
        retrofit.RestAdapter.Builder builder91 = builder46.setLog(log88);
        java.util.concurrent.Executor executor92 = builder91.httpExecutor;
        restAdapter0.httpExecutor = executor92;
        java.util.concurrent.Executor executor94 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter95 = restAdapter0.converter;
        retrofit.Profiler profiler96 = restAdapter0.profiler;
        retrofit.Server server97 = restAdapter0.server;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(executor92);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNull(converter95);
        org.junit.Assert.assertNull(profiler96);
        org.junit.Assert.assertNotNull(server97);
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        retrofit.Profiler profiler20 = null;
        restAdapter0.profiler = profiler20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter22.requestInterceptor;
        java.util.concurrent.Executor executor24 = restAdapter22.callbackExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.Server server27 = restAdapter25.server;
        retrofit.Profiler profiler28 = null;
        restAdapter25.profiler = profiler28;
        retrofit.ErrorHandler errorHandler30 = restAdapter25.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter25.getLogLevel();
        retrofit.ErrorHandler errorHandler32 = restAdapter25.errorHandler;
        retrofit.Profiler profiler33 = restAdapter25.profiler;
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter25.requestInterceptor;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter35.requestInterceptor;
        retrofit.converter.Converter converter37 = restAdapter35.converter;
        java.util.concurrent.Executor executor38 = null;
        restAdapter35.callbackExecutor = executor38;
        retrofit.converter.Converter converter40 = null;
        restAdapter35.converter = converter40;
        retrofit.Server server42 = restAdapter35.server;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log52 = restAdapter51.log;
        java.util.concurrent.Executor executor53 = restAdapter51.callbackExecutor;
        retrofit.Profiler profiler54 = restAdapter51.profiler;
        retrofit.Profiler profiler55 = null;
        restAdapter51.profiler = profiler55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        restAdapter51.log = log65;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder69.setLog(log74);
        retrofit.Server server76 = null;
        retrofit.client.Client.Provider provider77 = null;
        java.util.concurrent.Executor executor78 = null;
        java.util.concurrent.Executor executor79 = null;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        retrofit.converter.Converter converter81 = null;
        retrofit.Profiler profiler82 = null;
        retrofit.ErrorHandler errorHandler83 = null;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server76, provider77, executor78, executor79, requestInterceptor80, converter81, profiler82, errorHandler83, log84, logLevel85);
        builder69.logLevel = logLevel85;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log65, logLevel85);
        retrofit.converter.Converter converter89 = restAdapter88.converter;
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter88.logLevel;
        restAdapter35.logLevel = logLevel90;
        retrofit.RestAdapter.LogLevel logLevel92 = restAdapter35.getLogLevel();
        restAdapter25.logLevel = logLevel92;
        restAdapter22.logLevel = logLevel92;
        restAdapter0.logLevel = logLevel92;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter7.requestInterceptor = requestInterceptor13;
        retrofit.Profiler profiler15 = null;
        restAdapter7.profiler = profiler15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.converter.Converter converter19 = restAdapter17.converter;
        java.util.concurrent.Executor executor20 = null;
        restAdapter17.callbackExecutor = executor20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter17.logLevel = logLevel22;
        restAdapter7.setLogLevel(logLevel22);
        builder0.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        log31.log("");
        builder0.log = log31;
        retrofit.client.Client.Provider provider36 = builder0.clientProvider;
        java.util.concurrent.Executor executor37 = builder0.httpExecutor;
        retrofit.converter.Converter converter38 = builder0.converter;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        java.util.concurrent.Executor executor44 = null;
        builder39.httpExecutor = executor44;
        retrofit.RestAdapter restAdapter46 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.client.Client.Provider provider48 = restAdapter46.clientProvider;
        retrofit.RestAdapter.Builder builder49 = builder0.setClient(provider48);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = builder4.build();
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getMethod();
        java.lang.String str14 = request12.getMethod();
        retrofit.client.Request request15 = restAdapter5.logAndReplaceRequest(request12);
        retrofit.RestAdapter.Log log16 = restAdapter5.log;
        retrofit.client.Client.Provider provider17 = restAdapter5.clientProvider;
        retrofit.ErrorHandler errorHandler18 = restAdapter5.errorHandler;
        retrofit.ErrorHandler errorHandler19 = restAdapter5.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(provider17);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(errorHandler19);
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder0.setServer("Retrofit-Idle");
        retrofit.Server server25 = builder24.server;
        java.util.concurrent.Executor executor26 = builder24.httpExecutor;
        retrofit.client.Client client27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder28 = builder24.setClient(client27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(executor26);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter0.requestInterceptor = requestInterceptor18;
        retrofit.Profiler profiler20 = null;
        restAdapter0.profiler = profiler20;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider23 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor24 = null;
        restAdapter0.callbackExecutor = executor24;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(provider23);
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.converter.Converter converter12 = restAdapter10.converter;
        java.util.concurrent.Executor executor13 = null;
        restAdapter10.callbackExecutor = executor13;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.logLevel = logLevel15;
        restAdapter0.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter19 = builder18.converter;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter20.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter20.requestInterceptor = requestInterceptor22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        restAdapter20.log = log32;
        retrofit.ErrorHandler errorHandler36 = null;
        restAdapter20.errorHandler = errorHandler36;
        retrofit.RestAdapter.Log log38 = restAdapter20.log;
        retrofit.RestAdapter.Builder builder39 = builder18.setLog(log38);
        retrofit.RequestInterceptor requestInterceptor40 = builder39.requestInterceptor;
        retrofit.Server server41 = null;
        builder39.server = server41;
        retrofit.client.Client.Provider provider43 = builder39.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel44 = builder39.logLevel;
        restAdapter0.logLevel = logLevel44;
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor46);
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        retrofit.Profiler profiler11 = null;
        builder10.profiler = profiler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLog(log18);
        retrofit.RestAdapter restAdapter20 = builder13.build();
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder13.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = builder13.requestInterceptor;
        builder10.requestInterceptor = requestInterceptor25;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.client.Client.Provider provider31 = null;
        builder28.clientProvider = provider31;
        retrofit.RestAdapter.Builder builder34 = builder28.setServer("hi!");
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("hi!");
        retrofit.Profiler profiler40 = null;
        builder39.profiler = profiler40;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        builder39.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter restAdapter44 = builder39.build();
        retrofit.converter.Converter converter45 = restAdapter44.converter;
        retrofit.RestAdapter.Builder builder46 = builder28.setConverter(converter45);
        restAdapter0.converter = converter45;
        retrofit.converter.Converter converter48 = restAdapter0.converter;
        retrofit.RequestInterceptor requestInterceptor49 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(converter45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(converter48);
        org.junit.Assert.assertNotNull(requestInterceptor49);
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter3.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter3.logLevel = logLevel5;
        retrofit.Profiler profiler7 = restAdapter3.profiler;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter3.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter3.requestInterceptor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.Profiler profiler13 = restAdapter10.profiler;
        retrofit.Profiler profiler14 = null;
        restAdapter10.profiler = profiler14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        restAdapter10.log = log24;
        restAdapter3.log = log24;
        restAdapter0.log = log24;
        java.util.concurrent.Executor executor30 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter31.requestInterceptor;
        java.util.concurrent.Executor executor33 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        java.util.concurrent.Executor executor35 = restAdapter31.httpExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log37 = restAdapter36.log;
        retrofit.ErrorHandler errorHandler38 = restAdapter36.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        retrofit.Profiler profiler45 = null;
        builder44.profiler = profiler45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder47.setLog(log52);
        retrofit.RestAdapter restAdapter54 = builder47.build();
        retrofit.converter.Converter converter55 = null;
        builder47.converter = converter55;
        retrofit.ErrorHandler errorHandler57 = null;
        builder47.errorHandler = errorHandler57;
        retrofit.RequestInterceptor requestInterceptor59 = builder47.requestInterceptor;
        builder44.requestInterceptor = requestInterceptor59;
        restAdapter36.requestInterceptor = requestInterceptor59;
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter36.requestInterceptor;
        restAdapter31.requestInterceptor = requestInterceptor62;
        restAdapter0.requestInterceptor = requestInterceptor62;
        retrofit.RestAdapter.Log log65 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter67 = builder66.converter;
        retrofit.Profiler profiler68 = null;
        builder66.profiler = profiler68;
        retrofit.RestAdapter.Log log70 = builder66.log;
        builder66.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor72 = null;
        builder66.requestInterceptor = requestInterceptor72;
        retrofit.Profiler profiler74 = null;
        builder66.profiler = profiler74;
        retrofit.RestAdapter.LogLevel logLevel76 = builder66.logLevel;
        retrofit.RestAdapter.LogLevel logLevel77 = builder66.logLevel;
        restAdapter0.logLevel = logLevel77;
        retrofit.RestAdapter.LogLevel logLevel79 = null;
        restAdapter0.logLevel = logLevel79;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNull(converter67);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel9 = builder0.logLevel;
        retrofit.Server server10 = null;
        builder0.server = server10;
        retrofit.Server server12 = builder0.server;
        retrofit.client.Client.Provider provider13 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.Profiler profiler17 = restAdapter14.profiler;
        retrofit.ErrorHandler errorHandler18 = restAdapter14.errorHandler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.client.Client.Provider provider24 = builder23.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        builder23.logLevel = logLevel25;
        retrofit.RestAdapter.Log log28 = builder23.log;
        retrofit.RestAdapter.LogLevel logLevel29 = builder23.logLevel;
        restAdapter14.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder0.setLogLevel(logLevel29);
        boolean boolean32 = logLevel29.log();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", headerList16, typedOutput17);
        java.lang.String str19 = request18.getMethod();
        retrofit.mime.TypedOutput typedOutput20 = request18.getBody();
        java.util.List<retrofit.client.Header> headerList21 = request18.getHeaders();
        java.util.List<retrofit.client.Header> headerList22 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", headerList22, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", headerList22, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("Retrofit-Idle", "hi!", headerList22, typedOutput27);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNotNull(headerList22);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder0.logLevel = logLevel5;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.converter.Converter converter11 = restAdapter9.converter;
        java.util.concurrent.Executor executor12 = null;
        restAdapter9.callbackExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = null;
        restAdapter14.httpExecutor = executor15;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        restAdapter14.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Log log19 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel20;
        restAdapter9.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder23 = builder0.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.Profiler profiler29 = null;
        builder28.profiler = profiler29;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        builder28.requestInterceptor = requestInterceptor31;
        retrofit.RestAdapter restAdapter33 = builder28.build();
        retrofit.converter.Converter converter34 = restAdapter33.converter;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        builder0.httpExecutor = executor35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter56.logLevel = logLevel58;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.setLogLevel(logLevel60);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log53, logLevel60);
        log53.log("");
        log53.log("hi!");
        log53.log("");
        retrofit.RestAdapter.Builder builder69 = builder0.setLog(log53);
        retrofit.RestAdapter.Log log70 = null;
        builder0.log = log70;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(converter34);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor9 = restAdapter0.callbackExecutor;
        java.lang.Throwable throwable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable10, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider5 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.Profiler profiler28 = builder27.profiler;
        retrofit.Profiler profiler29 = builder27.profiler;
        java.util.concurrent.Executor executor30 = builder27.callbackExecutor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder31.setLog(log36);
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        builder31.logLevel = logLevel47;
        retrofit.converter.Converter converter50 = builder31.converter;
        retrofit.ErrorHandler errorHandler51 = builder31.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel52 = builder31.logLevel;
        retrofit.Server server53 = builder31.server;
        retrofit.RestAdapter.Builder builder54 = builder27.setServer(server53);
        retrofit.RestAdapter.LogLevel logLevel55 = builder54.logLevel;
        restAdapter0.logLevel = logLevel55;
        java.util.concurrent.Executor executor57 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor57);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = null;
        restAdapter9.httpExecutor = executor10;
        retrofit.client.Client.Provider provider12 = restAdapter9.clientProvider;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.ErrorHandler errorHandler16 = restAdapter13.errorHandler;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter32.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter32.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log30, logLevel38);
        log30.log("Retrofit-Idle");
        restAdapter13.log = log30;
        restAdapter9.log = log30;
        restAdapter0.log = log30;
        java.util.concurrent.Executor executor46 = restAdapter0.httpExecutor;
        retrofit.ErrorHandler errorHandler47 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Log log48 = restAdapter0.log;
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(log48);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.Profiler profiler8 = builder0.profiler;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(profiler8);
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.Profiler profiler11 = restAdapter8.profiler;
        retrofit.Profiler profiler12 = null;
        restAdapter8.profiler = profiler12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        builder26.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log22, logLevel42);
        retrofit.converter.Converter converter46 = restAdapter45.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter45.logLevel;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor49 = restAdapter48.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        restAdapter48.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter48.getLogLevel();
        retrofit.Server server53 = restAdapter48.server;
        java.util.concurrent.Executor executor54 = restAdapter48.callbackExecutor;
        retrofit.ErrorHandler errorHandler55 = null;
        restAdapter48.errorHandler = errorHandler55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter58 = builder57.converter;
        retrofit.RestAdapter.LogLevel logLevel59 = builder57.logLevel;
        builder57.ensureSaneDefaults();
        retrofit.client.Client.Provider provider61 = null;
        builder57.clientProvider = provider61;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder71.setLog(log76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter78.logLevel = logLevel80;
        retrofit.RequestInterceptor requestInterceptor82 = null;
        restAdapter78.requestInterceptor = requestInterceptor82;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter78.logLevel = logLevel84;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log76, logLevel84);
        builder57.logLevel = logLevel84;
        retrofit.client.Client.Provider provider88 = null;
        builder57.clientProvider = provider88;
        retrofit.converter.Converter converter90 = builder57.converter;
        restAdapter48.converter = converter90;
        restAdapter45.converter = converter90;
        retrofit.ErrorHandler errorHandler93 = restAdapter45.errorHandler;
        java.util.concurrent.Executor executor94 = restAdapter45.callbackExecutor;
        retrofit.Server server95 = restAdapter45.server;
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter90);
        org.junit.Assert.assertNull(errorHandler93);
        org.junit.Assert.assertNull(executor94);
        org.junit.Assert.assertNull(server95);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor10 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter13.requestInterceptor = requestInterceptor15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.log = log25;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter13.errorHandler = errorHandler29;
        retrofit.RestAdapter.Log log31 = restAdapter13.log;
        retrofit.RestAdapter.Builder builder32 = builder11.setLog(log31);
        retrofit.Profiler profiler33 = builder32.profiler;
        retrofit.client.Client.Provider provider34 = builder32.clientProvider;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler37 = builder32.errorHandler;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor40 = builder38.requestInterceptor;
        java.util.concurrent.Executor executor41 = builder38.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel42 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.Profiler profiler48 = null;
        builder47.profiler = profiler48;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        builder47.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter restAdapter52 = builder47.build();
        retrofit.converter.Converter converter53 = null;
        builder47.converter = converter53;
        retrofit.client.Client.Provider provider55 = builder47.clientProvider;
        retrofit.RestAdapter.Builder builder56 = builder38.setClient(provider55);
        builder32.clientProvider = provider55;
        retrofit.RestAdapter.Builder builder58 = builder0.setClient(provider55);
        retrofit.RestAdapter restAdapter59 = builder0.build();
        retrofit.client.Response response61 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response63 = restAdapter59.logAndReplaceResponse("", response61, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.Server server8 = restAdapter0.server;
        retrofit.client.Client.Provider provider9 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder16 = builder10.setLog(log15);
        retrofit.RequestInterceptor requestInterceptor17 = builder16.requestInterceptor;
        retrofit.RestAdapter restAdapter18 = builder16.build();
        retrofit.Server server19 = builder16.server;
        restAdapter0.server = server19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.Profiler profiler26 = null;
        builder25.profiler = profiler26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder25.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter restAdapter30 = builder25.build();
        retrofit.converter.Converter converter31 = restAdapter30.converter;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        log32.log("");
        restAdapter30.log = log32;
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter30.requestInterceptor;
        retrofit.client.Header[] headerArray41 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList42 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList42, headerArray41);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList42, typedOutput44);
        java.lang.String str46 = request45.getUrl();
        java.util.List<retrofit.client.Header> headerList47 = request45.getHeaders();
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("hi!", "", headerList47, typedOutput48);
        java.lang.String str50 = request49.getMethod();
        retrofit.mime.TypedOutput typedOutput51 = request49.getBody();
        java.lang.String str52 = request49.getMethod();
        retrofit.client.Request request53 = restAdapter30.logAndReplaceRequest(request49);
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter30.logLevel;
        restAdapter0.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.httpExecutor = executor58;
        retrofit.client.Client.Provider provider60 = null;
        builder57.clientProvider = provider60;
        retrofit.RestAdapter.Builder builder63 = builder57.setServer("hi!");
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter64.logLevel = logLevel66;
        retrofit.Profiler profiler68 = restAdapter64.profiler;
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter64.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor70 = restAdapter64.requestInterceptor;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log72 = restAdapter71.log;
        java.util.concurrent.Executor executor73 = restAdapter71.callbackExecutor;
        retrofit.Profiler profiler74 = restAdapter71.profiler;
        retrofit.Profiler profiler75 = null;
        restAdapter71.profiler = profiler75;
        retrofit.Server server77 = null;
        retrofit.client.Client.Provider provider78 = null;
        java.util.concurrent.Executor executor79 = null;
        java.util.concurrent.Executor executor80 = null;
        retrofit.RequestInterceptor requestInterceptor81 = null;
        retrofit.converter.Converter converter82 = null;
        retrofit.Profiler profiler83 = null;
        retrofit.ErrorHandler errorHandler84 = null;
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server77, provider78, executor79, executor80, requestInterceptor81, converter82, profiler83, errorHandler84, log85, logLevel86);
        restAdapter71.log = log85;
        restAdapter64.log = log85;
        retrofit.RestAdapter.Builder builder90 = builder57.setLog(log85);
        log85.log("hi!");
        log85.log("");
        restAdapter0.log = log85;
        log85.log("hi!");
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(converter31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(headerArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(headerList47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNull(typedOutput51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(request53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler68);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(profiler74);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.Profiler profiler5 = null;
        builder0.profiler = profiler5;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor10 = builder8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.Profiler profiler17 = null;
        builder16.profiler = profiler17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        builder16.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter restAdapter21 = builder16.build();
        retrofit.client.Client.Provider provider22 = builder16.clientProvider;
        builder8.clientProvider = provider22;
        retrofit.Profiler profiler24 = null;
        builder8.profiler = profiler24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = builder30.build();
        retrofit.client.Header[] headerArray34 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList35 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList35, headerArray34);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList35, typedOutput37);
        java.lang.String str39 = request38.getMethod();
        java.lang.String str40 = request38.getMethod();
        retrofit.client.Request request41 = restAdapter31.logAndReplaceRequest(request38);
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter31.requestInterceptor;
        retrofit.RestAdapter.Builder builder43 = builder8.setRequestInterceptor(requestInterceptor42);
        retrofit.RestAdapter.Builder builder44 = builder0.setRequestInterceptor(requestInterceptor42);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter45 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(provider22);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(headerArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.httpExecutor = executor9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor13 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler14 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(logLevel16);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel9 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter21.errorHandler = errorHandler22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter.LogLevel logLevel26 = builder24.logLevel;
        builder24.ensureSaneDefaults();
        retrofit.client.Client.Provider provider28 = null;
        builder24.clientProvider = provider28;
        retrofit.Profiler profiler30 = builder24.profiler;
        retrofit.converter.Converter converter31 = builder24.converter;
        restAdapter21.converter = converter31;
        retrofit.RestAdapter.Builder builder33 = builder0.setConverter(converter31);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNotNull(converter31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.converter.Converter converter12 = restAdapter10.converter;
        java.util.concurrent.Executor executor13 = null;
        restAdapter10.callbackExecutor = executor13;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.logLevel = logLevel15;
        restAdapter0.setLogLevel(logLevel15);
        retrofit.Profiler profiler18 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter0.requestInterceptor;
        retrofit.Server server20 = restAdapter0.server;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(server20);
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.Server server8 = restAdapter0.server;
        retrofit.client.Client.Provider provider9 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder16 = builder10.setLog(log15);
        retrofit.RequestInterceptor requestInterceptor17 = builder16.requestInterceptor;
        retrofit.RestAdapter restAdapter18 = builder16.build();
        retrofit.Server server19 = builder16.server;
        restAdapter0.server = server19;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder26 = builder22.setServer("hi!");
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder22.setLog(log27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = builder29.converter;
        retrofit.RestAdapter.LogLevel logLevel31 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder28.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter35.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter35.requestInterceptor = requestInterceptor37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        restAdapter35.log = log47;
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter35.errorHandler = errorHandler51;
        retrofit.RestAdapter.Log log53 = restAdapter35.log;
        retrofit.RestAdapter.Builder builder54 = builder33.setLog(log53);
        retrofit.RequestInterceptor requestInterceptor55 = builder33.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor56 = builder33.requestInterceptor;
        retrofit.RestAdapter.Builder builder58 = builder33.setServer("hi!");
        retrofit.Server server59 = builder33.server;
        retrofit.RestAdapter.Builder builder60 = builder28.setServer(server59);
        builder28.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler62 = builder28.errorHandler;
        restAdapter0.errorHandler = errorHandler62;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(errorHandler62);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.Profiler profiler10 = null;
        restAdapter0.profiler = profiler10;
        retrofit.Profiler profiler12 = null;
        restAdapter0.profiler = profiler12;
        java.util.concurrent.Executor executor14 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor15 = restAdapter0.callbackExecutor;
        retrofit.Server server16 = restAdapter0.server;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(server16);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Log log25 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder26 = builder5.setLog(log25);
        restAdapter0.log = log25;
        retrofit.Profiler profiler28 = null;
        restAdapter0.profiler = profiler28;
        retrofit.converter.Converter converter30 = null;
        restAdapter0.converter = converter30;
        java.util.concurrent.Executor executor32 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        java.util.concurrent.Executor executor37 = restAdapter33.httpExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log39 = restAdapter38.log;
        retrofit.ErrorHandler errorHandler40 = restAdapter38.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        retrofit.Profiler profiler47 = null;
        builder46.profiler = profiler47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        retrofit.converter.Converter converter57 = null;
        builder49.converter = converter57;
        retrofit.ErrorHandler errorHandler59 = null;
        builder49.errorHandler = errorHandler59;
        retrofit.RequestInterceptor requestInterceptor61 = builder49.requestInterceptor;
        builder46.requestInterceptor = requestInterceptor61;
        restAdapter38.requestInterceptor = requestInterceptor61;
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter38.requestInterceptor;
        restAdapter33.requestInterceptor = requestInterceptor64;
        restAdapter0.requestInterceptor = requestInterceptor64;
        java.util.concurrent.Executor executor67 = restAdapter0.callbackExecutor;
        retrofit.client.Client.Provider provider68 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor69 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(provider68);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(logLevel70);
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter10.errorHandler = errorHandler26;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder29 = builder8.setLog(log28);
        retrofit.Profiler profiler30 = builder29.profiler;
        retrofit.Profiler profiler31 = builder29.profiler;
        java.util.concurrent.Executor executor32 = builder29.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        java.util.concurrent.Executor executor41 = restAdapter40.httpExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.RestAdapter.Builder builder48 = builder42.setServer("hi!");
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.RestAdapter restAdapter56 = builder49.build();
        java.util.concurrent.Executor executor57 = restAdapter56.httpExecutor;
        builder48.callbackExecutor = executor57;
        retrofit.RestAdapter.Builder builder59 = builder29.setExecutors(executor41, executor57);
        restAdapter7.httpExecutor = executor41;
        retrofit.RestAdapter.Log log61 = restAdapter7.log;
        retrofit.client.Header[] headerArray68 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList69 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList69, headerArray68);
        retrofit.mime.TypedOutput typedOutput71 = null;
        retrofit.client.Request request72 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList69, typedOutput71);
        java.lang.String str73 = request72.getUrl();
        java.util.List<retrofit.client.Header> headerList74 = request72.getHeaders();
        retrofit.mime.TypedOutput typedOutput75 = null;
        retrofit.client.Request request76 = new retrofit.client.Request("hi!", "", headerList74, typedOutput75);
        java.lang.String str77 = request76.getMethod();
        retrofit.mime.TypedOutput typedOutput78 = request76.getBody();
        java.util.List<retrofit.client.Header> headerList79 = request76.getHeaders();
        retrofit.mime.TypedOutput typedOutput80 = null;
        retrofit.client.Request request81 = new retrofit.client.Request("", "", headerList79, typedOutput80);
        java.lang.String str82 = request81.getUrl();
        retrofit.client.Request request83 = restAdapter7.logAndReplaceRequest(request81);
        java.util.List<retrofit.client.Header> headerList84 = request83.getHeaders();
        java.lang.String str85 = request83.getMethod();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(headerArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(headerList74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNull(typedOutput78);
        org.junit.Assert.assertNotNull(headerList79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(request83);
        org.junit.Assert.assertNotNull(headerList84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.Profiler profiler17 = restAdapter14.profiler;
        retrofit.Profiler profiler18 = null;
        restAdapter14.profiler = profiler18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter14.log = log28;
        restAdapter7.log = log28;
        retrofit.RestAdapter.Builder builder33 = builder0.setLog(log28);
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter.Builder builder36 = builder33.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        builder36.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler37);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.Profiler profiler11 = restAdapter7.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log15 = restAdapter14.log;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.Profiler profiler17 = restAdapter14.profiler;
        retrofit.Profiler profiler18 = null;
        restAdapter14.profiler = profiler18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        restAdapter14.log = log28;
        restAdapter7.log = log28;
        retrofit.RestAdapter.Builder builder33 = builder0.setLog(log28);
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.ErrorHandler errorHandler35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder33.setErrorHandler(errorHandler35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter34);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Server server22 = null;
        builder0.server = server22;
        java.util.concurrent.Executor executor24 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        builder0.requestInterceptor = requestInterceptor25;
        retrofit.Profiler profiler27 = builder0.profiler;
        retrofit.Profiler profiler28 = null;
        builder0.profiler = profiler28;
        retrofit.Profiler profiler30 = builder0.profiler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNull(profiler30);
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.Server server7 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler9 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter12.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        restAdapter12.requestInterceptor = requestInterceptor14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        restAdapter12.log = log24;
        retrofit.ErrorHandler errorHandler28 = null;
        restAdapter12.errorHandler = errorHandler28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        retrofit.RestAdapter.Log log50 = restAdapter32.log;
        retrofit.RestAdapter.Builder builder51 = builder30.setLog(log50);
        retrofit.RequestInterceptor requestInterceptor52 = builder30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor53 = builder30.requestInterceptor;
        retrofit.RestAdapter.Builder builder55 = builder30.setServer("hi!");
        retrofit.Server server56 = builder30.server;
        restAdapter12.server = server56;
        builder10.server = server56;
        builder10.ensureSaneDefaults();
        java.util.concurrent.Executor executor60 = builder10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel61 = builder10.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.RestAdapter.Log log7 = builder0.log;
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = executor8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider6 = null;
        restAdapter0.clientProvider = provider6;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        retrofit.ErrorHandler errorHandler10 = restAdapter8.errorHandler;
        retrofit.converter.Converter converter11 = null;
        restAdapter8.converter = converter11;
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter8.requestInterceptor;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter8.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter8.profiler = profiler16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.client.Client.Provider provider21 = null;
        builder18.clientProvider = provider21;
        retrofit.RestAdapter.Builder builder24 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter25.requestInterceptor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.converter.Converter converter28 = null;
        restAdapter25.converter = converter28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter31 = builder30.converter;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter32.errorHandler = errorHandler48;
        retrofit.RestAdapter.Log log50 = restAdapter32.log;
        retrofit.RestAdapter.Builder builder51 = builder30.setLog(log50);
        restAdapter25.log = log50;
        retrofit.RestAdapter.Builder builder53 = builder18.setLog(log50);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter55 = builder54.converter;
        retrofit.Profiler profiler56 = null;
        builder54.profiler = profiler56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.client.Client.Provider provider61 = null;
        builder58.clientProvider = provider61;
        retrofit.RestAdapter.Builder builder64 = builder58.setServer("hi!");
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = builder65.build();
        java.util.concurrent.Executor executor73 = restAdapter72.httpExecutor;
        builder64.callbackExecutor = executor73;
        builder54.callbackExecutor = executor73;
        builder53.httpExecutor = executor73;
        java.util.concurrent.Executor executor77 = builder53.httpExecutor;
        restAdapter8.httpExecutor = executor77;
        restAdapter0.callbackExecutor = executor77;
        retrofit.converter.Converter converter80 = null;
        restAdapter0.converter = converter80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor83 = null;
        builder82.httpExecutor = executor83;
        retrofit.RestAdapter.Builder builder86 = builder82.setServer("hi!");
        retrofit.Profiler profiler87 = null;
        builder86.profiler = profiler87;
        retrofit.RequestInterceptor requestInterceptor89 = null;
        builder86.requestInterceptor = requestInterceptor89;
        retrofit.RestAdapter restAdapter91 = builder86.build();
        retrofit.converter.Converter converter92 = null;
        builder86.converter = converter92;
        retrofit.client.Client.Provider provider94 = builder86.clientProvider;
        restAdapter0.clientProvider = provider94;
        java.util.concurrent.Executor executor96 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel97 = null;
        restAdapter0.logLevel = logLevel97;
        retrofit.RestAdapter.LogLevel logLevel99 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(provider94);
        org.junit.Assert.assertNull(executor96);
        org.junit.Assert.assertNull(logLevel99);
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.ErrorHandler errorHandler7 = null;
        builder0.errorHandler = errorHandler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.Profiler profiler14 = null;
        builder13.profiler = profiler14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder13.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter restAdapter18 = builder13.build();
        retrofit.converter.Converter converter19 = restAdapter18.converter;
        retrofit.RestAdapter.Builder builder20 = builder0.setConverter(converter19);
        retrofit.client.Client.Provider provider21 = null;
        builder20.clientProvider = provider21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        java.util.concurrent.Executor executor28 = null;
        builder23.httpExecutor = executor28;
        retrofit.RestAdapter restAdapter30 = builder23.build();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter33.requestInterceptor = requestInterceptor35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        restAdapter33.log = log45;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter33.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = restAdapter33.log;
        retrofit.RestAdapter.Builder builder52 = builder31.setLog(log51);
        retrofit.Profiler profiler53 = builder52.profiler;
        retrofit.Profiler profiler54 = builder52.profiler;
        java.util.concurrent.Executor executor55 = builder52.callbackExecutor;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder56.setLog(log61);
        retrofit.RestAdapter restAdapter63 = builder56.build();
        java.util.concurrent.Executor executor64 = restAdapter63.httpExecutor;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.client.Client.Provider provider68 = null;
        builder65.clientProvider = provider68;
        retrofit.RestAdapter.Builder builder71 = builder65.setServer("hi!");
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("hi!");
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder78 = builder72.setLog(log77);
        retrofit.RestAdapter restAdapter79 = builder72.build();
        java.util.concurrent.Executor executor80 = restAdapter79.httpExecutor;
        builder71.callbackExecutor = executor80;
        retrofit.RestAdapter.Builder builder82 = builder52.setExecutors(executor64, executor80);
        restAdapter30.httpExecutor = executor64;
        retrofit.Server server84 = null;
        retrofit.client.Client.Provider provider85 = null;
        java.util.concurrent.Executor executor86 = null;
        java.util.concurrent.Executor executor87 = null;
        retrofit.RequestInterceptor requestInterceptor88 = null;
        retrofit.converter.Converter converter89 = null;
        retrofit.Profiler profiler90 = null;
        retrofit.ErrorHandler errorHandler91 = null;
        retrofit.RestAdapter.Log log92 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel93 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter94 = new retrofit.RestAdapter(server84, provider85, executor86, executor87, requestInterceptor88, converter89, profiler90, errorHandler91, log92, logLevel93);
        restAdapter30.logLevel = logLevel93;
        retrofit.ErrorHandler errorHandler96 = restAdapter30.errorHandler;
        retrofit.RestAdapter.Builder builder97 = builder20.setErrorHandler(errorHandler96);
        java.util.concurrent.Executor executor98 = builder20.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(converter19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(executor64);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(log92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNull(executor98);
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        restAdapter0.logLevel = logLevel6;
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = restAdapter0.log;
        retrofit.Profiler profiler12 = null;
        restAdapter0.profiler = profiler12;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter0.logLevel;
        boolean boolean15 = logLevel14.log();
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler10 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder17.setLog(log22);
        retrofit.RestAdapter restAdapter24 = builder17.build();
        java.util.concurrent.Executor executor25 = restAdapter24.httpExecutor;
        retrofit.Profiler profiler26 = null;
        restAdapter24.profiler = profiler26;
        java.util.concurrent.Executor executor28 = restAdapter24.callbackExecutor;
        builder15.httpExecutor = executor28;
        restAdapter0.callbackExecutor = executor28;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log32 = restAdapter31.log;
        java.util.concurrent.Executor executor33 = restAdapter31.callbackExecutor;
        java.util.concurrent.Executor executor34 = restAdapter31.callbackExecutor;
        retrofit.Profiler profiler35 = restAdapter31.profiler;
        retrofit.RestAdapter.Log log36 = restAdapter31.log;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter31.log;
        java.util.concurrent.Executor executor39 = restAdapter31.httpExecutor;
        retrofit.Server server40 = restAdapter31.server;
        retrofit.ErrorHandler errorHandler41 = restAdapter31.errorHandler;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder48 = builder42.setLog(log47);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor50 = restAdapter49.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter49.requestInterceptor = requestInterceptor51;
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel62);
        restAdapter49.log = log61;
        retrofit.ErrorHandler errorHandler65 = null;
        restAdapter49.errorHandler = errorHandler65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter68 = builder67.converter;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor70 = restAdapter69.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        restAdapter69.requestInterceptor = requestInterceptor71;
        retrofit.Server server73 = null;
        retrofit.client.Client.Provider provider74 = null;
        java.util.concurrent.Executor executor75 = null;
        java.util.concurrent.Executor executor76 = null;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        retrofit.converter.Converter converter78 = null;
        retrofit.Profiler profiler79 = null;
        retrofit.ErrorHandler errorHandler80 = null;
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server73, provider74, executor75, executor76, requestInterceptor77, converter78, profiler79, errorHandler80, log81, logLevel82);
        restAdapter69.log = log81;
        retrofit.ErrorHandler errorHandler85 = null;
        restAdapter69.errorHandler = errorHandler85;
        retrofit.RestAdapter.Log log87 = restAdapter69.log;
        retrofit.RestAdapter.Builder builder88 = builder67.setLog(log87);
        retrofit.RequestInterceptor requestInterceptor89 = builder67.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor90 = builder67.requestInterceptor;
        retrofit.RestAdapter.Builder builder92 = builder67.setServer("hi!");
        retrofit.Server server93 = builder67.server;
        restAdapter49.server = server93;
        builder48.server = server93;
        restAdapter31.server = server93;
        restAdapter0.server = server93;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter68);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(requestInterceptor89);
        org.junit.Assert.assertNull(requestInterceptor90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(server93);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.setLogLevel(logLevel4);
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler10 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(errorHandler10);
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        retrofit.Profiler profiler20 = null;
        restAdapter0.profiler = profiler20;
        retrofit.ErrorHandler errorHandler22 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.httpExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder23.setLog(log28);
        retrofit.RestAdapter restAdapter30 = builder23.build();
        java.util.concurrent.Executor executor31 = restAdapter30.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.ErrorHandler errorHandler33 = restAdapter30.errorHandler;
        restAdapter0.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.Profiler profiler37 = null;
        builder35.profiler = profiler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.client.Client.Provider provider42 = null;
        builder39.clientProvider = provider42;
        retrofit.RestAdapter.Builder builder45 = builder39.setServer("hi!");
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        java.util.concurrent.Executor executor54 = restAdapter53.httpExecutor;
        builder45.callbackExecutor = executor54;
        builder35.callbackExecutor = executor54;
        builder35.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        java.util.concurrent.Executor executor63 = null;
        builder58.httpExecutor = executor63;
        retrofit.RestAdapter restAdapter65 = builder58.build();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.client.Client.Provider provider67 = restAdapter65.clientProvider;
        builder35.clientProvider = provider67;
        retrofit.ErrorHandler errorHandler69 = builder35.errorHandler;
        restAdapter0.errorHandler = errorHandler69;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider67);
        org.junit.Assert.assertNotNull(errorHandler69);
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.Server server30 = builder29.server;
        retrofit.ErrorHandler errorHandler31 = null;
        builder29.errorHandler = errorHandler31;
        retrofit.Profiler profiler33 = null;
        builder29.profiler = profiler33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log36 = restAdapter35.log;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.httpExecutor = executor40;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.Profiler profiler44 = null;
        builder43.profiler = profiler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder50 = builder46.setServer("hi!");
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = builder46.setLog(log51);
        retrofit.RestAdapter restAdapter53 = builder46.build();
        retrofit.converter.Converter converter54 = null;
        builder46.converter = converter54;
        retrofit.ErrorHandler errorHandler56 = null;
        builder46.errorHandler = errorHandler56;
        retrofit.RequestInterceptor requestInterceptor58 = builder46.requestInterceptor;
        builder43.requestInterceptor = requestInterceptor58;
        restAdapter35.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.Builder builder61 = builder29.setRequestInterceptor(requestInterceptor58);
        retrofit.converter.Converter converter62 = builder29.converter;
        retrofit.RestAdapter.Builder builder64 = builder29.setServer("hi!");
        retrofit.client.Client.Provider provider65 = builder64.clientProvider;
        java.util.concurrent.Executor executor66 = null;
        builder64.callbackExecutor = executor66;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(converter62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(provider65);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", headerList14, typedOutput15);
        java.lang.String str17 = request16.getMethod();
        retrofit.mime.TypedOutput typedOutput18 = request16.getBody();
        java.util.List<retrofit.client.Header> headerList19 = request16.getHeaders();
        java.util.List<retrofit.client.Header> headerList20 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", headerList20, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", headerList20, typedOutput23);
        java.lang.String str25 = request24.getUrl();
        retrofit.mime.TypedOutput typedOutput26 = request24.getBody();
        java.lang.String str27 = request24.getUrl();
        java.lang.String str28 = request24.getMethod();
        java.util.List<retrofit.client.Header> headerList29 = request24.getHeaders();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(typedOutput26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(headerList29);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder0.requestInterceptor = requestInterceptor6;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.Server server11 = null;
        builder0.server = server11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log14 = restAdapter13.log;
        retrofit.ErrorHandler errorHandler15 = restAdapter13.errorHandler;
        retrofit.converter.Converter converter16 = null;
        restAdapter13.converter = converter16;
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter13.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter13.requestInterceptor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor22 = builder20.requestInterceptor;
        retrofit.ErrorHandler errorHandler23 = null;
        builder20.errorHandler = errorHandler23;
        retrofit.converter.Converter converter25 = null;
        builder20.converter = converter25;
        retrofit.ErrorHandler errorHandler27 = null;
        builder20.errorHandler = errorHandler27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.Profiler profiler34 = null;
        builder33.profiler = profiler34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder33.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter restAdapter38 = builder33.build();
        retrofit.converter.Converter converter39 = restAdapter38.converter;
        retrofit.RestAdapter.Builder builder40 = builder20.setConverter(converter39);
        restAdapter13.converter = converter39;
        retrofit.RestAdapter.Builder builder42 = builder0.setConverter(converter39);
        retrofit.Profiler profiler43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder44 = builder0.setProfiler(profiler43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(converter10);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(converter39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder6.setLogLevel(logLevel9);
        retrofit.Profiler profiler11 = builder6.profiler;
        retrofit.RestAdapter.Log log12 = builder6.log;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter.LogLevel logLevel15 = builder13.logLevel;
        builder13.ensureSaneDefaults();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter32.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter32.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log30, logLevel38);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        restAdapter40.log = log46;
        builder13.log = log46;
        java.util.concurrent.Executor executor50 = null;
        builder13.httpExecutor = executor50;
        retrofit.Profiler profiler52 = builder13.profiler;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.RestAdapter.Builder builder57 = builder53.setServer("hi!");
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder53.setLog(log58);
        retrofit.RestAdapter restAdapter60 = builder53.build();
        retrofit.converter.Converter converter61 = null;
        builder53.converter = converter61;
        retrofit.ErrorHandler errorHandler63 = null;
        builder53.errorHandler = errorHandler63;
        retrofit.RequestInterceptor requestInterceptor65 = builder53.requestInterceptor;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.client.Client.Provider provider71 = builder70.clientProvider;
        builder70.ensureSaneDefaults();
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        log73.log("");
        builder70.log = log73;
        retrofit.Server server77 = builder70.server;
        builder53.server = server77;
        retrofit.RestAdapter.Builder builder79 = builder13.setServer(server77);
        retrofit.ErrorHandler errorHandler80 = builder13.errorHandler;
        builder6.errorHandler = errorHandler80;
        java.util.concurrent.Executor executor82 = builder6.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(errorHandler80);
        org.junit.Assert.assertNull(executor82);
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.client.Client.Provider provider11 = builder6.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel12);
        retrofit.client.Client.Provider provider14 = builder6.clientProvider;
        retrofit.RestAdapter.Log log15 = builder6.log;
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.client.Client.Provider provider20 = null;
        builder17.clientProvider = provider20;
        retrofit.converter.Converter converter22 = null;
        builder17.converter = converter22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        retrofit.Profiler profiler35 = restAdapter34.profiler;
        java.util.concurrent.Executor executor36 = restAdapter34.httpExecutor;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter39.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter39.requestInterceptor = requestInterceptor41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        restAdapter39.log = log51;
        retrofit.ErrorHandler errorHandler55 = null;
        restAdapter39.errorHandler = errorHandler55;
        retrofit.RestAdapter.Log log57 = restAdapter39.log;
        retrofit.RestAdapter.Builder builder58 = builder37.setLog(log57);
        retrofit.Profiler profiler59 = builder58.profiler;
        retrofit.client.Client.Provider provider60 = builder58.clientProvider;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter63 = builder62.build();
        retrofit.RestAdapter.Log log64 = builder62.log;
        retrofit.RestAdapter restAdapter65 = builder62.build();
        retrofit.converter.Converter converter66 = null;
        restAdapter65.converter = converter66;
        retrofit.Server server68 = restAdapter65.server;
        restAdapter34.server = server68;
        retrofit.RestAdapter.Builder builder70 = builder17.setServer(server68);
        retrofit.RestAdapter.Builder builder71 = builder6.setServer(server68);
        java.util.concurrent.Executor executor72 = builder6.callbackExecutor;
        restAdapter0.callbackExecutor = executor72;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(profiler59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(server68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(executor72);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter11.logLevel = logLevel13;
        retrofit.Profiler profiler15 = restAdapter11.profiler;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter11.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter11.requestInterceptor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log19 = restAdapter18.log;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.Profiler profiler21 = restAdapter18.profiler;
        retrofit.Profiler profiler22 = null;
        restAdapter18.profiler = profiler22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        restAdapter18.log = log32;
        restAdapter11.log = log32;
        restAdapter8.log = log32;
        retrofit.RestAdapter.Builder builder38 = builder0.setLog(log32);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter40 = null;
        restAdapter39.converter = converter40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.Profiler profiler44 = null;
        builder42.profiler = profiler44;
        retrofit.ErrorHandler errorHandler46 = null;
        builder42.errorHandler = errorHandler46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        restAdapter50.requestInterceptor = requestInterceptor52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        restAdapter50.log = log62;
        retrofit.ErrorHandler errorHandler66 = null;
        restAdapter50.errorHandler = errorHandler66;
        retrofit.RestAdapter.Log log68 = restAdapter50.log;
        retrofit.RestAdapter.Builder builder69 = builder48.setLog(log68);
        retrofit.RestAdapter.Builder builder70 = builder42.setLog(log68);
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter71.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder70.setLogLevel(logLevel73);
        restAdapter39.logLevel = logLevel73;
        boolean boolean77 = logLevel73.log();
        retrofit.RestAdapter.Builder builder78 = builder0.setLogLevel(logLevel73);
        retrofit.RestAdapter restAdapter79 = builder78.build();
        retrofit.client.Header[] headerArray82 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList83 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList83, headerArray82);
        retrofit.mime.TypedOutput typedOutput85 = null;
        retrofit.client.Request request86 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList83, typedOutput85);
        java.lang.String str87 = request86.getUrl();
        java.util.List<retrofit.client.Header> headerList88 = request86.getHeaders();
        java.lang.String str89 = request86.getMethod();
        retrofit.mime.TypedOutput typedOutput90 = request86.getBody();
        java.util.List<retrofit.client.Header> headerList91 = request86.getHeaders();
        java.lang.String str92 = request86.getUrl();
        java.lang.String str93 = request86.getUrl();
        java.util.List<retrofit.client.Header> headerList94 = request86.getHeaders();
        java.lang.String str95 = request86.getMethod();
        java.lang.String str96 = request86.getMethod();
        java.util.List<retrofit.client.Header> headerList97 = request86.getHeaders();
        retrofit.client.Request request98 = restAdapter79.logAndReplaceRequest(request86);
        retrofit.mime.TypedOutput typedOutput99 = request98.getBody();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(headerArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(headerList88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNull(typedOutput90);
        org.junit.Assert.assertNotNull(headerList91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(headerList94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertNotNull(headerList97);
        org.junit.Assert.assertNotNull(request98);
        org.junit.Assert.assertNull(typedOutput99);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log9 = restAdapter8.log;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.Profiler profiler11 = restAdapter8.profiler;
        retrofit.Profiler profiler12 = null;
        restAdapter8.profiler = profiler12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter8.log = log22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder26.setLog(log31);
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        builder26.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log22, logLevel42);
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("hi!");
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = builder55.setLog(log60);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter62.logLevel = logLevel64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        restAdapter62.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter62.logLevel = logLevel68;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log60, logLevel68);
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder71.setLog(log76);
        restAdapter70.log = log76;
        retrofit.client.Header[] headerArray81 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList82 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList82, headerArray81);
        retrofit.mime.TypedOutput typedOutput84 = null;
        retrofit.client.Request request85 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList82, typedOutput84);
        java.lang.String str86 = request85.getUrl();
        java.lang.String str87 = request85.getUrl();
        retrofit.client.Request request88 = restAdapter70.logAndReplaceRequest(request85);
        retrofit.mime.TypedOutput typedOutput89 = request85.getBody();
        retrofit.client.Request request90 = restAdapter45.logAndReplaceRequest(request85);
        java.util.List<retrofit.client.Header> headerList91 = request85.getHeaders();
        java.lang.String str92 = request85.getUrl();
        java.lang.String str93 = request85.getUrl();
        retrofit.mime.TypedOutput typedOutput94 = request85.getBody();
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(headerArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(request88);
        org.junit.Assert.assertNull(typedOutput89);
        org.junit.Assert.assertNotNull(request90);
        org.junit.Assert.assertNotNull(headerList91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNull(typedOutput94);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.converter.Converter converter6 = builder0.converter;
        java.util.concurrent.Executor executor7 = builder0.httpExecutor;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel17);
        retrofit.ErrorHandler errorHandler19 = null;
        restAdapter18.errorHandler = errorHandler19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = builder21.setLog(log26);
        retrofit.RestAdapter restAdapter28 = builder21.build();
        retrofit.converter.Converter converter29 = null;
        builder21.converter = converter29;
        retrofit.ErrorHandler errorHandler31 = null;
        builder21.errorHandler = errorHandler31;
        retrofit.RequestInterceptor requestInterceptor33 = builder21.requestInterceptor;
        restAdapter18.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter.Builder builder35 = builder0.setRequestInterceptor(requestInterceptor33);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = null;
        builder36.converter = converter37;
        retrofit.client.Client.Provider provider39 = null;
        builder36.clientProvider = provider39;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        builder36.requestInterceptor = requestInterceptor41;
        retrofit.Profiler profiler43 = builder36.profiler;
        java.util.concurrent.Executor executor44 = builder36.callbackExecutor;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.client.Client.Provider provider48 = null;
        builder45.clientProvider = provider48;
        retrofit.client.Client.Provider provider50 = builder45.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder52 = builder45.setLogLevel(logLevel51);
        retrofit.client.Client.Provider provider53 = builder45.clientProvider;
        retrofit.Profiler profiler54 = builder45.profiler;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor56 = restAdapter55.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        restAdapter55.requestInterceptor = requestInterceptor57;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel68);
        restAdapter55.log = log67;
        retrofit.ErrorHandler errorHandler71 = null;
        restAdapter55.errorHandler = errorHandler71;
        java.util.concurrent.Executor executor73 = null;
        restAdapter55.callbackExecutor = executor73;
        retrofit.RestAdapter.Log log75 = restAdapter55.log;
        retrofit.RestAdapter.Builder builder76 = builder45.setLog(log75);
        builder36.log = log75;
        retrofit.RestAdapter.Builder builder78 = builder0.setLog(log75);
        retrofit.ErrorHandler errorHandler79 = builder0.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(converter6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(provider50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(errorHandler79);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Profiler profiler7 = null;
        builder6.profiler = profiler7;
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        restAdapter10.log = log35;
        retrofit.Profiler profiler38 = null;
        restAdapter10.profiler = profiler38;
        retrofit.converter.Converter converter40 = null;
        restAdapter10.converter = converter40;
        java.util.concurrent.Executor executor42 = restAdapter10.httpExecutor;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        java.util.concurrent.Executor executor45 = restAdapter43.callbackExecutor;
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        java.util.concurrent.Executor executor47 = restAdapter43.httpExecutor;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log49 = restAdapter48.log;
        retrofit.ErrorHandler errorHandler50 = restAdapter48.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.Profiler profiler57 = null;
        builder56.profiler = profiler57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = builder59.setLog(log64);
        retrofit.RestAdapter restAdapter66 = builder59.build();
        retrofit.converter.Converter converter67 = null;
        builder59.converter = converter67;
        retrofit.ErrorHandler errorHandler69 = null;
        builder59.errorHandler = errorHandler69;
        retrofit.RequestInterceptor requestInterceptor71 = builder59.requestInterceptor;
        builder56.requestInterceptor = requestInterceptor71;
        restAdapter48.requestInterceptor = requestInterceptor71;
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter48.requestInterceptor;
        restAdapter43.requestInterceptor = requestInterceptor74;
        restAdapter10.requestInterceptor = requestInterceptor74;
        java.util.concurrent.Executor executor77 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log78 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder79 = builder6.setLog(log78);
        retrofit.Server server80 = builder6.server;
        retrofit.RestAdapter restAdapter81 = builder6.build();
        retrofit.Profiler profiler82 = restAdapter81.profiler;
        java.util.concurrent.Executor executor83 = restAdapter81.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(requestInterceptor71);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(server80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNull(profiler82);
        org.junit.Assert.assertNotNull(executor83);
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor7 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Log log8 = restAdapter0.log;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(log8);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.Server server22 = builder0.server;
        retrofit.Profiler profiler23 = builder0.profiler;
        java.util.concurrent.Executor executor24 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder26 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.client.Client client29 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder30 = builder28.setClient(client29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        builder25.logLevel = logLevel41;
        retrofit.converter.Converter converter44 = builder25.converter;
        retrofit.ErrorHandler errorHandler45 = builder25.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel46 = builder25.logLevel;
        retrofit.Server server47 = builder25.server;
        retrofit.RestAdapter.Builder builder48 = builder21.setServer(server47);
        retrofit.Profiler profiler49 = builder48.profiler;
        retrofit.RestAdapter.Log log50 = builder48.log;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNotNull(log50);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.client.Client.Provider provider30 = builder29.clientProvider;
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        log32.log("");
        builder29.log = log32;
        retrofit.Server server36 = builder29.server;
        builder21.server = server36;
        java.util.concurrent.Executor executor38 = null;
        builder21.callbackExecutor = executor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = null;
        builder40.converter = converter41;
        retrofit.client.Client.Provider provider43 = null;
        builder40.clientProvider = provider43;
        retrofit.converter.Converter converter45 = null;
        builder40.converter = converter45;
        java.util.concurrent.Executor executor47 = builder40.httpExecutor;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter49 = builder48.converter;
        retrofit.Profiler profiler50 = null;
        builder48.profiler = profiler50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.client.Client.Provider provider55 = null;
        builder52.clientProvider = provider55;
        retrofit.RestAdapter.Builder builder58 = builder52.setServer("hi!");
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = builder59.setLog(log64);
        retrofit.RestAdapter restAdapter66 = builder59.build();
        java.util.concurrent.Executor executor67 = restAdapter66.httpExecutor;
        builder58.callbackExecutor = executor67;
        builder48.callbackExecutor = executor67;
        builder48.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        java.util.concurrent.Executor executor76 = null;
        builder71.httpExecutor = executor76;
        retrofit.RestAdapter restAdapter78 = builder71.build();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.client.Client.Provider provider80 = restAdapter78.clientProvider;
        builder48.clientProvider = provider80;
        retrofit.ErrorHandler errorHandler82 = builder48.errorHandler;
        builder40.errorHandler = errorHandler82;
        retrofit.RestAdapter.Builder builder84 = builder21.setErrorHandler(errorHandler82);
        retrofit.RestAdapter.Builder builder86 = builder84.setServer("Retrofit-Idle");
        retrofit.Profiler profiler87 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder88 = builder84.setProfiler(profiler87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(executor67);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider80);
        org.junit.Assert.assertNotNull(errorHandler82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.ErrorHandler errorHandler8 = null;
        builder7.errorHandler = errorHandler8;
        retrofit.Profiler profiler10 = null;
        builder7.profiler = profiler10;
        retrofit.Profiler profiler12 = null;
        builder7.profiler = profiler12;
        retrofit.Profiler profiler14 = null;
        builder7.profiler = profiler14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder16.logLevel = logLevel21;
        retrofit.converter.Converter converter23 = null;
        builder16.converter = converter23;
        retrofit.client.Client.Provider provider25 = null;
        builder16.clientProvider = provider25;
        java.util.concurrent.Executor executor27 = builder16.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = builder28.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor30 = builder28.requestInterceptor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter33.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter33.requestInterceptor = requestInterceptor35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        restAdapter33.log = log45;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter33.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = restAdapter33.log;
        retrofit.RestAdapter.Builder builder52 = builder31.setLog(log51);
        retrofit.Profiler profiler53 = builder52.profiler;
        retrofit.client.Client.Provider provider54 = builder52.clientProvider;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter58 = null;
        builder57.converter = converter58;
        retrofit.client.Client.Provider provider60 = null;
        builder57.clientProvider = provider60;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        builder57.requestInterceptor = requestInterceptor62;
        retrofit.Profiler profiler64 = builder57.profiler;
        retrofit.Profiler profiler65 = null;
        builder57.profiler = profiler65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = builder67.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor69 = builder67.requestInterceptor;
        java.util.concurrent.Executor executor70 = builder67.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel71 = builder67.logLevel;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("hi!");
        retrofit.Profiler profiler77 = null;
        builder76.profiler = profiler77;
        retrofit.RequestInterceptor requestInterceptor79 = null;
        builder76.requestInterceptor = requestInterceptor79;
        retrofit.RestAdapter restAdapter81 = builder76.build();
        retrofit.converter.Converter converter82 = null;
        builder76.converter = converter82;
        retrofit.client.Client.Provider provider84 = builder76.clientProvider;
        retrofit.RestAdapter.Builder builder85 = builder67.setClient(provider84);
        retrofit.RestAdapter.Builder builder86 = builder57.setClient(provider84);
        builder56.clientProvider = provider84;
        builder28.clientProvider = provider84;
        builder16.clientProvider = provider84;
        retrofit.Server server90 = builder16.server;
        retrofit.RestAdapter.Builder builder91 = builder7.setServer(server90);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(profiler64);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(requestInterceptor69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(provider84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server90);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor9 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.ErrorHandler errorHandler24 = builder0.errorHandler;
        java.util.concurrent.Executor executor25 = builder0.callbackExecutor;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass26 = executor25.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor25);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.RestAdapter.Log log9 = builder7.log;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.setLogLevel(logLevel33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log26, logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder7.setLogLevel(logLevel33);
        retrofit.ErrorHandler errorHandler37 = null;
        builder36.errorHandler = errorHandler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        retrofit.RestAdapter.Builder builder52 = builder39.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder36.setLogLevel(logLevel50);
        builder53.ensureSaneDefaults();
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter63.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter63.requestInterceptor = requestInterceptor65;
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel76);
        restAdapter63.log = log75;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean80 = logLevel79.log();
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log75, logLevel79);
        retrofit.RestAdapter.Builder builder82 = builder53.setLog(log75);
        retrofit.RestAdapter.Builder builder83 = builder0.setLog(log75);
        retrofit.RequestInterceptor requestInterceptor84 = builder0.requestInterceptor;
        retrofit.client.Client.Provider provider85 = builder0.clientProvider;
        retrofit.converter.Converter converter86 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder87 = builder0.setConverter(converter86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(requestInterceptor84);
        org.junit.Assert.assertNull(provider85);
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.Profiler profiler11 = restAdapter10.profiler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.client.Client.Provider provider15 = null;
        builder12.clientProvider = provider15;
        retrofit.client.Client.Provider provider17 = builder12.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder12.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter23 = builder22.converter;
        retrofit.RestAdapter.LogLevel logLevel24 = builder22.logLevel;
        builder22.ensureSaneDefaults();
        retrofit.client.Client.Provider provider26 = null;
        builder22.clientProvider = provider26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter43.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter43.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log41, logLevel49);
        builder22.logLevel = logLevel49;
        retrofit.RestAdapter.LogLevel logLevel53 = builder22.logLevel;
        java.util.concurrent.Executor executor54 = builder22.httpExecutor;
        builder12.callbackExecutor = executor54;
        restAdapter10.callbackExecutor = executor54;
        retrofit.converter.Converter converter57 = null;
        restAdapter10.converter = converter57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor60 = restAdapter59.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        restAdapter59.requestInterceptor = requestInterceptor61;
        java.util.concurrent.Executor executor63 = restAdapter59.httpExecutor;
        java.util.concurrent.Executor executor64 = restAdapter59.httpExecutor;
        retrofit.Server server65 = restAdapter59.server;
        retrofit.Profiler profiler66 = restAdapter59.profiler;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.Profiler profiler72 = null;
        builder71.profiler = profiler72;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        builder71.requestInterceptor = requestInterceptor74;
        retrofit.RestAdapter restAdapter76 = builder71.build();
        retrofit.converter.Converter converter77 = restAdapter76.converter;
        restAdapter59.converter = converter77;
        restAdapter10.converter = converter77;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNull(profiler66);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(converter77);
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.Profiler profiler8 = null;
        builder0.profiler = profiler8;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor12 = builder11.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider18 = builder17.clientProvider;
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder17.log = log20;
        retrofit.ErrorHandler errorHandler22 = builder17.errorHandler;
        retrofit.client.Client.Provider provider23 = builder17.clientProvider;
        retrofit.RestAdapter.Builder builder24 = builder11.setClient(provider23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter25.logLevel = logLevel27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter25.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter25.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.Profiler profiler35 = null;
        builder33.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.httpExecutor = executor38;
        retrofit.client.Client.Provider provider40 = null;
        builder37.clientProvider = provider40;
        retrofit.RestAdapter.Builder builder43 = builder37.setServer("hi!");
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        retrofit.RestAdapter restAdapter51 = builder44.build();
        java.util.concurrent.Executor executor52 = restAdapter51.httpExecutor;
        builder43.callbackExecutor = executor52;
        builder33.callbackExecutor = executor52;
        restAdapter25.httpExecutor = executor52;
        builder11.callbackExecutor = executor52;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter58 = null;
        builder57.converter = converter58;
        retrofit.client.Client.Provider provider60 = null;
        builder57.clientProvider = provider60;
        java.util.concurrent.Executor executor62 = builder57.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder57.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.Profiler profiler70 = null;
        builder69.profiler = profiler70;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        builder69.requestInterceptor = requestInterceptor72;
        retrofit.RestAdapter restAdapter74 = builder69.build();
        retrofit.converter.Converter converter75 = restAdapter74.converter;
        java.util.concurrent.Executor executor76 = restAdapter74.callbackExecutor;
        builder57.httpExecutor = executor76;
        builder11.httpExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder79.setServer("hi!");
        retrofit.Profiler profiler84 = null;
        builder83.profiler = profiler84;
        retrofit.RequestInterceptor requestInterceptor86 = null;
        builder83.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter restAdapter88 = builder83.build();
        retrofit.converter.Converter converter89 = restAdapter88.converter;
        java.util.concurrent.Executor executor90 = restAdapter88.callbackExecutor;
        retrofit.client.Client.Provider provider91 = restAdapter88.clientProvider;
        builder11.clientProvider = provider91;
        retrofit.RequestInterceptor requestInterceptor93 = null;
        builder11.requestInterceptor = requestInterceptor93;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(provider23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(executor52);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(converter75);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(converter89);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNotNull(provider91);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        builder8.logLevel = logLevel10;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter17 = null;
        restAdapter14.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        restAdapter14.log = log39;
        retrofit.RestAdapter.Builder builder42 = builder8.setLog(log39);
        restAdapter0.log = log39;
        retrofit.converter.Converter converter44 = restAdapter0.converter;
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNull(logLevel47);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.converter.Converter converter10 = restAdapter0.converter;
        java.util.concurrent.Executor executor11 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor12 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log14 = restAdapter13.log;
        retrofit.ErrorHandler errorHandler15 = restAdapter13.errorHandler;
        retrofit.converter.Converter converter16 = null;
        restAdapter13.converter = converter16;
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter13.requestInterceptor;
        retrofit.ErrorHandler errorHandler19 = restAdapter13.errorHandler;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("hi!");
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLog(log33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter35.logLevel = logLevel37;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        restAdapter35.requestInterceptor = requestInterceptor39;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter35.logLevel = logLevel41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log33, logLevel41);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        restAdapter43.log = log49;
        retrofit.client.Header[] headerArray54 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList55 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList55, headerArray54);
        retrofit.mime.TypedOutput typedOutput57 = null;
        retrofit.client.Request request58 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList55, typedOutput57);
        java.lang.String str59 = request58.getUrl();
        java.lang.String str60 = request58.getUrl();
        retrofit.client.Request request61 = restAdapter43.logAndReplaceRequest(request58);
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter43.getLogLevel();
        java.util.concurrent.Executor executor63 = restAdapter43.callbackExecutor;
        java.util.concurrent.Executor executor64 = restAdapter43.callbackExecutor;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("hi!");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLog(log70);
        retrofit.RestAdapter restAdapter72 = builder65.build();
        retrofit.converter.Converter converter73 = null;
        builder65.converter = converter73;
        retrofit.ErrorHandler errorHandler75 = null;
        builder65.errorHandler = errorHandler75;
        retrofit.RequestInterceptor requestInterceptor77 = builder65.requestInterceptor;
        restAdapter43.requestInterceptor = requestInterceptor77;
        restAdapter13.requestInterceptor = requestInterceptor77;
        restAdapter0.requestInterceptor = requestInterceptor77;
        retrofit.ErrorHandler errorHandler81 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(headerArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(request61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNull(errorHandler81);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        retrofit.converter.Converter converter8 = restAdapter7.converter;
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter7.requestInterceptor;
        retrofit.Server server10 = restAdapter7.server;
        java.util.concurrent.Executor executor11 = restAdapter7.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(converter8);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(server10);
        org.junit.Assert.assertNotNull(executor11);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.client.Client.Provider provider10 = builder7.clientProvider;
        java.util.concurrent.Executor executor11 = builder7.httpExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter12.logLevel = logLevel14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        restAdapter12.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.Builder builder19 = builder7.setLogLevel(logLevel18);
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter20.requestInterceptor;
        retrofit.converter.Converter converter22 = restAdapter20.converter;
        java.util.concurrent.Executor executor23 = restAdapter20.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter20.requestInterceptor;
        retrofit.ErrorHandler errorHandler25 = restAdapter20.errorHandler;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor27 = null;
        restAdapter26.httpExecutor = executor27;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        restAdapter26.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.Log log31 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel32;
        java.util.concurrent.Executor executor34 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter.Log log35 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter26.setLogLevel(logLevel36);
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter38.logLevel = logLevel40;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter38.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter38.logLevel;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter46 = null;
        restAdapter45.converter = converter46;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        restAdapter45.requestInterceptor = requestInterceptor48;
        retrofit.Profiler profiler50 = restAdapter45.profiler;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean52 = logLevel51.log();
        restAdapter45.logLevel = logLevel51;
        java.util.concurrent.Executor executor54 = restAdapter45.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter45.getLogLevel();
        restAdapter38.logLevel = logLevel55;
        restAdapter26.logLevel = logLevel55;
        restAdapter20.logLevel = logLevel55;
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter20.logLevel;
        retrofit.RestAdapter.Builder builder60 = builder7.setLogLevel(logLevel59);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = null;
        restAdapter29.httpExecutor = executor30;
        retrofit.Profiler profiler32 = null;
        restAdapter29.profiler = profiler32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter29.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = builder36.converter;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter38.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        restAdapter38.requestInterceptor = requestInterceptor40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        restAdapter38.log = log50;
        retrofit.ErrorHandler errorHandler54 = null;
        restAdapter38.errorHandler = errorHandler54;
        retrofit.RestAdapter.Log log56 = restAdapter38.log;
        retrofit.RestAdapter.Builder builder57 = builder36.setLog(log56);
        retrofit.RequestInterceptor requestInterceptor58 = builder36.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor59 = builder36.requestInterceptor;
        retrofit.RestAdapter.Builder builder61 = builder36.setServer("hi!");
        retrofit.Server server62 = builder36.server;
        restAdapter29.server = server62;
        retrofit.RestAdapter.Builder builder64 = builder28.setServer(server62);
        retrofit.RestAdapter.Log log65 = builder28.log;
        java.util.concurrent.Executor executor66 = builder28.callbackExecutor;
        retrofit.Profiler profiler67 = builder28.profiler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(profiler67);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.Server server22 = builder0.server;
        retrofit.client.Client.Provider provider23 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter24.requestInterceptor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.converter.Converter converter27 = null;
        restAdapter24.converter = converter27;
        retrofit.RestAdapter.Log log29 = restAdapter24.log;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.Log log32 = restAdapter24.log;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter.LogLevel logLevel35 = builder33.logLevel;
        builder33.ensureSaneDefaults();
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter52.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter52.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log50, logLevel58);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder61.setLog(log66);
        restAdapter60.log = log66;
        builder33.log = log66;
        java.util.concurrent.Executor executor70 = null;
        builder33.httpExecutor = executor70;
        retrofit.converter.Converter converter72 = null;
        builder33.converter = converter72;
        retrofit.ErrorHandler errorHandler74 = builder33.errorHandler;
        restAdapter24.errorHandler = errorHandler74;
        retrofit.RestAdapter.Builder builder76 = builder0.setErrorHandler(errorHandler74);
        retrofit.client.Client.Provider provider77 = builder76.clientProvider;
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("Retrofit-Idle");
        builder79.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(provider77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder7.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = builder10.converter;
        retrofit.RestAdapter.LogLevel logLevel12 = builder10.logLevel;
        builder10.ensureSaneDefaults();
        retrofit.client.Client.Provider provider14 = null;
        builder10.clientProvider = provider14;
        retrofit.Profiler profiler16 = builder10.profiler;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.callbackExecutor;
        retrofit.RestAdapter.Log log19 = builder17.log;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log36, logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder17.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder47.setLog(log52);
        builder17.log = log52;
        retrofit.RestAdapter.Builder builder55 = builder10.setLog(log52);
        java.util.concurrent.Executor executor56 = builder55.httpExecutor;
        builder7.callbackExecutor = executor56;
        retrofit.RestAdapter.Log log58 = builder7.log;
        retrofit.converter.Converter converter59 = builder7.converter;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter61 = builder60.converter;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter62.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        restAdapter62.requestInterceptor = requestInterceptor64;
        retrofit.Server server66 = null;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log74, logLevel75);
        restAdapter62.log = log74;
        retrofit.ErrorHandler errorHandler78 = null;
        restAdapter62.errorHandler = errorHandler78;
        retrofit.RestAdapter.Log log80 = restAdapter62.log;
        retrofit.RestAdapter.Builder builder81 = builder60.setLog(log80);
        retrofit.Profiler profiler82 = builder81.profiler;
        retrofit.RestAdapter.LogLevel logLevel83 = builder81.logLevel;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder85 = builder81.setLogLevel(logLevel84);
        retrofit.RestAdapter.Log log86 = builder85.log;
        retrofit.RestAdapter.Builder builder87 = builder7.setLog(log86);
        retrofit.Server server88 = builder7.server;
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(profiler82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(server88);
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter4.logLevel = logLevel6;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter4.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.Log log10 = restAdapter4.log;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter4.new RestHandler();
        retrofit.client.Client.Provider provider12 = null;
        restAdapter4.clientProvider = provider12;
        retrofit.Server server14 = restAdapter4.server;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter15.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter15.logLevel;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter23 = null;
        restAdapter22.converter = converter23;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter22.requestInterceptor = requestInterceptor25;
        retrofit.Profiler profiler27 = restAdapter22.profiler;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        restAdapter22.logLevel = logLevel28;
        java.util.concurrent.Executor executor31 = restAdapter22.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter22.getLogLevel();
        restAdapter15.logLevel = logLevel32;
        java.util.concurrent.Executor executor34 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.httpExecutor = executor36;
        retrofit.client.Client.Provider provider38 = null;
        builder35.clientProvider = provider38;
        retrofit.RestAdapter.Builder builder41 = builder35.setServer("hi!");
        java.util.concurrent.Executor executor42 = builder35.callbackExecutor;
        java.util.concurrent.Executor executor43 = builder35.callbackExecutor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.client.Client.Provider provider49 = builder48.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean51 = logLevel50.log();
        builder48.logLevel = logLevel50;
        retrofit.RestAdapter restAdapter53 = builder48.build();
        retrofit.ErrorHandler errorHandler54 = builder48.errorHandler;
        retrofit.RestAdapter.Builder builder55 = builder35.setErrorHandler(errorHandler54);
        restAdapter15.errorHandler = errorHandler54;
        restAdapter4.errorHandler = errorHandler54;
        restAdapter0.errorHandler = errorHandler54;
        retrofit.Server server59 = restAdapter0.server;
        java.lang.Class<?> wildcardClass60 = restAdapter0.getClass();
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor2 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(logLevel5);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter2 = restAdapter0.converter;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean11 = logLevel10.log();
        builder8.logLevel = logLevel10;
        retrofit.RestAdapter restAdapter13 = builder8.build();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter14.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter17 = null;
        restAdapter14.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        restAdapter14.log = log39;
        retrofit.RestAdapter.Builder builder42 = builder8.setLog(log39);
        restAdapter0.log = log39;
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter0.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(logLevel46);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.httpExecutor = executor7;
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.client.Client.Provider provider11 = builder6.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel12);
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder13.requestInterceptor = requestInterceptor14;
        retrofit.Profiler profiler16 = builder13.profiler;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.client.Client.Provider provider20 = null;
        builder17.clientProvider = provider20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        builder17.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.Profiler profiler29 = null;
        builder28.profiler = profiler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.httpExecutor = executor32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder31.setLog(log36);
        retrofit.RestAdapter restAdapter38 = builder31.build();
        retrofit.converter.Converter converter39 = null;
        builder31.converter = converter39;
        retrofit.ErrorHandler errorHandler41 = null;
        builder31.errorHandler = errorHandler41;
        retrofit.RequestInterceptor requestInterceptor43 = builder31.requestInterceptor;
        builder28.requestInterceptor = requestInterceptor43;
        retrofit.RestAdapter.Builder builder45 = builder17.setRequestInterceptor(requestInterceptor43);
        retrofit.client.Client.Provider provider46 = null;
        builder45.clientProvider = provider46;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        log48.log("");
        retrofit.RestAdapter.Builder builder51 = builder45.setLog(log48);
        retrofit.RequestInterceptor requestInterceptor52 = builder45.requestInterceptor;
        builder13.requestInterceptor = requestInterceptor52;
        builder0.requestInterceptor = requestInterceptor52;
        java.util.concurrent.Executor executor55 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log56 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder57 = builder0.setLog(log56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(executor55);
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = builder25.build();
        java.util.concurrent.Executor executor33 = restAdapter32.httpExecutor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.client.Client.Provider provider37 = null;
        builder34.clientProvider = provider37;
        retrofit.RestAdapter.Builder builder40 = builder34.setServer("hi!");
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = builder41.build();
        java.util.concurrent.Executor executor49 = restAdapter48.httpExecutor;
        builder40.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = builder21.setExecutors(executor33, executor49);
        retrofit.converter.Converter converter52 = builder51.converter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder54 = builder51.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(converter52);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.Profiler profiler12 = null;
        builder11.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder14.setLog(log19);
        retrofit.RestAdapter restAdapter21 = builder14.build();
        retrofit.converter.Converter converter22 = null;
        builder14.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder14.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        builder11.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor26);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder30 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider14 = builder13.clientProvider;
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        log16.log("");
        builder13.log = log16;
        retrofit.RestAdapter.Builder builder20 = builder0.setLog(log16);
        log16.log("");
        log16.log("Retrofit-Idle");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder28.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.httpExecutor = executor35;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        retrofit.Profiler profiler39 = null;
        builder38.profiler = profiler39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = builder41.setLog(log46);
        retrofit.RestAdapter restAdapter48 = builder41.build();
        retrofit.converter.Converter converter49 = null;
        builder41.converter = converter49;
        retrofit.ErrorHandler errorHandler51 = null;
        builder41.errorHandler = errorHandler51;
        retrofit.RequestInterceptor requestInterceptor53 = builder41.requestInterceptor;
        builder38.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder28.setRequestInterceptor(requestInterceptor53);
        retrofit.ErrorHandler errorHandler56 = builder28.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(errorHandler56);
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter5 = builder4.build();
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.getMethod();
        java.lang.String str14 = request12.getMethod();
        retrofit.client.Request request15 = restAdapter5.logAndReplaceRequest(request12);
        java.lang.String str16 = request12.getMethod();
        java.util.List<retrofit.client.Header> headerList17 = request12.getHeaders();
        java.lang.String str18 = request12.getMethod();
        java.util.List<retrofit.client.Header> headerList19 = request12.getHeaders();
        java.lang.String str20 = request12.getMethod();
        retrofit.mime.TypedOutput typedOutput21 = request12.getBody();
        java.lang.String str22 = request12.getUrl();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(typedOutput21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter5.logLevel;
        retrofit.ErrorHandler errorHandler8 = restAdapter5.errorHandler;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider18 = builder17.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        builder17.logLevel = logLevel19;
        retrofit.RestAdapter restAdapter22 = builder17.build();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter23.requestInterceptor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.converter.Converter converter26 = null;
        restAdapter23.converter = converter26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter29 = builder28.converter;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter30.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter30.requestInterceptor = requestInterceptor32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        restAdapter30.log = log42;
        retrofit.ErrorHandler errorHandler46 = null;
        restAdapter30.errorHandler = errorHandler46;
        retrofit.RestAdapter.Log log48 = restAdapter30.log;
        retrofit.RestAdapter.Builder builder49 = builder28.setLog(log48);
        restAdapter23.log = log48;
        retrofit.RestAdapter.Builder builder51 = builder17.setLog(log48);
        restAdapter9.log = log48;
        restAdapter5.log = log48;
        retrofit.RestAdapter.Builder builder54 = builder0.setLog(log48);
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler56 = builder0.errorHandler;
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(errorHandler56);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Log log25 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder26 = builder5.setLog(log25);
        retrofit.Profiler profiler27 = builder26.profiler;
        retrofit.client.Client.Provider provider28 = builder26.clientProvider;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter31 = builder30.build();
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        restAdapter32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        restAdapter32.log = log44;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter49 = null;
        restAdapter48.converter = converter49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter48.requestInterceptor = requestInterceptor51;
        retrofit.Profiler profiler53 = restAdapter48.profiler;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        restAdapter48.logLevel = logLevel54;
        java.util.concurrent.Executor executor57 = restAdapter48.httpExecutor;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log59 = restAdapter58.log;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = builder60.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor62 = builder60.requestInterceptor;
        retrofit.ErrorHandler errorHandler63 = null;
        builder60.errorHandler = errorHandler63;
        retrofit.converter.Converter converter65 = null;
        builder60.converter = converter65;
        retrofit.ErrorHandler errorHandler67 = null;
        builder60.errorHandler = errorHandler67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("hi!");
        retrofit.Profiler profiler74 = null;
        builder73.profiler = profiler74;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        builder73.requestInterceptor = requestInterceptor76;
        retrofit.RestAdapter restAdapter78 = builder73.build();
        retrofit.converter.Converter converter79 = restAdapter78.converter;
        retrofit.RestAdapter.Builder builder80 = builder60.setConverter(converter79);
        restAdapter58.converter = converter79;
        restAdapter48.converter = converter79;
        restAdapter32.converter = converter79;
        restAdapter31.converter = converter79;
        restAdapter0.converter = converter79;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(converter79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder29.setLog(log34);
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter36.logLevel;
        retrofit.converter.Converter converter39 = null;
        restAdapter36.converter = converter39;
        retrofit.ErrorHandler errorHandler41 = restAdapter36.errorHandler;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = null;
        builder42.converter = converter43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        builder42.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.Profiler profiler54 = null;
        builder53.profiler = profiler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = builder56.setLog(log61);
        retrofit.RestAdapter restAdapter63 = builder56.build();
        retrofit.converter.Converter converter64 = null;
        builder56.converter = converter64;
        retrofit.ErrorHandler errorHandler66 = null;
        builder56.errorHandler = errorHandler66;
        retrofit.RequestInterceptor requestInterceptor68 = builder56.requestInterceptor;
        builder53.requestInterceptor = requestInterceptor68;
        retrofit.RestAdapter.Builder builder70 = builder42.setRequestInterceptor(requestInterceptor68);
        restAdapter36.requestInterceptor = requestInterceptor68;
        builder29.requestInterceptor = requestInterceptor68;
        builder28.requestInterceptor = requestInterceptor68;
        retrofit.RequestInterceptor requestInterceptor74 = builder28.requestInterceptor;
        retrofit.converter.Converter converter75 = builder28.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNull(converter75);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.RestAdapter.LogLevel logLevel23 = builder21.logLevel;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter24.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter24.requestInterceptor = requestInterceptor26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        restAdapter24.log = log36;
        retrofit.ErrorHandler errorHandler40 = null;
        restAdapter24.errorHandler = errorHandler40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        restAdapter44.log = log56;
        retrofit.ErrorHandler errorHandler60 = null;
        restAdapter44.errorHandler = errorHandler60;
        retrofit.RestAdapter.Log log62 = restAdapter44.log;
        retrofit.RestAdapter.Builder builder63 = builder42.setLog(log62);
        retrofit.RequestInterceptor requestInterceptor64 = builder42.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor65 = builder42.requestInterceptor;
        retrofit.RestAdapter.Builder builder67 = builder42.setServer("hi!");
        retrofit.Server server68 = builder42.server;
        restAdapter24.server = server68;
        builder21.server = server68;
        retrofit.Profiler profiler71 = builder21.profiler;
        java.util.concurrent.Executor executor72 = builder21.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor73 = builder21.requestInterceptor;
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = null;
        builder75.httpExecutor = executor76;
        retrofit.client.Client.Provider provider78 = null;
        builder75.clientProvider = provider78;
        retrofit.client.Client.Provider provider80 = builder75.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder82 = builder75.setLogLevel(logLevel81);
        java.util.concurrent.Executor executor83 = builder82.callbackExecutor;
        builder82.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor86 = null;
        builder85.httpExecutor = executor86;
        retrofit.client.Client.Provider provider88 = null;
        builder85.clientProvider = provider88;
        retrofit.RestAdapter.Builder builder91 = builder85.setServer("hi!");
        retrofit.Profiler profiler92 = builder85.profiler;
        retrofit.RestAdapter restAdapter93 = builder85.build();
        retrofit.converter.Converter converter94 = restAdapter93.converter;
        retrofit.RestAdapter.Builder builder95 = builder82.setConverter(converter94);
        retrofit.RestAdapter.LogLevel logLevel96 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean97 = logLevel96.log();
        builder95.logLevel = logLevel96;
        retrofit.RestAdapter.Builder builder99 = builder21.setLogLevel(logLevel96);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(server68);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNull(provider80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(executor83);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(profiler92);
        org.junit.Assert.assertNotNull(restAdapter93);
        org.junit.Assert.assertNotNull(converter94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + logLevel96 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel96.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.Server server2 = restAdapter0.server;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.httpExecutor = executor5;
        retrofit.client.Client.Provider provider7 = null;
        builder4.clientProvider = provider7;
        retrofit.RestAdapter.Builder builder10 = builder4.setServer("hi!");
        retrofit.Profiler profiler11 = builder4.profiler;
        retrofit.RestAdapter restAdapter12 = builder4.build();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = null;
        builder13.converter = converter14;
        retrofit.client.Client.Provider provider16 = null;
        builder13.clientProvider = provider16;
        java.util.concurrent.Executor executor18 = builder13.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        builder13.requestInterceptor = requestInterceptor19;
        retrofit.converter.Converter converter21 = null;
        builder13.converter = converter21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter24 = null;
        restAdapter23.converter = converter24;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter23.requestInterceptor = requestInterceptor26;
        retrofit.Profiler profiler28 = restAdapter23.profiler;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        restAdapter23.logLevel = logLevel29;
        java.util.concurrent.Executor executor32 = restAdapter23.httpExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor35 = builder33.requestInterceptor;
        retrofit.ErrorHandler errorHandler36 = null;
        builder33.errorHandler = errorHandler36;
        retrofit.converter.Converter converter38 = null;
        builder33.converter = converter38;
        retrofit.ErrorHandler errorHandler40 = null;
        builder33.errorHandler = errorHandler40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter42.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter42.requestInterceptor = requestInterceptor44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        restAdapter42.log = log54;
        retrofit.ErrorHandler errorHandler58 = null;
        restAdapter42.errorHandler = errorHandler58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter61 = builder60.converter;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter62.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        restAdapter62.requestInterceptor = requestInterceptor64;
        retrofit.Server server66 = null;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log74, logLevel75);
        restAdapter62.log = log74;
        retrofit.ErrorHandler errorHandler78 = null;
        restAdapter62.errorHandler = errorHandler78;
        retrofit.RestAdapter.Log log80 = restAdapter62.log;
        retrofit.RestAdapter.Builder builder81 = builder60.setLog(log80);
        retrofit.RequestInterceptor requestInterceptor82 = builder60.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor83 = builder60.requestInterceptor;
        retrofit.RestAdapter.Builder builder85 = builder60.setServer("hi!");
        retrofit.Server server86 = builder60.server;
        restAdapter42.server = server86;
        retrofit.RestAdapter.Builder builder88 = builder33.setServer(server86);
        restAdapter23.server = server86;
        retrofit.RestAdapter.Builder builder90 = builder13.setServer(server86);
        retrofit.Server server91 = builder90.server;
        retrofit.RestAdapter.Builder builder92 = builder4.setServer(server91);
        restAdapter0.server = server91;
        retrofit.Server server94 = restAdapter0.server;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(requestInterceptor82);
        org.junit.Assert.assertNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(server91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(server94);
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.lang.String str11 = request8.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        java.lang.String str14 = request8.getUrl();
        java.lang.String str15 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList16 = request8.getHeaders();
        java.lang.String str17 = request8.getMethod();
        java.lang.String str18 = request8.getUrl();
        java.lang.String str19 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList20 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList21 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList21, typedOutput22);
        java.lang.String str24 = request23.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.lang.String str14 = request13.getUrl();
        java.util.List<retrofit.client.Header> headerList15 = request13.getHeaders();
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "", headerList15, typedOutput16);
        java.lang.String str18 = request17.getUrl();
        java.lang.String str19 = request17.getUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request20 = restAdapter0.logAndReplaceRequest(request17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        java.util.concurrent.Executor executor12 = null;
        builder7.httpExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = builder7.build();
        retrofit.converter.Converter converter15 = restAdapter14.converter;
        restAdapter0.converter = converter15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.httpExecutor = executor18;
        retrofit.client.Client.Provider provider20 = null;
        builder17.clientProvider = provider20;
        retrofit.RestAdapter.Builder builder23 = builder17.setServer("hi!");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("hi!");
        retrofit.Profiler profiler29 = null;
        builder28.profiler = profiler29;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        builder28.requestInterceptor = requestInterceptor31;
        retrofit.RestAdapter restAdapter33 = builder28.build();
        retrofit.converter.Converter converter34 = restAdapter33.converter;
        retrofit.RestAdapter.Builder builder35 = builder17.setConverter(converter34);
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        restAdapter0.setLogLevel(logLevel36);
        boolean boolean38 = logLevel36.log();
        boolean boolean39 = logLevel36.log();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(converter15);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(converter34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = null;
        restAdapter0.converter = converter18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter28.requestInterceptor = requestInterceptor30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter28.log = log40;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log40, logLevel44);
        restAdapter0.logLevel = logLevel44;
        retrofit.Server server48 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter0.getLogLevel();
        retrofit.client.Header[] headerArray56 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList57 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList57, headerArray56);
        retrofit.mime.TypedOutput typedOutput59 = null;
        retrofit.client.Request request60 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList57, typedOutput59);
        java.lang.String str61 = request60.getUrl();
        java.util.List<retrofit.client.Header> headerList62 = request60.getHeaders();
        java.lang.String str63 = request60.getMethod();
        retrofit.mime.TypedOutput typedOutput64 = request60.getBody();
        java.util.List<retrofit.client.Header> headerList65 = request60.getHeaders();
        java.lang.String str66 = request60.getUrl();
        java.lang.String str67 = request60.getUrl();
        java.util.List<retrofit.client.Header> headerList68 = request60.getHeaders();
        java.util.List<retrofit.client.Header> headerList69 = request60.getHeaders();
        retrofit.mime.TypedOutput typedOutput70 = null;
        retrofit.client.Request request71 = new retrofit.client.Request("Retrofit-Idle", "Retrofit-Idle", headerList69, typedOutput70);
        retrofit.mime.TypedOutput typedOutput72 = null;
        retrofit.client.Request request73 = new retrofit.client.Request("Retrofit-Idle", "", headerList69, typedOutput72);
        retrofit.client.Request request74 = restAdapter0.logAndReplaceRequest(request73);
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(headerArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(headerList62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(typedOutput64);
        org.junit.Assert.assertNotNull(headerList65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(headerList68);
        org.junit.Assert.assertNotNull(headerList69);
        org.junit.Assert.assertNotNull(request74);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter7.logLevel;
        retrofit.converter.Converter converter10 = null;
        restAdapter7.converter = converter10;
        retrofit.ErrorHandler errorHandler12 = restAdapter7.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = null;
        builder13.converter = converter14;
        retrofit.client.Client.Provider provider16 = null;
        builder13.clientProvider = provider16;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        builder13.requestInterceptor = requestInterceptor18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.httpExecutor = executor21;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        retrofit.Profiler profiler25 = null;
        builder24.profiler = profiler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.RestAdapter restAdapter34 = builder27.build();
        retrofit.converter.Converter converter35 = null;
        builder27.converter = converter35;
        retrofit.ErrorHandler errorHandler37 = null;
        builder27.errorHandler = errorHandler37;
        retrofit.RequestInterceptor requestInterceptor39 = builder27.requestInterceptor;
        builder24.requestInterceptor = requestInterceptor39;
        retrofit.RestAdapter.Builder builder41 = builder13.setRequestInterceptor(requestInterceptor39);
        restAdapter7.requestInterceptor = requestInterceptor39;
        builder0.requestInterceptor = requestInterceptor39;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter45 = null;
        builder44.converter = converter45;
        retrofit.client.Client.Provider provider47 = null;
        builder44.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        builder44.requestInterceptor = requestInterceptor49;
        retrofit.Profiler profiler51 = builder44.profiler;
        retrofit.Profiler profiler52 = null;
        builder44.profiler = profiler52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = builder54.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor56 = builder54.requestInterceptor;
        java.util.concurrent.Executor executor57 = builder54.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel58 = builder54.logLevel;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.httpExecutor = executor60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("hi!");
        retrofit.Profiler profiler64 = null;
        builder63.profiler = profiler64;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        builder63.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter restAdapter68 = builder63.build();
        retrofit.converter.Converter converter69 = null;
        builder63.converter = converter69;
        retrofit.client.Client.Provider provider71 = builder63.clientProvider;
        retrofit.RestAdapter.Builder builder72 = builder54.setClient(provider71);
        retrofit.RestAdapter.Builder builder73 = builder44.setClient(provider71);
        builder0.clientProvider = provider71;
        builder0.ensureSaneDefaults();
        java.lang.Class<?> wildcardClass76 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(profiler51);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(provider71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.LogLevel logLevel7 = builder5.logLevel;
        builder5.ensureSaneDefaults();
        retrofit.client.Client.Provider provider9 = null;
        builder5.clientProvider = provider9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter26.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter26.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter26.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log24, logLevel32);
        builder5.logLevel = logLevel32;
        retrofit.RestAdapter.LogLevel logLevel36 = builder5.logLevel;
        builder0.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = builder38.setLog(log43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter46 = builder45.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder44.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter50 = builder49.converter;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor52 = restAdapter51.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        restAdapter51.requestInterceptor = requestInterceptor53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel64);
        restAdapter51.log = log63;
        retrofit.ErrorHandler errorHandler67 = null;
        restAdapter51.errorHandler = errorHandler67;
        retrofit.RestAdapter.Log log69 = restAdapter51.log;
        retrofit.RestAdapter.Builder builder70 = builder49.setLog(log69);
        retrofit.RequestInterceptor requestInterceptor71 = builder49.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor72 = builder49.requestInterceptor;
        retrofit.RestAdapter.Builder builder74 = builder49.setServer("hi!");
        retrofit.Server server75 = builder49.server;
        retrofit.RestAdapter.Builder builder76 = builder44.setServer(server75);
        retrofit.RestAdapter.LogLevel logLevel77 = builder44.logLevel;
        builder0.logLevel = logLevel77;
        retrofit.Server server79 = builder0.server;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = builder80.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor82 = builder80.requestInterceptor;
        retrofit.ErrorHandler errorHandler83 = null;
        builder80.errorHandler = errorHandler83;
        retrofit.converter.Converter converter85 = null;
        builder80.converter = converter85;
        retrofit.client.Client.Provider provider87 = builder80.clientProvider;
        retrofit.RequestInterceptor requestInterceptor88 = builder80.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel89 = builder80.logLevel;
        builder80.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor91 = builder80.requestInterceptor;
        retrofit.RestAdapter.Log log92 = builder80.log;
        retrofit.RestAdapter.Builder builder93 = builder0.setLog(log92);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(server75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server79);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertNull(requestInterceptor82);
        org.junit.Assert.assertNull(provider87);
        org.junit.Assert.assertNull(requestInterceptor88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor91);
        org.junit.Assert.assertNotNull(log92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        builder4.logLevel = logLevel6;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        restAdapter10.log = log35;
        retrofit.RestAdapter.Builder builder38 = builder4.setLog(log35);
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder38.requestInterceptor = requestInterceptor39;
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.RestAdapter.LogLevel logLevel43 = builder38.logLevel;
        retrofit.RestAdapter.LogLevel logLevel44 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.httpExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.Profiler profiler50 = null;
        builder49.profiler = profiler50;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        builder49.requestInterceptor = requestInterceptor52;
        retrofit.RestAdapter restAdapter54 = builder49.build();
        retrofit.converter.Converter converter55 = null;
        builder49.converter = converter55;
        retrofit.RestAdapter.LogLevel logLevel57 = builder49.logLevel;
        retrofit.RequestInterceptor requestInterceptor58 = builder49.requestInterceptor;
        builder38.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.LogLevel logLevel60 = builder38.logLevel;
        retrofit.Server server61 = builder38.server;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLog(log67);
        retrofit.Profiler profiler69 = null;
        builder68.profiler = profiler69;
        retrofit.client.Client.Provider provider71 = builder68.clientProvider;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor73 = restAdapter72.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        restAdapter72.requestInterceptor = requestInterceptor74;
        java.util.concurrent.Executor executor76 = restAdapter72.httpExecutor;
        java.util.concurrent.Executor executor77 = restAdapter72.httpExecutor;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("hi!");
        retrofit.Profiler profiler83 = null;
        builder82.profiler = profiler83;
        retrofit.RequestInterceptor requestInterceptor85 = null;
        builder82.requestInterceptor = requestInterceptor85;
        retrofit.RestAdapter restAdapter87 = builder82.build();
        retrofit.converter.Converter converter88 = restAdapter87.converter;
        restAdapter72.converter = converter88;
        retrofit.RestAdapter.Builder builder90 = builder68.setConverter(converter88);
        retrofit.converter.Converter converter91 = builder68.converter;
        retrofit.RestAdapter.Builder builder92 = builder38.setConverter(converter91);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(converter88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("hi!");
        retrofit.Server server26 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel27 = builder0.logLevel;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.Server server30 = restAdapter28.server;
        retrofit.client.Client.Provider provider31 = null;
        restAdapter28.clientProvider = provider31;
        retrofit.Server server33 = null;
        restAdapter28.server = server33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter36 = null;
        restAdapter35.converter = converter36;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter35.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log41 = restAdapter40.log;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        restAdapter40.requestInterceptor = requestInterceptor42;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        restAdapter40.logLevel = logLevel44;
        retrofit.ErrorHandler errorHandler46 = restAdapter40.errorHandler;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.Profiler profiler52 = null;
        builder51.profiler = profiler52;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        builder51.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter restAdapter56 = builder51.build();
        retrofit.converter.Converter converter57 = restAdapter56.converter;
        restAdapter40.converter = converter57;
        restAdapter35.converter = converter57;
        restAdapter28.converter = converter57;
        retrofit.RestAdapter.Builder builder61 = builder0.setConverter(converter57);
        retrofit.RestAdapter restAdapter62 = builder61.build();
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter63.logLevel;
        java.util.concurrent.Executor executor66 = restAdapter63.httpExecutor;
        retrofit.converter.Converter converter67 = null;
        restAdapter63.converter = converter67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor70 = restAdapter69.requestInterceptor;
        retrofit.converter.Converter converter71 = restAdapter69.converter;
        java.util.concurrent.Executor executor72 = null;
        restAdapter69.callbackExecutor = executor72;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor75 = null;
        restAdapter74.httpExecutor = executor75;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        restAdapter74.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter.Log log79 = restAdapter74.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter74.logLevel = logLevel80;
        restAdapter69.logLevel = logLevel80;
        restAdapter63.logLevel = logLevel80;
        restAdapter62.logLevel = logLevel80;
        retrofit.RequestInterceptor requestInterceptor85 = restAdapter62.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel86 = restAdapter62.getLogLevel();
        java.util.concurrent.Executor executor87 = restAdapter62.callbackExecutor;
        retrofit.client.Response response89 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response91 = restAdapter62.logAndReplaceResponse("", response89, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(converter57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNull(converter71);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(requestInterceptor85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(executor87);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Profiler profiler7 = null;
        builder6.profiler = profiler7;
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        java.util.concurrent.Executor executor14 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor15 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.Profiler profiler21 = null;
        builder20.profiler = profiler21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        builder20.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter restAdapter25 = builder20.build();
        retrofit.converter.Converter converter26 = restAdapter25.converter;
        restAdapter10.converter = converter26;
        retrofit.RestAdapter.Builder builder28 = builder6.setConverter(converter26);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder29.setLog(log34);
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        builder29.logLevel = logLevel45;
        retrofit.converter.Converter converter48 = builder29.converter;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        builder29.requestInterceptor = requestInterceptor49;
        retrofit.converter.Converter converter51 = builder29.converter;
        retrofit.RestAdapter.Log log52 = builder29.log;
        retrofit.RestAdapter.Builder builder53 = builder28.setLog(log52);
        retrofit.Profiler profiler54 = null;
        builder53.profiler = profiler54;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(converter26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter48);
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder21.profiler;
        retrofit.Profiler profiler23 = builder21.profiler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.client.Client.Provider provider30 = builder29.clientProvider;
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        log32.log("");
        builder29.log = log32;
        retrofit.Server server36 = builder29.server;
        builder21.server = server36;
        java.util.concurrent.Executor executor38 = builder21.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor39 = builder21.requestInterceptor;
        retrofit.RestAdapter restAdapter40 = builder21.build();
        java.util.concurrent.Executor executor41 = restAdapter40.callbackExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(executor41);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder7.logLevel;
        builder7.ensureSaneDefaults();
        retrofit.client.Client.Provider provider11 = null;
        builder7.clientProvider = provider11;
        retrofit.Profiler profiler13 = builder7.profiler;
        java.util.concurrent.Executor executor14 = builder7.callbackExecutor;
        retrofit.Server server15 = builder7.server;
        java.util.concurrent.Executor executor16 = builder7.httpExecutor;
        restAdapter0.httpExecutor = executor16;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNotNull(executor14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNotNull(executor16);
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        builder4.logLevel = logLevel6;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        restAdapter10.log = log35;
        retrofit.RestAdapter.Builder builder38 = builder4.setLog(log35);
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder38.requestInterceptor = requestInterceptor39;
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder43.setLog(log48);
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        builder43.logLevel = logLevel59;
        retrofit.Profiler profiler62 = builder43.profiler;
        retrofit.Profiler profiler63 = null;
        builder43.profiler = profiler63;
        retrofit.RequestInterceptor requestInterceptor65 = builder43.requestInterceptor;
        retrofit.RestAdapter.Log log66 = builder43.log;
        retrofit.RestAdapter.Builder builder67 = builder38.setLog(log66);
        retrofit.Profiler profiler68 = builder38.profiler;
        retrofit.Profiler profiler69 = null;
        builder38.profiler = profiler69;
        retrofit.RestAdapter.Log log71 = builder38.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(profiler68);
        org.junit.Assert.assertNotNull(log71);
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter7.requestInterceptor = requestInterceptor9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        restAdapter7.log = log19;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter7.errorHandler = errorHandler23;
        retrofit.RestAdapter.Log log25 = restAdapter7.log;
        retrofit.RestAdapter.Builder builder26 = builder5.setLog(log25);
        restAdapter0.log = log25;
        retrofit.Server server28 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.Profiler profiler34 = null;
        builder33.profiler = profiler34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder33.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter restAdapter38 = builder33.build();
        retrofit.converter.Converter converter39 = restAdapter38.converter;
        retrofit.RestAdapter.Log log40 = restAdapter38.log;
        retrofit.converter.Converter converter41 = restAdapter38.converter;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.httpExecutor = executor43;
        retrofit.client.Client.Provider provider45 = null;
        builder42.clientProvider = provider45;
        retrofit.client.Client.Provider provider47 = builder42.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel48);
        retrofit.client.Client.Provider provider50 = builder42.clientProvider;
        retrofit.Profiler profiler51 = builder42.profiler;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder52.logLevel = logLevel57;
        retrofit.converter.Converter converter59 = null;
        builder52.converter = converter59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter61.requestInterceptor;
        retrofit.converter.Converter converter63 = restAdapter61.converter;
        java.util.concurrent.Executor executor64 = null;
        restAdapter61.callbackExecutor = executor64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor67 = null;
        restAdapter66.httpExecutor = executor67;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        restAdapter66.requestInterceptor = requestInterceptor69;
        retrofit.RestAdapter.Log log71 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel72;
        restAdapter61.logLevel = logLevel72;
        retrofit.RestAdapter.Builder builder75 = builder52.setLogLevel(logLevel72);
        builder42.logLevel = logLevel72;
        restAdapter38.logLevel = logLevel72;
        retrofit.converter.Converter converter78 = restAdapter38.converter;
        retrofit.Server server79 = restAdapter38.server;
        restAdapter0.server = server79;
        java.util.concurrent.Executor executor81 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(converter39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(converter41);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(provider50);
        org.junit.Assert.assertNull(profiler51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(converter78);
        org.junit.Assert.assertNotNull(server79);
        org.junit.Assert.assertNull(executor81);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.Profiler profiler10 = null;
        restAdapter0.profiler = profiler10;
        retrofit.Profiler profiler12 = null;
        restAdapter0.profiler = profiler12;
        java.util.concurrent.Executor executor14 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor15 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = null;
        restAdapter0.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter18.logLevel;
        retrofit.Server server21 = restAdapter18.server;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter18.getLogLevel();
        retrofit.client.Client.Provider provider23 = restAdapter18.clientProvider;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter26.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter26.requestInterceptor = requestInterceptor28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.log = log38;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter26.errorHandler = errorHandler42;
        retrofit.RestAdapter.Log log44 = restAdapter26.log;
        retrofit.RestAdapter.Builder builder45 = builder24.setLog(log44);
        retrofit.Profiler profiler46 = builder45.profiler;
        retrofit.Profiler profiler47 = builder45.profiler;
        java.util.concurrent.Executor executor48 = builder45.callbackExecutor;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder49.setServer("hi!");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder49.setLog(log54);
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        builder49.logLevel = logLevel65;
        retrofit.converter.Converter converter68 = builder49.converter;
        retrofit.ErrorHandler errorHandler69 = builder49.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel70 = builder49.logLevel;
        retrofit.Server server71 = builder49.server;
        retrofit.RestAdapter.Builder builder72 = builder45.setServer(server71);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("hi!");
        retrofit.Profiler profiler78 = null;
        builder77.profiler = profiler78;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        builder77.requestInterceptor = requestInterceptor80;
        retrofit.RestAdapter restAdapter82 = builder77.build();
        retrofit.converter.Converter converter83 = null;
        builder77.converter = converter83;
        retrofit.client.Client.Provider provider85 = builder77.clientProvider;
        builder72.clientProvider = provider85;
        restAdapter18.clientProvider = provider85;
        restAdapter0.clientProvider = provider85;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter68);
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(provider85);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        restAdapter0.log = log12;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter0.errorHandler = errorHandler16;
        retrofit.RestAdapter.Log log18 = restAdapter0.log;
        java.util.concurrent.Executor executor19 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log21 = null;
        restAdapter0.log = log21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter23.logLevel = logLevel25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter23.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter23.logLevel;
        restAdapter0.logLevel = logLevel29;
        retrofit.Profiler profiler31 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log33 = restAdapter0.log;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.logLevel;
        retrofit.Profiler profiler36 = null;
        restAdapter34.profiler = profiler36;
        retrofit.Profiler profiler38 = restAdapter34.profiler;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.httpExecutor = executor41;
        retrofit.client.Client.Provider provider43 = null;
        builder40.clientProvider = provider43;
        retrofit.client.Client.Provider provider45 = builder40.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel46);
        java.util.concurrent.Executor executor48 = builder47.callbackExecutor;
        builder47.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.client.Client.Provider provider53 = null;
        builder50.clientProvider = provider53;
        retrofit.RestAdapter.Builder builder56 = builder50.setServer("hi!");
        retrofit.Profiler profiler57 = builder50.profiler;
        retrofit.RestAdapter restAdapter58 = builder50.build();
        retrofit.converter.Converter converter59 = restAdapter58.converter;
        retrofit.RestAdapter.Builder builder60 = builder47.setConverter(converter59);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.client.Client.Provider provider64 = null;
        builder61.clientProvider = provider64;
        retrofit.RestAdapter.Builder builder67 = builder61.setServer("hi!");
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("hi!");
        retrofit.Profiler profiler73 = null;
        builder72.profiler = profiler73;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        builder72.requestInterceptor = requestInterceptor75;
        retrofit.RestAdapter restAdapter77 = builder72.build();
        retrofit.converter.Converter converter78 = restAdapter77.converter;
        retrofit.RestAdapter.Builder builder79 = builder61.setConverter(converter78);
        retrofit.RestAdapter.Builder builder80 = builder47.setConverter(converter78);
        retrofit.converter.Converter converter81 = builder47.converter;
        retrofit.converter.Converter converter82 = builder47.converter;
        restAdapter34.converter = converter82;
        retrofit.converter.Converter converter84 = restAdapter34.converter;
        restAdapter0.converter = converter84;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(converter59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(converter78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(converter81);
        org.junit.Assert.assertNotNull(converter82);
        org.junit.Assert.assertNotNull(converter84);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        java.util.concurrent.Executor executor22 = null;
        builder21.httpExecutor = executor22;
        retrofit.client.Client.Provider provider24 = builder21.clientProvider;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(provider24);
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter4 = null;
        builder3.converter = converter4;
        retrofit.client.Client.Provider provider6 = null;
        builder3.clientProvider = provider6;
        java.util.concurrent.Executor executor8 = builder3.httpExecutor;
        retrofit.Profiler profiler9 = builder3.profiler;
        retrofit.RestAdapter.Log log10 = builder3.log;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = builder11.callbackExecutor;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.RestAdapter.Builder builder24 = builder11.setLogLevel(logLevel22);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter25.logLevel = logLevel27;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.setLogLevel(logLevel29);
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter25.getLogLevel();
        builder24.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder3.setLogLevel(logLevel31);
        retrofit.RequestInterceptor requestInterceptor34 = null;
        builder3.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder36.setLog(log41);
        retrofit.Profiler profiler43 = null;
        builder42.profiler = profiler43;
        retrofit.client.Client.Provider provider45 = builder42.clientProvider;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor47 = restAdapter46.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        restAdapter46.requestInterceptor = requestInterceptor48;
        java.util.concurrent.Executor executor50 = restAdapter46.httpExecutor;
        java.util.concurrent.Executor executor51 = restAdapter46.httpExecutor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("hi!");
        retrofit.Profiler profiler57 = null;
        builder56.profiler = profiler57;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        builder56.requestInterceptor = requestInterceptor59;
        retrofit.RestAdapter restAdapter61 = builder56.build();
        retrofit.converter.Converter converter62 = restAdapter61.converter;
        restAdapter46.converter = converter62;
        retrofit.RestAdapter.Builder builder64 = builder42.setConverter(converter62);
        builder3.converter = converter62;
        restAdapter0.converter = converter62;
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor69 = restAdapter0.requestInterceptor;
        retrofit.client.Header[] headerArray72 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList73 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList73, headerArray72);
        retrofit.mime.TypedOutput typedOutput75 = null;
        retrofit.client.Request request76 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList73, typedOutput75);
        java.lang.String str77 = request76.getMethod();
        retrofit.mime.TypedOutput typedOutput78 = request76.getBody();
        retrofit.mime.TypedOutput typedOutput79 = request76.getBody();
        java.util.List<retrofit.client.Header> headerList80 = request76.getHeaders();
        java.lang.String str81 = request76.getUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request82 = restAdapter0.logAndReplaceRequest(request76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(converter62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(headerArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNull(typedOutput78);
        org.junit.Assert.assertNull(typedOutput79);
        org.junit.Assert.assertNotNull(headerList80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor6 = builder5.requestInterceptor;
        retrofit.client.Client.Provider provider7 = builder5.clientProvider;
        retrofit.Profiler profiler8 = builder5.profiler;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log10 = restAdapter9.log;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter.LogLevel logLevel13 = null;
        restAdapter9.logLevel = logLevel13;
        retrofit.ErrorHandler errorHandler15 = restAdapter9.errorHandler;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.Profiler profiler21 = null;
        builder20.profiler = profiler21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        builder20.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter restAdapter25 = builder20.build();
        retrofit.converter.Converter converter26 = restAdapter25.converter;
        restAdapter9.converter = converter26;
        builder5.converter = converter26;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor31 = builder29.requestInterceptor;
        retrofit.ErrorHandler errorHandler32 = null;
        builder29.errorHandler = errorHandler32;
        retrofit.Profiler profiler34 = builder29.profiler;
        java.util.concurrent.Executor executor35 = builder29.httpExecutor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter37 = builder36.converter;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter38.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        restAdapter38.requestInterceptor = requestInterceptor40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        restAdapter38.log = log50;
        retrofit.ErrorHandler errorHandler54 = null;
        restAdapter38.errorHandler = errorHandler54;
        retrofit.RestAdapter.Log log56 = restAdapter38.log;
        retrofit.RestAdapter.Builder builder57 = builder36.setLog(log56);
        retrofit.Profiler profiler58 = builder57.profiler;
        retrofit.Profiler profiler59 = builder57.profiler;
        java.util.concurrent.Executor executor60 = builder57.callbackExecutor;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.httpExecutor = executor62;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("hi!");
        retrofit.client.Client.Provider provider66 = builder65.clientProvider;
        builder65.ensureSaneDefaults();
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        log68.log("");
        builder65.log = log68;
        retrofit.Server server72 = builder65.server;
        builder57.server = server72;
        java.util.concurrent.Executor executor74 = builder57.httpExecutor;
        retrofit.Server server75 = builder57.server;
        retrofit.RestAdapter.Builder builder76 = builder29.setServer(server75);
        retrofit.RestAdapter.Builder builder77 = builder5.setServer(server75);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(converter26);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(profiler58);
        org.junit.Assert.assertNull(profiler59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(provider66);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNotNull(server75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter5 = builder4.converter;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter6.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter6.requestInterceptor = requestInterceptor8;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        restAdapter6.log = log18;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter6.errorHandler = errorHandler22;
        retrofit.RestAdapter.Log log24 = restAdapter6.log;
        retrofit.RestAdapter.Builder builder25 = builder4.setLog(log24);
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = builder4.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.httpExecutor = executor30;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter34 = builder33.build();
        retrofit.client.Header[] headerArray37 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList38 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList38, headerArray37);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList38, typedOutput40);
        java.lang.String str42 = request41.getMethod();
        java.lang.String str43 = request41.getMethod();
        retrofit.client.Request request44 = restAdapter34.logAndReplaceRequest(request41);
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter34.requestInterceptor;
        builder4.requestInterceptor = requestInterceptor45;
        java.util.concurrent.Executor executor47 = builder4.httpExecutor;
        restAdapter0.httpExecutor = executor47;
        retrofit.client.Client.Provider provider49 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(headerArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNull(provider49);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter8.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter8.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        restAdapter8.log = log20;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter8.errorHandler = errorHandler24;
        retrofit.RestAdapter.Log log26 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder27 = builder6.setLog(log26);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor31 = builder29.requestInterceptor;
        retrofit.ErrorHandler errorHandler32 = null;
        builder29.errorHandler = errorHandler32;
        retrofit.converter.Converter converter34 = null;
        builder29.converter = converter34;
        retrofit.ErrorHandler errorHandler36 = null;
        builder29.errorHandler = errorHandler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.httpExecutor = executor39;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.Profiler profiler43 = null;
        builder42.profiler = profiler43;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        builder42.requestInterceptor = requestInterceptor45;
        retrofit.RestAdapter restAdapter47 = builder42.build();
        retrofit.converter.Converter converter48 = restAdapter47.converter;
        retrofit.RestAdapter.Builder builder49 = builder29.setConverter(converter48);
        builder28.converter = converter48;
        retrofit.Server server51 = builder28.server;
        retrofit.ErrorHandler errorHandler52 = builder28.errorHandler;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter54 = builder53.converter;
        retrofit.RestAdapter.LogLevel logLevel55 = builder53.logLevel;
        builder53.ensureSaneDefaults();
        retrofit.client.Client.Provider provider57 = null;
        builder53.clientProvider = provider57;
        retrofit.ErrorHandler errorHandler59 = builder53.errorHandler;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor61 = restAdapter60.requestInterceptor;
        java.util.concurrent.Executor executor62 = restAdapter60.callbackExecutor;
        retrofit.ErrorHandler errorHandler63 = restAdapter60.errorHandler;
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("hi!");
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder78 = builder72.setLog(log77);
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter79.logLevel = logLevel81;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        restAdapter79.requestInterceptor = requestInterceptor83;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter79.logLevel = logLevel85;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log77, logLevel85);
        log77.log("Retrofit-Idle");
        restAdapter60.log = log77;
        retrofit.RestAdapter.Builder builder91 = builder53.setLog(log77);
        builder28.log = log77;
        retrofit.client.Client client93 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder94 = builder28.setClient(client93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNotNull(converter48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler59);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        java.lang.String str13 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput14 = request10.getBody();
        java.lang.String str15 = request10.getUrl();
        java.lang.String str16 = request10.getUrl();
        java.util.List<retrofit.client.Header> headerList17 = request10.getHeaders();
        java.lang.String str18 = request10.getMethod();
        java.util.List<retrofit.client.Header> headerList19 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("hi!", "hi!", headerList19, typedOutput20);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("Retrofit-Idle", "", headerList19, typedOutput22);
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(headerList19);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.httpExecutor = executor9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        java.util.concurrent.Executor executor16 = null;
        builder11.httpExecutor = executor16;
        retrofit.RestAdapter restAdapter18 = builder11.build();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter21.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        restAdapter21.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.log = log33;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter21.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = restAdapter21.log;
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log39);
        retrofit.Profiler profiler41 = builder40.profiler;
        retrofit.Profiler profiler42 = builder40.profiler;
        java.util.concurrent.Executor executor43 = builder40.callbackExecutor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.httpExecutor = executor45;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLog(log49);
        retrofit.RestAdapter restAdapter51 = builder44.build();
        java.util.concurrent.Executor executor52 = restAdapter51.httpExecutor;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.httpExecutor = executor54;
        retrofit.client.Client.Provider provider56 = null;
        builder53.clientProvider = provider56;
        retrofit.RestAdapter.Builder builder59 = builder53.setServer("hi!");
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder60.setLog(log65);
        retrofit.RestAdapter restAdapter67 = builder60.build();
        java.util.concurrent.Executor executor68 = restAdapter67.httpExecutor;
        builder59.callbackExecutor = executor68;
        retrofit.RestAdapter.Builder builder70 = builder40.setExecutors(executor52, executor68);
        restAdapter18.httpExecutor = executor52;
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel81);
        restAdapter18.logLevel = logLevel81;
        retrofit.ErrorHandler errorHandler84 = restAdapter18.errorHandler;
        restAdapter0.errorHandler = errorHandler84;
        retrofit.RestAdapter.RestHandler restHandler86 = restAdapter0.new RestHandler();
        retrofit.Server server87 = null;
        restAdapter0.server = server87;
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter89.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel91 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter89.logLevel = logLevel91;
        retrofit.RequestInterceptor requestInterceptor93 = null;
        restAdapter89.requestInterceptor = requestInterceptor93;
        retrofit.RestAdapter.LogLevel logLevel95 = restAdapter89.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel96 = restAdapter89.getLogLevel();
        restAdapter0.logLevel = logLevel96;
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(executor52);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNull(logLevel90);
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel96 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel96.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler6 = null;
        restAdapter0.profiler = profiler6;
        retrofit.RestAdapter.Log log8 = restAdapter0.log;
        retrofit.client.Client.Provider provider9 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder11.setLog(log16);
        retrofit.ErrorHandler errorHandler18 = builder11.errorHandler;
        retrofit.client.Client.Provider provider19 = builder11.clientProvider;
        retrofit.Server server20 = null;
        builder11.server = server20;
        retrofit.converter.Converter converter22 = null;
        builder11.converter = converter22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.RestAdapter.Log log26 = builder24.log;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.setLogLevel(logLevel50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log43, logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder24.setLogLevel(logLevel50);
        retrofit.ErrorHandler errorHandler54 = null;
        builder53.errorHandler = errorHandler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = builder56.callbackExecutor;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel67);
        retrofit.RestAdapter.Builder builder69 = builder56.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder70 = builder53.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder71 = builder11.setLogLevel(logLevel67);
        restAdapter0.setLogLevel(logLevel67);
        retrofit.RequestInterceptor requestInterceptor73 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter75 = builder74.converter;
        retrofit.Profiler profiler76 = null;
        builder74.profiler = profiler76;
        retrofit.RestAdapter.Log log78 = builder74.log;
        builder74.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor80 = null;
        builder74.requestInterceptor = requestInterceptor80;
        retrofit.ErrorHandler errorHandler82 = null;
        builder74.errorHandler = errorHandler82;
        retrofit.RestAdapter.LogLevel logLevel84 = builder74.logLevel;
        boolean boolean85 = logLevel84.log();
        restAdapter0.logLevel = logLevel84;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNull(converter75);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getMethod();
        java.lang.String str8 = request6.getMethod();
        java.lang.String str9 = request6.getUrl();
        java.lang.String str10 = request6.getUrl();
        java.lang.String str11 = request6.getUrl();
        java.lang.String str12 = request6.getUrl();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter5.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter5.logLevel;
        retrofit.converter.Converter converter8 = null;
        restAdapter5.converter = converter8;
        retrofit.ErrorHandler errorHandler10 = restAdapter5.errorHandler;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.client.Client.Provider provider14 = null;
        builder11.clientProvider = provider14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder11.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("hi!");
        retrofit.Profiler profiler23 = null;
        builder22.profiler = profiler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.httpExecutor = executor26;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("hi!");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder25.setLog(log30);
        retrofit.RestAdapter restAdapter32 = builder25.build();
        retrofit.converter.Converter converter33 = null;
        builder25.converter = converter33;
        retrofit.ErrorHandler errorHandler35 = null;
        builder25.errorHandler = errorHandler35;
        retrofit.RequestInterceptor requestInterceptor37 = builder25.requestInterceptor;
        builder22.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter.Builder builder39 = builder11.setRequestInterceptor(requestInterceptor37);
        restAdapter5.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter41.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        restAdapter41.requestInterceptor = requestInterceptor43;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        restAdapter41.log = log53;
        restAdapter5.log = log53;
        restAdapter0.log = log53;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("hi!");
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder73 = builder67.setLog(log72);
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter74.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter74.logLevel = logLevel76;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        restAdapter74.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter74.logLevel = logLevel80;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log72, logLevel80);
        log72.log("hi!");
        log72.log("Retrofit-Idle");
        restAdapter0.log = log72;
        retrofit.converter.Converter converter88 = restAdapter0.converter;
        java.lang.Class<?> wildcardClass89 = restAdapter0.getClass();
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(logLevel75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        java.lang.String str17 = request16.getUrl();
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        java.lang.String str19 = request16.getMethod();
        retrofit.mime.TypedOutput typedOutput20 = request16.getBody();
        java.util.List<retrofit.client.Header> headerList21 = request16.getHeaders();
        java.lang.String str22 = request16.getUrl();
        java.lang.String str23 = request16.getUrl();
        java.util.List<retrofit.client.Header> headerList24 = request16.getHeaders();
        java.util.List<retrofit.client.Header> headerList25 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", headerList25, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "Retrofit-Idle", headerList25, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "", headerList25, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput34);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(headerList24);
        org.junit.Assert.assertNotNull(headerList25);
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean7 = logLevel6.log();
        builder4.logLevel = logLevel6;
        retrofit.RestAdapter restAdapter9 = builder4.build();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter17.requestInterceptor = requestInterceptor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.log = log29;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter17.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder36 = builder15.setLog(log35);
        restAdapter10.log = log35;
        retrofit.RestAdapter.Builder builder38 = builder4.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel39 = null;
        builder38.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = builder41.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor43 = builder41.requestInterceptor;
        retrofit.ErrorHandler errorHandler44 = null;
        builder41.errorHandler = errorHandler44;
        retrofit.converter.Converter converter46 = null;
        builder41.converter = converter46;
        retrofit.ErrorHandler errorHandler48 = null;
        builder41.errorHandler = errorHandler48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.Profiler profiler55 = null;
        builder54.profiler = profiler55;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        builder54.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter restAdapter59 = builder54.build();
        retrofit.converter.Converter converter60 = restAdapter59.converter;
        retrofit.RestAdapter.Builder builder61 = builder41.setConverter(converter60);
        retrofit.RestAdapter.Builder builder62 = builder38.setConverter(converter60);
        java.util.concurrent.Executor executor63 = builder38.callbackExecutor;
        builder38.ensureSaneDefaults();
        retrofit.Profiler profiler65 = null;
        builder38.profiler = profiler65;
        retrofit.RestAdapter.LogLevel logLevel67 = builder38.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(converter60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertNull(logLevel67);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        restAdapter0.requestInterceptor = requestInterceptor3;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter0.requestInterceptor = requestInterceptor9;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        retrofit.Server server12 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler14 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(errorHandler14);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        restAdapter10.requestInterceptor = requestInterceptor12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.log = log22;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log22, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder0.setLog(log22);
        retrofit.RequestInterceptor requestInterceptor30 = builder0.requestInterceptor;
        retrofit.Profiler profiler31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder0.setProfiler(profiler31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(requestInterceptor30);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        restAdapter0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.Server server5 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter9 = builder8.converter;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.httpExecutor = executor13;
        retrofit.client.Client.Provider provider15 = null;
        builder12.clientProvider = provider15;
        retrofit.RestAdapter.Builder builder18 = builder12.setServer("hi!");
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder19.setLog(log24);
        retrofit.RestAdapter restAdapter26 = builder19.build();
        java.util.concurrent.Executor executor27 = restAdapter26.httpExecutor;
        builder18.callbackExecutor = executor27;
        builder8.callbackExecutor = executor27;
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel31 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.httpExecutor = executor33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.Profiler profiler37 = null;
        builder36.profiler = profiler37;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder36.requestInterceptor = requestInterceptor39;
        retrofit.RestAdapter restAdapter41 = builder36.build();
        retrofit.converter.Converter converter42 = null;
        builder36.converter = converter42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter44.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        restAdapter44.requestInterceptor = requestInterceptor46;
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter44.getLogLevel();
        retrofit.client.Client.Provider provider49 = null;
        restAdapter44.clientProvider = provider49;
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter44.logLevel;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter52.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter52.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter61 = builder60.converter;
        retrofit.Profiler profiler62 = null;
        builder60.profiler = profiler62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.httpExecutor = executor65;
        retrofit.client.Client.Provider provider67 = null;
        builder64.clientProvider = provider67;
        retrofit.RestAdapter.Builder builder70 = builder64.setServer("hi!");
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor72 = null;
        builder71.httpExecutor = executor72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder77 = builder71.setLog(log76);
        retrofit.RestAdapter restAdapter78 = builder71.build();
        java.util.concurrent.Executor executor79 = restAdapter78.httpExecutor;
        builder70.callbackExecutor = executor79;
        builder60.callbackExecutor = executor79;
        restAdapter52.httpExecutor = executor79;
        restAdapter44.callbackExecutor = executor79;
        builder36.callbackExecutor = executor79;
        retrofit.converter.Converter converter85 = builder36.converter;
        retrofit.RestAdapter.Log log86 = builder36.log;
        log86.log("");
        builder8.log = log86;
        restAdapter0.log = log86;
        retrofit.RestAdapter.LogLevel logLevel91 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter41);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNull(converter85);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNull(logLevel91);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        retrofit.Server server6 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter9.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter9.requestInterceptor = requestInterceptor11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter9.log = log21;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter9.errorHandler = errorHandler25;
        retrofit.RestAdapter.Log log27 = restAdapter9.log;
        retrofit.RestAdapter.Builder builder28 = builder7.setLog(log27);
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder30.setLog(log35);
        retrofit.RestAdapter restAdapter37 = builder30.build();
        java.util.concurrent.Executor executor38 = restAdapter37.httpExecutor;
        builder7.callbackExecutor = executor38;
        builder0.httpExecutor = executor38;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = builder41.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor43 = builder41.requestInterceptor;
        java.util.concurrent.Executor executor44 = builder41.httpExecutor;
        retrofit.RestAdapter.Builder builder46 = builder41.setServer("hi!");
        retrofit.RestAdapter.Log log47 = builder41.log;
        retrofit.RestAdapter restAdapter48 = builder41.build();
        retrofit.RequestInterceptor requestInterceptor49 = restAdapter48.requestInterceptor;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        retrofit.Profiler profiler61 = restAdapter60.profiler;
        java.util.concurrent.Executor executor62 = restAdapter60.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter60.getLogLevel();
        restAdapter48.logLevel = logLevel63;
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter48.logLevel;
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.Builder builder67 = builder0.setLogLevel(logLevel66);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler6 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder11.clientProvider;
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("");
        builder11.log = log14;
        retrofit.Server server18 = builder11.server;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.httpExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder19.logLevel = logLevel24;
        retrofit.converter.Converter converter26 = null;
        builder19.converter = converter26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter28.requestInterceptor;
        retrofit.converter.Converter converter30 = restAdapter28.converter;
        java.util.concurrent.Executor executor31 = null;
        restAdapter28.callbackExecutor = executor31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = null;
        restAdapter33.httpExecutor = executor34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter33.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter.Log log38 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel39;
        restAdapter28.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder42 = builder19.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.httpExecutor = executor44;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.Profiler profiler48 = null;
        builder47.profiler = profiler48;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        builder47.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter restAdapter52 = builder47.build();
        retrofit.converter.Converter converter53 = restAdapter52.converter;
        java.util.concurrent.Executor executor54 = restAdapter52.callbackExecutor;
        builder19.httpExecutor = executor54;
        builder11.callbackExecutor = executor54;
        restAdapter0.callbackExecutor = executor54;
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(converter53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNull(logLevel58);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.RequestInterceptor requestInterceptor22 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.ErrorHandler errorHandler24 = builder0.errorHandler;
        retrofit.RestAdapter.Log log25 = builder0.log;
        retrofit.converter.Converter converter26 = builder0.converter;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder27.setLog(log32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter35 = builder34.converter;
        retrofit.RestAdapter.LogLevel logLevel36 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder33.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = builder38.converter;
        retrofit.RestAdapter.LogLevel logLevel40 = builder38.logLevel;
        builder38.ensureSaneDefaults();
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder54 = builder50.setServer("hi!");
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = builder50.setLog(log55);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter57.logLevel = logLevel59;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        restAdapter57.requestInterceptor = requestInterceptor61;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter57.logLevel = logLevel63;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log55, logLevel63);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.httpExecutor = executor67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("hi!");
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder72 = builder66.setLog(log71);
        restAdapter65.log = log71;
        builder38.log = log71;
        java.util.concurrent.Executor executor75 = null;
        builder38.httpExecutor = executor75;
        retrofit.converter.Converter converter77 = null;
        builder38.converter = converter77;
        retrofit.ErrorHandler errorHandler79 = builder38.errorHandler;
        retrofit.RestAdapter.Builder builder80 = builder33.setErrorHandler(errorHandler79);
        retrofit.Server server81 = builder80.server;
        retrofit.RestAdapter.Builder builder82 = builder0.setServer(server81);
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        builder82.ensureSaneDefaults();
        retrofit.Profiler profiler85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder82.setProfiler(profiler85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(errorHandler79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(server81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.client.Client.Provider provider3 = null;
        builder0.clientProvider = provider3;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = null;
        builder9.converter = converter10;
        retrofit.client.Client.Provider provider12 = null;
        builder9.clientProvider = provider12;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        builder9.requestInterceptor = requestInterceptor14;
        retrofit.Profiler profiler16 = builder9.profiler;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter17.requestInterceptor;
        java.util.concurrent.Executor executor19 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        java.util.concurrent.Executor executor21 = restAdapter17.httpExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log23 = restAdapter22.log;
        retrofit.ErrorHandler errorHandler24 = restAdapter22.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.httpExecutor = executor27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.Profiler profiler31 = null;
        builder30.profiler = profiler31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder39 = builder33.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder33.build();
        retrofit.converter.Converter converter41 = null;
        builder33.converter = converter41;
        retrofit.ErrorHandler errorHandler43 = null;
        builder33.errorHandler = errorHandler43;
        retrofit.RequestInterceptor requestInterceptor45 = builder33.requestInterceptor;
        builder30.requestInterceptor = requestInterceptor45;
        restAdapter22.requestInterceptor = requestInterceptor45;
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter22.requestInterceptor;
        restAdapter17.requestInterceptor = requestInterceptor48;
        builder9.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter.Builder builder51 = builder0.setRequestInterceptor(requestInterceptor48);
        retrofit.converter.Converter converter52 = builder0.converter;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(converter52);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.httpExecutor = executor1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLog(log5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder0.logLevel = logLevel16;
        retrofit.converter.Converter converter19 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder0.requestInterceptor = requestInterceptor20;
        retrofit.converter.Converter converter22 = builder0.converter;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter24 = null;
        builder23.converter = converter24;
        retrofit.client.Client.Provider provider26 = null;
        builder23.clientProvider = provider26;
        retrofit.RestAdapter.Builder builder29 = builder23.setServer("hi!");
        retrofit.Server server30 = builder23.server;
        retrofit.RestAdapter.Builder builder31 = builder0.setServer(server30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.Profiler profiler36 = restAdapter32.profiler;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter32.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter32.requestInterceptor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log40 = restAdapter39.log;
        java.util.concurrent.Executor executor41 = restAdapter39.callbackExecutor;
        retrofit.Profiler profiler42 = restAdapter39.profiler;
        retrofit.Profiler profiler43 = null;
        restAdapter39.profiler = profiler43;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        restAdapter39.log = log53;
        restAdapter32.log = log53;
        log53.log("hi!");
        builder31.log = log53;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter62 = builder61.converter;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter63.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter63.requestInterceptor = requestInterceptor65;
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel76);
        restAdapter63.log = log75;
        retrofit.ErrorHandler errorHandler79 = null;
        restAdapter63.errorHandler = errorHandler79;
        retrofit.RestAdapter.Log log81 = restAdapter63.log;
        retrofit.RestAdapter.Builder builder82 = builder61.setLog(log81);
        retrofit.RequestInterceptor requestInterceptor83 = builder61.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor84 = builder61.requestInterceptor;
        retrofit.RestAdapter.Builder builder86 = builder61.setServer("hi!");
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor88 = builder87.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor89 = builder87.requestInterceptor;
        retrofit.Profiler profiler90 = builder87.profiler;
        retrofit.RestAdapter.LogLevel logLevel91 = builder87.logLevel;
        retrofit.RestAdapter.Builder builder92 = builder86.setLogLevel(logLevel91);
        retrofit.RestAdapter.LogLevel logLevel93 = builder92.logLevel;
        builder31.logLevel = logLevel93;
        retrofit.converter.Converter converter95 = builder31.converter;
        retrofit.client.Client client96 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder97 = builder31.setClient(client96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter62);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(requestInterceptor83);
        org.junit.Assert.assertNull(requestInterceptor84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(executor88);
        org.junit.Assert.assertNull(requestInterceptor89);
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter95);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter2.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter2.requestInterceptor = requestInterceptor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        restAdapter2.log = log14;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter2.errorHandler = errorHandler18;
        retrofit.RestAdapter.Log log20 = restAdapter2.log;
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log20);
        retrofit.Profiler profiler22 = builder0.profiler;
        retrofit.converter.Converter converter23 = null;
        builder0.converter = converter23;
        retrofit.client.Client.Provider provider25 = builder0.clientProvider;
        java.util.concurrent.Executor executor26 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.httpExecutor = executor28;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        retrofit.client.Client.Provider provider32 = builder31.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        builder31.logLevel = logLevel33;
        retrofit.RestAdapter restAdapter36 = builder31.build();
        retrofit.converter.Converter converter37 = restAdapter36.converter;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.client.Client.Provider provider39 = null;
        restAdapter38.clientProvider = provider39;
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.RestAdapter.LogLevel logLevel44 = builder42.logLevel;
        restAdapter38.logLevel = logLevel44;
        boolean boolean46 = logLevel44.log();
        restAdapter36.logLevel = logLevel44;
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter36.getLogLevel();
        retrofit.ErrorHandler errorHandler49 = restAdapter36.errorHandler;
        retrofit.RestAdapter.Builder builder50 = builder0.setErrorHandler(errorHandler49);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(converter37);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        java.util.concurrent.Executor executor7 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter9 = restAdapter0.converter;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(converter9);
    }
}

