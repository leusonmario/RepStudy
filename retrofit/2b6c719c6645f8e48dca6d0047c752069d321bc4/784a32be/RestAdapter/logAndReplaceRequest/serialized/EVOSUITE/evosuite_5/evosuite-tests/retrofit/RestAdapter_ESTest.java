/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 19:13:30 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.graphics.drawable.AnimationDrawable;
import android.os.Bundle;
import com.google.gson.Gson;
import com.squareup.okhttp.OkHttpClient;
import java.lang.reflect.Method;
import java.net.Proxy;
import java.util.ArrayList;
import java.util.Map;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.DefaultedHttpParams;
import org.apache.http.params.HttpParams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.RestMethodInfo;
import retrofit.SerializedObjectSupporter;
import retrofit.Server;
import retrofit.android.AndroidLog;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.Request;
import retrofit.client.Response;
import retrofit.client.UrlConnectionClient;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.mime.MultipartTypedOutput;
import retrofit.mime.TypedByteArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "Lk3`JW=";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      Executor executor0 = restAdapter_Builder0.getcallbackExecutor();
      assertNull(executor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, restAdapter_Builder0.callbackExecutor);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder1.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(restAdapter_Builder1.requestInterceptor);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      String string0 = "net.bytebuddy.agent.builder.AgentBuilder$Default";
      restAdapter_Builder2.log.log(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder2.requestInterceptor);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      String string1 = null;
      restAdapter_Log0.log(string1);
      restAdapter_Builder3.setclientProvider(restAdapter_Builder2.clientProvider);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setProfiler(restAdapter_Builder1.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 229;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      restAdapter_Builder0.sethttpExecutor(scheduledThreadPoolExecutor0);
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, scheduledThreadPoolExecutor0, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      String string0 = restAdapter0.getTHREAD_PREFIX();
      assertNotNull(string0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-", string0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder2);
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder0));
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setExecutors(restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor);
      assertNotNull(restAdapter_Builder3);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setConverter(restAdapter_Builder0.converter);
      assertNotNull(restAdapter_Builder4);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder1);
      
      restAdapter_Builder2.ensureSaneDefaults();
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder0));
      assertNotSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      
      restAdapter_Builder3.setcallbackExecutor(restAdapter_Builder0.callbackExecutor);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder4));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      
      restAdapter_Builder2.logLevel = restAdapter_Builder0.logLevel;
      assertFalse(restAdapter_Builder2.logLevel.log());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setClient(restAdapter_Builder2.clientProvider);
      assertNotNull(restAdapter_Builder5);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder4));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      String string0 = ".#LJZQ$AP-he";
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder4.setServer(string0);
      assertNotNull(restAdapter_Builder6);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder4));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder5));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder6.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder6.equals((Object)restAdapter_Builder1));
      assertNotSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      
      RestAdapter restAdapter0 = restAdapter_Builder5.build();
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder6));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder4));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder5));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder0));
      assertNotSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      
      Profiler profiler0 = restAdapter0.getprofiler();
      assertNull(profiler0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder6));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder4));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder5));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder0));
      assertNotSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder7);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder6));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder4));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder5));
      assertFalse(restAdapter_Builder7.equals((Object)restAdapter_Builder5));
      assertFalse(restAdapter_Builder7.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder7.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder7.equals((Object)restAdapter_Builder6));
      assertFalse(restAdapter_Builder7.equals((Object)restAdapter_Builder4));
      assertNotSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder7, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder7, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder7, restAdapter_Builder3);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder7, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder7, restAdapter_Builder4);
      
      Client.Provider client_Provider0 = restAdapter0.getclientProvider();
      assertNotNull(client_Provider0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder6));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder4));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder5));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder0));
      assertNotSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      
      Executor executor0 = restAdapter0.gethttpExecutor();
      assertNotNull(executor0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder6));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder4));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder5));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder0));
      assertNotSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder4.setServer(restAdapter0.IDLE_THREAD_NAME);
      assertNotNull(restAdapter_Builder8);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder6));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder4));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder5));
      assertFalse(restAdapter_Builder8.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder8.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder8.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder0));
      assertNotSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder8);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder8, restAdapter_Builder5);
      assertSame(restAdapter_Builder8, restAdapter_Builder4);
      assertSame(restAdapter_Builder8, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder2);
      assertSame(restAdapter_Builder8, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder8, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder8, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder8, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder6));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder4));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder5));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder0));
      
      Method method0 = null;
      Object[] objectArray0 = null;
      try { 
        restAdapter_RestHandler0.invoke(executor0, method0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("java.time.Clock$OffsetClock", 1760);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "$W}W6@N5=k^/KA";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, client_Provider0, restAdapter_Builder1.httpExecutor, restAdapter_Builder1.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder1.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setClient(restAdapter0.clientProvider);
      assertNotNull(restAdapter_Builder3);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      Class<Object> class0 = Object.class;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(restAdapter0.requestInterceptor);
      assertNotNull(restAdapter_Builder4);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder5);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      restAdapter0.logException(mockThrowable0, string0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      
      Server server0 = restAdapter0.getserver();
      assertNotNull(server0);
      assertEquals("$W}W6@N5=k^/KA", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("$W}W6@N5=k^/KA", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = null;
      String string0 = "D1tC$/WCpM%%S{f_k";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNotNull(gsonConverter0);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder1);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 2;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setConverter(restAdapter_Builder2.converter);
      assertNotNull(restAdapter_Builder3);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder4);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      String string1 = "){e`[a4yxH)h^=}";
      gsonConverter0.encoding = string1;
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
      assertNotNull(restAdapter_Builder5);
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder2.server, client_Provider0, restAdapter_Builder2.callbackExecutor, scheduledThreadPoolExecutor0, restAdapter_Builder2.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder1.profiler, restAdapter_Builder2.errorHandler, restAdapter_Builder2.log, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      
      Server server0 = restAdapter0.getserver();
      assertNotNull(server0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("default", server0.getName());
      assertEquals("D1tC$/WCpM%%S{f_k", server0.getUrl());
      assertEquals("D1tC$/WCpM%%S{f_k", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter0.create(class0);
      assertNotNull(runnable0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.HEADERS;
      restAdapter0.setLogLevel(restAdapter_LogLevel2);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel1);
      assertNotNull(restAdapter_Builder6);
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel2);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setClient(restAdapter_Builder1.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder1);
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder0));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      boolean boolean0 = restAdapter_Builder1.logLevel.log();
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder0));
      assertNotSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder1);
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder0));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      boolean boolean0 = restAdapter_Builder1.logLevel.log();
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder0));
      assertNotSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 1429;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      ThreadPoolExecutor threadPoolExecutor0 = null;
      MockThread mockThread1 = null;
      ThreadPoolExecutor threadPoolExecutor1 = null;
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, threadPoolExecutor1);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      String string0 = ".SS`k{}eMy0Fn^Gq";
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(androidLog0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "";
      RestMethodInfo restMethodInfo0 = null;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Request request0 = serializedObjectSupporter0.deserializeObjectRequest2();
      assertNotNull(request0);
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("GET", request0.getMethod());
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string0, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "u%dkgbeM";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(restAdapter_Builder1.server);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      Client.Provider client_Provider0 = restAdapter_Builder3.getclientProvider();
      assertNull(client_Provider0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = restAdapter0.getrequestInterceptor();
      assertNotNull(requestInterceptor0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      String string1 = restAdapter0.getIDLE_THREAD_NAME();
      assertNotNull(string1);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertEquals("Retrofit-Idle", string1);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      String string0 = "J7";
      restAdapter_Builder2.setcallbackExecutor(restAdapter_Builder2.httpExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder1.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder1.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertNull(executor0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string1 = "(^Qa=Ai}3hy%{?=!?";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(string1);
      assertNotNull(restAdapter_Builder3);
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNull(executor1);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(restAdapter_LogLevel0.log());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "";
      RestMethodInfo restMethodInfo0 = null;
      Client.Provider client_Provider0 = null;
      int int0 = 0;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      Server server0 = null;
      Executor executor0 = null;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      boolean boolean0 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      assertFalse(boolean0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      GsonConverter gsonConverter1 = (GsonConverter)restAdapter0.getconverter();
      assertNotNull(gsonConverter1);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("UTF-8", gsonConverter1.getencoding());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertSame(gsonConverter1, gsonConverter0);
      assertSame(gsonConverter0, gsonConverter1);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Profiler<Runnable> profiler1 = (Profiler<Runnable>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log1 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log1);
      assertSame(restAdapter_Log1, restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      HttpParams httpParams0 = null;
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient(httpParams0);
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter1 = new RestAdapter(restAdapter_Builder0.server, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Log1, restAdapter_LogLevel1);
      assertNotNull(restAdapter1);
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter1.getLogLevel());
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      
      RestAdapter.LogLevel restAdapter_LogLevel3 = RestAdapter.LogLevel.BASIC;
      restAdapter1.setLogLevel(restAdapter_LogLevel3);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel3));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertFalse(restAdapter_LogLevel3.equals((Object)restAdapter_LogLevel1));
      assertSame(restAdapter_Log1, restAdapter_Log0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel3);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel2);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(restAdapter_LogLevel3, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel3, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel3, restAdapter_LogLevel2);
      
      Converter converter0 = restAdapter1.getconverter();
      assertNull(converter0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel3));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Log1, restAdapter_Log0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel3);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel2);
      assertNotSame(restAdapter1, restAdapter0);
      
      String string1 = "<[C)OK";
      String string2 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      MultipartTypedOutput multipartTypedOutput0 = new MultipartTypedOutput();
      assertNotNull(multipartTypedOutput0);
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals(42L, multipartTypedOutput0.length());
      
      Request request0 = new Request(restAdapter1.IDLE_THREAD_NAME, string2, arrayList0, multipartTypedOutput0);
      assertNotNull(request0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals("", request0.getUrl());
      assertEquals("Retrofit-Idle", request0.getMethod());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertFalse(string2.equals((Object)string1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel3));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertNotNull(request1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals("", request0.getUrl());
      assertEquals("Retrofit-Idle", request0.getMethod());
      assertEquals("Retrofit-Idle", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertFalse(string2.equals((Object)string1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel3));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(restAdapter_Log0, restAdapter_Log1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel3);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Log1, restAdapter_Log0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel3);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel2);
      assertNotSame(restAdapter1, restAdapter0);
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string1, restMethodInfo0, request1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider", 2048);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertNotNull(okClient0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder1);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      String string0 = "J7";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setServer(string0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder1.clientProvider, restAdapter_Builder3.callbackExecutor, restAdapter_Builder1.callbackExecutor, restAdapter_Builder4.requestInterceptor, restAdapter_Builder3.converter, restAdapter_Builder4.profiler, restAdapter_Builder4.errorHandler, restAdapter_Builder0.log, restAdapter_Builder4.logLevel);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertNull(executor0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      String string1 = "(^Qa=Ai}3hy%{?=!?";
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder0.setServer(string1);
      assertNotNull(restAdapter_Builder5);
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNull(executor1);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      assertNotNull(delayed0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setExecutors(restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setConverter(restAdapter_Builder0.converter);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      restAdapter_Builder2.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      
      restAdapter_Builder3.setcallbackExecutor(restAdapter_Builder0.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      restAdapter_Builder0.logLevel = restAdapter_Builder0.logLevel;
      assertFalse(restAdapter_Builder0.logLevel.log());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setClient(restAdapter_Builder2.clientProvider);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      String string0 = ".#LJZQ$AP-he";
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder4.setServer(string0);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder5.build();
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      
      Profiler profiler0 = restAdapter0.getprofiler();
      assertNull(profiler0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      
      Client.Provider client_Provider0 = restAdapter0.getclientProvider();
      assertNotNull(client_Provider0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder7);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      
      Executor executor0 = restAdapter0.gethttpExecutor();
      assertNotNull(executor0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder7);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder4.setServer(restAdapter0.IDLE_THREAD_NAME);
      assertNotNull(restAdapter_Builder8);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder1);
      assertSame(restAdapter_Builder8, restAdapter_Builder2);
      assertSame(restAdapter_Builder8, restAdapter_Builder4);
      assertSame(restAdapter_Builder8, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder0);
      assertSame(restAdapter_Builder8, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder3);
      assertSame(restAdapter_Builder8, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder8);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder7);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      
      ErrorHandler errorHandler0 = restAdapter0.geterrorHandler();
      assertNotNull(errorHandler0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder8);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder7);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Executor executor0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setExecutors(executor0, executor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder1);
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder0));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "retrofit.RestAdapter$Builder$1";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      BasicHttpParams basicHttpParams0 = new BasicHttpParams();
      assertNotNull(basicHttpParams0);
      
      DefaultedHttpParams defaultedHttpParams0 = new DefaultedHttpParams(basicHttpParams0, basicHttpParams0);
      assertNotNull(defaultedHttpParams0);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient(defaultedHttpParams0);
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "'X;";
      String string1 = "Converter may not be null.";
      Server server0 = new Server(string0, string1);
      assertNotNull(server0);
      assertEquals("'X;", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Converter may not be null.", server0.getName());
      assertEquals("'X;", server0.getapiUrl());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertEquals("'X;", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Converter may not be null.", server0.getName());
      assertEquals("'X;", server0.getapiUrl());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient(restAdapter_Builder0.clientProvider);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setExecutors(restAdapter_Builder1.httpExecutor, restAdapter_Builder1.httpExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "TU-E]%`r";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNotNull(gsonConverter0);
      assertEquals("TU-E]%`r", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder1);
      assertEquals("TU-E]%`r", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "YbeTY?i7RD$US|Fxwx1";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "\"#@#m_8e$D";
      restAdapter_Log0.log(string0);
      restAdapter_Log0.log(string0);
      String string1 = ",hq&mT5Q0S";
      restAdapter_Log0.log(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 2941;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Executor executor0 = null;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(scheduledThreadPoolExecutor0, executor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "o~{{1e";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestMethodInfo restMethodInfo0 = null;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) string0;
      objectArray0[2] = (Object) threadPoolExecutor_AbortPolicy0;
      objectArray0[3] = (Object) restAdapter0;
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(restAdapter_Builder2.requestInterceptor, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "Y4\\%x";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("Y4\\%x", server0.getapiUrl());
      assertEquals("Y4\\%x", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<Object> profiler0 = null;
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "py&QY+v}qIt^J";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("Y4\\%x", server0.getapiUrl());
      assertEquals("Y4\\%x", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter6();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Request request0 = serializedObjectSupporter0.deserializeObjectRequest3();
      assertNull(request0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      Class<String> class0 = String.class;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLog(restAdapter_Builder1.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      boolean boolean0 = forkJoinPool0.isShutdown();
      assertFalse(boolean0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      String string0 = "Q~G!aQkN";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertEquals("Q~G!aQkN", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Q~G!aQkN", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(server0);
      assertNotNull(restAdapter_Builder3);
      assertEquals("default", server0.getName());
      assertEquals("Q~G!aQkN", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Q~G!aQkN", server0.getUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setConverter(restAdapter_Builder1.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.sethttpExecutor(restAdapter_Builder0.httpExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = null;
      restAdapter_Builder0.setclientProvider(client_Provider0);
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client_Provider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      int int0 = 1429;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      ThreadPoolExecutor threadPoolExecutor0 = null;
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, threadPoolExecutor0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      restAdapter_Builder1.sethttpExecutor(scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      String string0 = ".SS`k{}eMy0Fn^Gq";
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLog(androidLog0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "vY75b6/rxz";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("vY75b6/rxz", server0.getUrl());
      assertEquals("vY75b6/rxz", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("vY75b6/rxz", server0.getapiUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 300;
      long long0 = 434L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      assertNotNull(linkedBlockingQueue0);
      
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, long0, timeUnit0, linkedBlockingQueue0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(threadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter7();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<String> profiler0 = null;
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, threadPoolExecutor0, threadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("vY75b6/rxz", server0.getUrl());
      assertEquals("vY75b6/rxz", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("vY75b6/rxz", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("vY75b6/rxz", server0.getUrl());
      assertEquals("vY75b6/rxz", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("vY75b6/rxz", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      restAdapter_Builder0.setcallbackExecutor(threadPoolExecutor0);
      String string1 = "n(TuJ.y98%QF";
      // Undeclared exception!
      try { 
        androidLog0.log(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      
      restAdapter_Builder0.ensureSaneDefaults();
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertNotNull(okClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      restAdapter_Builder0.ensureSaneDefaults();
      int int0 = 0;
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "$W}W6@N5=k^/KA";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, client_Provider0, restAdapter_Builder1.httpExecutor, restAdapter_Builder1.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder1.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setClient(restAdapter0.clientProvider);
      assertNotNull(restAdapter_Builder3);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      String string0 = serializedObjectSupporter0.deserializeObjectString3();
      assertNotNull(string0);
      assertEquals("GET", string0);
      
      RequestInterceptor requestInterceptor0 = null;
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter8();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      restAdapter_Log0.log(server0.DEFAULT_NAME);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Class<Object> class0 = Object.class;
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertTrue(restAdapter0.logLevel.log());
      
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Client.Provider client_Provider1 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      restAdapter_Builder0.setclientProvider(client_Provider1);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      boolean boolean0 = restAdapter_Builder1.logLevel.log();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "slJ9EJ";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("slJ9EJ", server0.getUrl());
      assertEquals("slJ9EJ", server0.getapiUrl());
      assertEquals("slJ9EJ", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("slJ9EJ", server0.getUrl());
      assertEquals("slJ9EJ", server0.getapiUrl());
      assertEquals("slJ9EJ", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("slJ9EJ", server0.getUrl());
      assertEquals("slJ9EJ", server0.getapiUrl());
      assertEquals("slJ9EJ", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Response response0 = null;
      long long0 = 6137L;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(server0.name, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      long long0 = 15000L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      assertNotNull(linkedTransferQueue0);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      int int0 = (-1866);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      ThreadFactory threadFactory1 = null;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      Class<String> class0 = String.class;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      assertTrue(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(restAdapter_LogLevel0.log());
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = null;
      String string0 = "D1tC$/WCpM%%S{f_k";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNotNull(gsonConverter0);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder1);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(gsonConverter0.encoding);
      assertNotNull(restAdapter_Builder3);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 2;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
      assertNotNull(restAdapter_Builder4);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder2.server, client_Provider0, restAdapter_Builder2.callbackExecutor, scheduledThreadPoolExecutor0, restAdapter_Builder2.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder1.profiler, restAdapter_Builder2.errorHandler, restAdapter_Builder2.log, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Server server0 = restAdapter0.getserver();
      assertNotNull(server0);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("D1tC$/WCpM%%S{f_k", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("D1tC$/WCpM%%S{f_k", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setClient(restAdapter_Builder1.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "slJ9EJ";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("slJ9EJ", server0.getUrl());
      assertEquals("slJ9EJ", server0.getapiUrl());
      assertEquals("slJ9EJ", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("slJ9EJ", server0.getUrl());
      assertEquals("slJ9EJ", server0.getapiUrl());
      assertEquals("slJ9EJ", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("slJ9EJ", server0.getUrl());
      assertEquals("slJ9EJ", server0.getapiUrl());
      assertEquals("slJ9EJ", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setLogLevel(restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("slJ9EJ", server0.getUrl());
      assertEquals("slJ9EJ", server0.getapiUrl());
      assertEquals("slJ9EJ", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setClient(restAdapter_Builder0.clientProvider);
      assertNotNull(restAdapter_Builder4);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("slJ9EJ", server0.getUrl());
      assertEquals("slJ9EJ", server0.getapiUrl());
      assertEquals("slJ9EJ", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      
      Executor executor0 = restAdapter_Builder4.gethttpExecutor();
      assertNull(executor0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("slJ9EJ", server0.getUrl());
      assertEquals("slJ9EJ", server0.getapiUrl());
      assertEquals("slJ9EJ", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Executor executor0 = restAdapter_Builder1.getcallbackExecutor();
      assertNull(executor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, executor0, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder1.profiler, restAdapter_Builder1.errorHandler, restAdapter_Log0, restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      ErrorHandler errorHandler0 = restAdapter0.geterrorHandler();
      assertNull(errorHandler0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Map<Method, RestMethodInfo> map0 = restAdapter_RestHandler0.getmethodDetailsCache();
      assertNotNull(map0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "$W}W6@N5=k^/KA";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, client_Provider0, restAdapter_Builder1.httpExecutor, restAdapter_Builder1.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder1.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setClient(restAdapter0.clientProvider);
      assertNotNull(restAdapter_Builder3);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      restAdapter_Builder3.setcallbackExecutor(restAdapter_Builder1.callbackExecutor);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertTrue(restAdapter0.logLevel.log());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      GsonConverter gsonConverter0 = (GsonConverter)restAdapter0.getconverter();
      assertNotNull(gsonConverter0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      
      int int0 = 0;
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      restAdapter_Builder0.setclientProvider(client_Provider0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(restAdapter_Builder0.clientProvider);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, restAdapter_Builder1.clientProvider, restAdapter_Builder1.callbackExecutor, restAdapter_Builder0.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder1.log, restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(restAdapter_LogLevel0.log());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "cf8";
      String string1 = null;
      Server server0 = new Server(string1);
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder1.clientProvider, restAdapter_Builder2.callbackExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder0.profiler, restAdapter_Builder2.errorHandler, restAdapter_Builder2.log, restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      String string2 = restAdapter0.getTHREAD_PREFIX();
      assertNotNull(string2);
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(string2.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(string2, string0);
      assertEquals("Retrofit-", string2);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.logLevel = restAdapter_LogLevel0;
      assertFalse(restAdapter_Builder1.logLevel.log());
      
      restAdapter_Builder1.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setExecutors(restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setConverter(restAdapter_Builder0.converter);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      
      restAdapter_Builder2.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel1;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setClient(restAdapter_Builder2.clientProvider);
      assertNotNull(restAdapter_Builder5);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder4.server, restAdapter_Builder2.clientProvider, restAdapter_Builder2.httpExecutor, restAdapter_Builder3.httpExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder2.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel2);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      
      String string0 = restAdapter0.getIDLE_THREAD_NAME();
      assertNotNull(string0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertEquals("Retrofit-Idle", string0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder5.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "$W}W6@N5=k^/KA";
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, client_Provider0, restAdapter_Builder1.httpExecutor, restAdapter_Builder1.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder1.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      Class<Object> class0 = Object.class;
      restAdapter0.serializedObjectSupporter = restAdapter_Builder0.serializedObjectSupporter;
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      Executor executor0 = restAdapter_Builder0.gethttpExecutor();
      assertNotNull(executor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder1.requestInterceptor);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      String string0 = "net.bytebuddy.agent.builder.AgentBuilder$Default";
      restAdapter_Builder3.log.log(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setErrorHandler(restAdapter_Builder1.errorHandler);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      restAdapter_Builder3.serializedObjectSupporter = serializedObjectSupporter0;
      String string1 = null;
      restAdapter_Log0.log(string1);
      restAdapter_Builder3.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      Executor executor0 = restAdapter_Builder4.getcallbackExecutor();
      assertNotNull(executor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      restAdapter_Builder4.setclientProvider(restAdapter_Builder3.clientProvider);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setProfiler(restAdapter_Builder1.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = null;
      String string0 = "D1tC$/WCpM%%S{f_k";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNotNull(gsonConverter0);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder1);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(gsonConverter0.encoding);
      assertNotNull(restAdapter_Builder3);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 2;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
      assertNotNull(restAdapter_Builder4);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder2.server, client_Provider0, restAdapter_Builder2.callbackExecutor, scheduledThreadPoolExecutor0, restAdapter_Builder2.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder1.profiler, restAdapter_Builder2.errorHandler, restAdapter_Builder2.log, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Server server0 = restAdapter0.getserver();
      assertNotNull(server0);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("D1tC$/WCpM%%S{f_k", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("D1tC$/WCpM%%S{f_k", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.HEADERS;
      restAdapter0.setLogLevel(restAdapter_LogLevel2);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel1);
      assertNotNull(restAdapter_Builder5);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setClient(restAdapter_Builder1.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "$W}W6@N5=k^/KA";
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, client_Provider0, restAdapter_Builder1.httpExecutor, restAdapter_Builder1.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder1.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient(restAdapter0.clientProvider);
      assertNotNull(restAdapter_Builder2);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      Class<Object> class0 = Object.class;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(restAdapter0.requestInterceptor);
      assertNotNull(restAdapter_Builder3);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      Server server0 = restAdapter0.getserver();
      assertNull(server0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "$W}Z6@N5Rk^/KA";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, client_Provider0, restAdapter_Builder1.httpExecutor, restAdapter_Builder1.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder1.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setClient(restAdapter0.clientProvider);
      assertNotNull(restAdapter_Builder3);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      Class<Object> class0 = Object.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      RequestInterceptor requestInterceptor0 = restAdapter0.getrequestInterceptor();
      assertNotNull(requestInterceptor0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      
      restAdapter_Builder3.setcallbackExecutor(restAdapter_Builder1.callbackExecutor);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertTrue(restAdapter0.logLevel.log());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      GsonConverter gsonConverter0 = (GsonConverter)restAdapter0.getconverter();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      
      int int0 = 0;
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "$W}W6@N5=k^/KA";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, client_Provider0, restAdapter_Builder1.httpExecutor, restAdapter_Builder1.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder1.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setClient(restAdapter0.clientProvider);
      assertNotNull(restAdapter_Builder3);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      Class<Object> class0 = Object.class;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(restAdapter0.requestInterceptor);
      assertNotNull(restAdapter_Builder4);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      
      Request request0 = null;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "$W}W6@N5=k^/KA";
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, client_Provider0, restAdapter_Builder1.httpExecutor, restAdapter_Builder1.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder1.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient(restAdapter0.clientProvider);
      assertNotNull(restAdapter_Builder2);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      Class<Object> class0 = Object.class;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(restAdapter0.requestInterceptor);
      assertNotNull(restAdapter_Builder3);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      Server server0 = restAdapter0.getserver();
      assertNull(server0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      
      restAdapter_Builder2.setcallbackExecutor(restAdapter_Builder1.callbackExecutor);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      String string1 = "";
      restAdapter0.logException(mockException0, string1);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(string1, string0);
      
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter0.logLevel.log());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      GsonConverter gsonConverter0 = (GsonConverter)restAdapter0.getconverter();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      
      int int0 = 0;
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      String string0 = "";
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Request request0 = serializedObjectSupporter0.deserializeObjectRequest2();
      assertNotNull(request0);
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      
      Server server0 = new Server(request0.url, request0.method);
      assertNotNull(server0);
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("http://example.com/", server0.getapiUrl());
      assertEquals("http://example.com/", server0.getUrl());
      assertEquals("GET", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      Client.Provider client_Provider0 = null;
      int int0 = 0;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<Runnable> profiler0 = (Profiler<Runnable>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(profiler0).toString();
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("http://example.com/", server0.getapiUrl());
      assertEquals("http://example.com/", server0.getUrl());
      assertEquals("GET", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("http://example.com/", server0.getapiUrl());
      assertEquals("http://example.com/", server0.getUrl());
      assertEquals("GET", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertTrue(restAdapter_LogLevel1.log());
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel1);
      
      Profiler profiler1 = restAdapter0.getprofiler();
      assertNotNull(profiler1);
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("http://example.com/", server0.getapiUrl());
      assertEquals("http://example.com/", server0.getUrl());
      assertEquals("GET", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      
      Executor executor0 = restAdapter0.gethttpExecutor();
      assertNotNull(executor0);
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("http://example.com/", server0.getapiUrl());
      assertEquals("http://example.com/", server0.getUrl());
      assertEquals("GET", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(executor0, scheduledThreadPoolExecutor0);
      assertSame(scheduledThreadPoolExecutor0, executor0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter0.log);
      assertNotNull(restAdapter_Builder1);
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("http://example.com/", server0.getapiUrl());
      assertEquals("http://example.com/", server0.getUrl());
      assertEquals("GET", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(scheduledThreadPoolExecutor0, executor0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0);
      assertNotNull(restAdapter_Builder2);
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("http://example.com/", server0.getapiUrl());
      assertEquals("http://example.com/", server0.getUrl());
      assertEquals("GET", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(scheduledThreadPoolExecutor0, executor0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setExecutors(executor0, restAdapter_Builder0.httpExecutor);
      assertNotNull(restAdapter_Builder3);
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("http://example.com/", server0.getapiUrl());
      assertEquals("http://example.com/", server0.getUrl());
      assertEquals("GET", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(scheduledThreadPoolExecutor0, executor0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(executor0, scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      HttpParams httpParams0 = null;
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient(httpParams0);
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder4);
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("http://example.com/", server0.getapiUrl());
      assertEquals("http://example.com/", server0.getUrl());
      assertEquals("GET", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(scheduledThreadPoolExecutor0, executor0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(executor0, scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setClient(client_Provider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = null;
      String string0 = "D1tC$/WCpM%%S{f_k";
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.HEADERS;
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.LogLevel restAdapter_LogLevel3 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, profiler0, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel3);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel3.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter_LogLevel3.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel3.equals((Object)restAdapter_LogLevel0));
      
      Client.Provider client_Provider0 = restAdapter0.getclientProvider();
      assertNull(client_Provider0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel3.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter_LogLevel3.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel3.equals((Object)restAdapter_LogLevel0));
      assertNotSame(restAdapter_LogLevel3, restAdapter_LogLevel2);
      assertNotSame(restAdapter_LogLevel3, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel3, restAdapter_LogLevel0);
      
      RestAdapter.LogLevel restAdapter_LogLevel4 = restAdapter0.getLogLevel();
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel4.log());
      assertFalse(restAdapter_LogLevel3.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter_LogLevel3.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel3.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel4.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel4.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel4.equals((Object)restAdapter_LogLevel2));
      assertNotSame(restAdapter_LogLevel3, restAdapter_LogLevel2);
      assertSame(restAdapter_LogLevel3, restAdapter_LogLevel4);
      assertNotSame(restAdapter_LogLevel3, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel3, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel4, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel4, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel4, restAdapter_LogLevel3);
      assertNotSame(restAdapter_LogLevel4, restAdapter_LogLevel2);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel4);
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Request request0 = serializedObjectSupporter0.deserializeObjectRequest2();
      assertNotNull(request0);
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertNotNull(server0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      
      Client.Provider client_Provider0 = null;
      int int0 = 0;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNull(gsonConverter0);
      
      Profiler<Runnable> profiler0 = (Profiler<Runnable>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(profiler0).toString();
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertTrue(restAdapter_LogLevel1.log());
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel1);
      
      Profiler profiler1 = restAdapter0.getprofiler();
      assertNotNull(profiler1);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      
      Executor executor0 = restAdapter0.gethttpExecutor();
      assertNotNull(executor0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(executor0, scheduledThreadPoolExecutor0);
      assertSame(scheduledThreadPoolExecutor0, executor0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter0.log);
      assertNotNull(restAdapter_Builder1);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(scheduledThreadPoolExecutor0, executor0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0);
      assertNotNull(restAdapter_Builder2);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(scheduledThreadPoolExecutor0, executor0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setExecutors(executor0, restAdapter_Builder0.httpExecutor);
      assertNotNull(restAdapter_Builder3);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(scheduledThreadPoolExecutor0, executor0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(executor0, scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      HttpParams httpParams0 = null;
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient(httpParams0);
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder4);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(scheduledThreadPoolExecutor0, executor0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(executor0, scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setClient(client_Provider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = null;
      String string0 = "D1tC$/WCpM%%S{f_k";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNotNull(gsonConverter0);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder1);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(gsonConverter0.encoding);
      assertNotNull(restAdapter_Builder3);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 2;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_Builder3.logLevel);
      assertNotNull(restAdapter_Builder4);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      String string1 = "){e`[a4yxH)h^=}";
      gsonConverter0.encoding = string1;
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
      assertNotNull(restAdapter_Builder5);
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder2.server, client_Provider0, restAdapter_Builder2.callbackExecutor, scheduledThreadPoolExecutor0, restAdapter_Builder2.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder1.profiler, restAdapter_Builder2.errorHandler, restAdapter_Builder2.log, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      
      Server server0 = restAdapter0.getserver();
      assertNotNull(server0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("D1tC$/WCpM%%S{f_k", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("D1tC$/WCpM%%S{f_k", server0.getapiUrl());
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter0.create(class0);
      assertNotNull(runnable0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.HEADERS;
      restAdapter0.setLogLevel(restAdapter_LogLevel2);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel1);
      assertNotNull(restAdapter_Builder6);
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setClient(restAdapter_Builder1.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = "";
      RestMethodInfo restMethodInfo0 = null;
      Client.Provider client_Provider0 = null;
      int int0 = 0;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      Server server0 = null;
      Executor executor0 = null;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      GsonConverter gsonConverter1 = (GsonConverter)restAdapter0.getconverter();
      assertNotNull(gsonConverter1);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("UTF-8", gsonConverter1.getencoding());
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(gsonConverter1, gsonConverter0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Profiler<Runnable> profiler1 = (Profiler<Runnable>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log1 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log1);
      assertSame(restAdapter_Log1, restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      HttpParams httpParams0 = null;
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient(httpParams0);
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter1 = new RestAdapter(restAdapter_Builder0.server, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Log1, restAdapter_LogLevel1);
      assertNotNull(restAdapter1);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      
      RestAdapter.LogLevel restAdapter_LogLevel3 = RestAdapter.LogLevel.BASIC;
      restAdapter1.setLogLevel(restAdapter_LogLevel3);
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter1.getLogLevel());
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel3));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertFalse(restAdapter_LogLevel3.equals((Object)restAdapter_LogLevel1));
      assertSame(restAdapter_Log1, restAdapter_Log0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel3);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel2);
      assertNotSame(restAdapter1, restAdapter0);
      assertNotSame(restAdapter_LogLevel3, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel3, restAdapter_LogLevel2);
      assertSame(restAdapter_LogLevel3, restAdapter_LogLevel0);
      
      Converter converter0 = restAdapter1.getconverter();
      assertNull(converter0);
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter1.getLogLevel());
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel3));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Log1, restAdapter_Log0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel3);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel2);
      assertNotSame(restAdapter1, restAdapter0);
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 229;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      restAdapter_Builder0.sethttpExecutor(scheduledThreadPoolExecutor0);
      long long0 = scheduledThreadPoolExecutor0.getTaskCount();
      assertEquals(0L, long0);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, scheduledThreadPoolExecutor0, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      String string0 = restAdapter0.getTHREAD_PREFIX();
      assertNotNull(string0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", string0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertNull(executor0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = null;
      String string0 = "D1tC$/WCpM%%S{f_k";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNotNull(gsonConverter0);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder1);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(gsonConverter0.encoding);
      assertNotNull(restAdapter_Builder3);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 2;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_Builder3.logLevel);
      assertNotNull(restAdapter_Builder4);
      assertEquals("D1tC$/WCpM%%S{f_k", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      String string1 = "){e`[a4yxH)h^=}";
      gsonConverter0.encoding = string1;
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
      assertNotNull(restAdapter_Builder5);
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder2.server, client_Provider0, restAdapter_Builder2.callbackExecutor, scheduledThreadPoolExecutor0, restAdapter_Builder2.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder1.profiler, restAdapter_Builder2.errorHandler, restAdapter_Builder2.log, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      
      Server server0 = restAdapter0.getserver();
      assertNotNull(server0);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("D1tC$/WCpM%%S{f_k", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("D1tC$/WCpM%%S{f_k", server0.getapiUrl());
      assertEquals("){e`[a4yxH)h^=}", gsonConverter0.getencoding());
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      String string2 = "ASA";
      Throwable throwable0 = null;
      MockThrowable mockThrowable0 = new MockThrowable(string2, throwable0);
      assertNotNull(mockThrowable0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        restAdapter0.logException(mockThrowable0, gsonConverter0.encoding);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 229;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      restAdapter_Builder0.sethttpExecutor(scheduledThreadPoolExecutor0);
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, scheduledThreadPoolExecutor0, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      restAdapter0.logLevel = restAdapter_Builder0.logLevel;
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter0.logLevel.log());
      
      String string0 = restAdapter0.getTHREAD_PREFIX();
      assertNotNull(string0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", string0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      Client.Provider client_Provider1 = restAdapter0.getclientProvider();
      assertNull(client_Provider1);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      String string0 = "";
      RestMethodInfo restMethodInfo0 = null;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Request request0 = serializedObjectSupporter0.deserializeObjectRequest3();
      assertNotNull(request0);
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("POST", request0.getMethod());
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string0, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "u%dkgbeM";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      Client.Provider client_Provider0 = restAdapter_Builder0.getclientProvider();
      assertNull(client_Provider0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = restAdapter0.getrequestInterceptor();
      assertNotNull(requestInterceptor0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      String string1 = restAdapter0.getIDLE_THREAD_NAME();
      assertNotNull(string1);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertEquals("Retrofit-Idle", string1);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertFalse(string0.equals((Object)string1));
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertNotNull(executor0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      String string0 = "J7";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setServer(string0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder1.clientProvider, restAdapter_Builder3.callbackExecutor, restAdapter_Builder1.callbackExecutor, restAdapter_Builder4.requestInterceptor, restAdapter_Builder3.converter, restAdapter_Builder4.profiler, restAdapter_Builder4.errorHandler, restAdapter_Builder0.log, restAdapter_Builder4.logLevel);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertNull(executor0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      
      String string1 = "(^Qa=Ai}3hy%{?=!?";
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder0.setServer(string1);
      assertNotNull(restAdapter_Builder5);
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNull(executor1);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      
      RequestInterceptor requestInterceptor0 = restAdapter0.getrequestInterceptor();
      assertNull(requestInterceptor0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
  }
}
