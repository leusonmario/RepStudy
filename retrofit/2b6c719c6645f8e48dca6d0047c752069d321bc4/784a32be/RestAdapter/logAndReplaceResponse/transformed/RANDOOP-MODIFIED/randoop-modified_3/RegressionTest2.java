import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test01001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01001");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = builder2.server;
        retrofit.RestAdapter.Log log4 = null;
        builder2.log = log4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel7 = builder6.logLevel;
        retrofit.RestAdapter.Builder builder8 = builder2.setLogLevel(logLevel7);
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("Retrofit-Idle");
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        builder19.logLevel = logLevel21;
        boolean boolean23 = logLevel21.log();
        builder12.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        builder12.requestInterceptor = requestInterceptor25;
        retrofit.converter.Converter converter27 = null;
        builder12.converter = converter27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.callbackExecutor;
        retrofit.Profiler profiler31 = builder29.profiler;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = builder34.server;
        retrofit.RestAdapter.Log log36 = null;
        builder34.log = log36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel39 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("Retrofit-Idle");
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Builder builder44 = builder33.setServer(server43);
        retrofit.RestAdapter restAdapter45 = builder44.build();
        java.util.concurrent.Executor executor46 = restAdapter45.callbackExecutor;
        builder12.httpExecutor = executor46;
        builder10.callbackExecutor = executor46;
        builder0.callbackExecutor = executor46;
        retrofit.Server server50 = builder0.server;
        retrofit.client.Client.Provider provider51 = builder0.clientProvider;
        java.lang.Class<?> wildcardClass52 = builder0.getClass();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(executor46);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test01002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01002");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel51);
        builder0.log = log27;
        java.util.concurrent.Executor executor56 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("Retrofit-Idle");
        retrofit.Server server66 = builder65.server;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.Server server76 = builder75.server;
        retrofit.RestAdapter.Log log77 = null;
        builder75.log = log77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel80 = builder79.logLevel;
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel80);
        retrofit.client.Client.Provider provider82 = builder75.clientProvider;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        builder75.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder74.setLog(log83);
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log83, logLevel86);
        retrofit.RestAdapter.Builder builder88 = builder0.setServer(server66);
        builder88.ensureSaneDefaults();
        retrofit.Profiler profiler90 = builder88.profiler;
        retrofit.client.Client.Provider provider91 = builder88.clientProvider;
        retrofit.Profiler profiler92 = null;
        builder88.profiler = profiler92;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(provider82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertNotNull(provider91);
    }

    @Test
    public void test01003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01003");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        java.util.concurrent.Executor executor5 = null;
        restAdapter0.callbackExecutor = executor5;
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.httpExecutor = executor7;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        builder10.logLevel = logLevel12;
        java.util.concurrent.Executor executor14 = null;
        builder10.callbackExecutor = executor14;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = null;
        restAdapter16.callbackExecutor = executor17;
        retrofit.converter.Converter converter19 = restAdapter16.converter;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        restAdapter16.log = log20;
        builder10.log = log20;
        restAdapter0.log = log20;
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter0.logLevel;
        retrofit.client.Response response26 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response28 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response26, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(logLevel24);
    }

    @Test
    public void test01004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01004");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.Server server2 = builder1.server;
        retrofit.RestAdapter.Log log3 = null;
        builder1.log = log3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder7 = builder1.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder1.clientProvider;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder1.log = log9;
        retrofit.RestAdapter.Builder builder11 = builder0.setLog(log9);
        retrofit.converter.Converter converter12 = null;
        builder0.converter = converter12;
        retrofit.RestAdapter.Log log14 = builder0.log;
        retrofit.ErrorHandler errorHandler15 = builder0.errorHandler;
        retrofit.Profiler profiler16 = null;
        builder0.profiler = profiler16;
        retrofit.client.Client.Provider provider18 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        builder19.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.client.Client.Provider provider30 = builder23.clientProvider;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        builder23.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("Retrofit-Idle");
        retrofit.Server server42 = builder41.server;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("Retrofit-Idle");
        retrofit.Server server60 = builder59.server;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = null;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = builder69.server;
        retrofit.RestAdapter.Log log71 = null;
        builder69.log = log71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel74 = builder73.logLevel;
        retrofit.RestAdapter.Builder builder75 = builder69.setLogLevel(logLevel74);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel74);
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel74);
        builder23.log = log50;
        retrofit.RestAdapter.Log log79 = builder23.log;
        builder19.log = log79;
        builder0.log = log79;
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log79);
    }

    @Test
    public void test01005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01005");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter15.new RestHandler();
        java.util.concurrent.Executor executor17 = restAdapter15.httpExecutor;
        java.util.concurrent.Executor executor18 = null;
        restAdapter15.callbackExecutor = executor18;
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter15.errorHandler = errorHandler20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel22;
        builder0.logLevel = logLevel22;
        retrofit.ErrorHandler errorHandler25 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder27 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter28.logLevel;
        retrofit.ErrorHandler errorHandler31 = restAdapter28.errorHandler;
        retrofit.converter.Converter converter32 = null;
        restAdapter28.converter = converter32;
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("Retrofit-Idle");
        retrofit.Server server44 = builder43.server;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        builder52.logLevel = logLevel54;
        boolean boolean56 = logLevel54.log();
        builder45.logLevel = logLevel54;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        builder45.requestInterceptor = requestInterceptor58;
        retrofit.converter.Converter converter60 = null;
        builder45.converter = converter60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = builder62.callbackExecutor;
        retrofit.Profiler profiler64 = builder62.profiler;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        retrofit.RestAdapter.Log log69 = null;
        builder67.log = log69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel72 = builder71.logLevel;
        retrofit.RestAdapter.Builder builder73 = builder67.setLogLevel(logLevel72);
        retrofit.RestAdapter.Builder builder75 = builder73.setServer("Retrofit-Idle");
        retrofit.Server server76 = builder75.server;
        retrofit.RestAdapter.Builder builder77 = builder66.setServer(server76);
        retrofit.RestAdapter restAdapter78 = builder77.build();
        java.util.concurrent.Executor executor79 = restAdapter78.callbackExecutor;
        builder45.httpExecutor = executor79;
        builder43.callbackExecutor = executor79;
        restAdapter28.httpExecutor = executor79;
        builder27.callbackExecutor = executor79;
        java.util.concurrent.Executor executor84 = builder27.callbackExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(profiler64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNotNull(executor84);
    }

    @Test
    public void test01006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01006");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.RestAdapter restAdapter10 = builder8.build();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor14 = restAdapter12.httpExecutor;
        java.util.concurrent.Executor executor15 = null;
        restAdapter12.callbackExecutor = executor15;
        retrofit.ErrorHandler errorHandler17 = null;
        restAdapter12.errorHandler = errorHandler17;
        retrofit.client.Client.Provider provider19 = null;
        restAdapter12.clientProvider = provider19;
        retrofit.client.Client.Provider provider21 = null;
        restAdapter12.clientProvider = provider21;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider24 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.RestAdapter restAdapter35 = builder33.build();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter38.new RestHandler();
        java.util.concurrent.Executor executor40 = restAdapter38.httpExecutor;
        java.util.concurrent.Executor executor41 = null;
        restAdapter38.callbackExecutor = executor41;
        retrofit.client.Client.Provider provider43 = null;
        restAdapter38.clientProvider = provider43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("Retrofit-Idle");
        retrofit.Server server54 = builder53.server;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder71 = builder69.setServer("Retrofit-Idle");
        retrofit.Server server72 = builder71.server;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = null;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.Server server82 = builder81.server;
        retrofit.RestAdapter.Log log83 = null;
        builder81.log = log83;
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel86 = builder85.logLevel;
        retrofit.RestAdapter.Builder builder87 = builder81.setLogLevel(logLevel86);
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel86);
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel86);
        restAdapter38.log = log62;
        log62.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder93 = builder36.setLog(log62);
        builder33.log = log62;
        retrofit.RestAdapter.Log log95 = builder33.log;
        retrofit.client.Client.Provider provider96 = builder33.clientProvider;
        restAdapter12.clientProvider = provider96;
        restAdapter10.clientProvider = provider96;
        retrofit.RestAdapter.RestHandler restHandler99 = restAdapter10.new RestHandler();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNull(server82);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(log95);
        org.junit.Assert.assertNotNull(provider96);
    }

    @Test
    public void test01007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01007");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        java.util.concurrent.Executor executor23 = builder20.httpExecutor;
        retrofit.RestAdapter.Builder builder25 = builder20.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel26 = builder20.logLevel;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = null;
        restAdapter27.callbackExecutor = executor28;
        retrofit.converter.Converter converter30 = restAdapter27.converter;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter27.log;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("Retrofit-Idle");
        retrofit.Server server42 = builder41.server;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = null;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel56);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel56);
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = builder66.server;
        retrofit.RestAdapter.Log log68 = null;
        builder66.log = log68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = builder70.server;
        retrofit.RestAdapter.Log log72 = null;
        builder70.log = log72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel75 = builder74.logLevel;
        retrofit.RestAdapter.Builder builder76 = builder70.setLogLevel(logLevel75);
        retrofit.client.Client.Provider provider77 = builder70.clientProvider;
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        builder70.log = log78;
        retrofit.RestAdapter.Builder builder80 = builder66.setLog(log78);
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server42, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log78, logLevel81);
        restAdapter27.server = server42;
        retrofit.RestAdapter.Builder builder84 = builder20.setServer(server42);
        builder8.server = server42;
        retrofit.RestAdapter.LogLevel logLevel86 = builder8.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder88 = builder8.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(provider77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01008");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel51);
        builder0.log = log27;
        retrofit.RestAdapter.Log log56 = builder0.log;
        log56.log("");
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log56);
    }

    @Test
    public void test01009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01009");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor3 = builder2.callbackExecutor;
        retrofit.Profiler profiler4 = builder2.profiler;
        retrofit.RestAdapter.Builder builder6 = builder2.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Builder builder17 = builder6.setServer(server16);
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider32 = builder25.clientProvider;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        builder25.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("Retrofit-Idle");
        retrofit.Server server44 = builder43.server;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("Retrofit-Idle");
        retrofit.Server server62 = builder61.server;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = null;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel76);
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel76);
        builder25.log = log52;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel85 = builder84.logLevel;
        builder83.logLevel = logLevel85;
        builder81.logLevel = logLevel85;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server16, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log52, logLevel85);
        builder0.server = server16;
        retrofit.RestAdapter.Builder builder90 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor91 = builder90.callbackExecutor;
        retrofit.Profiler profiler92 = builder90.profiler;
        retrofit.RestAdapter.Builder builder94 = builder90.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter95 = builder94.converter;
        retrofit.RestAdapter.LogLevel logLevel96 = builder94.logLevel;
        retrofit.RestAdapter.Builder builder97 = builder0.setLogLevel(logLevel96);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder99 = builder97.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor91);
        org.junit.Assert.assertNull(profiler92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(converter95);
        org.junit.Assert.assertTrue("'" + logLevel96 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel96.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test01010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01010");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.Server server32 = builder31.server;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel46);
        restAdapter0.server = server14;
        retrofit.Profiler profiler51 = null;
        restAdapter0.profiler = profiler51;
        java.util.concurrent.Executor executor53 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter0.requestInterceptor;
        retrofit.client.Client.Provider provider55 = restAdapter0.clientProvider;
        java.lang.Throwable throwable56 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable56, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNull(provider55);
    }

    @Test
    public void test01011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01011");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = null;
        restAdapter15.callbackExecutor = executor16;
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.converter.Converter converter19 = restAdapter15.converter;
        java.util.concurrent.Executor executor20 = null;
        restAdapter15.callbackExecutor = executor20;
        java.util.concurrent.Executor executor22 = null;
        restAdapter15.httpExecutor = executor22;
        java.util.concurrent.Executor executor24 = restAdapter15.httpExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        builder25.logLevel = logLevel27;
        java.util.concurrent.Executor executor29 = null;
        builder25.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = null;
        restAdapter31.callbackExecutor = executor32;
        retrofit.converter.Converter converter34 = restAdapter31.converter;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        restAdapter31.log = log35;
        builder25.log = log35;
        restAdapter15.log = log35;
        builder14.log = log35;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("Retrofit-Idle");
        retrofit.Server server49 = builder48.server;
        retrofit.Profiler profiler50 = null;
        builder48.profiler = profiler50;
        retrofit.Profiler profiler52 = null;
        builder48.profiler = profiler52;
        retrofit.RestAdapter restAdapter54 = builder48.build();
        retrofit.ErrorHandler errorHandler55 = builder48.errorHandler;
        builder14.errorHandler = errorHandler55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("Retrofit-Idle");
        retrofit.Server server66 = builder65.server;
        java.util.concurrent.Executor executor67 = builder65.httpExecutor;
        java.util.concurrent.Executor executor68 = builder65.callbackExecutor;
        retrofit.ErrorHandler errorHandler69 = null;
        builder65.errorHandler = errorHandler69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        java.util.concurrent.Executor executor78 = builder77.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor79 = builder77.requestInterceptor;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.Server server81 = builder80.server;
        retrofit.RestAdapter.Log log82 = null;
        builder80.log = log82;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel85 = builder84.logLevel;
        retrofit.RestAdapter.Builder builder86 = builder80.setLogLevel(logLevel85);
        retrofit.RestAdapter.Builder builder88 = builder86.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter89 = builder88.build();
        retrofit.Profiler profiler90 = null;
        builder88.profiler = profiler90;
        retrofit.Profiler profiler92 = null;
        builder88.profiler = profiler92;
        retrofit.converter.Converter converter94 = builder88.converter;
        retrofit.RestAdapter.Builder builder95 = builder77.setConverter(converter94);
        retrofit.RestAdapter.Builder builder96 = builder65.setConverter(converter94);
        retrofit.RestAdapter.Builder builder97 = builder14.setConverter(converter94);
        retrofit.RestAdapter.LogLevel logLevel98 = builder97.logLevel;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(errorHandler55);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNull(requestInterceptor79);
        org.junit.Assert.assertNull(server81);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(converter94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertTrue("'" + logLevel98 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel98.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01012");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.Server server2 = builder1.server;
        retrofit.RestAdapter.Log log3 = null;
        builder1.log = log3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder7 = builder1.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder1.clientProvider;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder1.log = log9;
        retrofit.RestAdapter.Builder builder11 = builder0.setLog(log9);
        builder0.ensureSaneDefaults();
        retrofit.Server server13 = builder0.server;
        retrofit.Profiler profiler14 = null;
        builder0.profiler = profiler14;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter16 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(server13);
    }

    @Test
    public void test01013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01013");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = builder6.server;
        retrofit.RestAdapter.Log log8 = null;
        builder6.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel11 = builder10.logLevel;
        retrofit.RestAdapter.Builder builder12 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder16 = builder14.setLog(log15);
        java.util.concurrent.Executor executor17 = builder14.httpExecutor;
        java.util.concurrent.Executor executor18 = null;
        builder14.httpExecutor = executor18;
        retrofit.RestAdapter restAdapter20 = builder14.build();
        retrofit.RestAdapter.Log log21 = builder14.log;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.RestAdapter restAdapter32 = builder30.build();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        java.util.concurrent.Executor executor37 = restAdapter35.httpExecutor;
        java.util.concurrent.Executor executor38 = null;
        restAdapter35.callbackExecutor = executor38;
        retrofit.client.Client.Provider provider40 = null;
        restAdapter35.clientProvider = provider40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("Retrofit-Idle");
        retrofit.Server server51 = builder50.server;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = builder60.server;
        retrofit.RestAdapter.Log log62 = null;
        builder60.log = log62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel65 = builder64.logLevel;
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder68 = builder66.setServer("Retrofit-Idle");
        retrofit.Server server69 = builder68.server;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = null;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.Server server79 = builder78.server;
        retrofit.RestAdapter.Log log80 = null;
        builder78.log = log80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        retrofit.RestAdapter.Builder builder84 = builder78.setLogLevel(logLevel83);
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel83);
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel83);
        restAdapter35.log = log59;
        log59.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder90 = builder33.setLog(log59);
        builder30.log = log59;
        retrofit.ErrorHandler errorHandler92 = builder30.errorHandler;
        retrofit.RestAdapter.Builder builder93 = builder14.setErrorHandler(errorHandler92);
        retrofit.RestAdapter.Builder builder94 = builder0.setErrorHandler(errorHandler92);
        retrofit.RequestInterceptor requestInterceptor95 = builder0.requestInterceptor;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass96 = requestInterceptor95.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(server69);
        org.junit.Assert.assertNull(server79);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(errorHandler92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(requestInterceptor95);
    }

    @Test
    public void test01014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01014");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = null;
        restAdapter0.errorHandler = errorHandler3;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.client.Response response7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response9 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response7, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
    }

    @Test
    public void test01015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01015");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        retrofit.RestAdapter.Log log11 = builder8.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = builder12.callbackExecutor;
        retrofit.Profiler profiler14 = builder12.profiler;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("Retrofit-Idle");
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Builder builder27 = builder16.setServer(server26);
        retrofit.RestAdapter restAdapter28 = builder27.build();
        retrofit.client.Client.Provider provider29 = null;
        restAdapter28.clientProvider = provider29;
        retrofit.RestAdapter.Log log31 = restAdapter28.log;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = builder8.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = builder34.server;
        java.util.concurrent.Executor executor36 = null;
        builder34.httpExecutor = executor36;
        retrofit.Server server38 = builder34.server;
        retrofit.RestAdapter.LogLevel logLevel39 = builder34.logLevel;
        retrofit.ErrorHandler errorHandler40 = builder34.errorHandler;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        builder41.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("Retrofit-Idle");
        retrofit.Server server54 = builder53.server;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel68);
        retrofit.client.Client.Provider provider70 = builder63.clientProvider;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        builder63.log = log71;
        retrofit.RestAdapter.Builder builder73 = builder62.setLog(log71);
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log71, logLevel74);
        builder41.logLevel = logLevel74;
        retrofit.RestAdapter.LogLevel logLevel77 = builder41.logLevel;
        retrofit.Profiler profiler78 = builder41.profiler;
        retrofit.RestAdapter.Builder builder80 = builder41.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.Server server82 = builder81.server;
        retrofit.RestAdapter.Log log83 = null;
        builder81.log = log83;
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel86 = builder85.logLevel;
        retrofit.RestAdapter.Builder builder87 = builder81.setLogLevel(logLevel86);
        retrofit.RestAdapter.Builder builder89 = builder87.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter90 = builder89.build();
        retrofit.Profiler profiler91 = null;
        builder89.profiler = profiler91;
        retrofit.Profiler profiler93 = null;
        builder89.profiler = profiler93;
        retrofit.converter.Converter converter95 = builder89.converter;
        builder80.converter = converter95;
        retrofit.RestAdapter.Builder builder97 = builder34.setConverter(converter95);
        retrofit.converter.Converter converter98 = builder97.converter;
        retrofit.RestAdapter.Builder builder99 = builder8.setConverter(converter98);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(server82);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(restAdapter90);
        org.junit.Assert.assertNotNull(converter95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(converter98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01016");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.callbackExecutor = executor7;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("Retrofit-Idle");
        retrofit.Server server22 = builder21.server;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        builder30.logLevel = logLevel32;
        boolean boolean34 = logLevel32.log();
        builder23.logLevel = logLevel32;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder23.requestInterceptor = requestInterceptor36;
        retrofit.converter.Converter converter38 = null;
        builder23.converter = converter38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = builder40.callbackExecutor;
        retrofit.Profiler profiler42 = builder40.profiler;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("Retrofit-Idle");
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Builder builder55 = builder44.setServer(server54);
        retrofit.RestAdapter restAdapter56 = builder55.build();
        java.util.concurrent.Executor executor57 = restAdapter56.callbackExecutor;
        builder23.httpExecutor = executor57;
        builder21.callbackExecutor = executor57;
        builder11.callbackExecutor = executor57;
        restAdapter0.callbackExecutor = executor57;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel67 = builder66.logLevel;
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel67);
        retrofit.RequestInterceptor requestInterceptor69 = null;
        builder62.requestInterceptor = requestInterceptor69;
        retrofit.RestAdapter.Log log71 = builder62.log;
        retrofit.RequestInterceptor requestInterceptor72 = builder62.requestInterceptor;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = builder73.server;
        java.util.concurrent.Executor executor75 = null;
        builder73.httpExecutor = executor75;
        retrofit.Server server77 = builder73.server;
        retrofit.RestAdapter.LogLevel logLevel78 = builder73.logLevel;
        retrofit.ErrorHandler errorHandler79 = builder73.errorHandler;
        retrofit.RestAdapter.Builder builder81 = builder73.setServer("Retrofit-Idle");
        retrofit.Server server82 = builder81.server;
        builder62.server = server82;
        restAdapter0.server = server82;
        retrofit.converter.Converter converter85 = restAdapter0.converter;
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNull(converter85);
    }

    @Test
    public void test01017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01017");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RequestInterceptor requestInterceptor16 = builder15.requestInterceptor;
        retrofit.RestAdapter.Log log17 = builder15.log;
        retrofit.Profiler profiler18 = null;
        builder15.profiler = profiler18;
        retrofit.Profiler profiler20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder15.setProfiler(profiler20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(log17);
    }

    @Test
    public void test01018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01018");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder0.requestInterceptor = requestInterceptor13;
        java.util.concurrent.Executor executor15 = null;
        builder0.httpExecutor = executor15;
        retrofit.converter.Converter converter17 = null;
        builder0.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = builder19.callbackExecutor;
        retrofit.Profiler profiler21 = builder19.profiler;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel29 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("Retrofit-Idle");
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Builder builder34 = builder23.setServer(server33);
        retrofit.RestAdapter restAdapter35 = builder34.build();
        retrofit.RestAdapter.Log log36 = builder34.log;
        retrofit.Profiler profiler37 = builder34.profiler;
        retrofit.Server server38 = builder34.server;
        retrofit.RestAdapter.Builder builder39 = builder0.setServer(server38);
        retrofit.Profiler profiler40 = null;
        builder0.profiler = profiler40;
        retrofit.RestAdapter restAdapter42 = builder0.build();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter42);
    }

    @Test
    public void test01019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01019");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Builder builder20 = builder17.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter21.new RestHandler();
        java.util.concurrent.Executor executor23 = restAdapter21.httpExecutor;
        java.util.concurrent.Executor executor24 = null;
        restAdapter21.callbackExecutor = executor24;
        retrofit.client.Client.Provider provider26 = null;
        restAdapter21.clientProvider = provider26;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter21.logLevel;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        builder29.logLevel = logLevel31;
        java.util.concurrent.Executor executor33 = null;
        builder29.callbackExecutor = executor33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = null;
        restAdapter35.callbackExecutor = executor36;
        retrofit.converter.Converter converter38 = restAdapter35.converter;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        restAdapter35.log = log39;
        builder29.log = log39;
        restAdapter21.log = log39;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel48 = builder47.logLevel;
        retrofit.RestAdapter.Builder builder49 = builder43.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter52 = builder51.build();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.logLevel;
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter52.requestInterceptor;
        restAdapter21.requestInterceptor = requestInterceptor54;
        builder17.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter.Builder builder57 = builder0.setRequestInterceptor(requestInterceptor54);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder59 = builder57.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test01020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01020");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.Server server32 = builder31.server;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel46);
        restAdapter0.server = server14;
        retrofit.client.Client.Provider provider51 = null;
        restAdapter0.clientProvider = provider51;
        retrofit.client.Client.Provider provider53 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter54 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNull(converter54);
    }

    @Test
    public void test01021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01021");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.Server server4 = builder3.server;
        java.util.concurrent.Executor executor5 = null;
        builder3.httpExecutor = executor5;
        retrofit.Server server7 = builder3.server;
        java.util.concurrent.Executor executor8 = null;
        builder3.callbackExecutor = executor8;
        retrofit.Server server10 = builder3.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel16 = builder15.logLevel;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("Retrofit-Idle");
        retrofit.Server server26 = builder25.server;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.client.Client.Provider provider42 = builder35.clientProvider;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        builder35.log = log43;
        retrofit.RestAdapter.Builder builder45 = builder34.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log43, logLevel46);
        retrofit.RestAdapter.Builder builder48 = builder15.setServer(server26);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder57 = builder55.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter58 = builder57.build();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.logLevel;
        retrofit.RequestInterceptor requestInterceptor60 = restAdapter58.requestInterceptor;
        retrofit.RestAdapter.Builder builder61 = builder48.setRequestInterceptor(requestInterceptor60);
        retrofit.RestAdapter.Builder builder62 = builder11.setRequestInterceptor(requestInterceptor60);
        retrofit.RestAdapter.Builder builder63 = builder3.setRequestInterceptor(requestInterceptor60);
        retrofit.RestAdapter.Builder builder64 = builder0.setRequestInterceptor(requestInterceptor60);
        retrofit.client.Client.Provider provider65 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor66 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(provider65);
        org.junit.Assert.assertNotNull(requestInterceptor66);
    }

    @Test
    public void test01022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01022");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        builder8.logLevel = logLevel10;
        java.util.concurrent.Executor executor12 = null;
        builder8.callbackExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = null;
        restAdapter14.callbackExecutor = executor15;
        retrofit.converter.Converter converter17 = restAdapter14.converter;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        restAdapter14.log = log18;
        builder8.log = log18;
        restAdapter0.log = log18;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter31 = builder30.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.logLevel;
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter31.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor33;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter0.requestInterceptor = requestInterceptor35;
        java.util.concurrent.Executor executor37 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.callbackExecutor;
        retrofit.Profiler profiler40 = builder38.profiler;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel48 = builder47.logLevel;
        retrofit.RestAdapter.Builder builder49 = builder43.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("Retrofit-Idle");
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Builder builder53 = builder42.setServer(server52);
        retrofit.RestAdapter restAdapter54 = builder53.build();
        java.util.concurrent.Executor executor55 = restAdapter54.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.ErrorHandler errorHandler57 = restAdapter54.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter54.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(errorHandler57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01023");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor8 = builder6.requestInterceptor;
        java.util.concurrent.Executor executor9 = builder6.callbackExecutor;
        java.util.concurrent.Executor executor10 = builder6.httpExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
    }

    @Test
    public void test01024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01024");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        builder23.logLevel = logLevel25;
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.client.Client.Provider provider47 = builder40.clientProvider;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        builder40.log = log48;
        retrofit.RestAdapter.Builder builder50 = builder36.setLog(log48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider62 = builder55.clientProvider;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        builder55.log = log63;
        retrofit.RestAdapter.Builder builder65 = builder51.setLog(log63);
        retrofit.RestAdapter.Builder builder66 = builder36.setLog(log63);
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        java.util.concurrent.Executor executor69 = null;
        builder67.httpExecutor = executor69;
        retrofit.Server server71 = builder67.server;
        retrofit.RestAdapter.LogLevel logLevel72 = builder67.logLevel;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server14, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log63, logLevel72);
        restAdapter0.server = server14;
        java.lang.Class<?> wildcardClass75 = restAdapter0.getClass();
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test01025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01025");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        java.util.concurrent.Executor executor5 = null;
        restAdapter0.callbackExecutor = executor5;
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.httpExecutor = executor7;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        builder10.logLevel = logLevel12;
        java.util.concurrent.Executor executor14 = null;
        builder10.callbackExecutor = executor14;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = null;
        restAdapter16.callbackExecutor = executor17;
        retrofit.converter.Converter converter19 = restAdapter16.converter;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        restAdapter16.log = log20;
        builder10.log = log20;
        restAdapter0.log = log20;
        retrofit.client.Client.Provider provider24 = restAdapter0.clientProvider;
        retrofit.client.Client.Provider provider25 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = builder26.server;
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        builder33.logLevel = logLevel35;
        boolean boolean37 = logLevel35.log();
        builder26.logLevel = logLevel35;
        retrofit.RestAdapter.LogLevel logLevel39 = builder26.logLevel;
        boolean boolean40 = logLevel39.log();
        boolean boolean41 = logLevel39.log();
        restAdapter0.logLevel = logLevel39;
        retrofit.client.Request request43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request44 = restAdapter0.logAndReplaceRequest(request43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test01026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01026");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder0.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.Server server18 = builder17.server;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("Retrofit-Idle");
        retrofit.Server server36 = builder35.server;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel50);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel50);
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = builder61.server;
        retrofit.RestAdapter.Log log63 = null;
        builder61.log = log63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.client.Client.Provider provider72 = builder65.clientProvider;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        builder65.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder61.setLog(log73);
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        retrofit.RestAdapter.Log log78 = null;
        builder76.log = log78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel81 = builder80.logLevel;
        retrofit.RestAdapter.Builder builder82 = builder76.setLogLevel(logLevel81);
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server18, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log73, logLevel81);
        builder0.log = log73;
        retrofit.RestAdapter.LogLevel logLevel85 = null;
        builder0.logLevel = logLevel85;
        retrofit.client.Client.Provider provider87 = builder0.clientProvider;
        retrofit.client.Client client88 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder89 = builder0.setClient(client88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(provider72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(provider87);
    }

    @Test
    public void test01027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01027");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter5.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter5.logLevel;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.client.Client.Provider provider16 = builder9.clientProvider;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        builder9.log = log17;
        retrofit.RestAdapter.Builder builder19 = builder8.setLog(log17);
        retrofit.converter.Converter converter20 = null;
        builder8.converter = converter20;
        retrofit.RestAdapter.Log log22 = builder8.log;
        restAdapter5.log = log22;
        restAdapter0.log = log22;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter25.new RestHandler();
        java.util.concurrent.Executor executor27 = restAdapter25.httpExecutor;
        java.util.concurrent.Executor executor28 = null;
        restAdapter25.callbackExecutor = executor28;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter25.errorHandler = errorHandler30;
        retrofit.client.Client.Provider provider32 = null;
        restAdapter25.clientProvider = provider32;
        retrofit.client.Client.Provider provider34 = null;
        restAdapter25.clientProvider = provider34;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.Profiler profiler39 = builder37.profiler;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("Retrofit-Idle");
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Builder builder52 = builder41.setServer(server51);
        retrofit.RestAdapter.Log log53 = builder52.log;
        retrofit.RestAdapter.LogLevel logLevel54 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        builder62.logLevel = logLevel64;
        boolean boolean66 = logLevel64.log();
        builder55.logLevel = logLevel64;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        builder55.requestInterceptor = requestInterceptor68;
        retrofit.converter.Converter converter70 = null;
        builder55.converter = converter70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = builder72.callbackExecutor;
        retrofit.Profiler profiler74 = builder72.profiler;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server78 = builder77.server;
        retrofit.RestAdapter.Log log79 = null;
        builder77.log = log79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        retrofit.RestAdapter.Builder builder83 = builder77.setLogLevel(logLevel82);
        retrofit.RestAdapter.Builder builder85 = builder83.setServer("Retrofit-Idle");
        retrofit.Server server86 = builder85.server;
        retrofit.RestAdapter.Builder builder87 = builder76.setServer(server86);
        retrofit.RestAdapter restAdapter88 = builder87.build();
        java.util.concurrent.Executor executor89 = restAdapter88.callbackExecutor;
        builder55.httpExecutor = executor89;
        builder52.httpExecutor = executor89;
        restAdapter25.callbackExecutor = executor89;
        restAdapter0.callbackExecutor = executor89;
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(profiler74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(server78);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(executor89);
    }

    @Test
    public void test01028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01028");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        retrofit.Profiler profiler11 = builder10.profiler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.Server server21 = builder20.server;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder10.setServer(server21);
        retrofit.converter.Converter converter39 = null;
        builder10.converter = converter39;
        java.util.concurrent.Executor executor41 = null;
        builder10.callbackExecutor = executor41;
        retrofit.RequestInterceptor requestInterceptor43 = builder10.requestInterceptor;
        retrofit.RestAdapter.Builder builder45 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Log log52 = null;
        builder50.log = log52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel55 = builder54.logLevel;
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel55);
        retrofit.client.Client.Provider provider57 = builder50.clientProvider;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        builder50.log = log58;
        retrofit.RestAdapter.Builder builder60 = builder46.setLog(log58);
        retrofit.Server server61 = builder46.server;
        java.util.concurrent.Executor executor62 = null;
        builder46.callbackExecutor = executor62;
        retrofit.converter.Converter converter64 = builder46.converter;
        retrofit.Profiler profiler65 = builder46.profiler;
        retrofit.client.Client.Provider provider66 = builder46.clientProvider;
        retrofit.client.Client.Provider provider67 = builder46.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel68 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder69 = builder45.setLogLevel(logLevel68);
        retrofit.client.Client client70 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder71 = builder45.setClient(client70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertNull(converter64);
        org.junit.Assert.assertNull(profiler65);
        org.junit.Assert.assertNull(provider66);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test01029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01029");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = builder8.server;
        retrofit.RestAdapter.Log log10 = null;
        builder8.log = log10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        retrofit.RestAdapter.Builder builder14 = builder8.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("Retrofit-Idle");
        retrofit.Server server17 = builder16.server;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = builder26.server;
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel31);
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel31);
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.client.Client.Provider provider52 = builder45.clientProvider;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        builder45.log = log53;
        retrofit.RestAdapter.Builder builder55 = builder41.setLog(log53);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server17, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log53, logLevel56);
        retrofit.converter.Converter converter58 = null;
        restAdapter57.converter = converter58;
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter57.getLogLevel();
        builder0.logLevel = logLevel60;
        retrofit.ErrorHandler errorHandler62 = builder0.errorHandler;
        retrofit.client.Client client63 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder64 = builder0.setClient(client63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler62);
    }

    @Test
    public void test01030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01030");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        java.util.concurrent.Executor executor15 = null;
        builder0.httpExecutor = executor15;
        retrofit.RestAdapter.LogLevel logLevel17 = builder0.logLevel;
        java.util.concurrent.Executor executor18 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log19 = builder0.log;
        java.util.concurrent.Executor executor20 = builder0.httpExecutor;
        retrofit.client.Client client21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder0.setClient(client21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor20);
    }

    @Test
    public void test01031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01031");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        builder18.logLevel = logLevel20;
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel20);
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.client.Client.Provider provider42 = builder35.clientProvider;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        builder35.log = log43;
        retrofit.RestAdapter.Builder builder45 = builder31.setLog(log43);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Log log52 = null;
        builder50.log = log52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel55 = builder54.logLevel;
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel55);
        retrofit.client.Client.Provider provider57 = builder50.clientProvider;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        builder50.log = log58;
        retrofit.RestAdapter.Builder builder60 = builder46.setLog(log58);
        retrofit.RestAdapter.Builder builder61 = builder31.setLog(log58);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        java.util.concurrent.Executor executor64 = null;
        builder62.httpExecutor = executor64;
        retrofit.Server server66 = builder62.server;
        retrofit.RestAdapter.LogLevel logLevel67 = builder62.logLevel;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server9, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log58, logLevel67);
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.Profiler profiler70 = null;
        restAdapter68.profiler = profiler70;
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = null;
        restAdapter68.logLevel = logLevel73;
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        retrofit.client.Client.Provider provider78 = builder76.clientProvider;
        java.lang.reflect.Method method79 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj81 = restHandler75.invoke((java.lang.Object) provider78, method79, objArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
    }

    @Test
    public void test01032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01032");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        builder24.logLevel = logLevel26;
        boolean boolean28 = logLevel26.log();
        builder17.logLevel = logLevel26;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        builder17.requestInterceptor = requestInterceptor30;
        retrofit.converter.Converter converter32 = null;
        builder17.converter = converter32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = builder34.callbackExecutor;
        retrofit.Profiler profiler36 = builder34.profiler;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = builder39.server;
        retrofit.RestAdapter.Log log41 = null;
        builder39.log = log41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel44 = builder43.logLevel;
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder47 = builder45.setServer("Retrofit-Idle");
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Builder builder49 = builder38.setServer(server48);
        retrofit.RestAdapter restAdapter50 = builder49.build();
        java.util.concurrent.Executor executor51 = restAdapter50.callbackExecutor;
        builder17.httpExecutor = executor51;
        builder15.callbackExecutor = executor51;
        restAdapter0.httpExecutor = executor51;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(server48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(executor51);
    }

    @Test
    public void test01033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01033");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.RestAdapter.Log log14 = builder0.log;
        retrofit.Profiler profiler15 = builder0.profiler;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder17 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(profiler15);
    }

    @Test
    public void test01034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01034");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.client.Client.Provider provider17 = restAdapter16.clientProvider;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.Server server27 = builder26.server;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        builder36.logLevel = logLevel38;
        boolean boolean40 = logLevel38.log();
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        retrofit.Profiler profiler42 = null;
        restAdapter41.profiler = profiler42;
        retrofit.converter.Converter converter44 = null;
        restAdapter41.converter = converter44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter55 = builder54.build();
        retrofit.Profiler profiler56 = null;
        builder54.profiler = profiler56;
        retrofit.Profiler profiler58 = null;
        builder54.profiler = profiler58;
        retrofit.converter.Converter converter60 = builder54.converter;
        restAdapter41.converter = converter60;
        restAdapter16.converter = converter60;
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter16.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(provider17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(converter60);
    }

    @Test
    public void test01035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01035");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.Profiler profiler17 = builder15.profiler;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Builder builder30 = builder19.setServer(server29);
        retrofit.RestAdapter.Builder builder31 = builder0.setServer(server29);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Log log34 = null;
        builder32.log = log34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder40 = builder38.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        java.util.concurrent.Executor executor43 = builder40.httpExecutor;
        retrofit.RestAdapter.Builder builder45 = builder40.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter46 = null;
        builder45.converter = converter46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        java.util.concurrent.Executor executor59 = builder56.httpExecutor;
        retrofit.RestAdapter restAdapter60 = builder56.build();
        java.util.concurrent.Executor executor61 = restAdapter60.httpExecutor;
        builder45.callbackExecutor = executor61;
        builder0.callbackExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder74 = builder72.setLog(log73);
        java.util.concurrent.Executor executor75 = builder72.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel76 = builder72.logLevel;
        builder0.logLevel = logLevel76;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor79 = null;
        restAdapter78.httpExecutor = executor79;
        java.util.concurrent.Executor executor81 = null;
        restAdapter78.httpExecutor = executor81;
        retrofit.RestAdapter.RestHandler restHandler83 = restAdapter78.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor84 = null;
        restAdapter78.requestInterceptor = requestInterceptor84;
        java.util.concurrent.Executor executor86 = restAdapter78.httpExecutor;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler88 = restAdapter87.new RestHandler();
        java.util.concurrent.Executor executor89 = restAdapter87.httpExecutor;
        java.util.concurrent.Executor executor90 = null;
        restAdapter87.callbackExecutor = executor90;
        retrofit.ErrorHandler errorHandler92 = null;
        restAdapter87.errorHandler = errorHandler92;
        retrofit.RestAdapter.LogLevel logLevel94 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter87.logLevel = logLevel94;
        restAdapter78.logLevel = logLevel94;
        retrofit.RestAdapter.Builder builder97 = builder0.setLogLevel(logLevel94);
        boolean boolean98 = logLevel94.log();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor86);
        org.junit.Assert.assertNull(executor89);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test01036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01036");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        java.util.concurrent.Executor executor16 = null;
        builder0.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = builder0.converter;
        retrofit.ErrorHandler errorHandler19 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler20 = null;
        builder0.errorHandler = errorHandler20;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter23.logLevel;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter23.errorHandler = errorHandler26;
        java.util.concurrent.Executor executor28 = restAdapter23.httpExecutor;
        java.util.concurrent.Executor executor29 = null;
        restAdapter23.httpExecutor = executor29;
        retrofit.ErrorHandler errorHandler31 = restAdapter23.errorHandler;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = null;
        restAdapter32.requestInterceptor = requestInterceptor33;
        retrofit.Profiler profiler35 = null;
        restAdapter32.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.Profiler profiler39 = builder37.profiler;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("Retrofit-Idle");
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Builder builder52 = builder41.setServer(server51);
        retrofit.RestAdapter restAdapter53 = builder52.build();
        java.util.concurrent.Executor executor54 = restAdapter53.callbackExecutor;
        restAdapter32.callbackExecutor = executor54;
        restAdapter23.httpExecutor = executor54;
        builder0.callbackExecutor = executor54;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        builder62.logLevel = logLevel64;
        java.util.concurrent.Executor executor66 = null;
        builder62.callbackExecutor = executor66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor69 = null;
        restAdapter68.callbackExecutor = executor69;
        retrofit.converter.Converter converter71 = restAdapter68.converter;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        restAdapter68.log = log72;
        builder62.log = log72;
        builder58.log = log72;
        log72.log("Retrofit-Idle");
        log72.log("Retrofit-");
        retrofit.RestAdapter.Builder builder80 = builder0.setLog(log72);
        log72.log("");
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test01037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01037");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        java.util.concurrent.Executor executor15 = null;
        builder0.httpExecutor = executor15;
        retrofit.Profiler profiler17 = builder0.profiler;
        retrofit.Profiler profiler18 = null;
        builder0.profiler = profiler18;
        retrofit.Profiler profiler20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder0.setProfiler(profiler20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(profiler17);
    }

    @Test
    public void test01038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01038");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter restAdapter12 = builder8.build();
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = null;
        restAdapter13.callbackExecutor = executor14;
        retrofit.converter.Converter converter16 = restAdapter13.converter;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log17;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel19;
        builder8.logLevel = logLevel19;
        retrofit.Profiler profiler22 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder23 = builder8.setProfiler(profiler22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test01039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01039");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = null;
        restAdapter15.callbackExecutor = executor16;
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.converter.Converter converter19 = restAdapter15.converter;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.callbackExecutor;
        retrofit.Profiler profiler22 = builder20.profiler;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("Retrofit-Idle");
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Builder builder35 = builder24.setServer(server34);
        restAdapter15.server = server34;
        retrofit.RestAdapter.Builder builder37 = builder0.setServer(server34);
        retrofit.RestAdapter.LogLevel logLevel38 = null;
        builder0.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = null;
        builder40.converter = converter41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel48 = builder47.logLevel;
        retrofit.RestAdapter.Builder builder49 = builder43.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        retrofit.Profiler profiler54 = builder53.profiler;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder63 = builder61.setServer("Retrofit-Idle");
        retrofit.Server server64 = builder63.server;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = null;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Log log75 = null;
        builder73.log = log75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel78 = builder77.logLevel;
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel78);
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel78);
        retrofit.RestAdapter.Builder builder81 = builder53.setServer(server64);
        retrofit.RestAdapter.Builder builder82 = builder40.setServer(server64);
        builder0.server = server64;
        retrofit.client.Client.Provider provider84 = builder0.clientProvider;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(server64);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(provider84);
    }

    @Test
    public void test01040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01040");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = null;
        restAdapter2.callbackExecutor = executor3;
        retrofit.converter.Converter converter5 = null;
        restAdapter2.converter = converter5;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter2.new RestHandler();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.Profiler profiler10 = builder8.profiler;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("Retrofit-Idle");
        retrofit.Server server22 = builder21.server;
        retrofit.RestAdapter.Builder builder23 = builder12.setServer(server22);
        retrofit.RestAdapter restAdapter24 = builder23.build();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter24.new RestHandler();
        retrofit.ErrorHandler errorHandler27 = restAdapter24.errorHandler;
        restAdapter2.errorHandler = errorHandler27;
        restAdapter0.errorHandler = errorHandler27;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = builder30.callbackExecutor;
        retrofit.Profiler profiler32 = builder30.profiler;
        java.util.concurrent.Executor executor33 = builder30.callbackExecutor;
        java.util.concurrent.Executor executor34 = builder30.httpExecutor;
        retrofit.converter.Converter converter35 = null;
        builder30.converter = converter35;
        retrofit.RestAdapter.LogLevel logLevel37 = builder30.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNotNull(errorHandler27);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01041");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel7 = builder6.logLevel;
        builder5.logLevel = logLevel7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.Server server18 = builder17.server;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.client.Client.Provider provider34 = builder27.clientProvider;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        builder27.log = log35;
        retrofit.RestAdapter.Builder builder37 = builder26.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log35, logLevel38);
        builder5.logLevel = logLevel38;
        retrofit.RestAdapter.LogLevel logLevel41 = builder5.logLevel;
        retrofit.Profiler profiler42 = builder5.profiler;
        retrofit.RestAdapter.Builder builder44 = builder5.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter54 = builder53.build();
        retrofit.Profiler profiler55 = null;
        builder53.profiler = profiler55;
        retrofit.Profiler profiler57 = null;
        builder53.profiler = profiler57;
        retrofit.converter.Converter converter59 = builder53.converter;
        builder44.converter = converter59;
        retrofit.RestAdapter.Builder builder61 = builder0.setConverter(converter59);
        retrofit.Profiler profiler62 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder63 = builder61.setProfiler(profiler62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(converter59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test01042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01042");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.Profiler profiler9 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler9);
    }

    @Test
    public void test01043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01043");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.client.Response response10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response12 = restAdapter0.logAndReplaceResponse("hi!", response10, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
    }

    @Test
    public void test01044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01044");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        retrofit.client.Request request9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request10 = restAdapter0.logAndReplaceRequest(request9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
    }

    @Test
    public void test01045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01045");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.Server server32 = builder31.server;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel46);
        restAdapter0.server = server14;
        retrofit.Profiler profiler51 = null;
        restAdapter0.profiler = profiler51;
        java.util.concurrent.Executor executor53 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        builder54.logLevel = logLevel56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel63 = builder62.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder66 = builder64.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler67 = builder66.errorHandler;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = builder68.callbackExecutor;
        retrofit.Profiler profiler70 = builder68.profiler;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Log log75 = null;
        builder73.log = log75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel78 = builder77.logLevel;
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder81 = builder79.setServer("Retrofit-Idle");
        retrofit.Server server82 = builder81.server;
        retrofit.RestAdapter.Builder builder83 = builder72.setServer(server82);
        retrofit.RestAdapter restAdapter84 = builder83.build();
        java.util.concurrent.Executor executor85 = restAdapter84.callbackExecutor;
        builder66.callbackExecutor = executor85;
        builder54.callbackExecutor = executor85;
        restAdapter0.callbackExecutor = executor85;
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter0.getLogLevel();
        retrofit.Server server91 = restAdapter0.server;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(profiler70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNull(logLevel89);
        org.junit.Assert.assertNull(logLevel90);
        org.junit.Assert.assertNotNull(server91);
    }

    @Test
    public void test01046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01046");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.RestAdapter.LogLevel logLevel7 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel7;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel9;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor13 = restAdapter0.callbackExecutor;
        retrofit.client.Response response15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response17 = restAdapter0.logAndReplaceResponse("hi!", response15, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test01047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01047");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log8 = restAdapter0.log;
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        builder11.logLevel = logLevel13;
        boolean boolean15 = logLevel13.log();
        restAdapter0.logLevel = logLevel13;
        retrofit.Profiler profiler17 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.RestAdapter restAdapter28 = builder26.build();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        java.util.concurrent.Executor executor33 = restAdapter31.httpExecutor;
        java.util.concurrent.Executor executor34 = null;
        restAdapter31.callbackExecutor = executor34;
        retrofit.client.Client.Provider provider36 = null;
        restAdapter31.clientProvider = provider36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder64 = builder62.setServer("Retrofit-Idle");
        retrofit.Server server65 = builder64.server;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = null;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = builder74.server;
        retrofit.RestAdapter.Log log76 = null;
        builder74.log = log76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel79 = builder78.logLevel;
        retrofit.RestAdapter.Builder builder80 = builder74.setLogLevel(logLevel79);
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server65, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel79);
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel79);
        restAdapter31.log = log55;
        log55.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder86 = builder29.setLog(log55);
        builder26.log = log55;
        retrofit.RequestInterceptor requestInterceptor88 = builder26.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.RestHandler restHandler90 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor91 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertNull(server75);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNull(executor91);
    }

    @Test
    public void test01048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01048");
        java.util.List<retrofit.client.Header> headerList2 = null;
        retrofit.mime.TypedInput typedInput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response4 = new retrofit.client.Response((int) (byte) 100, "", headerList2, typedInput3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01049");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.client.Response response10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response12 = restAdapter0.logAndReplaceResponse("Retrofit-", response10, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(server6);
    }

    @Test
    public void test01050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01050");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log8 = restAdapter0.log;
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        builder11.logLevel = logLevel13;
        boolean boolean15 = logLevel13.log();
        restAdapter0.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = builder21.server;
        retrofit.RestAdapter.Log log23 = null;
        builder21.log = log23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        retrofit.RestAdapter.Builder builder27 = builder21.setLogLevel(logLevel26);
        retrofit.client.Client.Provider provider28 = builder21.clientProvider;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        builder21.log = log29;
        retrofit.RestAdapter.Builder builder31 = builder17.setLog(log29);
        retrofit.Server server32 = builder17.server;
        java.util.concurrent.Executor executor33 = null;
        builder17.callbackExecutor = executor33;
        retrofit.converter.Converter converter35 = builder17.converter;
        retrofit.ErrorHandler errorHandler36 = builder17.errorHandler;
        retrofit.ErrorHandler errorHandler37 = null;
        builder17.errorHandler = errorHandler37;
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter40.logLevel;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter40.errorHandler = errorHandler43;
        java.util.concurrent.Executor executor45 = restAdapter40.httpExecutor;
        java.util.concurrent.Executor executor46 = null;
        restAdapter40.httpExecutor = executor46;
        retrofit.ErrorHandler errorHandler48 = restAdapter40.errorHandler;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor50 = null;
        restAdapter49.requestInterceptor = requestInterceptor50;
        retrofit.Profiler profiler52 = null;
        restAdapter49.profiler = profiler52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = builder54.callbackExecutor;
        retrofit.Profiler profiler56 = builder54.profiler;
        retrofit.RestAdapter.Builder builder58 = builder54.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = builder59.server;
        retrofit.RestAdapter.Log log61 = null;
        builder59.log = log61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        retrofit.RestAdapter.Builder builder65 = builder59.setLogLevel(logLevel64);
        retrofit.RestAdapter.Builder builder67 = builder65.setServer("Retrofit-Idle");
        retrofit.Server server68 = builder67.server;
        retrofit.RestAdapter.Builder builder69 = builder58.setServer(server68);
        retrofit.RestAdapter restAdapter70 = builder69.build();
        java.util.concurrent.Executor executor71 = restAdapter70.callbackExecutor;
        restAdapter49.callbackExecutor = executor71;
        restAdapter40.httpExecutor = executor71;
        builder17.callbackExecutor = executor71;
        retrofit.RestAdapter.Log log75 = builder17.log;
        restAdapter0.log = log75;
        retrofit.Server server77 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = builder78.callbackExecutor;
        retrofit.Profiler profiler80 = builder78.profiler;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server84 = builder83.server;
        retrofit.RestAdapter.Log log85 = null;
        builder83.log = log85;
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel88 = builder87.logLevel;
        retrofit.RestAdapter.Builder builder89 = builder83.setLogLevel(logLevel88);
        retrofit.RestAdapter.Builder builder91 = builder89.setServer("Retrofit-Idle");
        retrofit.Server server92 = builder91.server;
        retrofit.RestAdapter.Builder builder93 = builder82.setServer(server92);
        retrofit.RestAdapter restAdapter94 = builder93.build();
        retrofit.RestAdapter.Log log95 = builder93.log;
        retrofit.Profiler profiler96 = builder93.profiler;
        retrofit.Server server97 = builder93.server;
        retrofit.client.Client.Provider provider98 = builder93.clientProvider;
        restAdapter0.clientProvider = provider98;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(server68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNotNull(executor71);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertNull(executor79);
        org.junit.Assert.assertNull(profiler80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(server84);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(server92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertNotNull(log95);
        org.junit.Assert.assertNull(profiler96);
        org.junit.Assert.assertNotNull(server97);
        org.junit.Assert.assertNotNull(provider98);
    }

    @Test
    public void test01051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01051");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = builder8.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler14 = builder8.errorHandler;
        retrofit.RestAdapter restAdapter15 = builder8.build();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        java.util.concurrent.Executor executor18 = restAdapter15.httpExecutor;
        retrofit.client.Response response20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response22 = restAdapter15.logAndReplaceResponse("Retrofit-Idle", response20, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(executor18);
    }

    @Test
    public void test01052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01052");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.Server server32 = builder31.server;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel46);
        restAdapter0.server = server14;
        retrofit.client.Client.Provider provider51 = null;
        restAdapter0.clientProvider = provider51;
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter0.logLevel;
        retrofit.client.Response response55 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response57 = restAdapter0.logAndReplaceResponse("hi!", response55, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel53);
    }

    @Test
    public void test01053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01053");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        builder24.logLevel = logLevel26;
        boolean boolean28 = logLevel26.log();
        builder17.logLevel = logLevel26;
        retrofit.RestAdapter.LogLevel logLevel30 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder15.setLogLevel(logLevel30);
        retrofit.ErrorHandler errorHandler32 = null;
        builder31.errorHandler = errorHandler32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler36 = builder35.errorHandler;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter46 = builder45.build();
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        builder45.logLevel = logLevel47;
        retrofit.RestAdapter.Log log49 = builder45.log;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter50.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter50.logLevel;
        retrofit.ErrorHandler errorHandler53 = restAdapter50.errorHandler;
        retrofit.converter.Converter converter54 = null;
        restAdapter50.converter = converter54;
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter50.logLevel;
        java.util.concurrent.Executor executor57 = restAdapter50.httpExecutor;
        retrofit.RestAdapter.Log log58 = restAdapter50.log;
        retrofit.Profiler profiler59 = null;
        restAdapter50.profiler = profiler59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel63 = builder62.logLevel;
        builder61.logLevel = logLevel63;
        boolean boolean65 = logLevel63.log();
        restAdapter50.logLevel = logLevel63;
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter50.logLevel;
        retrofit.ErrorHandler errorHandler68 = null;
        restAdapter50.errorHandler = errorHandler68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel72 = builder71.logLevel;
        builder70.logLevel = logLevel72;
        boolean boolean74 = logLevel72.log();
        restAdapter50.setLogLevel(logLevel72);
        builder45.logLevel = logLevel72;
        retrofit.RestAdapter.Log log77 = builder45.log;
        retrofit.RestAdapter.Builder builder78 = builder35.setLog(log77);
        retrofit.RestAdapter.LogLevel logLevel79 = builder35.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01054");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder0.requestInterceptor = requestInterceptor13;
        java.util.concurrent.Executor executor15 = null;
        builder0.httpExecutor = executor15;
        retrofit.converter.Converter converter17 = null;
        builder0.converter = converter17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = builder19.callbackExecutor;
        retrofit.Profiler profiler21 = builder19.profiler;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel29 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("Retrofit-Idle");
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Builder builder34 = builder23.setServer(server33);
        retrofit.RestAdapter restAdapter35 = builder34.build();
        retrofit.RestAdapter.Log log36 = builder34.log;
        retrofit.Profiler profiler37 = builder34.profiler;
        retrofit.Server server38 = builder34.server;
        retrofit.RestAdapter.Builder builder39 = builder0.setServer(server38);
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(executor40);
    }

    @Test
    public void test01055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01055");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        java.util.concurrent.Executor executor8 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        builder16.logLevel = logLevel18;
        boolean boolean20 = logLevel18.log();
        builder9.logLevel = logLevel18;
        retrofit.RestAdapter.LogLevel logLevel22 = builder9.logLevel;
        retrofit.Profiler profiler23 = builder9.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.Profiler profiler26 = builder24.profiler;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Builder builder39 = builder28.setServer(server38);
        retrofit.RestAdapter.Builder builder40 = builder9.setServer(server38);
        retrofit.RestAdapter.Builder builder41 = builder6.setServer(server38);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.ErrorHandler errorHandler44 = null;
        builder42.errorHandler = errorHandler44;
        retrofit.converter.Converter converter46 = builder42.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder41.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        builder56.logLevel = logLevel58;
        boolean boolean60 = logLevel58.log();
        builder49.logLevel = logLevel58;
        retrofit.RestAdapter.LogLevel logLevel62 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder41.setLogLevel(logLevel62);
        retrofit.client.Client.Provider provider64 = builder41.clientProvider;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(provider64);
    }

    @Test
    public void test01056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01056");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        restAdapter0.server = server14;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter26 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.logLevel;
        retrofit.RestAdapter.Log log28 = restAdapter26.log;
        restAdapter0.log = log28;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter0.requestInterceptor;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass32 = requestInterceptor31.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(requestInterceptor31);
    }

    @Test
    public void test01057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01057");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.client.Client.Provider provider6 = null;
        builder0.clientProvider = provider6;
        retrofit.Server server8 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor9 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = builder10.callbackExecutor;
        retrofit.Profiler profiler12 = builder10.profiler;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("Retrofit-Idle");
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Builder builder25 = builder14.setServer(server24);
        java.util.concurrent.Executor executor26 = builder25.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = null;
        restAdapter27.callbackExecutor = executor28;
        retrofit.converter.Converter converter30 = restAdapter27.converter;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter27.new RestHandler();
        retrofit.converter.Converter converter32 = restAdapter27.converter;
        java.util.concurrent.Executor executor33 = restAdapter27.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter27.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder25.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder0.setLogLevel(logLevel34);
        retrofit.ErrorHandler errorHandler38 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder39 = builder0.setErrorHandler(errorHandler38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test01058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01058");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.client.Client.Provider provider26 = builder19.clientProvider;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder19.log = log27;
        retrofit.RestAdapter.Builder builder29 = builder15.setLog(log27);
        retrofit.RestAdapter.Builder builder30 = builder0.setLog(log27);
        retrofit.ErrorHandler errorHandler31 = null;
        builder30.errorHandler = errorHandler31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        retrofit.Profiler profiler35 = builder33.profiler;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Builder builder48 = builder37.setServer(server47);
        retrofit.RestAdapter restAdapter49 = builder48.build();
        java.util.concurrent.Executor executor50 = restAdapter49.callbackExecutor;
        builder30.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = builder30.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = builder54.server;
        retrofit.RestAdapter.Log log56 = null;
        builder54.log = log56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel59 = builder58.logLevel;
        retrofit.RestAdapter.Builder builder60 = builder54.setLogLevel(logLevel59);
        java.util.concurrent.Executor executor61 = builder60.callbackExecutor;
        retrofit.converter.Converter converter62 = null;
        builder60.converter = converter62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel65 = builder64.logLevel;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = builder66.server;
        retrofit.RestAdapter.Log log68 = null;
        builder66.log = log68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel71 = builder70.logLevel;
        retrofit.RestAdapter.Builder builder72 = builder66.setLogLevel(logLevel71);
        retrofit.RestAdapter.Builder builder74 = builder72.setServer("Retrofit-Idle");
        retrofit.Server server75 = builder74.server;
        retrofit.client.Client.Provider provider76 = null;
        java.util.concurrent.Executor executor77 = null;
        java.util.concurrent.Executor executor78 = null;
        retrofit.RequestInterceptor requestInterceptor79 = null;
        retrofit.converter.Converter converter80 = null;
        retrofit.Profiler profiler81 = null;
        retrofit.ErrorHandler errorHandler82 = null;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.Server server85 = builder84.server;
        retrofit.RestAdapter.Log log86 = null;
        builder84.log = log86;
        retrofit.RestAdapter.Builder builder88 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel89 = builder88.logLevel;
        retrofit.RestAdapter.Builder builder90 = builder84.setLogLevel(logLevel89);
        retrofit.client.Client.Provider provider91 = builder84.clientProvider;
        retrofit.RestAdapter.Log log92 = retrofit.RestAdapter.Log.NONE;
        builder84.log = log92;
        retrofit.RestAdapter.Builder builder94 = builder83.setLog(log92);
        retrofit.RestAdapter.LogLevel logLevel95 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter96 = new retrofit.RestAdapter(server75, provider76, executor77, executor78, requestInterceptor79, converter80, profiler81, errorHandler82, log92, logLevel95);
        retrofit.RestAdapter.Builder builder97 = builder64.setServer(server75);
        builder60.server = server75;
        retrofit.RestAdapter.Builder builder99 = builder30.setServer(server75);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(server75);
        org.junit.Assert.assertNull(server85);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(provider91);
        org.junit.Assert.assertNotNull(log92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01059");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        java.util.concurrent.Executor executor16 = builder0.callbackExecutor;
        retrofit.Profiler profiler17 = builder0.profiler;
        retrofit.client.Client client18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder19 = builder0.setClient(client18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
    }

    @Test
    public void test01060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01060");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.Server server11 = builder6.server;
        retrofit.RestAdapter restAdapter12 = builder6.build();
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter13.new RestHandler();
        java.util.concurrent.Executor executor15 = restAdapter13.httpExecutor;
        retrofit.Profiler profiler16 = restAdapter13.profiler;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = builder18.callbackExecutor;
        retrofit.Profiler profiler20 = builder18.profiler;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel23 = builder18.logLevel;
        boolean boolean24 = logLevel23.log();
        restAdapter13.logLevel = logLevel23;
        restAdapter12.logLevel = logLevel23;
        retrofit.client.Response response28 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response30 = restAdapter12.logAndReplaceResponse("", response28, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01061");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        java.util.concurrent.Executor executor5 = null;
        restAdapter0.callbackExecutor = executor5;
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.httpExecutor = executor7;
        retrofit.Server server9 = restAdapter0.server;
        retrofit.Profiler profiler10 = restAdapter0.profiler;
        retrofit.Profiler profiler11 = restAdapter0.profiler;
        java.lang.Throwable throwable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable12, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(profiler11);
    }

    @Test
    public void test01062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01062");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.Server server7 = restAdapter0.server;
        retrofit.client.Response response9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response11 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response9, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(server7);
    }

    @Test
    public void test01063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01063");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = builder8.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel14 = builder8.logLevel;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        builder8.logLevel = logLevel15;
        retrofit.client.Client client17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder8.setClient(client17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01064");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = builder12.setLog(log13);
        retrofit.Profiler profiler15 = builder14.profiler;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("Retrofit-Idle");
        retrofit.Server server25 = builder24.server;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = builder34.server;
        retrofit.RestAdapter.Log log36 = null;
        builder34.log = log36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel39 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel39);
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel39);
        retrofit.RestAdapter.Builder builder42 = builder14.setServer(server25);
        retrofit.converter.Converter converter43 = null;
        builder14.converter = converter43;
        retrofit.converter.Converter converter45 = null;
        builder14.converter = converter45;
        retrofit.RestAdapter.Log log47 = builder14.log;
        restAdapter0.log = log47;
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter50.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = builder52.server;
        java.util.concurrent.Executor executor54 = null;
        builder52.httpExecutor = executor54;
        retrofit.Server server56 = builder52.server;
        retrofit.RestAdapter.LogLevel logLevel57 = builder52.logLevel;
        retrofit.ErrorHandler errorHandler58 = builder52.errorHandler;
        retrofit.client.Client.Provider provider59 = builder52.clientProvider;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = builder60.callbackExecutor;
        retrofit.Profiler profiler62 = builder60.profiler;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder73 = builder71.setServer("Retrofit-Idle");
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Builder builder75 = builder64.setServer(server74);
        retrofit.RestAdapter restAdapter76 = builder75.build();
        retrofit.RestAdapter.Log log77 = builder75.log;
        retrofit.Profiler profiler78 = builder75.profiler;
        retrofit.Server server79 = builder75.server;
        retrofit.client.Client.Provider provider80 = builder75.clientProvider;
        retrofit.RestAdapter.Builder builder81 = builder52.setClient(provider80);
        restAdapter50.clientProvider = provider80;
        restAdapter0.clientProvider = provider80;
        java.util.concurrent.Executor executor84 = restAdapter0.callbackExecutor;
        retrofit.client.Request request85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request86 = restAdapter0.logAndReplaceRequest(request85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNull(profiler78);
        org.junit.Assert.assertNotNull(server79);
        org.junit.Assert.assertNotNull(provider80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(executor84);
    }

    @Test
    public void test01065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01065");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = builder8.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler14 = builder8.errorHandler;
        retrofit.RestAdapter restAdapter15 = builder8.build();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        java.lang.Throwable throwable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter15.logException(throwable18, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(requestInterceptor16);
    }

    @Test
    public void test01066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01066");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.RestAdapter.LogLevel logLevel7 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel7;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler13 = restAdapter0.errorHandler;
        java.lang.Throwable throwable14 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable14, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler13);
    }

    @Test
    public void test01067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01067");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
    }

    @Test
    public void test01068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01068");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.client.Client.Provider provider44 = builder37.clientProvider;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        builder37.log = log45;
        retrofit.RestAdapter.Builder builder47 = builder33.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server9, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log45, logLevel48);
        retrofit.converter.Converter converter50 = null;
        restAdapter49.converter = converter50;
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter49.getLogLevel();
        retrofit.client.Request request54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request55 = restAdapter49.logAndReplaceRequest(request54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01069");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter8 = null;
        restAdapter0.converter = converter8;
        retrofit.ErrorHandler errorHandler10 = null;
        restAdapter0.errorHandler = errorHandler10;
        retrofit.client.Request request12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request13 = restAdapter0.logAndReplaceRequest(request12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(converter6);
    }

    @Test
    public void test01070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01070");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.callbackExecutor;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = builder6.server;
        retrofit.RestAdapter.Log log8 = null;
        builder6.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel11 = builder10.logLevel;
        retrofit.RestAdapter.Builder builder12 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("Retrofit-Idle");
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        java.util.concurrent.Executor executor20 = restAdapter18.httpExecutor;
        java.util.concurrent.Executor executor21 = null;
        restAdapter18.callbackExecutor = executor21;
        retrofit.client.Client.Provider provider23 = null;
        restAdapter18.clientProvider = provider23;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter18.logLevel;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        builder26.logLevel = logLevel28;
        java.util.concurrent.Executor executor30 = null;
        builder26.callbackExecutor = executor30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor33 = null;
        restAdapter32.callbackExecutor = executor33;
        retrofit.converter.Converter converter35 = restAdapter32.converter;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        restAdapter32.log = log36;
        builder26.log = log36;
        restAdapter18.log = log36;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter49 = builder48.build();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.logLevel;
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter49.requestInterceptor;
        restAdapter18.requestInterceptor = requestInterceptor51;
        builder14.requestInterceptor = requestInterceptor51;
        builder0.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter55.new RestHandler();
        java.util.concurrent.Executor executor57 = restAdapter55.httpExecutor;
        retrofit.Profiler profiler58 = restAdapter55.profiler;
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        java.util.concurrent.Executor executor64 = null;
        builder62.httpExecutor = executor64;
        retrofit.Server server66 = builder62.server;
        retrofit.converter.Converter converter67 = null;
        builder62.converter = converter67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = builder69.server;
        retrofit.RestAdapter.Log log71 = null;
        builder69.log = log71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel74 = builder73.logLevel;
        retrofit.RestAdapter.Builder builder75 = builder69.setLogLevel(logLevel74);
        retrofit.RestAdapter.Builder builder77 = builder75.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder77.setLog(log78);
        java.util.concurrent.Executor executor80 = builder77.httpExecutor;
        java.util.concurrent.Executor executor81 = null;
        builder77.httpExecutor = executor81;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server84 = builder83.server;
        retrofit.RestAdapter.Log log85 = null;
        builder83.log = log85;
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel88 = builder87.logLevel;
        retrofit.RestAdapter.Builder builder89 = builder83.setLogLevel(logLevel88);
        retrofit.RestAdapter.Builder builder91 = builder89.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter92 = builder91.build();
        retrofit.RestAdapter.LogLevel logLevel93 = restAdapter92.logLevel;
        builder77.logLevel = logLevel93;
        builder77.ensureSaneDefaults();
        retrofit.client.Client.Provider provider96 = builder77.clientProvider;
        builder62.clientProvider = provider96;
        restAdapter55.clientProvider = provider96;
        retrofit.RestAdapter.Builder builder99 = builder0.setClient(provider96);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(profiler58);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertNull(server84);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider96);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01071");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        java.util.concurrent.Executor executor8 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLog(log18);
        java.util.concurrent.Executor executor20 = builder17.httpExecutor;
        retrofit.RestAdapter restAdapter21 = builder17.build();
        java.util.concurrent.Executor executor22 = restAdapter21.httpExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        java.util.concurrent.Executor executor34 = builder31.httpExecutor;
        retrofit.RestAdapter restAdapter35 = builder31.build();
        java.util.concurrent.Executor executor36 = restAdapter35.httpExecutor;
        retrofit.RestAdapter.Builder builder37 = builder6.setExecutors(executor22, executor36);
        retrofit.Profiler profiler38 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder39 = builder6.setProfiler(profiler38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test01072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01072");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter16.requestInterceptor;
        retrofit.client.Request request19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request20 = restAdapter16.logAndReplaceRequest(request19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor18);
    }

    @Test
    public void test01073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01073");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.Profiler profiler7 = null;
        builder0.profiler = profiler7;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter11.new RestHandler();
        retrofit.ErrorHandler errorHandler15 = restAdapter11.errorHandler;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.client.Client.Provider provider27 = builder20.clientProvider;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        builder20.log = log28;
        retrofit.RestAdapter.Builder builder30 = builder16.setLog(log28);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.client.Client.Provider provider42 = builder35.clientProvider;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        builder35.log = log43;
        retrofit.RestAdapter.Builder builder45 = builder31.setLog(log43);
        retrofit.RestAdapter.Builder builder46 = builder16.setLog(log43);
        retrofit.RequestInterceptor requestInterceptor47 = null;
        builder16.requestInterceptor = requestInterceptor47;
        java.util.concurrent.Executor executor49 = builder16.httpExecutor;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Log log52 = null;
        builder50.log = log52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        builder54.logLevel = logLevel56;
        java.util.concurrent.Executor executor58 = null;
        builder54.callbackExecutor = executor58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor61 = null;
        restAdapter60.callbackExecutor = executor61;
        retrofit.converter.Converter converter63 = restAdapter60.converter;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        restAdapter60.log = log64;
        builder54.log = log64;
        builder50.log = log64;
        log64.log("Retrofit-Idle");
        log64.log("");
        builder16.log = log64;
        restAdapter11.log = log64;
        retrofit.RestAdapter.Builder builder74 = builder10.setLog(log64);
        java.util.concurrent.Executor executor75 = builder10.callbackExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(executor75);
    }

    @Test
    public void test01074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01074");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.client.Client.Provider provider26 = builder19.clientProvider;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder19.log = log27;
        retrofit.RestAdapter.Builder builder29 = builder15.setLog(log27);
        retrofit.RestAdapter.Builder builder30 = builder0.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor31 = null;
        builder0.requestInterceptor = requestInterceptor31;
        java.util.concurrent.Executor executor33 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = builder34.server;
        retrofit.RestAdapter.Log log36 = null;
        builder34.log = log36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        builder38.logLevel = logLevel40;
        java.util.concurrent.Executor executor42 = null;
        builder38.callbackExecutor = executor42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor45 = null;
        restAdapter44.callbackExecutor = executor45;
        retrofit.converter.Converter converter47 = restAdapter44.converter;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        restAdapter44.log = log48;
        builder38.log = log48;
        builder34.log = log48;
        log48.log("Retrofit-Idle");
        log48.log("");
        builder0.log = log48;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = builder61.server;
        retrofit.RestAdapter.Log log63 = null;
        builder61.log = log63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel66 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder61.setLogLevel(logLevel66);
        retrofit.client.Client.Provider provider68 = builder61.clientProvider;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        builder61.log = log69;
        retrofit.RestAdapter.Builder builder71 = builder57.setLog(log69);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        retrofit.RestAdapter.Log log78 = null;
        builder76.log = log78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel81 = builder80.logLevel;
        retrofit.RestAdapter.Builder builder82 = builder76.setLogLevel(logLevel81);
        retrofit.client.Client.Provider provider83 = builder76.clientProvider;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        builder76.log = log84;
        retrofit.RestAdapter.Builder builder86 = builder72.setLog(log84);
        retrofit.RestAdapter.Builder builder87 = builder57.setLog(log84);
        log84.log("");
        retrofit.RestAdapter.Builder builder90 = builder0.setLog(log84);
        retrofit.RestAdapter.Log log91 = builder90.log;
        retrofit.RequestInterceptor requestInterceptor92 = builder90.requestInterceptor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(provider68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(provider83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(log91);
        org.junit.Assert.assertNull(requestInterceptor92);
    }

    @Test
    public void test01075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01075");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder0.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter15.logLevel;
        retrofit.ErrorHandler errorHandler18 = restAdapter15.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter15.logLevel;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.Server server29 = builder28.server;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = null;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel61);
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel61);
        restAdapter15.server = server29;
        retrofit.client.Client.Provider provider66 = null;
        restAdapter15.clientProvider = provider66;
        retrofit.RestAdapter.Log log68 = restAdapter15.log;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.ErrorHandler errorHandler71 = null;
        builder69.errorHandler = errorHandler71;
        retrofit.converter.Converter converter73 = builder69.converter;
        retrofit.RestAdapter.LogLevel logLevel74 = builder69.logLevel;
        restAdapter15.logLevel = logLevel74;
        builder0.logLevel = logLevel74;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder78 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01076");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.Server server2 = builder1.server;
        retrofit.RestAdapter.Log log3 = null;
        builder1.log = log3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder7 = builder1.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder1.clientProvider;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder1.log = log9;
        retrofit.RestAdapter.Builder builder11 = builder0.setLog(log9);
        retrofit.Profiler profiler12 = builder0.profiler;
        retrofit.converter.Converter converter13 = builder0.converter;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder20 = builder14.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("Retrofit-Idle");
        retrofit.Server server23 = builder22.server;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = null;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        builder32.logLevel = logLevel34;
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        retrofit.Profiler profiler38 = null;
        restAdapter37.profiler = profiler38;
        retrofit.converter.Converter converter40 = null;
        restAdapter37.converter = converter40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("Retrofit-Idle");
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter54.new RestHandler();
        java.util.concurrent.Executor executor56 = restAdapter54.httpExecutor;
        java.util.concurrent.Executor executor57 = null;
        restAdapter54.callbackExecutor = executor57;
        retrofit.client.Client.Provider provider59 = null;
        restAdapter54.clientProvider = provider59;
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter54.logLevel;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        builder62.logLevel = logLevel64;
        java.util.concurrent.Executor executor66 = null;
        builder62.callbackExecutor = executor66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor69 = null;
        restAdapter68.callbackExecutor = executor69;
        retrofit.converter.Converter converter71 = restAdapter68.converter;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        restAdapter68.log = log72;
        builder62.log = log72;
        restAdapter54.log = log72;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        retrofit.RestAdapter.Log log78 = null;
        builder76.log = log78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel81 = builder80.logLevel;
        retrofit.RestAdapter.Builder builder82 = builder76.setLogLevel(logLevel81);
        retrofit.RestAdapter.Builder builder84 = builder82.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter85 = builder84.build();
        retrofit.RestAdapter.LogLevel logLevel86 = restAdapter85.logLevel;
        retrofit.RequestInterceptor requestInterceptor87 = restAdapter85.requestInterceptor;
        restAdapter54.requestInterceptor = requestInterceptor87;
        builder50.requestInterceptor = requestInterceptor87;
        restAdapter37.requestInterceptor = requestInterceptor87;
        java.util.concurrent.Executor executor91 = restAdapter37.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor92 = restAdapter37.requestInterceptor;
        retrofit.RestAdapter.Builder builder93 = builder0.setRequestInterceptor(requestInterceptor92);
        retrofit.RestAdapter.Log log94 = builder93.log;
        log94.log("");
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor87);
        org.junit.Assert.assertNull(executor91);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(log94);
    }

    @Test
    public void test01077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01077");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.client.Client.Provider provider17 = null;
        restAdapter16.clientProvider = provider17;
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter16.getLogLevel();
        retrofit.ErrorHandler errorHandler21 = null;
        restAdapter16.errorHandler = errorHandler21;
        java.util.concurrent.Executor executor23 = null;
        restAdapter16.callbackExecutor = executor23;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter16.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01078");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.client.Client.Provider provider44 = builder37.clientProvider;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        builder37.log = log45;
        retrofit.RestAdapter.Builder builder47 = builder33.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server9, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log45, logLevel48);
        retrofit.converter.Converter converter50 = null;
        restAdapter49.converter = converter50;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter49.new RestHandler();
        retrofit.Profiler profiler53 = null;
        restAdapter49.profiler = profiler53;
        retrofit.Profiler profiler55 = null;
        restAdapter49.profiler = profiler55;
        retrofit.ErrorHandler errorHandler57 = restAdapter49.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter49.new RestHandler();
        retrofit.converter.Converter converter59 = restAdapter49.converter;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(converter59);
    }

    @Test
    public void test01079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01079");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.client.Client.Provider provider26 = builder19.clientProvider;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder19.log = log27;
        retrofit.RestAdapter.Builder builder29 = builder15.setLog(log27);
        retrofit.RestAdapter.Builder builder30 = builder0.setLog(log27);
        retrofit.Profiler profiler31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder30.setProfiler(profiler31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test01080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01080");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter6 = builder5.build();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        retrofit.Profiler profiler18 = builder17.profiler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("Retrofit-Idle");
        retrofit.Server server28 = builder27.server;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = null;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel42);
        retrofit.RestAdapter.Builder builder45 = builder17.setServer(server28);
        retrofit.converter.Converter converter46 = null;
        builder17.converter = converter46;
        retrofit.converter.Converter converter48 = null;
        builder17.converter = converter48;
        retrofit.RestAdapter.Log log50 = builder17.log;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("Retrofit-Idle");
        retrofit.Server server62 = builder61.server;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        retrofit.client.Client.Provider provider78 = builder71.clientProvider;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        builder71.log = log79;
        retrofit.RestAdapter.Builder builder81 = builder70.setLog(log79);
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log79, logLevel82);
        retrofit.RestAdapter.Builder builder84 = builder51.setServer(server62);
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        retrofit.Server server86 = builder85.server;
        retrofit.RestAdapter.Log log87 = null;
        builder85.log = log87;
        retrofit.RestAdapter.Builder builder89 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel90 = builder89.logLevel;
        retrofit.RestAdapter.Builder builder91 = builder85.setLogLevel(logLevel90);
        retrofit.RestAdapter.Builder builder93 = builder91.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter94 = builder93.build();
        retrofit.RestAdapter.LogLevel logLevel95 = restAdapter94.logLevel;
        retrofit.RequestInterceptor requestInterceptor96 = restAdapter94.requestInterceptor;
        retrofit.RestAdapter.Builder builder97 = builder84.setRequestInterceptor(requestInterceptor96);
        retrofit.RestAdapter.Builder builder98 = builder17.setRequestInterceptor(requestInterceptor96);
        retrofit.RestAdapter.Builder builder99 = builder5.setRequestInterceptor(requestInterceptor96);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(restAdapter6);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(server86);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01081");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        java.util.concurrent.Executor executor16 = null;
        builder0.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = builder0.converter;
        retrofit.ErrorHandler errorHandler19 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel20 = builder0.logLevel;
        retrofit.Profiler profiler21 = null;
        builder0.profiler = profiler21;
        retrofit.client.Client.Provider provider23 = builder0.clientProvider;
        retrofit.converter.Converter converter24 = builder0.converter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter25 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(converter24);
    }

    @Test
    public void test01082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01082");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = builder4.callbackExecutor;
        retrofit.Profiler profiler6 = builder4.profiler;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Builder builder19 = builder8.setServer(server18);
        retrofit.RestAdapter.Log log20 = builder19.log;
        retrofit.RestAdapter.LogLevel logLevel21 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        builder29.logLevel = logLevel31;
        boolean boolean33 = logLevel31.log();
        builder22.logLevel = logLevel31;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        builder22.requestInterceptor = requestInterceptor35;
        retrofit.converter.Converter converter37 = null;
        builder22.converter = converter37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        retrofit.Profiler profiler41 = builder39.profiler;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("Retrofit-Idle");
        retrofit.Server server53 = builder52.server;
        retrofit.RestAdapter.Builder builder54 = builder43.setServer(server53);
        retrofit.RestAdapter restAdapter55 = builder54.build();
        java.util.concurrent.Executor executor56 = restAdapter55.callbackExecutor;
        builder22.httpExecutor = executor56;
        builder19.httpExecutor = executor56;
        builder0.httpExecutor = executor56;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter60.new RestHandler();
        retrofit.ErrorHandler errorHandler64 = restAdapter60.errorHandler;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder73 = builder71.setServer("Retrofit-Idle");
        retrofit.Server server74 = builder73.server;
        restAdapter60.server = server74;
        retrofit.RestAdapter.Builder builder76 = builder0.setServer(server74);
        retrofit.converter.Converter converter77 = builder0.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(converter77);
    }

    @Test
    public void test01083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01083");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.httpExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.Profiler profiler9 = builder7.profiler;
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.client.Client.Provider provider19 = builder12.clientProvider;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        builder12.log = log20;
        retrofit.RestAdapter.Builder builder22 = builder11.setLog(log20);
        retrofit.Profiler profiler23 = builder22.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel29 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.RestAdapter restAdapter34 = builder32.build();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter37.new RestHandler();
        java.util.concurrent.Executor executor39 = restAdapter37.httpExecutor;
        java.util.concurrent.Executor executor40 = null;
        restAdapter37.callbackExecutor = executor40;
        retrofit.client.Client.Provider provider42 = null;
        restAdapter37.clientProvider = provider42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("Retrofit-Idle");
        retrofit.Server server53 = builder52.server;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel67 = builder66.logLevel;
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder70 = builder68.setServer("Retrofit-Idle");
        retrofit.Server server71 = builder70.server;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = null;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.Server server81 = builder80.server;
        retrofit.RestAdapter.Log log82 = null;
        builder80.log = log82;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel85 = builder84.logLevel;
        retrofit.RestAdapter.Builder builder86 = builder80.setLogLevel(logLevel85);
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel85);
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel85);
        restAdapter37.log = log61;
        log61.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder92 = builder35.setLog(log61);
        builder32.log = log61;
        retrofit.ErrorHandler errorHandler94 = builder32.errorHandler;
        retrofit.RestAdapter.Builder builder95 = builder22.setErrorHandler(errorHandler94);
        retrofit.RestAdapter.Builder builder96 = builder7.setErrorHandler(errorHandler94);
        restAdapter0.errorHandler = errorHandler94;
        retrofit.RestAdapter.RestHandler restHandler98 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNull(server81);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(errorHandler94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test01084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01084");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.client.Client.Provider provider2 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter3.new RestHandler();
        java.util.concurrent.Executor executor5 = restAdapter3.httpExecutor;
        java.util.concurrent.Executor executor6 = restAdapter3.callbackExecutor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = null;
        restAdapter7.httpExecutor = executor8;
        java.util.concurrent.Executor executor10 = null;
        restAdapter7.httpExecutor = executor10;
        retrofit.client.Client.Provider provider12 = null;
        restAdapter7.clientProvider = provider12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.callbackExecutor;
        retrofit.Profiler profiler16 = builder14.profiler;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("Retrofit-Idle");
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Builder builder29 = builder18.setServer(server28);
        retrofit.RequestInterceptor requestInterceptor30 = builder29.requestInterceptor;
        retrofit.converter.Converter converter31 = null;
        builder29.converter = converter31;
        retrofit.converter.Converter converter33 = builder29.converter;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor35 = null;
        restAdapter34.httpExecutor = executor35;
        java.util.concurrent.Executor executor37 = null;
        restAdapter34.httpExecutor = executor37;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter34.new RestHandler();
        retrofit.converter.Converter converter40 = restAdapter34.converter;
        retrofit.client.Client.Provider provider41 = null;
        restAdapter34.clientProvider = provider41;
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter34.new RestHandler();
        retrofit.Server server45 = restAdapter34.server;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor47 = null;
        restAdapter46.callbackExecutor = executor47;
        retrofit.RestAdapter.Log log49 = restAdapter46.log;
        retrofit.converter.Converter converter50 = restAdapter46.converter;
        java.util.concurrent.Executor executor51 = null;
        restAdapter46.callbackExecutor = executor51;
        java.util.concurrent.Executor executor53 = null;
        restAdapter46.httpExecutor = executor53;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter46.new RestHandler();
        retrofit.converter.Converter converter56 = restAdapter46.converter;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("Retrofit-Idle");
        retrofit.Server server66 = builder65.server;
        retrofit.Profiler profiler67 = null;
        builder65.profiler = profiler67;
        retrofit.Profiler profiler69 = null;
        builder65.profiler = profiler69;
        retrofit.RestAdapter restAdapter71 = builder65.build();
        retrofit.ErrorHandler errorHandler72 = builder65.errorHandler;
        restAdapter46.errorHandler = errorHandler72;
        restAdapter34.errorHandler = errorHandler72;
        builder29.errorHandler = errorHandler72;
        restAdapter7.errorHandler = errorHandler72;
        restAdapter3.errorHandler = errorHandler72;
        builder0.errorHandler = errorHandler72;
        java.util.concurrent.Executor executor79 = builder0.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(converter40);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNotNull(errorHandler72);
        org.junit.Assert.assertNull(executor79);
    }

    @Test
    public void test01085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01085");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder0.requestInterceptor = requestInterceptor13;
        java.util.concurrent.Executor executor15 = null;
        builder0.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider25 = builder18.clientProvider;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        builder18.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder17.setLog(log26);
        retrofit.converter.Converter converter29 = null;
        builder17.converter = converter29;
        retrofit.RestAdapter.Log log31 = builder17.log;
        retrofit.RestAdapter.Builder builder32 = builder0.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder0.setServer("Retrofit-");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        java.util.concurrent.Executor executor37 = restAdapter35.httpExecutor;
        java.util.concurrent.Executor executor38 = null;
        restAdapter35.callbackExecutor = executor38;
        retrofit.ErrorHandler errorHandler40 = null;
        restAdapter35.errorHandler = errorHandler40;
        retrofit.client.Client.Provider provider42 = null;
        restAdapter35.clientProvider = provider42;
        retrofit.client.Client.Provider provider44 = null;
        restAdapter35.clientProvider = provider44;
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder47.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("Retrofit-Idle");
        retrofit.Server server56 = builder55.server;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder73 = builder71.setServer("Retrofit-Idle");
        retrofit.Server server74 = builder73.server;
        retrofit.client.Client.Provider provider75 = null;
        java.util.concurrent.Executor executor76 = null;
        java.util.concurrent.Executor executor77 = null;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        retrofit.converter.Converter converter79 = null;
        retrofit.Profiler profiler80 = null;
        retrofit.ErrorHandler errorHandler81 = null;
        retrofit.RestAdapter.Log log82 = null;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server84 = builder83.server;
        retrofit.RestAdapter.Log log85 = null;
        builder83.log = log85;
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel88 = builder87.logLevel;
        retrofit.RestAdapter.Builder builder89 = builder83.setLogLevel(logLevel88);
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server74, provider75, executor76, executor77, requestInterceptor78, converter79, profiler80, errorHandler81, log82, logLevel88);
        retrofit.RestAdapter restAdapter91 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel88);
        log64.log("hi!");
        restAdapter35.log = log64;
        retrofit.RestAdapter.Builder builder95 = builder0.setLog(log64);
        retrofit.client.Client client96 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder97 = builder0.setClient(client96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNull(server84);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test01086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01086");
        java.util.List<retrofit.client.Header> headerList2 = null;
        retrofit.mime.TypedInput typedInput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response4 = new retrofit.client.Response(0, "hi!", headerList2, typedInput3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01087");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.Server server27 = builder26.server;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel41 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder42 = builder36.setLogLevel(logLevel41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel41);
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel41);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("Retrofit-Idle");
        retrofit.Server server54 = builder53.server;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder71 = builder69.setServer("Retrofit-Idle");
        retrofit.Server server72 = builder71.server;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = null;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.Server server82 = builder81.server;
        retrofit.RestAdapter.Log log83 = null;
        builder81.log = log83;
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel86 = builder85.logLevel;
        retrofit.RestAdapter.Builder builder87 = builder81.setLogLevel(logLevel86);
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel86);
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel86);
        restAdapter44.logLevel = logLevel86;
        retrofit.converter.Converter converter91 = null;
        restAdapter44.converter = converter91;
        retrofit.client.Request request93 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request94 = restAdapter44.logAndReplaceRequest(request93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNull(server82);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test01088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01088");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.client.Client.Provider provider26 = builder19.clientProvider;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder19.log = log27;
        retrofit.RestAdapter.Builder builder29 = builder15.setLog(log27);
        retrofit.RestAdapter.Builder builder30 = builder0.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor31 = null;
        builder0.requestInterceptor = requestInterceptor31;
        java.util.concurrent.Executor executor33 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = builder34.server;
        retrofit.RestAdapter.Log log36 = null;
        builder34.log = log36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        builder38.logLevel = logLevel40;
        java.util.concurrent.Executor executor42 = null;
        builder38.callbackExecutor = executor42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor45 = null;
        restAdapter44.callbackExecutor = executor45;
        retrofit.converter.Converter converter47 = restAdapter44.converter;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        restAdapter44.log = log48;
        builder38.log = log48;
        builder34.log = log48;
        log48.log("Retrofit-Idle");
        log48.log("");
        builder0.log = log48;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = builder61.server;
        retrofit.RestAdapter.Log log63 = null;
        builder61.log = log63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel66 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder61.setLogLevel(logLevel66);
        retrofit.client.Client.Provider provider68 = builder61.clientProvider;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        builder61.log = log69;
        retrofit.RestAdapter.Builder builder71 = builder57.setLog(log69);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        retrofit.RestAdapter.Log log78 = null;
        builder76.log = log78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel81 = builder80.logLevel;
        retrofit.RestAdapter.Builder builder82 = builder76.setLogLevel(logLevel81);
        retrofit.client.Client.Provider provider83 = builder76.clientProvider;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        builder76.log = log84;
        retrofit.RestAdapter.Builder builder86 = builder72.setLog(log84);
        retrofit.RestAdapter.Builder builder87 = builder57.setLog(log84);
        log84.log("");
        retrofit.RestAdapter.Builder builder90 = builder0.setLog(log84);
        retrofit.RestAdapter.Log log91 = builder90.log;
        log91.log("Retrofit-Idle");
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(provider68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(provider83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(log91);
    }

    @Test
    public void test01089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01089");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        java.lang.Throwable throwable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable7, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(converter6);
    }

    @Test
    public void test01090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01090");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter5.new RestHandler();
        java.util.concurrent.Executor executor7 = restAdapter5.httpExecutor;
        java.util.concurrent.Executor executor8 = null;
        restAdapter5.callbackExecutor = executor8;
        retrofit.ErrorHandler errorHandler10 = null;
        restAdapter5.errorHandler = errorHandler10;
        retrofit.client.Client.Provider provider12 = null;
        restAdapter5.clientProvider = provider12;
        java.util.concurrent.Executor executor14 = restAdapter5.httpExecutor;
        retrofit.RestAdapter.Log log15 = restAdapter5.log;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        retrofit.RestAdapter restAdapter26 = builder24.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter29.new RestHandler();
        java.util.concurrent.Executor executor31 = restAdapter29.httpExecutor;
        java.util.concurrent.Executor executor32 = null;
        restAdapter29.callbackExecutor = executor32;
        retrofit.client.Client.Provider provider34 = null;
        restAdapter29.clientProvider = provider34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel41 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder42 = builder36.setLogLevel(logLevel41);
        retrofit.RestAdapter.Builder builder44 = builder42.setServer("Retrofit-Idle");
        retrofit.Server server45 = builder44.server;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = builder54.server;
        retrofit.RestAdapter.Log log56 = null;
        builder54.log = log56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel59 = builder58.logLevel;
        retrofit.RestAdapter.Builder builder60 = builder54.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder62 = builder60.setServer("Retrofit-Idle");
        retrofit.Server server63 = builder62.server;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = null;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        retrofit.RestAdapter.Builder builder78 = builder72.setLogLevel(logLevel77);
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel77);
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel77);
        restAdapter29.log = log53;
        log53.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder84 = builder27.setLog(log53);
        builder24.log = log53;
        retrofit.RequestInterceptor requestInterceptor86 = builder24.requestInterceptor;
        restAdapter5.requestInterceptor = requestInterceptor86;
        restAdapter0.requestInterceptor = requestInterceptor86;
        retrofit.RequestInterceptor requestInterceptor89 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler90 = restAdapter0.errorHandler;
        retrofit.Profiler profiler91 = restAdapter0.profiler;
        java.lang.Throwable throwable92 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable92, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(server63);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(requestInterceptor89);
        org.junit.Assert.assertNull(errorHandler90);
        org.junit.Assert.assertNull(profiler91);
    }

    @Test
    public void test01091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01091");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("Retrofit-Idle");
        builder8.ensureSaneDefaults();
        java.util.concurrent.Executor executor13 = builder8.callbackExecutor;
        retrofit.Profiler profiler14 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder15 = builder8.setProfiler(profiler14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(executor13);
    }

    @Test
    public void test01092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01092");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        java.util.concurrent.Executor executor14 = builder0.callbackExecutor;
        retrofit.Server server15 = null;
        builder0.server = server15;
        retrofit.client.Client client17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder0.setClient(client17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test01093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01093");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = builder8.server;
        retrofit.RestAdapter.Log log10 = null;
        builder8.log = log10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        retrofit.RestAdapter.Builder builder14 = builder8.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.RestAdapter restAdapter18 = builder16.build();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter21.new RestHandler();
        java.util.concurrent.Executor executor23 = restAdapter21.httpExecutor;
        java.util.concurrent.Executor executor24 = null;
        restAdapter21.callbackExecutor = executor24;
        retrofit.client.Client.Provider provider26 = null;
        restAdapter21.clientProvider = provider26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("Retrofit-Idle");
        retrofit.Server server55 = builder54.server;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = null;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel69);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel69);
        restAdapter21.log = log45;
        log45.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder76 = builder19.setLog(log45);
        builder16.log = log45;
        retrofit.RestAdapter.Log log78 = builder16.log;
        retrofit.client.Client.Provider provider79 = builder16.clientProvider;
        restAdapter0.clientProvider = provider79;
        retrofit.RestAdapter.Log log81 = restAdapter0.log;
        retrofit.client.Response response83 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response85 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response83, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(provider79);
        org.junit.Assert.assertNull(log81);
    }

    @Test
    public void test01094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01094");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.client.Client.Provider provider26 = builder19.clientProvider;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder19.log = log27;
        retrofit.RestAdapter.Builder builder29 = builder15.setLog(log27);
        retrofit.RestAdapter.Builder builder30 = builder0.setLog(log27);
        builder30.ensureSaneDefaults();
        retrofit.client.Client.Provider provider32 = null;
        builder30.clientProvider = provider32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.client.Client.Provider provider42 = builder35.clientProvider;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        builder35.log = log43;
        retrofit.RestAdapter.Builder builder45 = builder34.setLog(log43);
        retrofit.Profiler profiler46 = builder34.profiler;
        java.util.concurrent.Executor executor47 = null;
        builder34.callbackExecutor = executor47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        retrofit.client.Client.Provider provider56 = builder49.clientProvider;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        builder49.log = log57;
        builder34.log = log57;
        builder30.log = log57;
        java.util.concurrent.Executor executor61 = null;
        builder30.httpExecutor = executor61;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNotNull(log57);
    }

    @Test
    public void test01095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01095");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter.Log log16 = builder15.log;
        retrofit.converter.Converter converter17 = builder15.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = builder26.setLog(log27);
        retrofit.Profiler profiler29 = builder28.profiler;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder36.setServer("Retrofit-Idle");
        retrofit.Server server39 = builder38.server;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = null;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel53);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel53);
        retrofit.RestAdapter.Builder builder56 = builder28.setServer(server39);
        retrofit.converter.Converter converter57 = null;
        builder28.converter = converter57;
        retrofit.converter.Converter converter59 = null;
        builder28.converter = converter59;
        retrofit.RestAdapter.Log log61 = builder28.log;
        retrofit.RestAdapter.LogLevel logLevel62 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder71 = builder69.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder73 = builder71.setLog(log72);
        java.util.concurrent.Executor executor74 = builder71.httpExecutor;
        java.util.concurrent.Executor executor75 = null;
        builder71.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server78 = builder77.server;
        retrofit.RestAdapter.Log log79 = null;
        builder77.log = log79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        retrofit.RestAdapter.Builder builder83 = builder77.setLogLevel(logLevel82);
        retrofit.RestAdapter.Builder builder85 = builder83.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter86 = builder85.build();
        retrofit.RestAdapter.LogLevel logLevel87 = restAdapter86.logLevel;
        builder71.logLevel = logLevel87;
        builder71.ensureSaneDefaults();
        retrofit.client.Client.Provider provider90 = builder71.clientProvider;
        builder28.clientProvider = provider90;
        retrofit.RestAdapter.Builder builder92 = builder15.setClient(provider90);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(server39);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(server78);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test01096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01096");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.Profiler profiler7 = null;
        builder0.profiler = profiler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        retrofit.client.Client.Provider provider20 = builder13.clientProvider;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder9.setLog(log21);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        java.util.concurrent.Executor executor26 = restAdapter24.httpExecutor;
        java.util.concurrent.Executor executor27 = null;
        restAdapter24.callbackExecutor = executor27;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter24.errorHandler = errorHandler29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter24.logLevel = logLevel31;
        builder9.logLevel = logLevel31;
        builder9.ensureSaneDefaults();
        java.util.concurrent.Executor executor35 = builder9.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.client.Client.Provider provider47 = builder40.clientProvider;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        builder40.log = log48;
        retrofit.RestAdapter.Builder builder50 = builder36.setLog(log48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider62 = builder55.clientProvider;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        builder55.log = log63;
        retrofit.RestAdapter.Builder builder65 = builder51.setLog(log63);
        retrofit.RestAdapter.Builder builder66 = builder36.setLog(log63);
        retrofit.ErrorHandler errorHandler67 = null;
        builder66.errorHandler = errorHandler67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = builder69.callbackExecutor;
        retrofit.Profiler profiler71 = builder69.profiler;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = builder74.server;
        retrofit.RestAdapter.Log log76 = null;
        builder74.log = log76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel79 = builder78.logLevel;
        retrofit.RestAdapter.Builder builder80 = builder74.setLogLevel(logLevel79);
        retrofit.RestAdapter.Builder builder82 = builder80.setServer("Retrofit-Idle");
        retrofit.Server server83 = builder82.server;
        retrofit.RestAdapter.Builder builder84 = builder73.setServer(server83);
        retrofit.RestAdapter restAdapter85 = builder84.build();
        java.util.concurrent.Executor executor86 = restAdapter85.callbackExecutor;
        builder66.httpExecutor = executor86;
        retrofit.RestAdapter.Builder builder88 = builder0.setExecutors(executor35, executor86);
        retrofit.ErrorHandler errorHandler89 = builder0.errorHandler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(server75);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(errorHandler89);
    }

    @Test
    public void test01097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01097");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.Profiler profiler10 = builder8.profiler;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("Retrofit-Idle");
        retrofit.Server server22 = builder21.server;
        retrofit.RestAdapter.Builder builder23 = builder12.setServer(server22);
        retrofit.RestAdapter restAdapter24 = builder23.build();
        retrofit.RestAdapter.Log log25 = builder23.log;
        retrofit.Profiler profiler26 = builder23.profiler;
        retrofit.Server server27 = builder23.server;
        retrofit.client.Client.Provider provider28 = builder23.clientProvider;
        retrofit.RestAdapter.Builder builder29 = builder0.setClient(provider28);
        retrofit.RestAdapter.Log log30 = builder29.log;
        retrofit.client.Client client31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder29.setClient(client31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(provider28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(log30);
    }

    @Test
    public void test01098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01098");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        retrofit.converter.Converter converter15 = builder0.converter;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        builder23.logLevel = logLevel25;
        boolean boolean27 = logLevel25.log();
        builder16.logLevel = logLevel25;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        builder16.requestInterceptor = requestInterceptor29;
        java.util.concurrent.Executor executor31 = null;
        builder16.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.client.Client.Provider provider40 = builder33.clientProvider;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        builder33.log = log41;
        builder16.log = log41;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        builder51.logLevel = logLevel53;
        boolean boolean55 = logLevel53.log();
        builder44.logLevel = logLevel53;
        retrofit.RestAdapter.LogLevel logLevel57 = builder44.logLevel;
        retrofit.Profiler profiler58 = builder44.profiler;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = builder59.callbackExecutor;
        retrofit.Profiler profiler61 = builder59.profiler;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("Retrofit-Idle");
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Builder builder74 = builder63.setServer(server73);
        retrofit.RestAdapter.Builder builder75 = builder44.setServer(server73);
        retrofit.RestAdapter.Builder builder76 = builder16.setServer(server73);
        builder0.server = server73;
        retrofit.client.Client client78 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder79 = builder0.setClient(client78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler58);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(profiler61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test01099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01099");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.client.Client.Provider provider6 = null;
        builder0.clientProvider = provider6;
        retrofit.Server server8 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor9 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder20 = builder14.setLogLevel(logLevel19);
        retrofit.client.Client.Provider provider21 = builder14.clientProvider;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        builder14.log = log22;
        retrofit.RestAdapter.Builder builder24 = builder10.setLog(log22);
        retrofit.Server server25 = builder10.server;
        java.util.concurrent.Executor executor26 = builder10.callbackExecutor;
        java.util.concurrent.Executor executor27 = null;
        builder10.callbackExecutor = executor27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter29.new RestHandler();
        java.util.concurrent.Executor executor31 = restAdapter29.httpExecutor;
        java.util.concurrent.Executor executor32 = null;
        restAdapter29.callbackExecutor = executor32;
        retrofit.ErrorHandler errorHandler34 = null;
        restAdapter29.errorHandler = errorHandler34;
        retrofit.client.Client.Provider provider36 = null;
        restAdapter29.clientProvider = provider36;
        retrofit.client.Client.Provider provider38 = null;
        restAdapter29.clientProvider = provider38;
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = builder41.callbackExecutor;
        retrofit.Profiler profiler43 = builder41.profiler;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("Retrofit-Idle");
        retrofit.Server server55 = builder54.server;
        retrofit.RestAdapter.Builder builder56 = builder45.setServer(server55);
        retrofit.RestAdapter.Log log57 = builder56.log;
        retrofit.RestAdapter.LogLevel logLevel58 = builder56.logLevel;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = builder59.server;
        retrofit.RestAdapter.Log log61 = null;
        builder59.log = log61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        retrofit.RestAdapter.Builder builder65 = builder59.setLogLevel(logLevel64);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        builder66.logLevel = logLevel68;
        boolean boolean70 = logLevel68.log();
        builder59.logLevel = logLevel68;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        builder59.requestInterceptor = requestInterceptor72;
        retrofit.converter.Converter converter74 = null;
        builder59.converter = converter74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = builder76.callbackExecutor;
        retrofit.Profiler profiler78 = builder76.profiler;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.Server server82 = builder81.server;
        retrofit.RestAdapter.Log log83 = null;
        builder81.log = log83;
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel86 = builder85.logLevel;
        retrofit.RestAdapter.Builder builder87 = builder81.setLogLevel(logLevel86);
        retrofit.RestAdapter.Builder builder89 = builder87.setServer("Retrofit-Idle");
        retrofit.Server server90 = builder89.server;
        retrofit.RestAdapter.Builder builder91 = builder80.setServer(server90);
        retrofit.RestAdapter restAdapter92 = builder91.build();
        java.util.concurrent.Executor executor93 = restAdapter92.callbackExecutor;
        builder59.httpExecutor = executor93;
        builder56.httpExecutor = executor93;
        restAdapter29.callbackExecutor = executor93;
        builder10.httpExecutor = executor93;
        builder0.httpExecutor = executor93;
        retrofit.RequestInterceptor requestInterceptor99 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNull(profiler78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(server82);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(server90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertNotNull(executor93);
        org.junit.Assert.assertNull(requestInterceptor99);
    }

    @Test
    public void test01100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01100");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log8 = restAdapter0.log;
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        builder11.logLevel = logLevel13;
        boolean boolean15 = logLevel13.log();
        restAdapter0.logLevel = logLevel13;
        retrofit.Profiler profiler17 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter18.errorHandler = errorHandler20;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter18.new RestHandler();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter23.new RestHandler();
        java.util.concurrent.Executor executor25 = restAdapter23.httpExecutor;
        java.util.concurrent.Executor executor26 = null;
        restAdapter23.callbackExecutor = executor26;
        retrofit.client.Client.Provider provider28 = null;
        restAdapter23.clientProvider = provider28;
        java.util.concurrent.Executor executor30 = null;
        restAdapter23.callbackExecutor = executor30;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter23.logLevel;
        retrofit.Server server33 = null;
        restAdapter23.server = server33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = builder45.callbackExecutor;
        retrofit.Profiler profiler47 = builder45.profiler;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Log log52 = null;
        builder50.log = log52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel55 = builder54.logLevel;
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder58 = builder56.setServer("Retrofit-Idle");
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Builder builder60 = builder49.setServer(server59);
        retrofit.RestAdapter restAdapter61 = builder60.build();
        java.util.concurrent.Executor executor62 = restAdapter61.callbackExecutor;
        builder43.callbackExecutor = executor62;
        restAdapter23.callbackExecutor = executor62;
        restAdapter18.callbackExecutor = executor62;
        restAdapter0.callbackExecutor = executor62;
        retrofit.Profiler profiler67 = restAdapter0.profiler;
        retrofit.converter.Converter converter68 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(profiler67);
        org.junit.Assert.assertNull(converter68);
    }

    @Test
    public void test01101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01101");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.callbackExecutor;
        retrofit.Profiler profiler7 = builder5.profiler;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Builder builder20 = builder9.setServer(server19);
        retrofit.RestAdapter restAdapter21 = builder20.build();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        builder29.logLevel = logLevel31;
        boolean boolean33 = logLevel31.log();
        builder22.logLevel = logLevel31;
        retrofit.RestAdapter.LogLevel logLevel35 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder20.setLogLevel(logLevel35);
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        retrofit.RestAdapter.Builder builder38 = builder0.setLogLevel(logLevel37);
        retrofit.Profiler profiler39 = builder0.profiler;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.client.Client.Provider provider48 = builder41.clientProvider;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        builder41.log = log49;
        retrofit.RestAdapter.Builder builder51 = builder40.setLog(log49);
        retrofit.Profiler profiler52 = builder40.profiler;
        retrofit.RequestInterceptor requestInterceptor53 = builder40.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel54 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder0.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder64 = builder62.setServer("Retrofit-Idle");
        retrofit.Server server65 = builder64.server;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = null;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = builder74.server;
        retrofit.RestAdapter.Log log76 = null;
        builder74.log = log76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel79 = builder78.logLevel;
        retrofit.RestAdapter.Builder builder80 = builder74.setLogLevel(logLevel79);
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server65, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel79);
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.Server server83 = builder82.server;
        java.util.concurrent.Executor executor84 = null;
        builder82.httpExecutor = executor84;
        retrofit.Server server86 = builder82.server;
        retrofit.RestAdapter.LogLevel logLevel87 = builder82.logLevel;
        restAdapter81.logLevel = logLevel87;
        builder55.logLevel = logLevel87;
        retrofit.client.Client client90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder91 = builder55.setClient(client90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertNull(server75);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertNull(server86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01102");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = builder10.callbackExecutor;
        retrofit.Profiler profiler12 = builder10.profiler;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("Retrofit-Idle");
        retrofit.Server server18 = builder14.server;
        builder0.server = server18;
        retrofit.RestAdapter restAdapter20 = builder0.build();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = builder21.server;
        java.util.concurrent.Executor executor23 = null;
        builder21.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("Retrofit-Idle");
        retrofit.Server server36 = builder35.server;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.client.Client.Provider provider52 = builder45.clientProvider;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        builder45.log = log53;
        retrofit.RestAdapter.Builder builder55 = builder44.setLog(log53);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log53, logLevel56);
        retrofit.RestAdapter.Builder builder58 = builder25.setServer(server36);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = builder59.server;
        retrofit.RestAdapter.Log log61 = null;
        builder59.log = log61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        retrofit.RestAdapter.Builder builder65 = builder59.setLogLevel(logLevel64);
        retrofit.RestAdapter.Builder builder67 = builder65.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter68 = builder67.build();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.logLevel;
        retrofit.RequestInterceptor requestInterceptor70 = restAdapter68.requestInterceptor;
        retrofit.RestAdapter.Builder builder71 = builder58.setRequestInterceptor(requestInterceptor70);
        retrofit.RestAdapter.Builder builder72 = builder21.setRequestInterceptor(requestInterceptor70);
        retrofit.RestAdapter.Builder builder73 = builder0.setRequestInterceptor(requestInterceptor70);
        retrofit.RestAdapter restAdapter74 = builder73.build();
        retrofit.client.Response response76 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response78 = restAdapter74.logAndReplaceResponse("", response76, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
    }

    @Test
    public void test01103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01103");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        builder18.logLevel = logLevel20;
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel20);
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.client.Client.Provider provider42 = builder35.clientProvider;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        builder35.log = log43;
        retrofit.RestAdapter.Builder builder45 = builder31.setLog(log43);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Log log52 = null;
        builder50.log = log52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel55 = builder54.logLevel;
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel55);
        retrofit.client.Client.Provider provider57 = builder50.clientProvider;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        builder50.log = log58;
        retrofit.RestAdapter.Builder builder60 = builder46.setLog(log58);
        retrofit.RestAdapter.Builder builder61 = builder31.setLog(log58);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        java.util.concurrent.Executor executor64 = null;
        builder62.httpExecutor = executor64;
        retrofit.Server server66 = builder62.server;
        retrofit.RestAdapter.LogLevel logLevel67 = builder62.logLevel;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server9, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log58, logLevel67);
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.converter.Converter converter70 = restAdapter68.converter;
        java.lang.Class<?> wildcardClass71 = restAdapter68.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test01104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01104");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.Server server32 = builder31.server;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel46);
        restAdapter0.server = server14;
        retrofit.client.Client.Provider provider51 = null;
        restAdapter0.clientProvider = provider51;
        retrofit.RestAdapter.Log log53 = restAdapter0.log;
        retrofit.client.Client.Provider provider54 = null;
        restAdapter0.clientProvider = provider54;
        java.util.concurrent.Executor executor56 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel63 = builder62.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder66 = builder64.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = builder66.setLog(log67);
        java.util.concurrent.Executor executor69 = builder66.httpExecutor;
        java.util.concurrent.Executor executor70 = null;
        builder66.httpExecutor = executor70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        retrofit.RestAdapter.Builder builder78 = builder72.setLogLevel(logLevel77);
        retrofit.RestAdapter.Builder builder80 = builder78.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter81 = builder80.build();
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter81.logLevel;
        builder66.logLevel = logLevel82;
        builder66.ensureSaneDefaults();
        retrofit.client.Client.Provider provider85 = builder66.clientProvider;
        restAdapter0.clientProvider = provider85;
        retrofit.RestAdapter.RestHandler restHandler87 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor89 = null;
        restAdapter88.callbackExecutor = executor89;
        retrofit.converter.Converter converter91 = restAdapter88.converter;
        retrofit.RestAdapter.Log log92 = retrofit.RestAdapter.Log.NONE;
        restAdapter88.log = log92;
        restAdapter0.log = log92;
        java.util.concurrent.Executor executor95 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider85);
        org.junit.Assert.assertNull(converter91);
        org.junit.Assert.assertNotNull(log92);
        org.junit.Assert.assertNull(executor95);
    }

    @Test
    public void test01105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01105");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter6.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter6.logLevel;
        retrofit.ErrorHandler errorHandler9 = restAdapter6.errorHandler;
        retrofit.converter.Converter converter10 = null;
        restAdapter6.converter = converter10;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter6.logLevel;
        java.util.concurrent.Executor executor13 = restAdapter6.httpExecutor;
        retrofit.RestAdapter.Log log14 = restAdapter6.log;
        retrofit.Profiler profiler15 = null;
        restAdapter6.profiler = profiler15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        builder17.logLevel = logLevel19;
        boolean boolean21 = logLevel19.log();
        restAdapter6.logLevel = logLevel19;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter23.new RestHandler();
        java.util.concurrent.Executor executor25 = restAdapter23.httpExecutor;
        java.util.concurrent.Executor executor26 = null;
        restAdapter23.callbackExecutor = executor26;
        retrofit.ErrorHandler errorHandler28 = null;
        restAdapter23.errorHandler = errorHandler28;
        retrofit.client.Client.Provider provider30 = null;
        restAdapter23.clientProvider = provider30;
        retrofit.client.Client.Provider provider32 = null;
        restAdapter23.clientProvider = provider32;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = builder35.callbackExecutor;
        retrofit.Profiler profiler37 = builder35.profiler;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("Retrofit-Idle");
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Builder builder50 = builder39.setServer(server49);
        retrofit.RestAdapter.Log log51 = builder50.log;
        retrofit.RestAdapter.LogLevel logLevel52 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        builder60.logLevel = logLevel62;
        boolean boolean64 = logLevel62.log();
        builder53.logLevel = logLevel62;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        builder53.requestInterceptor = requestInterceptor66;
        retrofit.converter.Converter converter68 = null;
        builder53.converter = converter68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = builder70.callbackExecutor;
        retrofit.Profiler profiler72 = builder70.profiler;
        retrofit.RestAdapter.Builder builder74 = builder70.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.Server server76 = builder75.server;
        retrofit.RestAdapter.Log log77 = null;
        builder75.log = log77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel80 = builder79.logLevel;
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel80);
        retrofit.RestAdapter.Builder builder83 = builder81.setServer("Retrofit-Idle");
        retrofit.Server server84 = builder83.server;
        retrofit.RestAdapter.Builder builder85 = builder74.setServer(server84);
        retrofit.RestAdapter restAdapter86 = builder85.build();
        java.util.concurrent.Executor executor87 = restAdapter86.callbackExecutor;
        builder53.httpExecutor = executor87;
        builder50.httpExecutor = executor87;
        restAdapter23.callbackExecutor = executor87;
        restAdapter6.httpExecutor = executor87;
        builder0.httpExecutor = executor87;
        retrofit.Server server93 = null;
        builder0.server = server93;
        retrofit.RequestInterceptor requestInterceptor95 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(profiler72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNull(requestInterceptor95);
    }

    @Test
    public void test01106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01106");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder0.requestInterceptor = requestInterceptor13;
        java.util.concurrent.Executor executor15 = null;
        builder0.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider25 = builder18.clientProvider;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        builder18.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder17.setLog(log26);
        retrofit.converter.Converter converter29 = null;
        builder17.converter = converter29;
        retrofit.RestAdapter.Log log31 = builder17.log;
        retrofit.RestAdapter.Builder builder32 = builder0.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder0.setServer("Retrofit-");
        retrofit.RestAdapter.LogLevel logLevel35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder0.setLogLevel(logLevel35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test01107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01107");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.Server server2 = builder1.server;
        retrofit.RestAdapter.Log log3 = null;
        builder1.log = log3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder7 = builder1.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder1.clientProvider;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder1.log = log9;
        retrofit.RestAdapter.Builder builder11 = builder0.setLog(log9);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.RestAdapter restAdapter22 = builder20.build();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter25.new RestHandler();
        java.util.concurrent.Executor executor27 = restAdapter25.httpExecutor;
        java.util.concurrent.Executor executor28 = null;
        restAdapter25.callbackExecutor = executor28;
        retrofit.client.Client.Provider provider30 = null;
        restAdapter25.clientProvider = provider30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Log log34 = null;
        builder32.log = log34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder40 = builder38.setServer("Retrofit-Idle");
        retrofit.Server server41 = builder40.server;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Log log52 = null;
        builder50.log = log52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel55 = builder54.logLevel;
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder58 = builder56.setServer("Retrofit-Idle");
        retrofit.Server server59 = builder58.server;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = null;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = builder68.server;
        retrofit.RestAdapter.Log log70 = null;
        builder68.log = log70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel73 = builder72.logLevel;
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel73);
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel73);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel73);
        restAdapter25.log = log49;
        log49.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder80 = builder23.setLog(log49);
        builder20.log = log49;
        retrofit.RequestInterceptor requestInterceptor82 = builder20.requestInterceptor;
        builder0.requestInterceptor = requestInterceptor82;
        retrofit.converter.Converter converter84 = builder0.converter;
        retrofit.converter.Converter converter85 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel86 = builder0.logLevel;
        retrofit.Profiler profiler87 = null;
        builder0.profiler = profiler87;
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNull(converter84);
        org.junit.Assert.assertNull(converter85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01108");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        java.util.concurrent.Executor executor15 = null;
        builder0.httpExecutor = executor15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter17.new RestHandler();
        java.util.concurrent.Executor executor19 = restAdapter17.httpExecutor;
        java.util.concurrent.Executor executor20 = null;
        restAdapter17.callbackExecutor = executor20;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter17.errorHandler = errorHandler22;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter17.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter17.logLevel = logLevel26;
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder0.setLogLevel(logLevel26);
        retrofit.client.Client.Provider provider30 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.ErrorHandler errorHandler33 = builder31.errorHandler;
        retrofit.Server server34 = builder31.server;
        retrofit.RestAdapter.Log log35 = builder31.log;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = builder36.clientProvider;
        retrofit.Profiler profiler39 = null;
        builder36.profiler = profiler39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel48 = builder47.logLevel;
        retrofit.RestAdapter.Builder builder49 = builder43.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("Retrofit-Idle");
        retrofit.Server server52 = builder51.server;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = builder61.server;
        retrofit.RestAdapter.Log log63 = null;
        builder61.log = log63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel66 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder61.setLogLevel(logLevel66);
        retrofit.client.Client.Provider provider68 = builder61.clientProvider;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        builder61.log = log69;
        retrofit.RestAdapter.Builder builder71 = builder60.setLog(log69);
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log69, logLevel72);
        retrofit.RestAdapter.Builder builder74 = builder41.setServer(server52);
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.Server server76 = builder75.server;
        retrofit.RestAdapter.Log log77 = null;
        builder75.log = log77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel80 = builder79.logLevel;
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel80);
        retrofit.RestAdapter.Builder builder83 = builder81.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter84 = builder83.build();
        retrofit.RestAdapter.LogLevel logLevel85 = restAdapter84.logLevel;
        retrofit.RequestInterceptor requestInterceptor86 = restAdapter84.requestInterceptor;
        retrofit.RestAdapter.Builder builder87 = builder74.setRequestInterceptor(requestInterceptor86);
        retrofit.RestAdapter.Builder builder88 = builder36.setRequestInterceptor(requestInterceptor86);
        builder31.requestInterceptor = requestInterceptor86;
        builder0.requestInterceptor = requestInterceptor86;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(provider68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test01109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01109");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        java.util.concurrent.Executor executor8 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        builder16.logLevel = logLevel18;
        boolean boolean20 = logLevel18.log();
        builder9.logLevel = logLevel18;
        retrofit.RestAdapter.LogLevel logLevel22 = builder9.logLevel;
        retrofit.Profiler profiler23 = builder9.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.Profiler profiler26 = builder24.profiler;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Builder builder39 = builder28.setServer(server38);
        retrofit.RestAdapter.Builder builder40 = builder9.setServer(server38);
        retrofit.RestAdapter.Builder builder41 = builder6.setServer(server38);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.ErrorHandler errorHandler44 = null;
        builder42.errorHandler = errorHandler44;
        retrofit.converter.Converter converter46 = builder42.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder41.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        builder56.logLevel = logLevel58;
        boolean boolean60 = logLevel58.log();
        builder49.logLevel = logLevel58;
        retrofit.RestAdapter.LogLevel logLevel62 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder41.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = builder68.server;
        retrofit.RestAdapter.Log log70 = null;
        builder68.log = log70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel73 = builder72.logLevel;
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel73);
        retrofit.client.Client.Provider provider75 = builder68.clientProvider;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        builder68.log = log76;
        retrofit.RestAdapter.Builder builder78 = builder64.setLog(log76);
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = builder79.server;
        retrofit.RestAdapter.Log log81 = null;
        builder79.log = log81;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server84 = builder83.server;
        retrofit.RestAdapter.Log log85 = null;
        builder83.log = log85;
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel88 = builder87.logLevel;
        retrofit.RestAdapter.Builder builder89 = builder83.setLogLevel(logLevel88);
        retrofit.client.Client.Provider provider90 = builder83.clientProvider;
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        builder83.log = log91;
        retrofit.RestAdapter.Builder builder93 = builder79.setLog(log91);
        retrofit.RestAdapter.Builder builder94 = builder64.setLog(log91);
        builder41.log = log91;
        java.lang.Class<?> wildcardClass96 = log91.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(provider75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(server80);
        org.junit.Assert.assertNull(server84);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(provider90);
        org.junit.Assert.assertNotNull(log91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test01110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01110");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.httpExecutor = executor3;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        restAdapter0.requestInterceptor = requestInterceptor6;
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        retrofit.Server server9 = null;
        restAdapter0.server = server9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter0.requestInterceptor;
        retrofit.client.Response response13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response15 = restAdapter0.logAndReplaceResponse("", response13, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(requestInterceptor11);
    }

    @Test
    public void test01111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01111");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.Profiler profiler17 = builder15.profiler;
        retrofit.ErrorHandler errorHandler18 = builder15.errorHandler;
        java.util.concurrent.Executor executor19 = builder15.callbackExecutor;
        retrofit.Profiler profiler20 = builder15.profiler;
        retrofit.client.Client client21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder15.setClient(client21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNull(profiler20);
    }

    @Test
    public void test01112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01112");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        builder4.logLevel = logLevel6;
        java.util.concurrent.Executor executor8 = null;
        builder4.callbackExecutor = executor8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = null;
        restAdapter10.callbackExecutor = executor11;
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter10.log = log14;
        builder4.log = log14;
        builder0.log = log14;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        java.util.concurrent.Executor executor20 = restAdapter18.httpExecutor;
        java.util.concurrent.Executor executor21 = null;
        restAdapter18.callbackExecutor = executor21;
        retrofit.client.Client.Provider provider23 = null;
        restAdapter18.clientProvider = provider23;
        java.util.concurrent.Executor executor25 = null;
        restAdapter18.callbackExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter36 = builder35.build();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.logLevel;
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter36.requestInterceptor;
        restAdapter18.requestInterceptor = requestInterceptor38;
        builder0.requestInterceptor = requestInterceptor38;
        retrofit.Profiler profiler41 = null;
        builder0.profiler = profiler41;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter43 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor38);
    }

    @Test
    public void test01113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01113");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.RestAdapter.Log log17 = builder15.log;
        retrofit.Profiler profiler18 = builder15.profiler;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter19.logLevel;
        retrofit.ErrorHandler errorHandler22 = restAdapter19.errorHandler;
        retrofit.converter.Converter converter23 = null;
        restAdapter19.converter = converter23;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter19.logLevel;
        java.util.concurrent.Executor executor26 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.Log log27 = restAdapter19.log;
        retrofit.Profiler profiler28 = null;
        restAdapter19.profiler = profiler28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        builder30.logLevel = logLevel32;
        boolean boolean34 = logLevel32.log();
        restAdapter19.logLevel = logLevel32;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter19.logLevel;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter19.errorHandler = errorHandler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = builder39.server;
        retrofit.RestAdapter.Log log41 = null;
        builder39.log = log41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel44 = builder43.logLevel;
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder47 = builder45.setServer("Retrofit-Idle");
        retrofit.Server server48 = builder47.server;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = null;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel62);
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        retrofit.RestAdapter.Log log78 = null;
        builder76.log = log78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel81 = builder80.logLevel;
        retrofit.RestAdapter.Builder builder82 = builder76.setLogLevel(logLevel81);
        retrofit.client.Client.Provider provider83 = builder76.clientProvider;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        builder76.log = log84;
        retrofit.RestAdapter.Builder builder86 = builder72.setLog(log84);
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server48, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log84, logLevel87);
        retrofit.converter.Converter converter89 = null;
        restAdapter88.converter = converter89;
        retrofit.RestAdapter.RestHandler restHandler91 = restAdapter88.new RestHandler();
        retrofit.Server server92 = restAdapter88.server;
        restAdapter19.server = server92;
        retrofit.RestAdapter.Builder builder94 = builder15.setServer(server92);
        retrofit.Profiler profiler95 = null;
        builder15.profiler = profiler95;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(server48);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(provider83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test01114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01114");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        java.util.concurrent.Executor executor9 = null;
        builder7.httpExecutor = executor9;
        retrofit.Server server11 = builder7.server;
        retrofit.RestAdapter.LogLevel logLevel12 = builder7.logLevel;
        restAdapter0.logLevel = logLevel12;
        retrofit.converter.Converter converter14 = null;
        restAdapter0.converter = converter14;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01115");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.Server server11 = builder6.server;
        retrofit.RestAdapter restAdapter12 = builder6.build();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        builder20.logLevel = logLevel22;
        boolean boolean24 = logLevel22.log();
        builder13.logLevel = logLevel22;
        retrofit.RestAdapter.LogLevel logLevel26 = builder13.logLevel;
        retrofit.Profiler profiler27 = builder13.profiler;
        java.util.concurrent.Executor executor28 = null;
        builder13.httpExecutor = executor28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter30.new RestHandler();
        java.util.concurrent.Executor executor32 = restAdapter30.httpExecutor;
        java.util.concurrent.Executor executor33 = null;
        restAdapter30.callbackExecutor = executor33;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter30.errorHandler = errorHandler35;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter30.logLevel = logLevel37;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter30.logLevel = logLevel39;
        boolean boolean41 = logLevel39.log();
        retrofit.RestAdapter.Builder builder42 = builder13.setLogLevel(logLevel39);
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        boolean boolean44 = logLevel43.log();
        retrofit.RestAdapter.Builder builder45 = builder6.setLogLevel(logLevel43);
        retrofit.ErrorHandler errorHandler46 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder47.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("Retrofit-Idle");
        retrofit.Server server56 = builder55.server;
        retrofit.Profiler profiler57 = null;
        builder55.profiler = profiler57;
        retrofit.Profiler profiler59 = null;
        builder55.profiler = profiler59;
        retrofit.RestAdapter restAdapter61 = builder55.build();
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter61.requestInterceptor;
        retrofit.RestAdapter.Builder builder63 = builder6.setRequestInterceptor(requestInterceptor62);
        retrofit.RestAdapter.Builder builder65 = builder6.setServer("Retrofit-");
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test01116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01116");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.Profiler profiler9 = builder7.profiler;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter.LogLevel logLevel13 = builder11.logLevel;
        retrofit.RestAdapter.LogLevel logLevel14 = builder11.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01117");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.Server server2 = builder1.server;
        retrofit.RestAdapter.Log log3 = null;
        builder1.log = log3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder7 = builder1.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder1.clientProvider;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder1.log = log9;
        retrofit.RestAdapter.Builder builder11 = builder0.setLog(log9);
        retrofit.Profiler profiler12 = builder11.profiler;
        retrofit.converter.Converter converter13 = null;
        builder11.converter = converter13;
        builder11.ensureSaneDefaults();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter16 = builder11.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(profiler12);
    }

    @Test
    public void test01118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01118");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setProfiler(profiler5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor3);
    }

    @Test
    public void test01119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01119");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder0.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        java.util.concurrent.Executor executor26 = builder24.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        builder34.logLevel = logLevel36;
        boolean boolean38 = logLevel36.log();
        builder27.logLevel = logLevel36;
        retrofit.RestAdapter.LogLevel logLevel40 = builder27.logLevel;
        retrofit.Profiler profiler41 = builder27.profiler;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = builder42.callbackExecutor;
        retrofit.Profiler profiler44 = builder42.profiler;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder47.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("Retrofit-Idle");
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Builder builder57 = builder46.setServer(server56);
        retrofit.RestAdapter.Builder builder58 = builder27.setServer(server56);
        retrofit.RestAdapter.Builder builder59 = builder24.setServer(server56);
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        retrofit.RestAdapter.Log log69 = null;
        builder67.log = log69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        retrofit.client.Client.Provider provider78 = builder71.clientProvider;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        builder71.log = log79;
        retrofit.RestAdapter.Builder builder81 = builder67.setLog(log79);
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.Server server83 = builder82.server;
        retrofit.RestAdapter.Log log84 = null;
        builder82.log = log84;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel87 = builder86.logLevel;
        retrofit.RestAdapter.Builder builder88 = builder82.setLogLevel(logLevel87);
        retrofit.RestAdapter.Builder builder90 = builder88.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter91 = builder90.build();
        retrofit.RestAdapter.LogLevel logLevel92 = restAdapter91.logLevel;
        retrofit.RestAdapter restAdapter93 = new retrofit.RestAdapter(server56, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log79, logLevel92);
        retrofit.RestAdapter.Builder builder94 = builder0.setLogLevel(logLevel92);
        retrofit.Profiler profiler95 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder96 = builder0.setProfiler(profiler95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(profiler44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test01120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01120");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        java.util.concurrent.Executor executor16 = null;
        builder0.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = builder0.converter;
        retrofit.ErrorHandler errorHandler19 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler20 = null;
        builder0.errorHandler = errorHandler20;
        builder0.ensureSaneDefaults();
        java.lang.Class<?> wildcardClass23 = builder0.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test01121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01121");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter25.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = builder61.server;
        retrofit.RestAdapter.Log log63 = null;
        builder61.log = log63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.client.Client.Provider provider72 = builder65.clientProvider;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        builder65.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder61.setLog(log73);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server37, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log73, logLevel76);
        restAdapter25.logLevel = logLevel76;
        retrofit.ErrorHandler errorHandler79 = restAdapter25.errorHandler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(provider72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler79);
    }

    @Test
    public void test01122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01122");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.Server server5 = restAdapter0.server;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler8 = restAdapter0.profiler;
        retrofit.client.Request request9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request10 = restAdapter0.logAndReplaceRequest(request9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler8);
    }

    @Test
    public void test01123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01123");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = builder2.server;
        retrofit.RestAdapter.Log log4 = null;
        builder2.log = log4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel7 = builder6.logLevel;
        retrofit.RestAdapter.Builder builder8 = builder2.setLogLevel(logLevel7);
        retrofit.RequestInterceptor requestInterceptor9 = null;
        builder2.requestInterceptor = requestInterceptor9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel16 = builder15.logLevel;
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel16);
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("Retrofit-Idle");
        retrofit.Server server20 = builder19.server;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.Server server38 = builder37.server;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = null;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder47.setLogLevel(logLevel52);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel52);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel52);
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        retrofit.RestAdapter.Log log69 = null;
        builder67.log = log69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel72 = builder71.logLevel;
        retrofit.RestAdapter.Builder builder73 = builder67.setLogLevel(logLevel72);
        retrofit.client.Client.Provider provider74 = builder67.clientProvider;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        builder67.log = log75;
        retrofit.RestAdapter.Builder builder77 = builder63.setLog(log75);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.Server server79 = builder78.server;
        retrofit.RestAdapter.Log log80 = null;
        builder78.log = log80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        retrofit.RestAdapter.Builder builder84 = builder78.setLogLevel(logLevel83);
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server20, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log75, logLevel83);
        builder2.log = log75;
        builder0.log = log75;
        retrofit.Profiler profiler88 = null;
        builder0.profiler = profiler88;
        retrofit.converter.Converter converter90 = builder0.converter;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(server79);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(converter90);
    }

    @Test
    public void test01124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01124");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        builder4.logLevel = logLevel6;
        java.util.concurrent.Executor executor8 = null;
        builder4.callbackExecutor = executor8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = null;
        restAdapter10.callbackExecutor = executor11;
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter10.log = log14;
        builder4.log = log14;
        builder0.log = log14;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        java.util.concurrent.Executor executor20 = restAdapter18.httpExecutor;
        java.util.concurrent.Executor executor21 = null;
        restAdapter18.callbackExecutor = executor21;
        retrofit.client.Client.Provider provider23 = null;
        restAdapter18.clientProvider = provider23;
        java.util.concurrent.Executor executor25 = null;
        restAdapter18.callbackExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter36 = builder35.build();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.logLevel;
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter36.requestInterceptor;
        restAdapter18.requestInterceptor = requestInterceptor38;
        builder0.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter.Builder builder42 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder44 = builder42.setServer("Retrofit-");
        java.util.concurrent.Executor executor45 = builder42.httpExecutor;
        retrofit.ErrorHandler errorHandler46 = builder42.errorHandler;
        retrofit.client.Client client47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder42.setClient(client47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(errorHandler46);
    }

    @Test
    public void test01125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01125");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder0.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.Log log9 = builder0.log;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = null;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        builder28.logLevel = logLevel30;
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel30);
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.client.Client.Provider provider52 = builder45.clientProvider;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        builder45.log = log53;
        retrofit.RestAdapter.Builder builder55 = builder41.setLog(log53);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = builder60.server;
        retrofit.RestAdapter.Log log62 = null;
        builder60.log = log62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel65 = builder64.logLevel;
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel65);
        retrofit.client.Client.Provider provider67 = builder60.clientProvider;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        builder60.log = log68;
        retrofit.RestAdapter.Builder builder70 = builder56.setLog(log68);
        retrofit.RestAdapter.Builder builder71 = builder41.setLog(log68);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        java.util.concurrent.Executor executor74 = null;
        builder72.httpExecutor = executor74;
        retrofit.Server server76 = builder72.server;
        retrofit.RestAdapter.LogLevel logLevel77 = builder72.logLevel;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server19, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log68, logLevel77);
        retrofit.RestAdapter.Builder builder79 = builder0.setLogLevel(logLevel77);
        retrofit.Profiler profiler80 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder81 = builder79.setProfiler(profiler80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test01126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01126");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.RestAdapter restAdapter17 = builder15.build();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter20.new RestHandler();
        java.util.concurrent.Executor executor22 = restAdapter20.httpExecutor;
        java.util.concurrent.Executor executor23 = null;
        restAdapter20.callbackExecutor = executor23;
        retrofit.client.Client.Provider provider25 = null;
        restAdapter20.clientProvider = provider25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("Retrofit-Idle");
        retrofit.Server server36 = builder35.server;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("Retrofit-Idle");
        retrofit.Server server54 = builder53.server;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = null;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel68);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel68);
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel68);
        restAdapter20.log = log44;
        log44.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder75 = builder18.setLog(log44);
        builder15.log = log44;
        retrofit.ErrorHandler errorHandler77 = builder15.errorHandler;
        restAdapter0.errorHandler = errorHandler77;
        retrofit.Profiler profiler79 = null;
        restAdapter0.profiler = profiler79;
        retrofit.client.Request request81 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request82 = restAdapter0.logAndReplaceRequest(request81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(errorHandler77);
    }

    @Test
    public void test01127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01127");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.Server server7 = builder0.server;
        retrofit.Server server8 = builder0.server;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(server8);
    }

    @Test
    public void test01128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01128");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.Server server2 = builder1.server;
        retrofit.RestAdapter.Log log3 = null;
        builder1.log = log3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder7 = builder1.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder1.clientProvider;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder1.log = log9;
        retrofit.RestAdapter.Builder builder11 = builder0.setLog(log9);
        retrofit.converter.Converter converter12 = null;
        builder0.converter = converter12;
        retrofit.RestAdapter.Log log14 = builder0.log;
        retrofit.client.Client.Provider provider15 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        java.util.concurrent.Executor executor27 = builder24.httpExecutor;
        retrofit.RestAdapter.Builder builder29 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider38 = builder31.clientProvider;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        builder31.log = log39;
        retrofit.RestAdapter.Builder builder41 = builder30.setLog(log39);
        retrofit.Profiler profiler42 = builder30.profiler;
        java.util.concurrent.Executor executor43 = null;
        builder30.callbackExecutor = executor43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.client.Client.Provider provider52 = builder45.clientProvider;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        builder45.log = log53;
        builder30.log = log53;
        retrofit.RestAdapter.Builder builder56 = builder29.setLog(log53);
        retrofit.RestAdapter.Builder builder57 = builder0.setLog(log53);
        retrofit.client.Client client58 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder59 = builder0.setClient(client58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test01129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01129");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel2 = builder1.logLevel;
        builder0.logLevel = logLevel2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("Retrofit-Idle");
        retrofit.Server server13 = builder12.server;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.client.Client.Provider provider29 = builder22.clientProvider;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        builder22.log = log30;
        retrofit.RestAdapter.Builder builder32 = builder21.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log30, logLevel33);
        builder0.logLevel = logLevel33;
        retrofit.RestAdapter.LogLevel logLevel36 = builder0.logLevel;
        retrofit.Profiler profiler37 = builder0.profiler;
        retrofit.ErrorHandler errorHandler38 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = builder39.server;
        retrofit.RestAdapter.Log log41 = null;
        builder39.log = log41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel44 = builder43.logLevel;
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder47 = builder45.setServer("Retrofit-Idle");
        retrofit.Server server48 = builder47.server;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("Retrofit-Idle");
        retrofit.Server server66 = builder65.server;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Log log74 = null;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.Server server76 = builder75.server;
        retrofit.RestAdapter.Log log77 = null;
        builder75.log = log77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel80 = builder79.logLevel;
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel80);
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log74, logLevel80);
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel80);
        retrofit.RestAdapter.Builder builder84 = builder0.setLog(log56);
        retrofit.Profiler profiler85 = null;
        builder0.profiler = profiler85;
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(server48);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test01130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01130");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = builder26.server;
        java.util.concurrent.Executor executor28 = null;
        builder26.httpExecutor = executor28;
        retrofit.Server server30 = builder26.server;
        retrofit.RestAdapter.LogLevel logLevel31 = builder26.logLevel;
        restAdapter25.logLevel = logLevel31;
        retrofit.Profiler profiler33 = restAdapter25.profiler;
        java.util.concurrent.Executor executor34 = restAdapter25.httpExecutor;
        retrofit.Profiler profiler35 = null;
        restAdapter25.profiler = profiler35;
        java.util.concurrent.Executor executor37 = restAdapter25.httpExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor37);
    }

    @Test
    public void test01131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01131");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RequestInterceptor requestInterceptor16 = builder15.requestInterceptor;
        retrofit.converter.Converter converter17 = null;
        builder15.converter = converter17;
        retrofit.converter.Converter converter19 = builder15.converter;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder15.requestInterceptor = requestInterceptor20;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(converter19);
    }

    @Test
    public void test01132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01132");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter25.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        builder32.logLevel = logLevel34;
        java.util.concurrent.Executor executor36 = null;
        builder32.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = null;
        restAdapter38.callbackExecutor = executor39;
        retrofit.converter.Converter converter41 = restAdapter38.converter;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        restAdapter38.log = log42;
        builder32.log = log42;
        builder28.log = log42;
        log42.log("Retrofit-Idle");
        restAdapter25.log = log42;
        retrofit.ErrorHandler errorHandler49 = restAdapter25.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter25.new RestHandler();
        retrofit.client.Response response52 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response54 = restAdapter25.logAndReplaceResponse("", response52, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(errorHandler49);
    }

    @Test
    public void test01133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01133");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.callbackExecutor = executor7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter18 = builder17.build();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.logLevel;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter18.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor20;
        retrofit.client.Client.Provider provider22 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter23 = restAdapter0.converter;
        retrofit.Profiler profiler24 = null;
        restAdapter0.profiler = profiler24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = builder26.server;
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("Retrofit-Idle");
        retrofit.Server server35 = builder34.server;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel49);
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = builder59.server;
        retrofit.RestAdapter.Log log61 = null;
        builder59.log = log61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel68);
        retrofit.client.Client.Provider provider70 = builder63.clientProvider;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        builder63.log = log71;
        retrofit.RestAdapter.Builder builder73 = builder59.setLog(log71);
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server35, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log71, logLevel74);
        retrofit.converter.Converter converter76 = null;
        restAdapter75.converter = converter76;
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter75.getLogLevel();
        retrofit.Profiler profiler79 = null;
        restAdapter75.profiler = profiler79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor82 = builder81.callbackExecutor;
        retrofit.Profiler profiler83 = builder81.profiler;
        retrofit.RestAdapter.Builder builder85 = builder81.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter86 = builder85.converter;
        retrofit.RestAdapter.LogLevel logLevel87 = builder85.logLevel;
        retrofit.RestAdapter.LogLevel logLevel88 = builder85.logLevel;
        restAdapter75.logLevel = logLevel88;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNull(provider22);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(server35);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor82);
        org.junit.Assert.assertNull(profiler83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(converter86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01134");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor3 = builder2.callbackExecutor;
        retrofit.Profiler profiler4 = builder2.profiler;
        retrofit.RestAdapter.Builder builder6 = builder2.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Builder builder17 = builder6.setServer(server16);
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider32 = builder25.clientProvider;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        builder25.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("Retrofit-Idle");
        retrofit.Server server44 = builder43.server;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("Retrofit-Idle");
        retrofit.Server server62 = builder61.server;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = null;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel76);
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel76);
        builder25.log = log52;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel85 = builder84.logLevel;
        builder83.logLevel = logLevel85;
        builder81.logLevel = logLevel85;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server16, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log52, logLevel85);
        builder0.server = server16;
        retrofit.Profiler profiler90 = builder0.profiler;
        retrofit.ErrorHandler errorHandler91 = builder0.errorHandler;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder93 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertNull(errorHandler91);
    }

    @Test
    public void test01135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01135");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.httpExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.client.Client.Provider provider7 = restAdapter0.clientProvider;
        java.lang.Throwable throwable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable8, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider7);
    }

    @Test
    public void test01136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01136");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        restAdapter0.requestInterceptor = requestInterceptor9;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.Server server21 = builder20.server;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel35);
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        retrofit.client.Client.Provider provider56 = builder49.clientProvider;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        builder49.log = log57;
        retrofit.RestAdapter.Builder builder59 = builder45.setLog(log57);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server21, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log57, logLevel60);
        retrofit.converter.Converter converter62 = null;
        restAdapter61.converter = converter62;
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter61.getLogLevel();
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01137");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter25.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        builder32.logLevel = logLevel34;
        java.util.concurrent.Executor executor36 = null;
        builder32.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = null;
        restAdapter38.callbackExecutor = executor39;
        retrofit.converter.Converter converter41 = restAdapter38.converter;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        restAdapter38.log = log42;
        builder32.log = log42;
        builder28.log = log42;
        log42.log("Retrofit-Idle");
        restAdapter25.log = log42;
        retrofit.RestAdapter.LogLevel logLevel49 = null;
        restAdapter25.logLevel = logLevel49;
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = builder53.callbackExecutor;
        retrofit.Profiler profiler55 = builder53.profiler;
        retrofit.RestAdapter.Builder builder57 = builder53.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter58.new RestHandler();
        java.util.concurrent.Executor executor60 = restAdapter58.httpExecutor;
        java.util.concurrent.Executor executor61 = null;
        restAdapter58.callbackExecutor = executor61;
        retrofit.ErrorHandler errorHandler63 = null;
        restAdapter58.errorHandler = errorHandler63;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter58.logLevel = logLevel65;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter58.logLevel = logLevel67;
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter58.getLogLevel();
        builder53.logLevel = logLevel70;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter25.setLogLevel(logLevel70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01138");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter0.clientProvider = provider9;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.Server server21 = builder20.server;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder36.setServer("Retrofit-Idle");
        retrofit.Server server39 = builder38.server;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = null;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel53);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel53);
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel53);
        log29.log("hi!");
        restAdapter0.log = log29;
        retrofit.client.Client.Provider provider60 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor61 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(server39);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNull(executor61);
    }

    @Test
    public void test01139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01139");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        org.junit.Assert.assertNull(profiler4);
    }

    @Test
    public void test01140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01140");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder0.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.Log log9 = builder0.log;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        builder17.logLevel = logLevel19;
        boolean boolean21 = logLevel19.log();
        builder10.logLevel = logLevel19;
        retrofit.RestAdapter.Builder builder23 = builder0.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel29 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("Retrofit-Idle");
        retrofit.Server server33 = builder32.server;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider49 = builder42.clientProvider;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        builder42.log = log50;
        retrofit.RestAdapter.Builder builder52 = builder41.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log50, logLevel53);
        builder23.logLevel = logLevel53;
        retrofit.Profiler profiler56 = null;
        builder23.profiler = profiler56;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01141");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = builder6.server;
        retrofit.RestAdapter.Log log8 = null;
        builder6.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider17 = builder10.clientProvider;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        builder10.log = log18;
        retrofit.RestAdapter.Builder builder20 = builder6.setLog(log18);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = builder21.server;
        retrofit.RestAdapter.Log log23 = null;
        builder21.log = log23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider32 = builder25.clientProvider;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        builder25.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder21.setLog(log33);
        retrofit.RestAdapter.Builder builder36 = builder6.setLog(log33);
        builder36.ensureSaneDefaults();
        retrofit.client.Client.Provider provider38 = null;
        builder36.clientProvider = provider38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.client.Client.Provider provider48 = builder41.clientProvider;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        builder41.log = log49;
        retrofit.RestAdapter.Builder builder51 = builder40.setLog(log49);
        retrofit.Profiler profiler52 = builder40.profiler;
        java.util.concurrent.Executor executor53 = null;
        builder40.callbackExecutor = executor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider62 = builder55.clientProvider;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        builder55.log = log63;
        builder40.log = log63;
        builder36.log = log63;
        retrofit.RestAdapter.Builder builder68 = builder36.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor69 = builder68.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor69;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor72 = restAdapter71.requestInterceptor;
        retrofit.client.Client.Provider provider73 = restAdapter71.clientProvider;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor75 = null;
        restAdapter74.callbackExecutor = executor75;
        retrofit.RestAdapter.Log log77 = restAdapter74.log;
        retrofit.converter.Converter converter78 = restAdapter74.converter;
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter74.new RestHandler();
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel81 = builder80.logLevel;
        restAdapter74.logLevel = logLevel81;
        restAdapter71.logLevel = logLevel81;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertNull(provider73);
        org.junit.Assert.assertNull(log77);
        org.junit.Assert.assertNull(converter78);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01142");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        java.util.concurrent.Executor executor8 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        builder16.logLevel = logLevel18;
        boolean boolean20 = logLevel18.log();
        builder9.logLevel = logLevel18;
        retrofit.RestAdapter.LogLevel logLevel22 = builder9.logLevel;
        retrofit.Profiler profiler23 = builder9.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.Profiler profiler26 = builder24.profiler;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Builder builder39 = builder28.setServer(server38);
        retrofit.RestAdapter.Builder builder40 = builder9.setServer(server38);
        retrofit.RestAdapter.Builder builder41 = builder6.setServer(server38);
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider60 = builder53.clientProvider;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        builder53.log = log61;
        retrofit.RestAdapter.Builder builder63 = builder49.setLog(log61);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter73 = builder72.build();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.logLevel;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server38, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log61, logLevel74);
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.client.Client.Provider provider77 = null;
        restAdapter75.clientProvider = provider77;
        retrofit.RestAdapter.Log log79 = restAdapter75.log;
        log79.log("hi!");
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log79);
    }

    @Test
    public void test01143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01143");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        builder18.logLevel = logLevel20;
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel20);
        retrofit.Profiler profiler24 = null;
        restAdapter23.profiler = profiler24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = builder26.server;
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.RestAdapter restAdapter36 = builder34.build();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter39.new RestHandler();
        java.util.concurrent.Executor executor41 = restAdapter39.httpExecutor;
        java.util.concurrent.Executor executor42 = null;
        restAdapter39.callbackExecutor = executor42;
        retrofit.client.Client.Provider provider44 = null;
        restAdapter39.clientProvider = provider44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("Retrofit-Idle");
        retrofit.Server server55 = builder54.server;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("Retrofit-Idle");
        retrofit.Server server73 = builder72.server;
        retrofit.client.Client.Provider provider74 = null;
        java.util.concurrent.Executor executor75 = null;
        java.util.concurrent.Executor executor76 = null;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        retrofit.converter.Converter converter78 = null;
        retrofit.Profiler profiler79 = null;
        retrofit.ErrorHandler errorHandler80 = null;
        retrofit.RestAdapter.Log log81 = null;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.Server server83 = builder82.server;
        retrofit.RestAdapter.Log log84 = null;
        builder82.log = log84;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel87 = builder86.logLevel;
        retrofit.RestAdapter.Builder builder88 = builder82.setLogLevel(logLevel87);
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server73, provider74, executor75, executor76, requestInterceptor77, converter78, profiler79, errorHandler80, log81, logLevel87);
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel87);
        restAdapter39.log = log63;
        log63.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder94 = builder37.setLog(log63);
        builder34.log = log63;
        retrofit.ErrorHandler errorHandler96 = builder34.errorHandler;
        restAdapter23.errorHandler = errorHandler96;
        retrofit.ErrorHandler errorHandler98 = restAdapter23.errorHandler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(errorHandler96);
        org.junit.Assert.assertNotNull(errorHandler98);
    }

    @Test
    public void test01144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01144");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = null;
        restAdapter0.errorHandler = errorHandler3;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor6 = null;
        restAdapter0.httpExecutor = executor6;
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter9.requestInterceptor = requestInterceptor10;
        retrofit.Profiler profiler12 = null;
        restAdapter9.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.callbackExecutor;
        retrofit.Profiler profiler16 = builder14.profiler;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("Retrofit-Idle");
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Builder builder29 = builder18.setServer(server28);
        retrofit.RestAdapter restAdapter30 = builder29.build();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        restAdapter9.callbackExecutor = executor31;
        restAdapter0.httpExecutor = executor31;
        retrofit.Profiler profiler34 = null;
        restAdapter0.profiler = profiler34;
        retrofit.client.Request request36 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request37 = restAdapter0.logAndReplaceRequest(request36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(executor31);
    }

    @Test
    public void test01145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01145");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.RestAdapter.Log log8 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider17 = builder10.clientProvider;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        builder10.log = log18;
        retrofit.RestAdapter.Builder builder20 = builder9.setLog(log18);
        retrofit.RestAdapter.Log log21 = builder20.log;
        log21.log("");
        restAdapter0.log = log21;
        log21.log("");
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
    }

    @Test
    public void test01146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01146");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        retrofit.Profiler profiler11 = builder10.profiler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.Server server21 = builder20.server;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder10.setServer(server21);
        retrofit.converter.Converter converter39 = null;
        builder10.converter = converter39;
        java.util.concurrent.Executor executor41 = null;
        builder10.callbackExecutor = executor41;
        retrofit.RequestInterceptor requestInterceptor43 = builder10.requestInterceptor;
        retrofit.RestAdapter.Builder builder45 = builder10.setServer("hi!");
        retrofit.Profiler profiler46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder45.setProfiler(profiler46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test01147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01147");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel4 = builder3.logLevel;
        builder2.logLevel = logLevel4;
        builder0.logLevel = logLevel4;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor15 = builder13.requestInterceptor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter16.logLevel;
        retrofit.ErrorHandler errorHandler19 = restAdapter16.errorHandler;
        retrofit.converter.Converter converter20 = null;
        restAdapter16.converter = converter20;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter16.logLevel;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel29 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.RestAdapter restAdapter34 = builder32.build();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter37.new RestHandler();
        java.util.concurrent.Executor executor39 = restAdapter37.httpExecutor;
        java.util.concurrent.Executor executor40 = null;
        restAdapter37.callbackExecutor = executor40;
        retrofit.client.Client.Provider provider42 = null;
        restAdapter37.clientProvider = provider42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("Retrofit-Idle");
        retrofit.Server server53 = builder52.server;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel67 = builder66.logLevel;
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder70 = builder68.setServer("Retrofit-Idle");
        retrofit.Server server71 = builder70.server;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = null;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.Server server81 = builder80.server;
        retrofit.RestAdapter.Log log82 = null;
        builder80.log = log82;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel85 = builder84.logLevel;
        retrofit.RestAdapter.Builder builder86 = builder80.setLogLevel(logLevel85);
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel85);
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel85);
        restAdapter37.log = log61;
        log61.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder92 = builder35.setLog(log61);
        builder32.log = log61;
        retrofit.RestAdapter.Log log94 = builder32.log;
        retrofit.client.Client.Provider provider95 = builder32.clientProvider;
        restAdapter16.clientProvider = provider95;
        builder13.clientProvider = provider95;
        builder0.clientProvider = provider95;
        retrofit.Profiler profiler99 = builder0.profiler;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNull(server81);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(log94);
        org.junit.Assert.assertNotNull(provider95);
        org.junit.Assert.assertNull(profiler99);
    }

    @Test
    public void test01148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01148");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter restAdapter12 = builder8.build();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter14.new RestHandler();
        java.util.concurrent.Executor executor16 = restAdapter14.httpExecutor;
        java.util.concurrent.Executor executor17 = null;
        restAdapter14.callbackExecutor = executor17;
        retrofit.ErrorHandler errorHandler19 = null;
        restAdapter14.errorHandler = errorHandler19;
        retrofit.client.Client.Provider provider21 = null;
        restAdapter14.clientProvider = provider21;
        retrofit.client.Client.Provider provider23 = null;
        restAdapter14.clientProvider = provider23;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = builder26.callbackExecutor;
        retrofit.Profiler profiler28 = builder26.profiler;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("Retrofit-Idle");
        retrofit.Server server40 = builder39.server;
        retrofit.RestAdapter.Builder builder41 = builder30.setServer(server40);
        retrofit.RestAdapter.Log log42 = builder41.log;
        retrofit.RestAdapter.LogLevel logLevel43 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        builder51.logLevel = logLevel53;
        boolean boolean55 = logLevel53.log();
        builder44.logLevel = logLevel53;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        builder44.requestInterceptor = requestInterceptor57;
        retrofit.converter.Converter converter59 = null;
        builder44.converter = converter59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = builder61.callbackExecutor;
        retrofit.Profiler profiler63 = builder61.profiler;
        retrofit.RestAdapter.Builder builder65 = builder61.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = builder66.server;
        retrofit.RestAdapter.Log log68 = null;
        builder66.log = log68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel71 = builder70.logLevel;
        retrofit.RestAdapter.Builder builder72 = builder66.setLogLevel(logLevel71);
        retrofit.RestAdapter.Builder builder74 = builder72.setServer("Retrofit-Idle");
        retrofit.Server server75 = builder74.server;
        retrofit.RestAdapter.Builder builder76 = builder65.setServer(server75);
        retrofit.RestAdapter restAdapter77 = builder76.build();
        java.util.concurrent.Executor executor78 = restAdapter77.callbackExecutor;
        builder44.httpExecutor = executor78;
        builder41.httpExecutor = executor78;
        restAdapter14.callbackExecutor = executor78;
        restAdapter12.callbackExecutor = executor78;
        java.lang.Throwable throwable83 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter12.logException(throwable83, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(server40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(profiler63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(server75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(executor78);
    }

    @Test
    public void test01149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01149");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.client.Client.Provider provider26 = restAdapter25.clientProvider;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter25.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        builder33.logLevel = logLevel35;
        java.util.concurrent.Executor executor37 = null;
        builder33.callbackExecutor = executor37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = null;
        restAdapter39.callbackExecutor = executor40;
        retrofit.converter.Converter converter42 = restAdapter39.converter;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        restAdapter39.log = log43;
        builder33.log = log43;
        builder29.log = log43;
        log43.log("Retrofit-Idle");
        restAdapter25.log = log43;
        java.lang.Throwable throwable50 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter25.logException(throwable50, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNotNull(log43);
    }

    @Test
    public void test01150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01150");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = builder8.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder20 = builder14.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("Retrofit-Idle");
        retrofit.Server server23 = builder22.server;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = null;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        builder32.logLevel = logLevel34;
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        retrofit.client.Client.Provider provider56 = builder49.clientProvider;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        builder49.log = log57;
        retrofit.RestAdapter.Builder builder59 = builder45.setLog(log57);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = builder60.server;
        retrofit.RestAdapter.Log log62 = null;
        builder60.log = log62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.client.Client.Provider provider71 = builder64.clientProvider;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        builder64.log = log72;
        retrofit.RestAdapter.Builder builder74 = builder60.setLog(log72);
        retrofit.RestAdapter.Builder builder75 = builder45.setLog(log72);
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        java.util.concurrent.Executor executor78 = null;
        builder76.httpExecutor = executor78;
        retrofit.Server server80 = builder76.server;
        retrofit.RestAdapter.LogLevel logLevel81 = builder76.logLevel;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server23, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log72, logLevel81);
        retrofit.RestAdapter.Builder builder83 = builder13.setServer(server23);
        retrofit.RestAdapter.LogLevel logLevel84 = builder83.logLevel;
        boolean boolean85 = logLevel84.log();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertNull(server80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test01151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01151");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = builder8.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel14 = builder8.logLevel;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = null;
        restAdapter15.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = restAdapter15.converter;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter15.log;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = builder21.server;
        retrofit.RestAdapter.Log log23 = null;
        builder21.log = log23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        retrofit.RestAdapter.Builder builder27 = builder21.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("Retrofit-Idle");
        retrofit.Server server30 = builder29.server;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = builder39.server;
        retrofit.RestAdapter.Log log41 = null;
        builder39.log = log41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel44 = builder43.logLevel;
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = builder54.server;
        retrofit.RestAdapter.Log log56 = null;
        builder54.log = log56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel63 = builder62.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel63);
        retrofit.client.Client.Provider provider65 = builder58.clientProvider;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        builder58.log = log66;
        retrofit.RestAdapter.Builder builder68 = builder54.setLog(log66);
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server30, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log66, logLevel69);
        restAdapter15.server = server30;
        retrofit.RestAdapter.Builder builder72 = builder8.setServer(server30);
        retrofit.RestAdapter.Log log73 = null;
        builder72.log = log73;
        retrofit.RestAdapter restAdapter75 = builder72.build();
        retrofit.Server server76 = builder72.server;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(provider65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(server76);
    }

    @Test
    public void test01152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01152");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.callbackExecutor;
        retrofit.Profiler profiler7 = builder5.profiler;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Builder builder20 = builder9.setServer(server19);
        retrofit.RestAdapter restAdapter21 = builder20.build();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        builder29.logLevel = logLevel31;
        boolean boolean33 = logLevel31.log();
        builder22.logLevel = logLevel31;
        retrofit.RestAdapter.LogLevel logLevel35 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder20.setLogLevel(logLevel35);
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        retrofit.RestAdapter.Builder builder38 = builder0.setLogLevel(logLevel37);
        retrofit.converter.Converter converter39 = builder38.converter;
        retrofit.Profiler profiler40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder41 = builder38.setProfiler(profiler40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(converter39);
    }

    @Test
    public void test01153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01153");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        java.util.concurrent.Executor executor8 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        builder16.logLevel = logLevel18;
        boolean boolean20 = logLevel18.log();
        builder9.logLevel = logLevel18;
        retrofit.RestAdapter.LogLevel logLevel22 = builder9.logLevel;
        retrofit.Profiler profiler23 = builder9.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.Profiler profiler26 = builder24.profiler;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Builder builder39 = builder28.setServer(server38);
        retrofit.RestAdapter.Builder builder40 = builder9.setServer(server38);
        retrofit.RestAdapter.Builder builder41 = builder6.setServer(server38);
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider60 = builder53.clientProvider;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        builder53.log = log61;
        retrofit.RestAdapter.Builder builder63 = builder49.setLog(log61);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter73 = builder72.build();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.logLevel;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server38, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log61, logLevel74);
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.Profiler profiler77 = restAdapter75.profiler;
        java.lang.Throwable throwable78 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter75.logException(throwable78, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler77);
    }

    @Test
    public void test01154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01154");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter4.logLevel;
        retrofit.ErrorHandler errorHandler7 = restAdapter4.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter4.logLevel;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.Server server18 = builder17.server;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("Retrofit-Idle");
        retrofit.Server server36 = builder35.server;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel50);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel50);
        restAdapter4.server = server18;
        restAdapter0.server = server18;
        retrofit.converter.Converter converter56 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(converter56);
    }

    @Test
    public void test01155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01155");
        java.util.List<retrofit.client.Header> headerList2 = null;
        retrofit.mime.TypedInput typedInput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response4 = new retrofit.client.Response((int) (byte) 1, "", headerList2, typedInput3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01156");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.client.Client.Provider provider44 = builder37.clientProvider;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        builder37.log = log45;
        retrofit.RestAdapter.Builder builder47 = builder33.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server9, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log45, logLevel48);
        retrofit.converter.Converter converter50 = null;
        restAdapter49.converter = converter50;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter49.new RestHandler();
        retrofit.converter.Converter converter53 = restAdapter49.converter;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter54.new RestHandler();
        java.util.concurrent.Executor executor56 = restAdapter54.httpExecutor;
        java.util.concurrent.Executor executor57 = null;
        restAdapter54.callbackExecutor = executor57;
        retrofit.ErrorHandler errorHandler59 = null;
        restAdapter54.errorHandler = errorHandler59;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter54.logLevel = logLevel61;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter54.logLevel = logLevel63;
        retrofit.RequestInterceptor requestInterceptor65 = restAdapter54.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter54.getLogLevel();
        restAdapter49.setLogLevel(logLevel66);
        boolean boolean68 = logLevel66.log();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test01157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01157");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = builder2.server;
        retrofit.RestAdapter.Log log4 = null;
        builder2.log = log4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel7 = builder6.logLevel;
        retrofit.RestAdapter.Builder builder8 = builder2.setLogLevel(logLevel7);
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("Retrofit-Idle");
        retrofit.Server server11 = builder10.server;
        java.util.concurrent.Executor executor12 = builder10.httpExecutor;
        java.util.concurrent.Executor executor13 = builder10.httpExecutor;
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter16 = null;
        restAdapter15.converter = converter16;
        java.util.concurrent.Executor executor18 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = builder19.callbackExecutor;
        retrofit.Profiler profiler21 = builder19.profiler;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel29 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("Retrofit-Idle");
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Builder builder34 = builder23.setServer(server33);
        retrofit.RestAdapter restAdapter35 = builder34.build();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        retrofit.client.Client.Provider provider37 = restAdapter35.clientProvider;
        restAdapter15.clientProvider = provider37;
        retrofit.RestAdapter.Builder builder39 = builder10.setClient(provider37);
        builder0.clientProvider = provider37;
        retrofit.RestAdapter.LogLevel logLevel41 = builder0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel42 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder43 = builder0.setLogLevel(logLevel42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01158");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.Server server32 = builder31.server;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel46);
        restAdapter0.logLevel = logLevel46;
        retrofit.converter.Converter converter51 = null;
        restAdapter0.converter = converter51;
        retrofit.Profiler profiler53 = restAdapter0.profiler;
        retrofit.Profiler profiler54 = null;
        restAdapter0.profiler = profiler54;
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter0.logLevel;
        java.lang.Throwable throwable57 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable57, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01159");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.Server server8 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel11 = builder10.logLevel;
        builder9.logLevel = logLevel11;
        boolean boolean13 = logLevel11.log();
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01160");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("Retrofit-Idle");
        retrofit.Server server13 = builder12.server;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("Retrofit-Idle");
        retrofit.Server server31 = builder30.server;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel45);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel45);
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = builder60.server;
        retrofit.RestAdapter.Log log62 = null;
        builder60.log = log62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel65 = builder64.logLevel;
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel65);
        retrofit.client.Client.Provider provider67 = builder60.clientProvider;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        builder60.log = log68;
        retrofit.RestAdapter.Builder builder70 = builder56.setLog(log68);
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server13, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log68, logLevel76);
        restAdapter0.logLevel = logLevel76;
        retrofit.client.Request request80 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request81 = restAdapter0.logAndReplaceRequest(request80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test01161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01161");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        builder18.logLevel = logLevel20;
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel20);
        retrofit.Profiler profiler24 = null;
        restAdapter23.profiler = profiler24;
        retrofit.converter.Converter converter26 = null;
        restAdapter23.converter = converter26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter40.new RestHandler();
        java.util.concurrent.Executor executor42 = restAdapter40.httpExecutor;
        java.util.concurrent.Executor executor43 = null;
        restAdapter40.callbackExecutor = executor43;
        retrofit.client.Client.Provider provider45 = null;
        restAdapter40.clientProvider = provider45;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter40.logLevel;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        builder48.logLevel = logLevel50;
        java.util.concurrent.Executor executor52 = null;
        builder48.callbackExecutor = executor52;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor55 = null;
        restAdapter54.callbackExecutor = executor55;
        retrofit.converter.Converter converter57 = restAdapter54.converter;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        restAdapter54.log = log58;
        builder48.log = log58;
        restAdapter40.log = log58;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel67 = builder66.logLevel;
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder70 = builder68.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter71 = builder70.build();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.logLevel;
        retrofit.RequestInterceptor requestInterceptor73 = restAdapter71.requestInterceptor;
        restAdapter40.requestInterceptor = requestInterceptor73;
        builder36.requestInterceptor = requestInterceptor73;
        restAdapter23.requestInterceptor = requestInterceptor73;
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter23.new RestHandler();
        retrofit.converter.Converter converter78 = null;
        restAdapter23.converter = converter78;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor73);
    }

    @Test
    public void test01162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01162");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel51);
        builder0.log = log27;
        java.util.concurrent.Executor executor56 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("Retrofit-Idle");
        retrofit.Server server66 = builder65.server;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.Server server76 = builder75.server;
        retrofit.RestAdapter.Log log77 = null;
        builder75.log = log77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel80 = builder79.logLevel;
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel80);
        retrofit.client.Client.Provider provider82 = builder75.clientProvider;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        builder75.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder74.setLog(log83);
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log83, logLevel86);
        retrofit.RestAdapter.Builder builder88 = builder0.setServer(server66);
        builder88.ensureSaneDefaults();
        retrofit.Profiler profiler90 = builder88.profiler;
        java.lang.Class<?> wildcardClass91 = builder88.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(provider82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test01163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01163");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = null;
        restAdapter0.errorHandler = errorHandler3;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.ErrorHandler errorHandler6 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.Server server16 = builder15.server;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel30);
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.client.Client.Provider provider51 = builder44.clientProvider;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        builder44.log = log52;
        retrofit.RestAdapter.Builder builder54 = builder40.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server16, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log52, logLevel55);
        restAdapter0.server = server16;
        retrofit.Profiler profiler58 = null;
        restAdapter0.profiler = profiler58;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01164");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.RestAdapter restAdapter10 = builder8.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter13.new RestHandler();
        java.util.concurrent.Executor executor15 = restAdapter13.httpExecutor;
        java.util.concurrent.Executor executor16 = null;
        restAdapter13.callbackExecutor = executor16;
        retrofit.client.Client.Provider provider18 = null;
        restAdapter13.clientProvider = provider18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.Server server29 = builder28.server;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = null;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel61);
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel61);
        restAdapter13.log = log37;
        log37.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder68 = builder11.setLog(log37);
        builder8.log = log37;
        retrofit.RestAdapter.Log log70 = builder8.log;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        builder8.requestInterceptor = requestInterceptor71;
        retrofit.RestAdapter.Log log73 = null;
        builder8.log = log73;
        builder8.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler76 = builder8.errorHandler;
        retrofit.Profiler profiler77 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder78 = builder8.setProfiler(profiler77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(errorHandler76);
    }

    @Test
    public void test01165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01165");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel51);
        builder0.log = log27;
        retrofit.client.Client.Provider provider56 = null;
        builder0.clientProvider = provider56;
        retrofit.RequestInterceptor requestInterceptor58 = builder0.requestInterceptor;
        retrofit.client.Client client59 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder60 = builder0.setClient(client59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(requestInterceptor58);
    }

    @Test
    public void test01166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01166");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter7.new RestHandler();
        retrofit.ErrorHandler errorHandler9 = null;
        restAdapter7.errorHandler = errorHandler9;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder20 = builder14.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("Retrofit-Idle");
        retrofit.Server server23 = builder22.server;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = null;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        builder32.logLevel = logLevel34;
        boolean boolean36 = logLevel34.log();
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        retrofit.Profiler profiler38 = null;
        restAdapter37.profiler = profiler38;
        retrofit.converter.Converter converter40 = null;
        restAdapter37.converter = converter40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter51 = builder50.build();
        retrofit.Profiler profiler52 = null;
        builder50.profiler = profiler52;
        retrofit.Profiler profiler54 = null;
        builder50.profiler = profiler54;
        retrofit.converter.Converter converter56 = builder50.converter;
        restAdapter37.converter = converter56;
        restAdapter7.converter = converter56;
        restAdapter0.converter = converter56;
        retrofit.ErrorHandler errorHandler60 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(converter56);
        org.junit.Assert.assertNull(errorHandler60);
    }

    @Test
    public void test01167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01167");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        java.util.concurrent.Executor executor13 = null;
        builder0.httpExecutor = executor13;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = null;
        restAdapter15.callbackExecutor = executor16;
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.converter.Converter converter19 = restAdapter15.converter;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        restAdapter15.logLevel = logLevel22;
        builder0.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter25.logLevel;
        retrofit.ErrorHandler errorHandler28 = null;
        restAdapter25.errorHandler = errorHandler28;
        java.util.concurrent.Executor executor30 = restAdapter25.httpExecutor;
        java.util.concurrent.Executor executor31 = null;
        restAdapter25.httpExecutor = executor31;
        retrofit.ErrorHandler errorHandler33 = restAdapter25.errorHandler;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter34.requestInterceptor = requestInterceptor35;
        retrofit.Profiler profiler37 = null;
        restAdapter34.profiler = profiler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        retrofit.Profiler profiler41 = builder39.profiler;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("Retrofit-Idle");
        retrofit.Server server53 = builder52.server;
        retrofit.RestAdapter.Builder builder54 = builder43.setServer(server53);
        retrofit.RestAdapter restAdapter55 = builder54.build();
        java.util.concurrent.Executor executor56 = restAdapter55.callbackExecutor;
        restAdapter34.callbackExecutor = executor56;
        restAdapter25.httpExecutor = executor56;
        builder0.httpExecutor = executor56;
        retrofit.RequestInterceptor requestInterceptor60 = builder0.requestInterceptor;
        retrofit.client.Client.Provider provider61 = builder0.clientProvider;
        java.util.concurrent.Executor executor62 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNull(executor62);
    }

    @Test
    public void test01168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01168");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.Server server16 = builder15.server;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("Retrofit-Idle");
        retrofit.Server server34 = builder33.server;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = null;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel48 = builder47.logLevel;
        retrofit.RestAdapter.Builder builder49 = builder43.setLogLevel(logLevel48);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel48);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel48);
        restAdapter0.log = log24;
        retrofit.Profiler profiler53 = restAdapter0.profiler;
        java.util.concurrent.Executor executor54 = restAdapter0.callbackExecutor;
        retrofit.client.Client.Provider provider55 = restAdapter0.clientProvider;
        java.lang.Class<?> wildcardClass56 = restAdapter0.getClass();
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test01169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01169");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter25.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        builder32.logLevel = logLevel34;
        java.util.concurrent.Executor executor36 = null;
        builder32.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = null;
        restAdapter38.callbackExecutor = executor39;
        retrofit.converter.Converter converter41 = restAdapter38.converter;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        restAdapter38.log = log42;
        builder32.log = log42;
        builder28.log = log42;
        log42.log("Retrofit-Idle");
        restAdapter25.log = log42;
        retrofit.ErrorHandler errorHandler49 = restAdapter25.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter25.logLevel;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = builder51.callbackExecutor;
        retrofit.Profiler profiler53 = builder51.profiler;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        builder60.logLevel = logLevel62;
        java.util.concurrent.Executor executor64 = null;
        builder60.callbackExecutor = executor64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor67 = null;
        restAdapter66.callbackExecutor = executor67;
        retrofit.converter.Converter converter69 = restAdapter66.converter;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter66.log = log70;
        builder60.log = log70;
        builder56.log = log70;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter74.new RestHandler();
        java.util.concurrent.Executor executor76 = restAdapter74.httpExecutor;
        java.util.concurrent.Executor executor77 = null;
        restAdapter74.callbackExecutor = executor77;
        retrofit.client.Client.Provider provider79 = null;
        restAdapter74.clientProvider = provider79;
        java.util.concurrent.Executor executor81 = null;
        restAdapter74.callbackExecutor = executor81;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server84 = builder83.server;
        retrofit.RestAdapter.Log log85 = null;
        builder83.log = log85;
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel88 = builder87.logLevel;
        retrofit.RestAdapter.Builder builder89 = builder83.setLogLevel(logLevel88);
        retrofit.RestAdapter.Builder builder91 = builder89.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter92 = builder91.build();
        retrofit.RestAdapter.LogLevel logLevel93 = restAdapter92.logLevel;
        retrofit.RequestInterceptor requestInterceptor94 = restAdapter92.requestInterceptor;
        restAdapter74.requestInterceptor = requestInterceptor94;
        builder56.requestInterceptor = requestInterceptor94;
        builder55.requestInterceptor = requestInterceptor94;
        restAdapter25.requestInterceptor = requestInterceptor94;
        retrofit.RestAdapter.RestHandler restHandler99 = restAdapter25.new RestHandler();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNull(server84);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor94);
    }

    @Test
    public void test01170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01170");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.RestAdapter restAdapter10 = builder8.build();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter10.getLogLevel();
        retrofit.client.Response response14 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response16 = restAdapter10.logAndReplaceResponse("Retrofit-", response14, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01171");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        retrofit.client.Client.Provider provider15 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("Retrofit-Idle");
        retrofit.Server server25 = builder24.server;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        builder34.logLevel = logLevel36;
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        retrofit.Profiler profiler40 = null;
        restAdapter39.profiler = profiler40;
        retrofit.Server server42 = restAdapter39.server;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = builder43.callbackExecutor;
        retrofit.Profiler profiler45 = builder43.profiler;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("Retrofit-Idle");
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Builder builder58 = builder47.setServer(server57);
        retrofit.RequestInterceptor requestInterceptor59 = builder58.requestInterceptor;
        retrofit.converter.Converter converter60 = null;
        builder58.converter = converter60;
        java.util.concurrent.Executor executor62 = builder58.callbackExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter63.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter63.logLevel;
        retrofit.ErrorHandler errorHandler66 = restAdapter63.errorHandler;
        retrofit.converter.Converter converter67 = null;
        restAdapter63.converter = converter67;
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter63.logLevel;
        java.util.concurrent.Executor executor70 = restAdapter63.httpExecutor;
        retrofit.RestAdapter.Log log71 = restAdapter63.log;
        retrofit.Profiler profiler72 = null;
        restAdapter63.profiler = profiler72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        builder74.logLevel = logLevel76;
        boolean boolean78 = logLevel76.log();
        restAdapter63.logLevel = logLevel76;
        builder58.logLevel = logLevel76;
        restAdapter39.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder82 = builder0.setLogLevel(logLevel76);
        java.util.concurrent.Executor executor83 = builder0.callbackExecutor;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter84 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(executor83);
    }

    @Test
    public void test01172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01172");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = builder2.server;
        retrofit.RestAdapter.Log log4 = null;
        builder2.log = log4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel7 = builder6.logLevel;
        retrofit.RestAdapter.Builder builder8 = builder2.setLogLevel(logLevel7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel11 = builder10.logLevel;
        builder9.logLevel = logLevel11;
        boolean boolean13 = logLevel11.log();
        builder2.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.Profiler profiler17 = builder15.profiler;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log20 = builder15.log;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = builder21.server;
        retrofit.RestAdapter.Log log23 = null;
        builder21.log = log23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        retrofit.RestAdapter.Builder builder27 = builder21.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("Retrofit-Idle");
        retrofit.Server server30 = builder29.server;
        java.util.concurrent.Executor executor31 = builder29.httpExecutor;
        java.util.concurrent.Executor executor32 = builder29.callbackExecutor;
        retrofit.ErrorHandler errorHandler33 = null;
        builder29.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        java.util.concurrent.Executor executor42 = builder41.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor43 = builder41.requestInterceptor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter53 = builder52.build();
        retrofit.Profiler profiler54 = null;
        builder52.profiler = profiler54;
        retrofit.Profiler profiler56 = null;
        builder52.profiler = profiler56;
        retrofit.converter.Converter converter58 = builder52.converter;
        retrofit.RestAdapter.Builder builder59 = builder41.setConverter(converter58);
        retrofit.RestAdapter.Builder builder60 = builder29.setConverter(converter58);
        builder15.converter = converter58;
        builder2.converter = converter58;
        restAdapter0.converter = converter58;
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(converter58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel64);
    }

    @Test
    public void test01173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01173");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.Profiler profiler7 = null;
        builder0.profiler = profiler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        retrofit.client.Client.Provider provider20 = builder13.clientProvider;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder9.setLog(log21);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        java.util.concurrent.Executor executor26 = restAdapter24.httpExecutor;
        java.util.concurrent.Executor executor27 = null;
        restAdapter24.callbackExecutor = executor27;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter24.errorHandler = errorHandler29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter24.logLevel = logLevel31;
        builder9.logLevel = logLevel31;
        builder9.ensureSaneDefaults();
        java.util.concurrent.Executor executor35 = builder9.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.client.Client.Provider provider47 = builder40.clientProvider;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        builder40.log = log48;
        retrofit.RestAdapter.Builder builder50 = builder36.setLog(log48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider62 = builder55.clientProvider;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        builder55.log = log63;
        retrofit.RestAdapter.Builder builder65 = builder51.setLog(log63);
        retrofit.RestAdapter.Builder builder66 = builder36.setLog(log63);
        retrofit.ErrorHandler errorHandler67 = null;
        builder66.errorHandler = errorHandler67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = builder69.callbackExecutor;
        retrofit.Profiler profiler71 = builder69.profiler;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = builder74.server;
        retrofit.RestAdapter.Log log76 = null;
        builder74.log = log76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel79 = builder78.logLevel;
        retrofit.RestAdapter.Builder builder80 = builder74.setLogLevel(logLevel79);
        retrofit.RestAdapter.Builder builder82 = builder80.setServer("Retrofit-Idle");
        retrofit.Server server83 = builder82.server;
        retrofit.RestAdapter.Builder builder84 = builder73.setServer(server83);
        retrofit.RestAdapter restAdapter85 = builder84.build();
        java.util.concurrent.Executor executor86 = restAdapter85.callbackExecutor;
        builder66.httpExecutor = executor86;
        retrofit.RestAdapter.Builder builder88 = builder0.setExecutors(executor35, executor86);
        java.lang.Class<?> wildcardClass89 = executor86.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(server75);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test01174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01174");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(log7);
    }

    @Test
    public void test01175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01175");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel6 = null;
        restAdapter0.logLevel = logLevel6;
        java.util.concurrent.Executor executor8 = null;
        restAdapter0.httpExecutor = executor8;
        java.util.concurrent.Executor executor10 = null;
        restAdapter0.callbackExecutor = executor10;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.Profiler profiler15 = builder13.profiler;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.Server server27 = builder26.server;
        retrofit.RestAdapter.Builder builder28 = builder17.setServer(server27);
        retrofit.RestAdapter restAdapter29 = builder28.build();
        retrofit.RestAdapter.Log log30 = builder28.log;
        retrofit.RestAdapter.LogLevel logLevel31 = builder28.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01176");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.client.Client.Provider provider12 = builder5.clientProvider;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        builder5.log = log13;
        retrofit.RestAdapter.Builder builder15 = builder4.setLog(log13);
        retrofit.Profiler profiler16 = builder15.profiler;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler26 = builder25.errorHandler;
        retrofit.RestAdapter restAdapter27 = builder25.build();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter30.new RestHandler();
        java.util.concurrent.Executor executor32 = restAdapter30.httpExecutor;
        java.util.concurrent.Executor executor33 = null;
        restAdapter30.callbackExecutor = executor33;
        retrofit.client.Client.Provider provider35 = null;
        restAdapter30.clientProvider = provider35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("Retrofit-Idle");
        retrofit.Server server46 = builder45.server;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder63 = builder61.setServer("Retrofit-Idle");
        retrofit.Server server64 = builder63.server;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = null;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Log log75 = null;
        builder73.log = log75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel78 = builder77.logLevel;
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel78);
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel78);
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel78);
        restAdapter30.log = log54;
        log54.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder85 = builder28.setLog(log54);
        builder25.log = log54;
        retrofit.ErrorHandler errorHandler87 = builder25.errorHandler;
        retrofit.RestAdapter.Builder builder88 = builder15.setErrorHandler(errorHandler87);
        retrofit.RestAdapter.Builder builder89 = builder0.setErrorHandler(errorHandler87);
        retrofit.RestAdapter.Log log90 = builder89.log;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter91 = builder89.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(server64);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(log90);
    }

    @Test
    public void test01177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01177");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Server server3 = builder0.server;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter4.new RestHandler();
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter4.errorHandler = errorHandler6;
        retrofit.RestAdapter.Log log8 = restAdapter4.log;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel16 = builder15.logLevel;
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel16);
        java.util.concurrent.Executor executor18 = builder17.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor19 = builder17.requestInterceptor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter29 = builder28.build();
        retrofit.Profiler profiler30 = null;
        builder28.profiler = profiler30;
        retrofit.Profiler profiler32 = null;
        builder28.profiler = profiler32;
        retrofit.converter.Converter converter34 = builder28.converter;
        retrofit.RestAdapter.Builder builder35 = builder17.setConverter(converter34);
        restAdapter4.converter = converter34;
        retrofit.RestAdapter.Builder builder37 = builder0.setConverter(converter34);
        retrofit.RestAdapter.Log log38 = builder37.log;
        retrofit.Server server39 = builder37.server;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(converter34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNull(server39);
    }

    @Test
    public void test01178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01178");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = builder8.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider14 = null;
        builder8.clientProvider = provider14;
        retrofit.client.Client client16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder17 = builder8.setClient(client16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test01179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01179");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        builder18.logLevel = logLevel20;
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel20);
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.logLevel;
        retrofit.client.Response response26 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response28 = restAdapter23.logAndReplaceResponse("hi!", response26, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01180");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        restAdapter0.log = log4;
        java.util.concurrent.Executor executor6 = null;
        restAdapter0.httpExecutor = executor6;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        java.util.concurrent.Executor executor17 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        builder25.logLevel = logLevel27;
        boolean boolean29 = logLevel27.log();
        builder18.logLevel = logLevel27;
        retrofit.RestAdapter.LogLevel logLevel31 = builder18.logLevel;
        retrofit.Profiler profiler32 = builder18.profiler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        retrofit.Profiler profiler35 = builder33.profiler;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Builder builder48 = builder37.setServer(server47);
        retrofit.RestAdapter.Builder builder49 = builder18.setServer(server47);
        retrofit.RestAdapter.Builder builder50 = builder15.setServer(server47);
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel67 = builder66.logLevel;
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel67);
        retrofit.client.Client.Provider provider69 = builder62.clientProvider;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        builder62.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder58.setLog(log70);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Log log75 = null;
        builder73.log = log75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel78 = builder77.logLevel;
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder81 = builder79.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter82 = builder81.build();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.logLevel;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server47, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log70, logLevel83);
        restAdapter0.server = server47;
        retrofit.Profiler profiler86 = null;
        restAdapter0.profiler = profiler86;
        retrofit.RestAdapter.RestHandler restHandler88 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler89 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable90 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable90, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(log4);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01181");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor8 = builder6.requestInterceptor;
        retrofit.converter.Converter converter9 = null;
        builder6.converter = converter9;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter11.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter11.httpExecutor;
        java.util.concurrent.Executor executor14 = null;
        restAdapter11.callbackExecutor = executor14;
        retrofit.client.Client.Provider provider16 = null;
        restAdapter11.clientProvider = provider16;
        java.util.concurrent.Executor executor18 = null;
        restAdapter11.callbackExecutor = executor18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter29 = builder28.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.logLevel;
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter29.requestInterceptor;
        restAdapter11.requestInterceptor = requestInterceptor31;
        retrofit.RestAdapter.Builder builder33 = builder6.setRequestInterceptor(requestInterceptor31);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = builder34.server;
        retrofit.RestAdapter.Log log36 = null;
        builder34.log = log36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel39 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("Retrofit-Idle");
        retrofit.Server server43 = builder42.server;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = null;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = builder52.server;
        retrofit.RestAdapter.Log log54 = null;
        builder52.log = log54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel57 = builder56.logLevel;
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel57);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel57);
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        builder6.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = builder62.callbackExecutor;
        retrofit.Profiler profiler64 = builder62.profiler;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        retrofit.RestAdapter.Log log69 = null;
        builder67.log = log69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel72 = builder71.logLevel;
        retrofit.RestAdapter.Builder builder73 = builder67.setLogLevel(logLevel72);
        retrofit.RestAdapter.Builder builder75 = builder73.setServer("Retrofit-Idle");
        retrofit.Server server76 = builder75.server;
        retrofit.RestAdapter.Builder builder77 = builder66.setServer(server76);
        retrofit.RestAdapter restAdapter78 = builder77.build();
        retrofit.RestAdapter.Log log79 = builder77.log;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.Server server81 = builder80.server;
        retrofit.RestAdapter.Log log82 = null;
        builder80.log = log82;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel85 = builder84.logLevel;
        retrofit.RestAdapter.Builder builder86 = builder80.setLogLevel(logLevel85);
        retrofit.RestAdapter.Builder builder88 = builder86.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler89 = builder88.errorHandler;
        retrofit.RestAdapter restAdapter90 = builder88.build();
        java.util.concurrent.Executor executor91 = null;
        restAdapter90.httpExecutor = executor91;
        retrofit.RestAdapter.RestHandler restHandler93 = restAdapter90.new RestHandler();
        retrofit.client.Client.Provider provider94 = null;
        restAdapter90.clientProvider = provider94;
        retrofit.converter.Converter converter96 = restAdapter90.converter;
        retrofit.RestAdapter.Builder builder97 = builder77.setConverter(converter96);
        builder6.converter = converter96;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(profiler64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNull(server81);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(errorHandler89);
        org.junit.Assert.assertNotNull(restAdapter90);
        org.junit.Assert.assertNotNull(converter96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test01182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01182");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel16 = builder15.logLevel;
        builder14.logLevel = logLevel16;
        boolean boolean18 = logLevel16.log();
        builder7.logLevel = logLevel16;
        retrofit.RestAdapter.LogLevel logLevel20 = builder7.logLevel;
        retrofit.Profiler profiler21 = builder7.profiler;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = builder22.callbackExecutor;
        retrofit.Profiler profiler24 = builder22.profiler;
        retrofit.RestAdapter.Builder builder26 = builder22.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("Retrofit-Idle");
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Builder builder37 = builder26.setServer(server36);
        retrofit.RestAdapter.Builder builder38 = builder7.setServer(server36);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = builder39.server;
        retrofit.RestAdapter.Log log41 = null;
        builder39.log = log41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel44 = builder43.logLevel;
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder47 = builder45.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = builder47.setLog(log48);
        java.util.concurrent.Executor executor50 = builder47.httpExecutor;
        retrofit.RestAdapter.Builder builder52 = builder47.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter53 = null;
        builder52.converter = converter53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder63 = builder61.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = builder63.setLog(log64);
        java.util.concurrent.Executor executor66 = builder63.httpExecutor;
        retrofit.RestAdapter restAdapter67 = builder63.build();
        java.util.concurrent.Executor executor68 = restAdapter67.httpExecutor;
        builder52.callbackExecutor = executor68;
        builder7.callbackExecutor = executor68;
        restAdapter0.httpExecutor = executor68;
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(executor68);
    }

    @Test
    public void test01183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01183");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        builder23.logLevel = logLevel25;
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.client.Client.Provider provider47 = builder40.clientProvider;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        builder40.log = log48;
        retrofit.RestAdapter.Builder builder50 = builder36.setLog(log48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider62 = builder55.clientProvider;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        builder55.log = log63;
        retrofit.RestAdapter.Builder builder65 = builder51.setLog(log63);
        retrofit.RestAdapter.Builder builder66 = builder36.setLog(log63);
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        java.util.concurrent.Executor executor69 = null;
        builder67.httpExecutor = executor69;
        retrofit.Server server71 = builder67.server;
        retrofit.RestAdapter.LogLevel logLevel72 = builder67.logLevel;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server14, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log63, logLevel72);
        restAdapter0.server = server14;
        retrofit.client.Client.Provider provider75 = restAdapter0.clientProvider;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter76.new RestHandler();
        java.util.concurrent.Executor executor78 = restAdapter76.httpExecutor;
        java.util.concurrent.Executor executor79 = null;
        restAdapter76.callbackExecutor = executor79;
        retrofit.client.Client.Provider provider81 = null;
        restAdapter76.clientProvider = provider81;
        java.util.concurrent.Executor executor83 = null;
        restAdapter76.callbackExecutor = executor83;
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        retrofit.Server server86 = builder85.server;
        retrofit.RestAdapter.Log log87 = null;
        builder85.log = log87;
        retrofit.RestAdapter.Builder builder89 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel90 = builder89.logLevel;
        retrofit.RestAdapter.Builder builder91 = builder85.setLogLevel(logLevel90);
        retrofit.RestAdapter.Builder builder93 = builder91.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter94 = builder93.build();
        retrofit.RestAdapter.LogLevel logLevel95 = restAdapter94.logLevel;
        retrofit.RequestInterceptor requestInterceptor96 = restAdapter94.requestInterceptor;
        restAdapter76.requestInterceptor = requestInterceptor96;
        restAdapter0.requestInterceptor = requestInterceptor96;
        retrofit.RestAdapter.RestHandler restHandler99 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider75);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNull(server86);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor96);
    }

    @Test
    public void test01184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01184");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = builder26.server;
        java.util.concurrent.Executor executor28 = null;
        builder26.httpExecutor = executor28;
        retrofit.Server server30 = builder26.server;
        retrofit.RestAdapter.LogLevel logLevel31 = builder26.logLevel;
        restAdapter25.logLevel = logLevel31;
        retrofit.Profiler profiler33 = restAdapter25.profiler;
        java.util.concurrent.Executor executor34 = restAdapter25.httpExecutor;
        retrofit.Profiler profiler35 = null;
        restAdapter25.profiler = profiler35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        java.util.concurrent.Executor executor48 = builder46.httpExecutor;
        java.util.concurrent.Executor executor49 = builder46.callbackExecutor;
        retrofit.ErrorHandler errorHandler50 = null;
        builder46.errorHandler = errorHandler50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = builder52.server;
        retrofit.RestAdapter.Log log54 = null;
        builder52.log = log54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel57 = builder56.logLevel;
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel57);
        java.util.concurrent.Executor executor59 = builder58.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor60 = builder58.requestInterceptor;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = builder61.server;
        retrofit.RestAdapter.Log log63 = null;
        builder61.log = log63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel66 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder61.setLogLevel(logLevel66);
        retrofit.RestAdapter.Builder builder69 = builder67.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter70 = builder69.build();
        retrofit.Profiler profiler71 = null;
        builder69.profiler = profiler71;
        retrofit.Profiler profiler73 = null;
        builder69.profiler = profiler73;
        retrofit.converter.Converter converter75 = builder69.converter;
        retrofit.RestAdapter.Builder builder76 = builder58.setConverter(converter75);
        retrofit.RestAdapter.Builder builder77 = builder46.setConverter(converter75);
        restAdapter25.converter = converter75;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNotNull(converter75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test01185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01185");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel7 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter0.logLevel = logLevel7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        java.util.concurrent.Executor executor17 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        builder25.logLevel = logLevel27;
        boolean boolean29 = logLevel27.log();
        builder18.logLevel = logLevel27;
        retrofit.RestAdapter.LogLevel logLevel31 = builder18.logLevel;
        retrofit.Profiler profiler32 = builder18.profiler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        retrofit.Profiler profiler35 = builder33.profiler;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Builder builder48 = builder37.setServer(server47);
        retrofit.RestAdapter.Builder builder49 = builder18.setServer(server47);
        retrofit.RestAdapter.Builder builder50 = builder15.setServer(server47);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel56);
        java.util.concurrent.Executor executor58 = builder57.callbackExecutor;
        java.util.concurrent.Executor executor59 = builder57.callbackExecutor;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = builder60.server;
        retrofit.RestAdapter.Log log62 = null;
        builder60.log = log62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel65 = builder64.logLevel;
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder68 = builder66.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder68.setLog(log69);
        java.util.concurrent.Executor executor71 = builder68.httpExecutor;
        retrofit.RestAdapter restAdapter72 = builder68.build();
        java.util.concurrent.Executor executor73 = restAdapter72.httpExecutor;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = builder74.server;
        retrofit.RestAdapter.Log log76 = null;
        builder74.log = log76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel79 = builder78.logLevel;
        retrofit.RestAdapter.Builder builder80 = builder74.setLogLevel(logLevel79);
        retrofit.RestAdapter.Builder builder82 = builder80.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder84 = builder82.setLog(log83);
        java.util.concurrent.Executor executor85 = builder82.httpExecutor;
        retrofit.RestAdapter restAdapter86 = builder82.build();
        java.util.concurrent.Executor executor87 = restAdapter86.httpExecutor;
        retrofit.RestAdapter.Builder builder88 = builder57.setExecutors(executor73, executor87);
        builder50.httpExecutor = executor87;
        restAdapter0.httpExecutor = executor87;
        retrofit.RestAdapter.RestHandler restHandler91 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler92 = restAdapter0.new RestHandler();
        retrofit.client.Request request93 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request94 = restAdapter0.logAndReplaceRequest(request93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNull(server75);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(executor85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test01186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01186");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        restAdapter0.log = log4;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.RestAdapter restAdapter19 = builder17.build();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter22.new RestHandler();
        java.util.concurrent.Executor executor24 = restAdapter22.httpExecutor;
        java.util.concurrent.Executor executor25 = null;
        restAdapter22.callbackExecutor = executor25;
        retrofit.client.Client.Provider provider27 = null;
        restAdapter22.clientProvider = provider27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.Server server38 = builder37.server;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder47.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("Retrofit-Idle");
        retrofit.Server server56 = builder55.server;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = null;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel70);
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel70);
        restAdapter22.log = log46;
        log46.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder77 = builder20.setLog(log46);
        builder17.log = log46;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = builder79.server;
        retrofit.RestAdapter.Log log81 = null;
        builder79.log = log81;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel84 = builder83.logLevel;
        retrofit.RestAdapter.Builder builder85 = builder79.setLogLevel(logLevel84);
        retrofit.RestAdapter.Builder builder87 = builder85.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter88 = builder87.build();
        retrofit.Profiler profiler89 = null;
        builder87.profiler = profiler89;
        retrofit.RestAdapter restAdapter91 = builder87.build();
        retrofit.client.Client.Provider provider92 = builder87.clientProvider;
        retrofit.RestAdapter.Builder builder93 = builder17.setClient(provider92);
        retrofit.ErrorHandler errorHandler94 = builder17.errorHandler;
        restAdapter0.errorHandler = errorHandler94;
        retrofit.RequestInterceptor requestInterceptor96 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(log4);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(server80);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(provider92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(errorHandler94);
        org.junit.Assert.assertNull(requestInterceptor96);
    }

    @Test
    public void test01187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01187");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Log log9 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        retrofit.Server server15 = builder11.server;
        retrofit.RestAdapter.LogLevel logLevel16 = builder11.logLevel;
        retrofit.ErrorHandler errorHandler17 = builder11.errorHandler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        builder18.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("Retrofit-Idle");
        retrofit.Server server31 = builder30.server;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.client.Client.Provider provider47 = builder40.clientProvider;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        builder40.log = log48;
        retrofit.RestAdapter.Builder builder50 = builder39.setLog(log48);
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log48, logLevel51);
        builder18.logLevel = logLevel51;
        retrofit.RestAdapter.LogLevel logLevel54 = builder18.logLevel;
        retrofit.Profiler profiler55 = builder18.profiler;
        retrofit.RestAdapter.Builder builder57 = builder18.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel63 = builder62.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder66 = builder64.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter67 = builder66.build();
        retrofit.Profiler profiler68 = null;
        builder66.profiler = profiler68;
        retrofit.Profiler profiler70 = null;
        builder66.profiler = profiler70;
        retrofit.converter.Converter converter72 = builder66.converter;
        builder57.converter = converter72;
        retrofit.RestAdapter.Builder builder74 = builder11.setConverter(converter72);
        restAdapter0.converter = converter72;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(converter72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test01188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01188");
        java.util.List<retrofit.client.Header> headerList2 = null;
        retrofit.mime.TypedInput typedInput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response4 = new retrofit.client.Response((-1), "hi!", headerList2, typedInput3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01189");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.client.Client.Provider provider44 = builder37.clientProvider;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        builder37.log = log45;
        retrofit.RestAdapter.Builder builder47 = builder33.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server9, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log45, logLevel48);
        retrofit.converter.Converter converter50 = null;
        restAdapter49.converter = converter50;
        java.util.concurrent.Executor executor52 = restAdapter49.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter49.new RestHandler();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor52);
    }

    @Test
    public void test01190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01190");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        java.util.concurrent.Executor executor8 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        builder16.logLevel = logLevel18;
        boolean boolean20 = logLevel18.log();
        builder9.logLevel = logLevel18;
        retrofit.RestAdapter.LogLevel logLevel22 = builder9.logLevel;
        retrofit.Profiler profiler23 = builder9.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.Profiler profiler26 = builder24.profiler;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Builder builder39 = builder28.setServer(server38);
        retrofit.RestAdapter.Builder builder40 = builder9.setServer(server38);
        retrofit.RestAdapter.Builder builder41 = builder6.setServer(server38);
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider60 = builder53.clientProvider;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        builder53.log = log61;
        retrofit.RestAdapter.Builder builder63 = builder49.setLog(log61);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter73 = builder72.build();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.logLevel;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server38, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log61, logLevel74);
        retrofit.RestAdapter.Log log76 = restAdapter75.log;
        java.lang.Throwable throwable77 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter75.logException(throwable77, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log76);
    }

    @Test
    public void test01191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01191");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        retrofit.Profiler profiler11 = builder10.profiler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.Server server21 = builder20.server;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder10.setServer(server21);
        retrofit.converter.Converter converter39 = builder10.converter;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = builder48.setLog(log49);
        java.util.concurrent.Executor executor51 = builder48.httpExecutor;
        java.util.concurrent.Executor executor52 = null;
        builder48.httpExecutor = executor52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = builder54.server;
        retrofit.RestAdapter.Log log56 = null;
        builder54.log = log56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel59 = builder58.logLevel;
        retrofit.RestAdapter.Builder builder60 = builder54.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder62 = builder60.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder62.setLog(log63);
        java.util.concurrent.Executor executor65 = builder62.httpExecutor;
        retrofit.RestAdapter.Builder builder67 = builder62.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler68 = builder62.errorHandler;
        retrofit.RestAdapter restAdapter69 = builder62.build();
        java.util.concurrent.Executor executor70 = restAdapter69.httpExecutor;
        builder48.httpExecutor = executor70;
        builder10.callbackExecutor = executor70;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(errorHandler68);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(executor70);
    }

    @Test
    public void test01192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01192");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter7.new RestHandler();
        retrofit.ErrorHandler errorHandler9 = null;
        restAdapter7.errorHandler = errorHandler9;
        retrofit.RestAdapter.Log log11 = restAdapter7.log;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter7.new RestHandler();
        retrofit.Profiler profiler15 = null;
        restAdapter7.profiler = profiler15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler26 = builder25.errorHandler;
        retrofit.RestAdapter restAdapter27 = builder25.build();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter30.new RestHandler();
        java.util.concurrent.Executor executor32 = restAdapter30.httpExecutor;
        java.util.concurrent.Executor executor33 = null;
        restAdapter30.callbackExecutor = executor33;
        retrofit.client.Client.Provider provider35 = null;
        restAdapter30.clientProvider = provider35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("Retrofit-Idle");
        retrofit.Server server46 = builder45.server;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder63 = builder61.setServer("Retrofit-Idle");
        retrofit.Server server64 = builder63.server;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = null;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Log log75 = null;
        builder73.log = log75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel78 = builder77.logLevel;
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel78);
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel78);
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel78);
        restAdapter30.log = log54;
        log54.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder85 = builder28.setLog(log54);
        builder25.log = log54;
        retrofit.ErrorHandler errorHandler87 = builder25.errorHandler;
        restAdapter7.errorHandler = errorHandler87;
        restAdapter0.errorHandler = errorHandler87;
        retrofit.RequestInterceptor requestInterceptor90 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(server64);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNull(requestInterceptor90);
    }

    @Test
    public void test01193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01193");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        java.util.concurrent.Executor executor12 = null;
        builder8.httpExecutor = executor12;
        java.util.concurrent.Executor executor14 = builder8.callbackExecutor;
        retrofit.client.Client.Provider provider15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder8.setClient(provider15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test01194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01194");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(executor6);
    }

    @Test
    public void test01195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01195");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        java.util.concurrent.Executor executor5 = null;
        restAdapter0.callbackExecutor = executor5;
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.httpExecutor = executor7;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
    }

    @Test
    public void test01196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01196");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        java.util.concurrent.Executor executor12 = null;
        builder8.httpExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = builder8.build();
        retrofit.RestAdapter.Log log15 = builder8.log;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        retrofit.RestAdapter restAdapter26 = builder24.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter29.new RestHandler();
        java.util.concurrent.Executor executor31 = restAdapter29.httpExecutor;
        java.util.concurrent.Executor executor32 = null;
        restAdapter29.callbackExecutor = executor32;
        retrofit.client.Client.Provider provider34 = null;
        restAdapter29.clientProvider = provider34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel41 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder42 = builder36.setLogLevel(logLevel41);
        retrofit.RestAdapter.Builder builder44 = builder42.setServer("Retrofit-Idle");
        retrofit.Server server45 = builder44.server;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = builder54.server;
        retrofit.RestAdapter.Log log56 = null;
        builder54.log = log56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel59 = builder58.logLevel;
        retrofit.RestAdapter.Builder builder60 = builder54.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder62 = builder60.setServer("Retrofit-Idle");
        retrofit.Server server63 = builder62.server;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = null;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        retrofit.RestAdapter.Builder builder78 = builder72.setLogLevel(logLevel77);
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel77);
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel77);
        restAdapter29.log = log53;
        log53.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder84 = builder27.setLog(log53);
        builder24.log = log53;
        retrofit.ErrorHandler errorHandler86 = builder24.errorHandler;
        retrofit.RestAdapter.Builder builder87 = builder8.setErrorHandler(errorHandler86);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder89 = builder8.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(server63);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test01197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01197");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.client.Client.Provider provider17 = null;
        restAdapter16.clientProvider = provider17;
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.client.Client.Provider provider20 = null;
        restAdapter16.clientProvider = provider20;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter16.new RestHandler();
        retrofit.client.Client.Provider provider23 = restAdapter16.clientProvider;
        retrofit.client.Response response25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response27 = restAdapter16.logAndReplaceResponse("hi!", response25, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNull(provider23);
    }

    @Test
    public void test01198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01198");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.RestAdapter.LogLevel logLevel7 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel7;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log13 = restAdapter0.log;
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log13);
    }

    @Test
    public void test01199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01199");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor7 = restAdapter0.callbackExecutor;
        retrofit.client.Request request8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request9 = restAdapter0.logAndReplaceRequest(request8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test01200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01200");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        java.util.concurrent.Executor executor8 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        builder16.logLevel = logLevel18;
        boolean boolean20 = logLevel18.log();
        builder9.logLevel = logLevel18;
        retrofit.RestAdapter.LogLevel logLevel22 = builder9.logLevel;
        retrofit.Profiler profiler23 = builder9.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.Profiler profiler26 = builder24.profiler;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Builder builder39 = builder28.setServer(server38);
        retrofit.RestAdapter.Builder builder40 = builder9.setServer(server38);
        retrofit.RestAdapter.Builder builder41 = builder6.setServer(server38);
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider60 = builder53.clientProvider;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        builder53.log = log61;
        retrofit.RestAdapter.Builder builder63 = builder49.setLog(log61);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter73 = builder72.build();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.logLevel;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server38, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log61, logLevel74);
        retrofit.RestAdapter.Log log76 = restAdapter75.log;
        retrofit.converter.Converter converter77 = restAdapter75.converter;
        retrofit.RequestInterceptor requestInterceptor78 = restAdapter75.requestInterceptor;
        retrofit.client.Request request79 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request80 = restAdapter75.logAndReplaceRequest(request79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNull(requestInterceptor78);
    }

    @Test
    public void test01201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01201");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = builder6.server;
        retrofit.RestAdapter.Log log8 = null;
        builder6.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel11 = builder10.logLevel;
        retrofit.RestAdapter.Builder builder12 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder16 = builder14.setLog(log15);
        java.util.concurrent.Executor executor17 = builder14.httpExecutor;
        java.util.concurrent.Executor executor18 = null;
        builder14.httpExecutor = executor18;
        retrofit.RestAdapter restAdapter20 = builder14.build();
        retrofit.RestAdapter.Log log21 = builder14.log;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.RestAdapter restAdapter32 = builder30.build();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        java.util.concurrent.Executor executor37 = restAdapter35.httpExecutor;
        java.util.concurrent.Executor executor38 = null;
        restAdapter35.callbackExecutor = executor38;
        retrofit.client.Client.Provider provider40 = null;
        restAdapter35.clientProvider = provider40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("Retrofit-Idle");
        retrofit.Server server51 = builder50.server;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = builder60.server;
        retrofit.RestAdapter.Log log62 = null;
        builder60.log = log62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel65 = builder64.logLevel;
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder68 = builder66.setServer("Retrofit-Idle");
        retrofit.Server server69 = builder68.server;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = null;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.Server server79 = builder78.server;
        retrofit.RestAdapter.Log log80 = null;
        builder78.log = log80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        retrofit.RestAdapter.Builder builder84 = builder78.setLogLevel(logLevel83);
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel83);
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel83);
        restAdapter35.log = log59;
        log59.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder90 = builder33.setLog(log59);
        builder30.log = log59;
        retrofit.ErrorHandler errorHandler92 = builder30.errorHandler;
        retrofit.RestAdapter.Builder builder93 = builder14.setErrorHandler(errorHandler92);
        retrofit.RestAdapter.Builder builder94 = builder0.setErrorHandler(errorHandler92);
        retrofit.Profiler profiler95 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder96 = builder0.setProfiler(profiler95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(server69);
        org.junit.Assert.assertNull(server79);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(errorHandler92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test01202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01202");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler6 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable8, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler6);
    }

    @Test
    public void test01203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01203");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter6.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter6.logLevel;
        retrofit.ErrorHandler errorHandler9 = restAdapter6.errorHandler;
        retrofit.converter.Converter converter10 = null;
        restAdapter6.converter = converter10;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter6.logLevel;
        java.util.concurrent.Executor executor13 = restAdapter6.httpExecutor;
        retrofit.RestAdapter.Log log14 = restAdapter6.log;
        retrofit.Profiler profiler15 = null;
        restAdapter6.profiler = profiler15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        builder17.logLevel = logLevel19;
        boolean boolean21 = logLevel19.log();
        restAdapter6.logLevel = logLevel19;
        retrofit.Profiler profiler23 = restAdapter6.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel29 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.RestAdapter restAdapter34 = builder32.build();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter37.new RestHandler();
        java.util.concurrent.Executor executor39 = restAdapter37.httpExecutor;
        java.util.concurrent.Executor executor40 = null;
        restAdapter37.callbackExecutor = executor40;
        retrofit.client.Client.Provider provider42 = null;
        restAdapter37.clientProvider = provider42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("Retrofit-Idle");
        retrofit.Server server53 = builder52.server;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel67 = builder66.logLevel;
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder70 = builder68.setServer("Retrofit-Idle");
        retrofit.Server server71 = builder70.server;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = null;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.Server server81 = builder80.server;
        retrofit.RestAdapter.Log log82 = null;
        builder80.log = log82;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel85 = builder84.logLevel;
        retrofit.RestAdapter.Builder builder86 = builder80.setLogLevel(logLevel85);
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel85);
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel85);
        restAdapter37.log = log61;
        log61.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder92 = builder35.setLog(log61);
        builder32.log = log61;
        retrofit.RequestInterceptor requestInterceptor94 = builder32.requestInterceptor;
        restAdapter6.requestInterceptor = requestInterceptor94;
        builder0.requestInterceptor = requestInterceptor94;
        java.util.concurrent.Executor executor97 = builder0.callbackExecutor;
        retrofit.Server server98 = builder0.server;
        java.util.concurrent.Executor executor99 = builder0.httpExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNull(server81);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(requestInterceptor94);
        org.junit.Assert.assertNull(executor97);
        org.junit.Assert.assertNull(server98);
        org.junit.Assert.assertNull(executor99);
    }

    @Test
    public void test01204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01204");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor8 = builder6.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter18 = builder17.build();
        retrofit.Profiler profiler19 = null;
        builder17.profiler = profiler19;
        retrofit.Profiler profiler21 = null;
        builder17.profiler = profiler21;
        retrofit.converter.Converter converter23 = builder17.converter;
        retrofit.RestAdapter.Builder builder24 = builder6.setConverter(converter23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.client.Client.Provider provider36 = builder29.clientProvider;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        builder29.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder25.setLog(log37);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.client.Client.Provider provider51 = builder44.clientProvider;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        builder44.log = log52;
        retrofit.RestAdapter.Builder builder54 = builder40.setLog(log52);
        retrofit.RestAdapter.Builder builder55 = builder25.setLog(log52);
        builder55.ensureSaneDefaults();
        java.util.concurrent.Executor executor57 = builder55.callbackExecutor;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel67 = builder66.logLevel;
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel67);
        retrofit.client.Client.Provider provider69 = builder62.clientProvider;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        builder62.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder58.setLog(log70);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Log log75 = null;
        builder73.log = log75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server78 = builder77.server;
        retrofit.RestAdapter.Log log79 = null;
        builder77.log = log79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        retrofit.RestAdapter.Builder builder83 = builder77.setLogLevel(logLevel82);
        retrofit.client.Client.Provider provider84 = builder77.clientProvider;
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        builder77.log = log85;
        retrofit.RestAdapter.Builder builder87 = builder73.setLog(log85);
        retrofit.RestAdapter.Builder builder88 = builder58.setLog(log85);
        builder88.ensureSaneDefaults();
        java.util.concurrent.Executor executor90 = builder88.callbackExecutor;
        builder55.httpExecutor = executor90;
        builder24.callbackExecutor = executor90;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(converter23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertNull(server78);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(provider84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(executor90);
    }

    @Test
    public void test01205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01205");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter6 = null;
        restAdapter0.converter = converter6;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler9 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(errorHandler12);
    }

    @Test
    public void test01206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01206");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.client.Client.Provider provider2 = builder0.clientProvider;
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Profiler profiler5 = builder0.profiler;
        retrofit.client.Client client6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setClient(client6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(profiler5);
    }

    @Test
    public void test01207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01207");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = builder4.callbackExecutor;
        retrofit.Profiler profiler6 = builder4.profiler;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Builder builder19 = builder8.setServer(server18);
        retrofit.RestAdapter.Log log20 = builder19.log;
        retrofit.RestAdapter.LogLevel logLevel21 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        builder29.logLevel = logLevel31;
        boolean boolean33 = logLevel31.log();
        builder22.logLevel = logLevel31;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        builder22.requestInterceptor = requestInterceptor35;
        retrofit.converter.Converter converter37 = null;
        builder22.converter = converter37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        retrofit.Profiler profiler41 = builder39.profiler;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("Retrofit-Idle");
        retrofit.Server server53 = builder52.server;
        retrofit.RestAdapter.Builder builder54 = builder43.setServer(server53);
        retrofit.RestAdapter restAdapter55 = builder54.build();
        java.util.concurrent.Executor executor56 = restAdapter55.callbackExecutor;
        builder22.httpExecutor = executor56;
        builder19.httpExecutor = executor56;
        builder0.httpExecutor = executor56;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter60.new RestHandler();
        retrofit.ErrorHandler errorHandler64 = restAdapter60.errorHandler;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder73 = builder71.setServer("Retrofit-Idle");
        retrofit.Server server74 = builder73.server;
        restAdapter60.server = server74;
        retrofit.RestAdapter.Builder builder76 = builder0.setServer(server74);
        retrofit.Profiler profiler77 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder78 = builder0.setProfiler(profiler77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test01208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01208");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.callbackExecutor;
        retrofit.Profiler profiler7 = builder5.profiler;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Builder builder20 = builder9.setServer(server19);
        retrofit.RestAdapter restAdapter21 = builder20.build();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        builder29.logLevel = logLevel31;
        boolean boolean33 = logLevel31.log();
        builder22.logLevel = logLevel31;
        retrofit.RestAdapter.LogLevel logLevel35 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder20.setLogLevel(logLevel35);
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        retrofit.RestAdapter.Builder builder38 = builder0.setLogLevel(logLevel37);
        retrofit.Profiler profiler39 = builder0.profiler;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.client.Client.Provider provider48 = builder41.clientProvider;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        builder41.log = log49;
        retrofit.RestAdapter.Builder builder51 = builder40.setLog(log49);
        retrofit.Profiler profiler52 = builder40.profiler;
        retrofit.RequestInterceptor requestInterceptor53 = builder40.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel54 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder0.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder57 = builder55.setServer("hi!");
        java.util.concurrent.Executor executor58 = builder57.httpExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(executor58);
    }

    @Test
    public void test01209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01209");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.Server server32 = builder31.server;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel46);
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = builder61.server;
        retrofit.RestAdapter.Log log63 = null;
        builder61.log = log63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel66 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder61.setLogLevel(logLevel66);
        retrofit.client.Client.Provider provider68 = builder61.clientProvider;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        builder61.log = log69;
        retrofit.RestAdapter.Builder builder71 = builder57.setLog(log69);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        retrofit.RestAdapter.Builder builder78 = builder72.setLogLevel(logLevel77);
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server14, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log69, logLevel77);
        restAdapter0.logLevel = logLevel77;
        java.lang.Throwable throwable81 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable81, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(provider68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test01210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01210");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.converter.Converter converter2 = builder0.converter;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.Server server4 = builder3.server;
        retrofit.RestAdapter.Log log5 = null;
        builder3.log = log5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel8 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("Retrofit-Idle");
        retrofit.Server server12 = builder11.server;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = builder21.server;
        retrofit.RestAdapter.Log log23 = null;
        builder21.log = log23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        retrofit.RestAdapter.Builder builder27 = builder21.setLogLevel(logLevel26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel26);
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter36.new RestHandler();
        java.util.concurrent.Executor executor38 = restAdapter36.httpExecutor;
        java.util.concurrent.Executor executor39 = null;
        restAdapter36.callbackExecutor = executor39;
        retrofit.client.Client.Provider provider41 = null;
        restAdapter36.clientProvider = provider41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel48 = builder47.logLevel;
        retrofit.RestAdapter.Builder builder49 = builder43.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("Retrofit-Idle");
        retrofit.Server server52 = builder51.server;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = builder61.server;
        retrofit.RestAdapter.Log log63 = null;
        builder61.log = log63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel66 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder61.setLogLevel(logLevel66);
        retrofit.RestAdapter.Builder builder69 = builder67.setServer("Retrofit-Idle");
        retrofit.Server server70 = builder69.server;
        retrofit.client.Client.Provider provider71 = null;
        java.util.concurrent.Executor executor72 = null;
        java.util.concurrent.Executor executor73 = null;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        retrofit.converter.Converter converter75 = null;
        retrofit.Profiler profiler76 = null;
        retrofit.ErrorHandler errorHandler77 = null;
        retrofit.RestAdapter.Log log78 = null;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = builder79.server;
        retrofit.RestAdapter.Log log81 = null;
        builder79.log = log81;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel84 = builder83.logLevel;
        retrofit.RestAdapter.Builder builder85 = builder79.setLogLevel(logLevel84);
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server70, provider71, executor72, executor73, requestInterceptor74, converter75, profiler76, errorHandler77, log78, logLevel84);
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel84);
        restAdapter36.log = log60;
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler90 = restAdapter89.new RestHandler();
        java.util.concurrent.Executor executor91 = restAdapter89.httpExecutor;
        java.util.concurrent.Executor executor92 = null;
        restAdapter89.callbackExecutor = executor92;
        retrofit.ErrorHandler errorHandler94 = null;
        restAdapter89.errorHandler = errorHandler94;
        retrofit.RestAdapter.LogLevel logLevel96 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter89.logLevel = logLevel96;
        retrofit.RestAdapter restAdapter98 = new retrofit.RestAdapter(server12, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log60, logLevel96);
        retrofit.RestAdapter.Builder builder99 = builder0.setServer(server12);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(server70);
        org.junit.Assert.assertNull(server80);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(executor91);
        org.junit.Assert.assertTrue("'" + logLevel96 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel96.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01211");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder0.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.Log log9 = builder0.log;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        builder17.logLevel = logLevel19;
        boolean boolean21 = logLevel19.log();
        builder10.logLevel = logLevel19;
        retrofit.RestAdapter.Builder builder23 = builder0.setLogLevel(logLevel19);
        retrofit.ErrorHandler errorHandler24 = null;
        builder23.errorHandler = errorHandler24;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter26.new RestHandler();
        java.util.concurrent.Executor executor28 = restAdapter26.httpExecutor;
        java.util.concurrent.Executor executor29 = null;
        restAdapter26.callbackExecutor = executor29;
        retrofit.client.Client.Provider provider31 = null;
        restAdapter26.clientProvider = provider31;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter26.logLevel;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        builder34.logLevel = logLevel36;
        java.util.concurrent.Executor executor38 = null;
        builder34.callbackExecutor = executor38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor41 = null;
        restAdapter40.callbackExecutor = executor41;
        retrofit.converter.Converter converter43 = restAdapter40.converter;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        restAdapter40.log = log44;
        builder34.log = log44;
        restAdapter26.log = log44;
        retrofit.RestAdapter.Builder builder48 = builder23.setLog(log44);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder50 = builder48.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test01212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01212");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.RestAdapter restAdapter10 = builder8.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter13.new RestHandler();
        java.util.concurrent.Executor executor15 = restAdapter13.httpExecutor;
        java.util.concurrent.Executor executor16 = null;
        restAdapter13.callbackExecutor = executor16;
        retrofit.client.Client.Provider provider18 = null;
        restAdapter13.clientProvider = provider18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.Server server29 = builder28.server;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = null;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel61);
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel61);
        restAdapter13.log = log37;
        log37.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder68 = builder11.setLog(log37);
        builder8.log = log37;
        retrofit.ErrorHandler errorHandler70 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder79 = builder77.setServer("Retrofit-Idle");
        retrofit.Server server80 = builder79.server;
        retrofit.client.Client.Provider provider81 = null;
        java.util.concurrent.Executor executor82 = null;
        java.util.concurrent.Executor executor83 = null;
        retrofit.RequestInterceptor requestInterceptor84 = null;
        retrofit.converter.Converter converter85 = null;
        retrofit.Profiler profiler86 = null;
        retrofit.ErrorHandler errorHandler87 = null;
        retrofit.RestAdapter.Log log88 = null;
        retrofit.RestAdapter.Builder builder89 = new retrofit.RestAdapter.Builder();
        retrofit.Server server90 = builder89.server;
        retrofit.RestAdapter.Log log91 = null;
        builder89.log = log91;
        retrofit.RestAdapter.Builder builder93 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel94 = builder93.logLevel;
        retrofit.RestAdapter.Builder builder95 = builder89.setLogLevel(logLevel94);
        retrofit.RestAdapter restAdapter96 = new retrofit.RestAdapter(server80, provider81, executor82, executor83, requestInterceptor84, converter85, profiler86, errorHandler87, log88, logLevel94);
        retrofit.RestAdapter.Builder builder97 = builder8.setServer(server80);
        retrofit.Profiler profiler98 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder99 = builder8.setProfiler(profiler98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(errorHandler70);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(server80);
        org.junit.Assert.assertNull(server90);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test01213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01213");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        retrofit.converter.Converter converter15 = builder0.converter;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        builder23.logLevel = logLevel25;
        boolean boolean27 = logLevel25.log();
        builder16.logLevel = logLevel25;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        builder16.requestInterceptor = requestInterceptor29;
        java.util.concurrent.Executor executor31 = null;
        builder16.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.client.Client.Provider provider40 = builder33.clientProvider;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        builder33.log = log41;
        builder16.log = log41;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        builder51.logLevel = logLevel53;
        boolean boolean55 = logLevel53.log();
        builder44.logLevel = logLevel53;
        retrofit.RestAdapter.LogLevel logLevel57 = builder44.logLevel;
        retrofit.Profiler profiler58 = builder44.profiler;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = builder59.callbackExecutor;
        retrofit.Profiler profiler61 = builder59.profiler;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("Retrofit-Idle");
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Builder builder74 = builder63.setServer(server73);
        retrofit.RestAdapter.Builder builder75 = builder44.setServer(server73);
        retrofit.RestAdapter.Builder builder76 = builder16.setServer(server73);
        builder0.server = server73;
        retrofit.client.Client.Provider provider78 = builder0.clientProvider;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler58);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(profiler61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(provider78);
    }

    @Test
    public void test01214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01214");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.RestAdapter restAdapter10 = builder8.build();
        java.util.concurrent.Executor executor11 = null;
        restAdapter10.httpExecutor = executor11;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNotNull(errorHandler15);
    }

    @Test
    public void test01215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01215");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.Server server32 = builder31.server;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel46);
        restAdapter0.server = server14;
        retrofit.client.Client.Provider provider51 = null;
        restAdapter0.clientProvider = provider51;
        retrofit.RestAdapter.Log log53 = restAdapter0.log;
        retrofit.Profiler profiler54 = null;
        restAdapter0.profiler = profiler54;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(log53);
    }

    @Test
    public void test01216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01216");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.converter.Converter converter2 = builder0.converter;
        retrofit.Server server3 = builder0.server;
        retrofit.Profiler profiler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder5 = builder0.setProfiler(profiler4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(server3);
    }

    @Test
    public void test01217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01217");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.Server server7 = builder0.server;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = builder8.server;
        java.util.concurrent.Executor executor10 = null;
        builder8.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder20 = builder14.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("Retrofit-Idle");
        retrofit.Server server23 = builder22.server;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Log log34 = null;
        builder32.log = log34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel37);
        retrofit.client.Client.Provider provider39 = builder32.clientProvider;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        builder32.log = log40;
        retrofit.RestAdapter.Builder builder42 = builder31.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log40, logLevel43);
        retrofit.RestAdapter.Builder builder45 = builder12.setServer(server23);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter55 = builder54.build();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.logLevel;
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter55.requestInterceptor;
        retrofit.RestAdapter.Builder builder58 = builder45.setRequestInterceptor(requestInterceptor57);
        retrofit.RestAdapter.Builder builder59 = builder8.setRequestInterceptor(requestInterceptor57);
        retrofit.RestAdapter.Builder builder60 = builder0.setRequestInterceptor(requestInterceptor57);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = builder61.server;
        retrofit.RestAdapter.Log log63 = null;
        builder61.log = log63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel66 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder61.setLogLevel(logLevel66);
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        builder68.logLevel = logLevel70;
        boolean boolean72 = logLevel70.log();
        builder61.logLevel = logLevel70;
        retrofit.RestAdapter.LogLevel logLevel74 = builder61.logLevel;
        retrofit.Profiler profiler75 = builder61.profiler;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor77 = builder76.callbackExecutor;
        retrofit.Profiler profiler78 = builder76.profiler;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.Server server82 = builder81.server;
        retrofit.RestAdapter.Log log83 = null;
        builder81.log = log83;
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel86 = builder85.logLevel;
        retrofit.RestAdapter.Builder builder87 = builder81.setLogLevel(logLevel86);
        retrofit.RestAdapter.Builder builder89 = builder87.setServer("Retrofit-Idle");
        retrofit.Server server90 = builder89.server;
        retrofit.RestAdapter.Builder builder91 = builder80.setServer(server90);
        retrofit.RestAdapter.Builder builder92 = builder61.setServer(server90);
        retrofit.RestAdapter.Builder builder93 = builder0.setServer(server90);
        java.lang.Class<?> wildcardClass94 = server90.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler75);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNull(profiler78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(server82);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(server90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test01218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01218");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        restAdapter0.log = log4;
        java.util.concurrent.Executor executor6 = null;
        restAdapter0.httpExecutor = executor6;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        java.util.concurrent.Executor executor17 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        builder25.logLevel = logLevel27;
        boolean boolean29 = logLevel27.log();
        builder18.logLevel = logLevel27;
        retrofit.RestAdapter.LogLevel logLevel31 = builder18.logLevel;
        retrofit.Profiler profiler32 = builder18.profiler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        retrofit.Profiler profiler35 = builder33.profiler;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Builder builder48 = builder37.setServer(server47);
        retrofit.RestAdapter.Builder builder49 = builder18.setServer(server47);
        retrofit.RestAdapter.Builder builder50 = builder15.setServer(server47);
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel67 = builder66.logLevel;
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel67);
        retrofit.client.Client.Provider provider69 = builder62.clientProvider;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        builder62.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder58.setLog(log70);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Log log75 = null;
        builder73.log = log75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel78 = builder77.logLevel;
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder81 = builder79.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter82 = builder81.build();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.logLevel;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server47, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log70, logLevel83);
        restAdapter0.server = server47;
        retrofit.Profiler profiler86 = null;
        restAdapter0.profiler = profiler86;
        retrofit.RestAdapter.RestHandler restHandler88 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler89 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor90 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(log4);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor90);
    }

    @Test
    public void test01219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01219");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        java.util.concurrent.Executor executor16 = null;
        builder0.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = builder0.converter;
        retrofit.ErrorHandler errorHandler19 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler20 = null;
        builder0.errorHandler = errorHandler20;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter23.logLevel;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter23.errorHandler = errorHandler26;
        java.util.concurrent.Executor executor28 = restAdapter23.httpExecutor;
        java.util.concurrent.Executor executor29 = null;
        restAdapter23.httpExecutor = executor29;
        retrofit.ErrorHandler errorHandler31 = restAdapter23.errorHandler;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = null;
        restAdapter32.requestInterceptor = requestInterceptor33;
        retrofit.Profiler profiler35 = null;
        restAdapter32.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.Profiler profiler39 = builder37.profiler;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("Retrofit-Idle");
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Builder builder52 = builder41.setServer(server51);
        retrofit.RestAdapter restAdapter53 = builder52.build();
        java.util.concurrent.Executor executor54 = restAdapter53.callbackExecutor;
        restAdapter32.callbackExecutor = executor54;
        restAdapter23.httpExecutor = executor54;
        builder0.callbackExecutor = executor54;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        builder62.logLevel = logLevel64;
        java.util.concurrent.Executor executor66 = null;
        builder62.callbackExecutor = executor66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor69 = null;
        restAdapter68.callbackExecutor = executor69;
        retrofit.converter.Converter converter71 = restAdapter68.converter;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        restAdapter68.log = log72;
        builder62.log = log72;
        builder58.log = log72;
        log72.log("Retrofit-Idle");
        log72.log("Retrofit-");
        retrofit.RestAdapter.Builder builder80 = builder0.setLog(log72);
        retrofit.client.Client client81 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder82 = builder0.setClient(client81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test01220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01220");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        java.util.concurrent.Executor executor12 = null;
        builder8.httpExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = builder8.build();
        retrofit.RestAdapter.Log log15 = builder8.log;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        retrofit.RestAdapter restAdapter26 = builder24.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter29.new RestHandler();
        java.util.concurrent.Executor executor31 = restAdapter29.httpExecutor;
        java.util.concurrent.Executor executor32 = null;
        restAdapter29.callbackExecutor = executor32;
        retrofit.client.Client.Provider provider34 = null;
        restAdapter29.clientProvider = provider34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel41 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder42 = builder36.setLogLevel(logLevel41);
        retrofit.RestAdapter.Builder builder44 = builder42.setServer("Retrofit-Idle");
        retrofit.Server server45 = builder44.server;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = builder54.server;
        retrofit.RestAdapter.Log log56 = null;
        builder54.log = log56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel59 = builder58.logLevel;
        retrofit.RestAdapter.Builder builder60 = builder54.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder62 = builder60.setServer("Retrofit-Idle");
        retrofit.Server server63 = builder62.server;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = null;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        retrofit.RestAdapter.Builder builder78 = builder72.setLogLevel(logLevel77);
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel77);
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel77);
        restAdapter29.log = log53;
        log53.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder84 = builder27.setLog(log53);
        builder24.log = log53;
        retrofit.ErrorHandler errorHandler86 = builder24.errorHandler;
        retrofit.RestAdapter.Builder builder87 = builder8.setErrorHandler(errorHandler86);
        retrofit.Server server88 = builder8.server;
        retrofit.client.Client client89 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder90 = builder8.setClient(client89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(server63);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(server88);
    }

    @Test
    public void test01221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01221");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter8.new RestHandler();
        java.util.concurrent.Executor executor10 = restAdapter8.httpExecutor;
        java.util.concurrent.Executor executor11 = null;
        restAdapter8.callbackExecutor = executor11;
        retrofit.ErrorHandler errorHandler13 = null;
        restAdapter8.errorHandler = errorHandler13;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter8.logLevel = logLevel15;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter8.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter8.requestInterceptor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.Server server29 = builder28.server;
        retrofit.Profiler profiler30 = null;
        builder28.profiler = profiler30;
        retrofit.Profiler profiler32 = null;
        builder28.profiler = profiler32;
        retrofit.RestAdapter restAdapter34 = builder28.build();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("Retrofit-Idle");
        retrofit.Server server44 = builder43.server;
        java.util.concurrent.Executor executor45 = builder43.httpExecutor;
        java.util.concurrent.Executor executor46 = builder43.callbackExecutor;
        retrofit.ErrorHandler errorHandler47 = null;
        builder43.errorHandler = errorHandler47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        java.util.concurrent.Executor executor56 = builder55.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor57 = builder55.requestInterceptor;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel63 = builder62.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder66 = builder64.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter67 = builder66.build();
        retrofit.Profiler profiler68 = null;
        builder66.profiler = profiler68;
        retrofit.Profiler profiler70 = null;
        builder66.profiler = profiler70;
        retrofit.converter.Converter converter72 = builder66.converter;
        retrofit.RestAdapter.Builder builder73 = builder55.setConverter(converter72);
        retrofit.RestAdapter.Builder builder74 = builder43.setConverter(converter72);
        restAdapter34.converter = converter72;
        restAdapter8.converter = converter72;
        retrofit.RestAdapter.Builder builder77 = builder0.setConverter(converter72);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = builder78.callbackExecutor;
        retrofit.Profiler profiler80 = builder78.profiler;
        retrofit.RestAdapter.Builder builder82 = builder78.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server84 = builder83.server;
        retrofit.RestAdapter.Log log85 = null;
        builder83.log = log85;
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel88 = builder87.logLevel;
        retrofit.RestAdapter.Builder builder89 = builder83.setLogLevel(logLevel88);
        retrofit.RestAdapter.Builder builder91 = builder89.setServer("Retrofit-Idle");
        retrofit.Server server92 = builder91.server;
        retrofit.RestAdapter.Builder builder93 = builder82.setServer(server92);
        retrofit.RestAdapter restAdapter94 = builder93.build();
        retrofit.RestAdapter.Log log95 = builder93.log;
        retrofit.Profiler profiler96 = builder93.profiler;
        retrofit.Server server97 = builder93.server;
        retrofit.client.Client.Provider provider98 = builder93.clientProvider;
        builder77.clientProvider = provider98;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(converter72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(executor79);
        org.junit.Assert.assertNull(profiler80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(server84);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(server92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertNotNull(log95);
        org.junit.Assert.assertNull(profiler96);
        org.junit.Assert.assertNotNull(server97);
        org.junit.Assert.assertNotNull(provider98);
    }

    @Test
    public void test01222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01222");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        restAdapter0.server = server14;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter17.logLevel;
        java.util.concurrent.Executor executor20 = null;
        restAdapter17.httpExecutor = executor20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor23 = null;
        restAdapter22.callbackExecutor = executor23;
        retrofit.converter.Converter converter25 = restAdapter22.converter;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log27 = restAdapter22.log;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = builder61.server;
        retrofit.RestAdapter.Log log63 = null;
        builder61.log = log63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.client.Client.Provider provider72 = builder65.clientProvider;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        builder65.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder61.setLog(log73);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server37, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log73, logLevel76);
        restAdapter22.server = server37;
        restAdapter17.server = server37;
        restAdapter0.server = server37;
        java.util.concurrent.Executor executor81 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(provider72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor81);
    }

    @Test
    public void test01223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01223");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter8 = restAdapter0.converter;
        retrofit.client.Response response10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response12 = restAdapter0.logAndReplaceResponse("", response10, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(converter8);
    }

    @Test
    public void test01224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01224");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.Server server2 = builder1.server;
        retrofit.RestAdapter.Log log3 = null;
        builder1.log = log3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder7 = builder1.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder1.clientProvider;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder1.log = log9;
        retrofit.RestAdapter.Builder builder11 = builder0.setLog(log9);
        retrofit.converter.Converter converter12 = null;
        builder0.converter = converter12;
        retrofit.RestAdapter.Log log14 = builder0.log;
        retrofit.client.Client.Provider provider15 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        java.util.concurrent.Executor executor27 = builder24.httpExecutor;
        retrofit.RestAdapter.Builder builder29 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider38 = builder31.clientProvider;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        builder31.log = log39;
        retrofit.RestAdapter.Builder builder41 = builder30.setLog(log39);
        retrofit.Profiler profiler42 = builder30.profiler;
        java.util.concurrent.Executor executor43 = null;
        builder30.callbackExecutor = executor43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.client.Client.Provider provider52 = builder45.clientProvider;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        builder45.log = log53;
        builder30.log = log53;
        retrofit.RestAdapter.Builder builder56 = builder29.setLog(log53);
        retrofit.RestAdapter.Builder builder57 = builder0.setLog(log53);
        builder0.ensureSaneDefaults();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter59 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test01225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01225");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.client.Request request10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request11 = restAdapter0.logAndReplaceRequest(request10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(requestInterceptor7);
    }

    @Test
    public void test01226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01226");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        java.util.concurrent.Executor executor5 = null;
        restAdapter0.callbackExecutor = executor5;
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.httpExecutor = executor7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel16 = builder15.logLevel;
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel16);
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("Retrofit-Idle");
        retrofit.Server server20 = builder19.server;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.client.Client.Provider provider36 = builder29.clientProvider;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        builder29.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder28.setLog(log37);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log37, logLevel40);
        retrofit.RestAdapter.Builder builder42 = builder9.setServer(server20);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel48 = builder47.logLevel;
        retrofit.RestAdapter.Builder builder49 = builder43.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter52 = builder51.build();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.logLevel;
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter52.requestInterceptor;
        retrofit.RestAdapter.Builder builder55 = builder42.setRequestInterceptor(requestInterceptor54);
        restAdapter0.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler58 = null;
        restAdapter0.profiler = profiler58;
        retrofit.client.Response response61 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response63 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response61, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test01227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01227");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log8 = restAdapter0.log;
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        builder11.logLevel = logLevel13;
        boolean boolean15 = logLevel13.log();
        restAdapter0.logLevel = logLevel13;
        retrofit.Profiler profiler17 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.RestAdapter restAdapter28 = builder26.build();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        java.util.concurrent.Executor executor33 = restAdapter31.httpExecutor;
        java.util.concurrent.Executor executor34 = null;
        restAdapter31.callbackExecutor = executor34;
        retrofit.client.Client.Provider provider36 = null;
        restAdapter31.clientProvider = provider36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder64 = builder62.setServer("Retrofit-Idle");
        retrofit.Server server65 = builder64.server;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = null;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = builder74.server;
        retrofit.RestAdapter.Log log76 = null;
        builder74.log = log76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel79 = builder78.logLevel;
        retrofit.RestAdapter.Builder builder80 = builder74.setLogLevel(logLevel79);
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server65, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel79);
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel79);
        restAdapter31.log = log55;
        log55.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder86 = builder29.setLog(log55);
        builder26.log = log55;
        retrofit.RequestInterceptor requestInterceptor88 = builder26.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.RestHandler restHandler90 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler91 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler92 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler93 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertNull(server75);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(requestInterceptor88);
    }

    @Test
    public void test01228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01228");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.httpExecutor = executor3;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.Server server6 = restAdapter0.server;
        retrofit.client.Response response8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response10 = restAdapter0.logAndReplaceResponse("hi!", response8, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server6);
    }

    @Test
    public void test01229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01229");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel51);
        builder0.log = log27;
        retrofit.client.Client.Provider provider56 = null;
        builder0.clientProvider = provider56;
        retrofit.Profiler profiler58 = null;
        builder0.profiler = profiler58;
        retrofit.converter.Converter converter60 = builder0.converter;
        retrofit.Profiler profiler61 = builder0.profiler;
        retrofit.Profiler profiler62 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder63 = builder0.setProfiler(profiler62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(converter60);
        org.junit.Assert.assertNull(profiler61);
    }

    @Test
    public void test01230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01230");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        builder23.logLevel = logLevel25;
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.client.Client.Provider provider47 = builder40.clientProvider;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        builder40.log = log48;
        retrofit.RestAdapter.Builder builder50 = builder36.setLog(log48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider62 = builder55.clientProvider;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        builder55.log = log63;
        retrofit.RestAdapter.Builder builder65 = builder51.setLog(log63);
        retrofit.RestAdapter.Builder builder66 = builder36.setLog(log63);
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        java.util.concurrent.Executor executor69 = null;
        builder67.httpExecutor = executor69;
        retrofit.Server server71 = builder67.server;
        retrofit.RestAdapter.LogLevel logLevel72 = builder67.logLevel;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server14, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log63, logLevel72);
        restAdapter0.server = server14;
        retrofit.RestAdapter.Log log75 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler77 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor80 = null;
        restAdapter79.callbackExecutor = executor80;
        retrofit.converter.Converter converter82 = restAdapter79.converter;
        java.util.concurrent.Executor executor83 = restAdapter79.httpExecutor;
        retrofit.converter.Converter converter84 = restAdapter79.converter;
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter79.new RestHandler();
        java.lang.reflect.Method method86 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj88 = restHandler78.invoke((java.lang.Object) restHandler85, method86, objArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log75);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNull(converter82);
        org.junit.Assert.assertNull(executor83);
        org.junit.Assert.assertNull(converter84);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
    }

    @Test
    public void test01231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01231");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        java.util.concurrent.Executor executor18 = builder15.httpExecutor;
        retrofit.RestAdapter.Builder builder20 = builder15.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider21 = null;
        builder15.clientProvider = provider21;
        retrofit.ErrorHandler errorHandler23 = null;
        builder15.errorHandler = errorHandler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = builder33.setLog(log34);
        retrofit.Profiler profiler36 = builder35.profiler;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("Retrofit-Idle");
        retrofit.Server server46 = builder45.server;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = null;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel60);
        retrofit.RestAdapter.Builder builder63 = builder35.setServer(server46);
        retrofit.converter.Converter converter64 = null;
        builder35.converter = converter64;
        retrofit.converter.Converter converter66 = null;
        builder35.converter = converter66;
        retrofit.RestAdapter.Log log68 = builder35.log;
        builder15.log = log68;
        restAdapter0.log = log68;
        retrofit.client.Response response72 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response74 = restAdapter0.logAndReplaceResponse("hi!", response72, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log68);
    }

    @Test
    public void test01232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01232");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.Server server11 = builder6.server;
        retrofit.RestAdapter restAdapter12 = builder6.build();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        builder20.logLevel = logLevel22;
        boolean boolean24 = logLevel22.log();
        builder13.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        builder13.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter28.new RestHandler();
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter28.errorHandler = errorHandler30;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter28.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter28.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter28.logLevel;
        retrofit.Profiler profiler36 = restAdapter28.profiler;
        retrofit.Server server37 = restAdapter28.server;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider49 = builder42.clientProvider;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        builder42.log = log50;
        retrofit.RestAdapter.Builder builder52 = builder38.setLog(log50);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.client.Client.Provider provider64 = builder57.clientProvider;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        builder57.log = log65;
        retrofit.RestAdapter.Builder builder67 = builder53.setLog(log65);
        retrofit.RestAdapter.Builder builder68 = builder38.setLog(log65);
        builder68.ensureSaneDefaults();
        java.util.concurrent.Executor executor70 = builder68.callbackExecutor;
        restAdapter28.httpExecutor = executor70;
        builder13.callbackExecutor = executor70;
        restAdapter12.httpExecutor = executor70;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(executor70);
    }

    @Test
    public void test01233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01233");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        retrofit.client.Response response9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response11 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response9, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(log7);
    }

    @Test
    public void test01234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01234");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.Server server11 = builder6.server;
        retrofit.RestAdapter restAdapter12 = builder6.build();
        retrofit.Profiler profiler13 = builder6.profiler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel20);
        retrofit.client.Client.Provider provider22 = builder15.clientProvider;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder15.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder14.setLog(log23);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = builder26.server;
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.RestAdapter restAdapter36 = builder34.build();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter39.new RestHandler();
        java.util.concurrent.Executor executor41 = restAdapter39.httpExecutor;
        java.util.concurrent.Executor executor42 = null;
        restAdapter39.callbackExecutor = executor42;
        retrofit.client.Client.Provider provider44 = null;
        restAdapter39.clientProvider = provider44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("Retrofit-Idle");
        retrofit.Server server55 = builder54.server;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("Retrofit-Idle");
        retrofit.Server server73 = builder72.server;
        retrofit.client.Client.Provider provider74 = null;
        java.util.concurrent.Executor executor75 = null;
        java.util.concurrent.Executor executor76 = null;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        retrofit.converter.Converter converter78 = null;
        retrofit.Profiler profiler79 = null;
        retrofit.ErrorHandler errorHandler80 = null;
        retrofit.RestAdapter.Log log81 = null;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.Server server83 = builder82.server;
        retrofit.RestAdapter.Log log84 = null;
        builder82.log = log84;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel87 = builder86.logLevel;
        retrofit.RestAdapter.Builder builder88 = builder82.setLogLevel(logLevel87);
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server73, provider74, executor75, executor76, requestInterceptor77, converter78, profiler79, errorHandler80, log81, logLevel87);
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel87);
        restAdapter39.log = log63;
        log63.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder94 = builder37.setLog(log63);
        builder34.log = log63;
        retrofit.RequestInterceptor requestInterceptor96 = builder34.requestInterceptor;
        builder14.requestInterceptor = requestInterceptor96;
        builder6.requestInterceptor = requestInterceptor96;
        retrofit.ErrorHandler errorHandler99 = builder6.errorHandler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(provider22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(requestInterceptor96);
        org.junit.Assert.assertNotNull(errorHandler99);
    }

    @Test
    public void test01235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01235");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel51);
        builder0.log = log27;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        java.util.concurrent.Executor executor58 = null;
        builder56.httpExecutor = executor58;
        retrofit.Server server60 = builder56.server;
        retrofit.RestAdapter.LogLevel logLevel61 = builder56.logLevel;
        retrofit.client.Client.Provider provider62 = null;
        builder56.clientProvider = provider62;
        retrofit.Server server64 = builder56.server;
        retrofit.RequestInterceptor requestInterceptor65 = builder56.requestInterceptor;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor67 = null;
        restAdapter66.callbackExecutor = executor67;
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.converter.Converter converter70 = restAdapter66.converter;
        java.util.concurrent.Executor executor71 = null;
        restAdapter66.callbackExecutor = executor71;
        java.util.concurrent.Executor executor73 = null;
        restAdapter66.httpExecutor = executor73;
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter66.new RestHandler();
        retrofit.converter.Converter converter76 = restAdapter66.converter;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server78 = builder77.server;
        retrofit.RestAdapter.Log log79 = null;
        builder77.log = log79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        retrofit.RestAdapter.Builder builder83 = builder77.setLogLevel(logLevel82);
        retrofit.RestAdapter.Builder builder85 = builder83.setServer("Retrofit-Idle");
        retrofit.Server server86 = builder85.server;
        retrofit.Profiler profiler87 = null;
        builder85.profiler = profiler87;
        retrofit.Profiler profiler89 = null;
        builder85.profiler = profiler89;
        retrofit.RestAdapter restAdapter91 = builder85.build();
        retrofit.ErrorHandler errorHandler92 = builder85.errorHandler;
        restAdapter66.errorHandler = errorHandler92;
        builder56.errorHandler = errorHandler92;
        builder0.errorHandler = errorHandler92;
        retrofit.Server server96 = builder0.server;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertNull(requestInterceptor65);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertNull(converter70);
        org.junit.Assert.assertNull(converter76);
        org.junit.Assert.assertNull(server78);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(errorHandler92);
        org.junit.Assert.assertNull(server96);
    }

    @Test
    public void test01236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01236");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.client.Client.Provider provider26 = builder19.clientProvider;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder19.log = log27;
        retrofit.RestAdapter.Builder builder29 = builder15.setLog(log27);
        retrofit.RestAdapter.Builder builder30 = builder0.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor31 = null;
        builder0.requestInterceptor = requestInterceptor31;
        java.util.concurrent.Executor executor33 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = builder34.server;
        retrofit.RestAdapter.Log log36 = null;
        builder34.log = log36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        builder38.logLevel = logLevel40;
        java.util.concurrent.Executor executor42 = null;
        builder38.callbackExecutor = executor42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor45 = null;
        restAdapter44.callbackExecutor = executor45;
        retrofit.converter.Converter converter47 = restAdapter44.converter;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        restAdapter44.log = log48;
        builder38.log = log48;
        builder34.log = log48;
        log48.log("Retrofit-Idle");
        log48.log("");
        builder0.log = log48;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = builder61.server;
        retrofit.RestAdapter.Log log63 = null;
        builder61.log = log63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel66 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder61.setLogLevel(logLevel66);
        retrofit.client.Client.Provider provider68 = builder61.clientProvider;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        builder61.log = log69;
        retrofit.RestAdapter.Builder builder71 = builder57.setLog(log69);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        retrofit.RestAdapter.Log log78 = null;
        builder76.log = log78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel81 = builder80.logLevel;
        retrofit.RestAdapter.Builder builder82 = builder76.setLogLevel(logLevel81);
        retrofit.client.Client.Provider provider83 = builder76.clientProvider;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        builder76.log = log84;
        retrofit.RestAdapter.Builder builder86 = builder72.setLog(log84);
        retrofit.RestAdapter.Builder builder87 = builder57.setLog(log84);
        log84.log("");
        retrofit.RestAdapter.Builder builder90 = builder0.setLog(log84);
        retrofit.client.Client client91 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder92 = builder90.setClient(client91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(provider68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(provider83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test01237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01237");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("Retrofit-Idle");
        retrofit.Server server24 = builder23.server;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("Retrofit-Idle");
        retrofit.Server server42 = builder41.server;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = null;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel56);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel56);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel56);
        builder0.logLevel = logLevel56;
        builder0.ensureSaneDefaults();
        retrofit.Server server62 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder63 = builder0.setServer(server62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test01238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01238");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.Profiler profiler17 = builder15.profiler;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Builder builder30 = builder19.setServer(server29);
        retrofit.RestAdapter.Builder builder31 = builder0.setServer(server29);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Log log33 = builder0.log;
        retrofit.client.Client client34 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder35 = builder0.setClient(client34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log33);
    }

    @Test
    public void test01239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01239");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter6 = null;
        restAdapter0.converter = converter6;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler9 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.Profiler profiler23 = builder22.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel29 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("Retrofit-Idle");
        retrofit.Server server33 = builder32.server;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = null;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder22.setServer(server33);
        retrofit.converter.Converter converter51 = null;
        builder22.converter = converter51;
        retrofit.converter.Converter converter53 = null;
        builder22.converter = converter53;
        retrofit.RestAdapter.Log log55 = builder22.log;
        retrofit.RestAdapter.LogLevel logLevel56 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        java.util.concurrent.Executor executor68 = builder65.httpExecutor;
        java.util.concurrent.Executor executor69 = null;
        builder65.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder79 = builder77.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter80 = builder79.build();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.logLevel;
        builder65.logLevel = logLevel81;
        builder65.ensureSaneDefaults();
        retrofit.client.Client.Provider provider84 = builder65.clientProvider;
        builder22.clientProvider = provider84;
        restAdapter0.clientProvider = provider84;
        retrofit.RestAdapter.Log log87 = restAdapter0.log;
        retrofit.converter.Converter converter88 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler89 = restAdapter0.new RestHandler();
        retrofit.client.Request request90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request91 = restAdapter0.logAndReplaceRequest(request90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider84);
        org.junit.Assert.assertNull(log87);
        org.junit.Assert.assertNull(converter88);
    }

    @Test
    public void test01240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01240");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        java.util.concurrent.Executor executor12 = null;
        builder8.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder20 = builder14.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter23 = builder22.build();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.logLevel;
        builder8.logLevel = logLevel24;
        builder8.ensureSaneDefaults();
        retrofit.client.Client.Provider provider27 = builder8.clientProvider;
        retrofit.RestAdapter restAdapter28 = builder8.build();
        retrofit.client.Client client29 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder30 = builder8.setClient(client29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider27);
        org.junit.Assert.assertNotNull(restAdapter28);
    }

    @Test
    public void test01241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01241");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor4 = null;
        restAdapter0.callbackExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        restAdapter0.profiler = profiler6;
        java.lang.Throwable throwable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable8, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
    }

    @Test
    public void test01242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01242");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        java.util.concurrent.Executor executor8 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        builder16.logLevel = logLevel18;
        boolean boolean20 = logLevel18.log();
        builder9.logLevel = logLevel18;
        retrofit.RestAdapter.LogLevel logLevel22 = builder9.logLevel;
        retrofit.Profiler profiler23 = builder9.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.Profiler profiler26 = builder24.profiler;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Builder builder39 = builder28.setServer(server38);
        retrofit.RestAdapter.Builder builder40 = builder9.setServer(server38);
        retrofit.RestAdapter.Builder builder41 = builder6.setServer(server38);
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider60 = builder53.clientProvider;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        builder53.log = log61;
        retrofit.RestAdapter.Builder builder63 = builder49.setLog(log61);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter73 = builder72.build();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.logLevel;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server38, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log61, logLevel74);
        retrofit.client.Response response77 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response79 = restAdapter75.logAndReplaceResponse("Retrofit-Idle", response77, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01243");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder3.setLog(log12);
        retrofit.converter.Converter converter15 = null;
        builder3.converter = converter15;
        retrofit.RestAdapter.Log log17 = builder3.log;
        restAdapter0.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        builder26.logLevel = logLevel28;
        boolean boolean30 = logLevel28.log();
        builder19.logLevel = logLevel28;
        retrofit.RestAdapter.LogLevel logLevel32 = builder19.logLevel;
        retrofit.Profiler profiler33 = builder19.profiler;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = builder34.server;
        retrofit.RestAdapter.Log log36 = null;
        builder34.log = log36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel39 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("Retrofit-Idle");
        retrofit.Server server43 = builder42.server;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = builder52.server;
        retrofit.RestAdapter.Log log54 = null;
        builder52.log = log54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel57 = builder56.logLevel;
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel57);
        retrofit.RestAdapter.Builder builder60 = builder58.setServer("Retrofit-Idle");
        retrofit.Server server61 = builder60.server;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = null;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = builder70.server;
        retrofit.RestAdapter.Log log72 = null;
        builder70.log = log72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel75 = builder74.logLevel;
        retrofit.RestAdapter.Builder builder76 = builder70.setLogLevel(logLevel75);
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel75);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel75);
        builder19.logLevel = logLevel75;
        restAdapter0.logLevel = logLevel75;
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable82 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable82, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test01244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01244");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.Server server27 = builder26.server;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel41 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder42 = builder36.setLogLevel(logLevel41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel41);
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel41);
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider60 = builder53.clientProvider;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        builder53.log = log61;
        retrofit.RestAdapter.Builder builder63 = builder52.setLog(log61);
        retrofit.converter.Converter converter64 = null;
        builder52.converter = converter64;
        retrofit.RestAdapter.Log log66 = builder52.log;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = builder67.callbackExecutor;
        retrofit.Profiler profiler69 = builder67.profiler;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel72 = builder67.logLevel;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server9, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log66, logLevel72);
        retrofit.converter.Converter converter74 = null;
        restAdapter73.converter = converter74;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(profiler69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01245");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider23 = builder16.clientProvider;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        builder16.log = log24;
        retrofit.RestAdapter.Builder builder26 = builder12.setLog(log24);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider38 = builder31.clientProvider;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        builder31.log = log39;
        retrofit.RestAdapter.Builder builder41 = builder27.setLog(log39);
        retrofit.RestAdapter.Builder builder42 = builder12.setLog(log39);
        log39.log("");
        log39.log("Retrofit-");
        retrofit.RestAdapter.Builder builder47 = builder8.setLog(log39);
        retrofit.RestAdapter restAdapter48 = builder8.build();
        retrofit.client.Client.Provider provider49 = restAdapter48.clientProvider;
        retrofit.client.Client.Provider provider50 = restAdapter48.clientProvider;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(provider49);
        org.junit.Assert.assertNotNull(provider50);
    }

    @Test
    public void test01246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01246");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = builder3.callbackExecutor;
        retrofit.Profiler profiler5 = builder3.profiler;
        builder3.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.converter.Converter converter17 = restAdapter16.converter;
        builder3.converter = converter17;
        restAdapter0.converter = converter17;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter21.logLevel;
        retrofit.ErrorHandler errorHandler24 = restAdapter21.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter21.logLevel;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = builder26.server;
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("Retrofit-Idle");
        retrofit.Server server35 = builder34.server;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("Retrofit-Idle");
        retrofit.Server server53 = builder52.server;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = null;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel67 = builder66.logLevel;
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel67);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel67);
        restAdapter21.server = server35;
        retrofit.client.Client.Provider provider72 = null;
        restAdapter21.clientProvider = provider72;
        retrofit.converter.Converter converter74 = null;
        restAdapter21.converter = converter74;
        java.lang.reflect.Method method76 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj78 = restHandler20.invoke((java.lang.Object) restAdapter21, method76, objArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(server35);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
    }

    @Test
    public void test01247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01247");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter0.clientProvider = provider9;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor12 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter0.httpExecutor;
        retrofit.client.Response response15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response17 = restAdapter0.logAndReplaceResponse("hi!", response15, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test01248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01248");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.httpExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = null;
        restAdapter5.callbackExecutor = executor6;
        retrofit.converter.Converter converter8 = restAdapter5.converter;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter5.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter5.log;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel16 = builder15.logLevel;
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel16);
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("Retrofit-Idle");
        retrofit.Server server20 = builder19.server;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = null;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel34);
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel53);
        retrofit.client.Client.Provider provider55 = builder48.clientProvider;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        builder48.log = log56;
        retrofit.RestAdapter.Builder builder58 = builder44.setLog(log56);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server20, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log56, logLevel59);
        restAdapter5.server = server20;
        restAdapter0.server = server20;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder71 = builder69.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter72 = builder71.build();
        retrofit.Profiler profiler73 = null;
        builder71.profiler = profiler73;
        java.util.concurrent.Executor executor75 = builder71.httpExecutor;
        restAdapter0.httpExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = builder77.callbackExecutor;
        retrofit.Profiler profiler79 = builder77.profiler;
        java.util.concurrent.Executor executor80 = builder77.callbackExecutor;
        java.util.concurrent.Executor executor81 = builder77.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel82 = builder77.logLevel;
        retrofit.RestAdapter.LogLevel logLevel83 = builder77.logLevel;
        restAdapter0.logLevel = logLevel83;
        retrofit.client.Request request85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request86 = restAdapter0.logAndReplaceRequest(request85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(executor75);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNull(profiler79);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01249");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel51);
        builder0.log = log27;
        retrofit.client.Client.Provider provider56 = null;
        builder0.clientProvider = provider56;
        retrofit.Profiler profiler58 = null;
        builder0.profiler = profiler58;
        java.util.concurrent.Executor executor60 = null;
        builder0.httpExecutor = executor60;
        java.util.concurrent.Executor executor62 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel63 = builder0.logLevel;
        retrofit.Profiler profiler64 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder65 = builder0.setProfiler(profiler64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01250");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.client.Client.Provider provider26 = builder19.clientProvider;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder19.log = log27;
        retrofit.RestAdapter.Builder builder29 = builder15.setLog(log27);
        retrofit.RestAdapter.Builder builder30 = builder0.setLog(log27);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter31 = builder30.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test01251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01251");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.client.Client.Provider provider9 = restAdapter0.clientProvider;
        retrofit.client.Request request10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request11 = restAdapter0.logAndReplaceRequest(request10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(provider9);
    }

    @Test
    public void test01252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01252");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RequestInterceptor requestInterceptor16 = builder15.requestInterceptor;
        retrofit.converter.Converter converter17 = null;
        builder15.converter = converter17;
        retrofit.Profiler profiler19 = null;
        builder15.profiler = profiler19;
        retrofit.ErrorHandler errorHandler21 = builder15.errorHandler;
        retrofit.client.Client client22 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder23 = builder15.setClient(client22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler21);
    }

    @Test
    public void test01253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01253");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.httpExecutor = executor3;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.Server server6 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter8.new RestHandler();
        java.util.concurrent.Executor executor10 = restAdapter8.httpExecutor;
        retrofit.Profiler profiler11 = restAdapter8.profiler;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter8.new RestHandler();
        retrofit.converter.Converter converter13 = restAdapter8.converter;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider25 = builder18.clientProvider;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        builder18.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder14.setLog(log26);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.client.Client.Provider provider40 = builder33.clientProvider;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        builder33.log = log41;
        retrofit.RestAdapter.Builder builder43 = builder29.setLog(log41);
        retrofit.RestAdapter.Builder builder44 = builder14.setLog(log41);
        builder44.ensureSaneDefaults();
        retrofit.client.Client.Provider provider46 = null;
        builder44.clientProvider = provider46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        retrofit.client.Client.Provider provider56 = builder49.clientProvider;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        builder49.log = log57;
        retrofit.RestAdapter.Builder builder59 = builder48.setLog(log57);
        retrofit.Profiler profiler60 = builder48.profiler;
        java.util.concurrent.Executor executor61 = null;
        builder48.callbackExecutor = executor61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel68);
        retrofit.client.Client.Provider provider70 = builder63.clientProvider;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        builder63.log = log71;
        builder48.log = log71;
        builder44.log = log71;
        retrofit.RestAdapter.Builder builder76 = builder44.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor77 = builder76.requestInterceptor;
        restAdapter8.requestInterceptor = requestInterceptor77;
        restAdapter0.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(requestInterceptor77);
    }

    @Test
    public void test01254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01254");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor15 = builder13.requestInterceptor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter25 = builder24.build();
        retrofit.Profiler profiler26 = null;
        builder24.profiler = profiler26;
        retrofit.Profiler profiler28 = null;
        builder24.profiler = profiler28;
        retrofit.converter.Converter converter30 = builder24.converter;
        retrofit.RestAdapter.Builder builder31 = builder13.setConverter(converter30);
        restAdapter0.converter = converter30;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = null;
        restAdapter33.callbackExecutor = executor34;
        retrofit.converter.Converter converter36 = restAdapter33.converter;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter33.log = log37;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter33.logLevel = logLevel39;
        boolean boolean41 = logLevel39.log();
        restAdapter0.logLevel = logLevel39;
        retrofit.client.Response response44 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response46 = restAdapter0.logAndReplaceResponse("Retrofit-", response44, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(converter30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test01255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01255");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.httpExecutor = executor3;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.Server server6 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.logLevel;
        retrofit.Profiler profiler9 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable11, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(profiler9);
    }

    @Test
    public void test01256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01256");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel51);
        builder0.log = log27;
        java.util.concurrent.Executor executor56 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("Retrofit-Idle");
        retrofit.Server server66 = builder65.server;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.Server server76 = builder75.server;
        retrofit.RestAdapter.Log log77 = null;
        builder75.log = log77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel80 = builder79.logLevel;
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel80);
        retrofit.client.Client.Provider provider82 = builder75.clientProvider;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        builder75.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder74.setLog(log83);
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log83, logLevel86);
        retrofit.RestAdapter.Builder builder88 = builder0.setServer(server66);
        retrofit.RestAdapter.LogLevel logLevel89 = builder88.logLevel;
        retrofit.converter.Converter converter90 = null;
        builder88.converter = converter90;
        retrofit.Server server92 = builder88.server;
        retrofit.client.Client client93 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder94 = builder88.setClient(client93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(provider82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server92);
    }

    @Test
    public void test01257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01257");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder0.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.Log log9 = builder0.log;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        builder17.logLevel = logLevel19;
        boolean boolean21 = logLevel19.log();
        builder10.logLevel = logLevel19;
        retrofit.RestAdapter.Builder builder23 = builder0.setLogLevel(logLevel19);
        retrofit.Profiler profiler24 = builder23.profiler;
        retrofit.client.Client.Provider provider25 = builder23.clientProvider;
        java.util.concurrent.Executor executor26 = builder23.httpExecutor;
        retrofit.Profiler profiler27 = builder23.profiler;
        java.util.concurrent.Executor executor28 = null;
        builder23.callbackExecutor = executor28;
        retrofit.Profiler profiler30 = builder23.profiler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNull(profiler30);
    }

    @Test
    public void test01258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01258");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder0.requestInterceptor = requestInterceptor13;
        java.util.concurrent.Executor executor15 = null;
        builder0.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.client.Client.Provider provider24 = builder17.clientProvider;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log25;
        builder0.log = log25;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        builder35.logLevel = logLevel37;
        boolean boolean39 = logLevel37.log();
        builder28.logLevel = logLevel37;
        retrofit.RestAdapter.LogLevel logLevel41 = builder28.logLevel;
        retrofit.Profiler profiler42 = builder28.profiler;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = builder43.callbackExecutor;
        retrofit.Profiler profiler45 = builder43.profiler;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("Retrofit-Idle");
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Builder builder58 = builder47.setServer(server57);
        retrofit.RestAdapter.Builder builder59 = builder28.setServer(server57);
        retrofit.RestAdapter.Builder builder60 = builder0.setServer(server57);
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel68);
        retrofit.client.Client.Provider provider70 = builder63.clientProvider;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        builder63.log = log71;
        retrofit.RestAdapter.Builder builder73 = builder62.setLog(log71);
        retrofit.converter.Converter converter74 = null;
        builder62.converter = converter74;
        retrofit.RestAdapter.Log log76 = builder62.log;
        builder60.log = log76;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log76);
    }

    @Test
    public void test01259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01259");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        java.util.concurrent.Executor executor13 = null;
        builder0.httpExecutor = executor13;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = null;
        restAdapter15.callbackExecutor = executor16;
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.converter.Converter converter19 = restAdapter15.converter;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        restAdapter15.logLevel = logLevel22;
        builder0.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter25.logLevel;
        retrofit.ErrorHandler errorHandler28 = null;
        restAdapter25.errorHandler = errorHandler28;
        java.util.concurrent.Executor executor30 = restAdapter25.httpExecutor;
        java.util.concurrent.Executor executor31 = null;
        restAdapter25.httpExecutor = executor31;
        retrofit.ErrorHandler errorHandler33 = restAdapter25.errorHandler;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter34.requestInterceptor = requestInterceptor35;
        retrofit.Profiler profiler37 = null;
        restAdapter34.profiler = profiler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        retrofit.Profiler profiler41 = builder39.profiler;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("Retrofit-Idle");
        retrofit.Server server53 = builder52.server;
        retrofit.RestAdapter.Builder builder54 = builder43.setServer(server53);
        retrofit.RestAdapter restAdapter55 = builder54.build();
        java.util.concurrent.Executor executor56 = restAdapter55.callbackExecutor;
        restAdapter34.callbackExecutor = executor56;
        restAdapter25.httpExecutor = executor56;
        builder0.httpExecutor = executor56;
        retrofit.RequestInterceptor requestInterceptor60 = builder0.requestInterceptor;
        retrofit.client.Client.Provider provider61 = builder0.clientProvider;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter62 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(provider61);
    }

    @Test
    public void test01260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01260");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.LogLevel logLevel7 = builder6.logLevel;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter8.new RestHandler();
        java.util.concurrent.Executor executor10 = restAdapter8.httpExecutor;
        java.util.concurrent.Executor executor11 = null;
        restAdapter8.callbackExecutor = executor11;
        retrofit.client.Client.Provider provider13 = null;
        restAdapter8.clientProvider = provider13;
        java.util.concurrent.Executor executor15 = null;
        restAdapter8.callbackExecutor = executor15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter26 = builder25.build();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.logLevel;
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter26.requestInterceptor;
        restAdapter8.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter.Builder builder30 = builder6.setRequestInterceptor(requestInterceptor28);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = builder31.callbackExecutor;
        retrofit.Profiler profiler33 = builder31.profiler;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel41 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder42 = builder36.setLogLevel(logLevel41);
        retrofit.RestAdapter.Builder builder44 = builder42.setServer("Retrofit-Idle");
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Builder builder46 = builder35.setServer(server45);
        retrofit.RestAdapter restAdapter47 = builder46.build();
        retrofit.client.Client.Provider provider48 = null;
        restAdapter47.clientProvider = provider48;
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.client.Client.Provider provider51 = null;
        restAdapter47.clientProvider = provider51;
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter47.new RestHandler();
        java.util.concurrent.Executor executor55 = restAdapter47.httpExecutor;
        builder30.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter66 = builder65.build();
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.NONE;
        builder65.logLevel = logLevel67;
        retrofit.RestAdapter.Log log69 = builder65.log;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter70.logLevel;
        retrofit.ErrorHandler errorHandler73 = restAdapter70.errorHandler;
        retrofit.converter.Converter converter74 = null;
        restAdapter70.converter = converter74;
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter70.logLevel;
        java.util.concurrent.Executor executor77 = restAdapter70.httpExecutor;
        retrofit.RestAdapter.Log log78 = restAdapter70.log;
        retrofit.Profiler profiler79 = null;
        restAdapter70.profiler = profiler79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        builder81.logLevel = logLevel83;
        boolean boolean85 = logLevel83.log();
        restAdapter70.logLevel = logLevel83;
        retrofit.RestAdapter.LogLevel logLevel87 = restAdapter70.logLevel;
        retrofit.ErrorHandler errorHandler88 = null;
        restAdapter70.errorHandler = errorHandler88;
        retrofit.RestAdapter.Builder builder90 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder91 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel92 = builder91.logLevel;
        builder90.logLevel = logLevel92;
        boolean boolean94 = logLevel92.log();
        restAdapter70.setLogLevel(logLevel92);
        builder65.logLevel = logLevel92;
        builder30.logLevel = logLevel92;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter98 = builder30.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test01261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01261");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        java.util.concurrent.Executor executor12 = null;
        builder8.httpExecutor = executor12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder20 = builder14.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter23 = builder22.build();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.logLevel;
        builder8.logLevel = logLevel24;
        builder8.ensureSaneDefaults();
        retrofit.client.Client.Provider provider27 = builder8.clientProvider;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder36.setLog(log37);
        java.util.concurrent.Executor executor39 = builder36.httpExecutor;
        retrofit.RestAdapter.Builder builder41 = builder36.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel42 = builder36.logLevel;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        builder36.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        java.util.concurrent.Executor executor47 = null;
        builder45.httpExecutor = executor47;
        retrofit.Server server49 = builder45.server;
        retrofit.RestAdapter.LogLevel logLevel50 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel56);
        java.util.concurrent.Executor executor58 = builder57.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor59 = builder57.requestInterceptor;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = builder60.server;
        retrofit.RestAdapter.Log log62 = null;
        builder60.log = log62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel65 = builder64.logLevel;
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder68 = builder66.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter69 = builder68.build();
        retrofit.Profiler profiler70 = null;
        builder68.profiler = profiler70;
        retrofit.Profiler profiler72 = null;
        builder68.profiler = profiler72;
        retrofit.converter.Converter converter74 = builder68.converter;
        retrofit.RestAdapter.Builder builder75 = builder57.setConverter(converter74);
        builder45.converter = converter74;
        retrofit.RestAdapter.Builder builder77 = builder36.setConverter(converter74);
        retrofit.RestAdapter.Builder builder78 = builder8.setConverter(converter74);
        retrofit.Profiler profiler79 = null;
        builder8.profiler = profiler79;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(converter74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test01262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01262");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.client.Client.Provider provider44 = builder37.clientProvider;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        builder37.log = log45;
        retrofit.RestAdapter.Builder builder47 = builder33.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server9, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log45, logLevel48);
        retrofit.converter.Converter converter50 = null;
        restAdapter49.converter = converter50;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter49.new RestHandler();
        retrofit.Profiler profiler53 = null;
        restAdapter49.profiler = profiler53;
        retrofit.Profiler profiler55 = null;
        restAdapter49.profiler = profiler55;
        retrofit.ErrorHandler errorHandler57 = restAdapter49.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = builder59.server;
        retrofit.RestAdapter.Log log61 = null;
        builder59.log = log61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        retrofit.RestAdapter.Builder builder65 = builder59.setLogLevel(logLevel64);
        java.util.concurrent.Executor executor66 = builder65.callbackExecutor;
        java.util.concurrent.Executor executor67 = builder65.callbackExecutor;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = builder68.server;
        retrofit.RestAdapter.Log log70 = null;
        builder68.log = log70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel73 = builder72.logLevel;
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder76 = builder74.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder78 = builder76.setLog(log77);
        java.util.concurrent.Executor executor79 = builder76.httpExecutor;
        retrofit.RestAdapter restAdapter80 = builder76.build();
        java.util.concurrent.Executor executor81 = restAdapter80.httpExecutor;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.Server server83 = builder82.server;
        retrofit.RestAdapter.Log log84 = null;
        builder82.log = log84;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel87 = builder86.logLevel;
        retrofit.RestAdapter.Builder builder88 = builder82.setLogLevel(logLevel87);
        retrofit.RestAdapter.Builder builder90 = builder88.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder92 = builder90.setLog(log91);
        java.util.concurrent.Executor executor93 = builder90.httpExecutor;
        retrofit.RestAdapter restAdapter94 = builder90.build();
        java.util.concurrent.Executor executor95 = restAdapter94.httpExecutor;
        retrofit.RestAdapter.Builder builder96 = builder65.setExecutors(executor81, executor95);
        restAdapter49.httpExecutor = executor95;
        retrofit.Profiler profiler98 = restAdapter49.profiler;
        retrofit.Profiler profiler99 = restAdapter49.profiler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(executor79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(log91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(executor93);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertNotNull(executor95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNull(profiler98);
        org.junit.Assert.assertNull(profiler99);
    }

    @Test
    public void test01263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01263");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = null;
        restAdapter7.callbackExecutor = executor8;
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        retrofit.converter.Converter converter11 = restAdapter7.converter;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        java.util.concurrent.Executor executor19 = builder18.callbackExecutor;
        java.util.concurrent.Executor executor20 = builder18.callbackExecutor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = builder21.server;
        retrofit.RestAdapter.Log log23 = null;
        builder21.log = log23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        retrofit.RestAdapter.Builder builder27 = builder21.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder29.setLog(log30);
        java.util.concurrent.Executor executor32 = builder29.httpExecutor;
        retrofit.RestAdapter restAdapter33 = builder29.build();
        java.util.concurrent.Executor executor34 = restAdapter33.httpExecutor;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder43.setLog(log44);
        java.util.concurrent.Executor executor46 = builder43.httpExecutor;
        retrofit.RestAdapter restAdapter47 = builder43.build();
        java.util.concurrent.Executor executor48 = restAdapter47.httpExecutor;
        retrofit.RestAdapter.Builder builder49 = builder18.setExecutors(executor34, executor48);
        restAdapter7.callbackExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = builder51.callbackExecutor;
        retrofit.Profiler profiler53 = builder51.profiler;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder64 = builder62.setServer("Retrofit-Idle");
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Builder builder66 = builder55.setServer(server65);
        retrofit.RestAdapter restAdapter67 = builder66.build();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = builder68.server;
        retrofit.RestAdapter.Log log70 = null;
        builder68.log = log70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel73 = builder72.logLevel;
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        builder75.logLevel = logLevel77;
        boolean boolean79 = logLevel77.log();
        builder68.logLevel = logLevel77;
        retrofit.RestAdapter.LogLevel logLevel81 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder82 = builder66.setLogLevel(logLevel81);
        retrofit.ErrorHandler errorHandler83 = null;
        builder82.errorHandler = errorHandler83;
        retrofit.RestAdapter.Builder builder86 = builder82.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor87 = builder86.httpExecutor;
        java.util.concurrent.Executor executor88 = builder86.callbackExecutor;
        retrofit.RestAdapter.Builder builder89 = builder0.setExecutors(executor48, executor88);
        retrofit.client.Client client90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder91 = builder0.setClient(client90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNotNull(executor48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test01264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01264");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        builder24.logLevel = logLevel26;
        boolean boolean28 = logLevel26.log();
        builder17.logLevel = logLevel26;
        retrofit.RestAdapter.LogLevel logLevel30 = builder17.logLevel;
        retrofit.Profiler profiler31 = builder17.profiler;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor33 = null;
        restAdapter32.callbackExecutor = executor33;
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.converter.Converter converter36 = restAdapter32.converter;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.Profiler profiler39 = builder37.profiler;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("Retrofit-Idle");
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Builder builder52 = builder41.setServer(server51);
        restAdapter32.server = server51;
        retrofit.RestAdapter.Builder builder54 = builder17.setServer(server51);
        retrofit.RestAdapter.LogLevel logLevel55 = null;
        builder17.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        java.util.concurrent.Executor executor59 = null;
        builder57.httpExecutor = executor59;
        retrofit.Server server61 = builder57.server;
        retrofit.RestAdapter.LogLevel logLevel62 = builder57.logLevel;
        retrofit.client.Client.Provider provider63 = null;
        builder57.clientProvider = provider63;
        retrofit.Server server65 = builder57.server;
        retrofit.RequestInterceptor requestInterceptor66 = builder57.requestInterceptor;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor68 = null;
        restAdapter67.callbackExecutor = executor68;
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.converter.Converter converter71 = restAdapter67.converter;
        java.util.concurrent.Executor executor72 = null;
        restAdapter67.callbackExecutor = executor72;
        java.util.concurrent.Executor executor74 = null;
        restAdapter67.httpExecutor = executor74;
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter67.new RestHandler();
        retrofit.converter.Converter converter77 = restAdapter67.converter;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.Server server79 = builder78.server;
        retrofit.RestAdapter.Log log80 = null;
        builder78.log = log80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        retrofit.RestAdapter.Builder builder84 = builder78.setLogLevel(logLevel83);
        retrofit.RestAdapter.Builder builder86 = builder84.setServer("Retrofit-Idle");
        retrofit.Server server87 = builder86.server;
        retrofit.Profiler profiler88 = null;
        builder86.profiler = profiler88;
        retrofit.Profiler profiler90 = null;
        builder86.profiler = profiler90;
        retrofit.RestAdapter restAdapter92 = builder86.build();
        retrofit.ErrorHandler errorHandler93 = builder86.errorHandler;
        restAdapter67.errorHandler = errorHandler93;
        builder57.errorHandler = errorHandler93;
        retrofit.RestAdapter.Builder builder96 = builder17.setErrorHandler(errorHandler93);
        retrofit.RestAdapter.Builder builder97 = builder15.setErrorHandler(errorHandler93);
        retrofit.RestAdapter.Log log98 = builder97.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertNull(converter71);
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNull(server79);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertNotNull(errorHandler93);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(log98);
    }

    @Test
    public void test01265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01265");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.RestAdapter.Log log8 = builder0.log;
        java.util.concurrent.Executor executor9 = null;
        builder0.callbackExecutor = executor9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        retrofit.Server server15 = builder11.server;
        retrofit.RestAdapter.LogLevel logLevel16 = builder11.logLevel;
        retrofit.ErrorHandler errorHandler17 = builder11.errorHandler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.Server server27 = builder26.server;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel41 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder42 = builder36.setLogLevel(logLevel41);
        retrofit.client.Client.Provider provider43 = builder36.clientProvider;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder36.log = log44;
        retrofit.RestAdapter.Builder builder46 = builder35.setLog(log44);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log44, logLevel47);
        retrofit.RestAdapter.Builder builder49 = builder11.setLog(log44);
        retrofit.RestAdapter.Builder builder50 = builder0.setLog(log44);
        retrofit.converter.Converter converter51 = builder0.converter;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = builder52.callbackExecutor;
        retrofit.Profiler profiler54 = builder52.profiler;
        retrofit.RestAdapter.Builder builder56 = builder52.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("Retrofit-Idle");
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Builder builder67 = builder56.setServer(server66);
        retrofit.RestAdapter restAdapter68 = builder67.build();
        retrofit.client.Client.Provider provider69 = null;
        restAdapter68.clientProvider = provider69;
        retrofit.RestAdapter.Log log71 = restAdapter68.log;
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter68.getLogLevel();
        retrofit.Profiler profiler73 = restAdapter68.profiler;
        retrofit.Server server74 = restAdapter68.server;
        retrofit.RestAdapter.Builder builder75 = builder0.setServer(server74);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test01266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01266");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        java.util.concurrent.Executor executor12 = builder8.callbackExecutor;
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder20 = builder14.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        java.util.concurrent.Executor executor25 = builder22.httpExecutor;
        retrofit.RestAdapter.Builder builder27 = builder22.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel28 = builder22.logLevel;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = null;
        restAdapter29.callbackExecutor = executor30;
        retrofit.converter.Converter converter32 = restAdapter29.converter;
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("Retrofit-Idle");
        retrofit.Server server44 = builder43.server;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = null;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel58);
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = builder68.server;
        retrofit.RestAdapter.Log log70 = null;
        builder68.log = log70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        retrofit.RestAdapter.Builder builder78 = builder72.setLogLevel(logLevel77);
        retrofit.client.Client.Provider provider79 = builder72.clientProvider;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        builder72.log = log80;
        retrofit.RestAdapter.Builder builder82 = builder68.setLog(log80);
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server44, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log80, logLevel83);
        restAdapter29.server = server44;
        retrofit.RestAdapter.Builder builder86 = builder22.setServer(server44);
        retrofit.RestAdapter.Log log87 = null;
        builder86.log = log87;
        retrofit.Server server89 = builder86.server;
        builder8.server = server89;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(provider79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server89);
    }

    @Test
    public void test01267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01267");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter6 = null;
        restAdapter0.converter = converter6;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test01268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01268");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel51);
        builder0.log = log27;
        retrofit.RestAdapter.Log log56 = builder0.log;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter57.new RestHandler();
        retrofit.ErrorHandler errorHandler59 = null;
        restAdapter57.errorHandler = errorHandler59;
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter57.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor63 = restAdapter57.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter57.logLevel;
        retrofit.Profiler profiler65 = restAdapter57.profiler;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = builder66.callbackExecutor;
        retrofit.Profiler profiler68 = builder66.profiler;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder79 = builder77.setServer("Retrofit-Idle");
        retrofit.Server server80 = builder79.server;
        retrofit.RestAdapter.Builder builder81 = builder70.setServer(server80);
        retrofit.RestAdapter restAdapter82 = builder81.build();
        java.util.concurrent.Executor executor83 = restAdapter82.callbackExecutor;
        restAdapter57.callbackExecutor = executor83;
        builder0.callbackExecutor = executor83;
        retrofit.Profiler profiler86 = null;
        builder0.profiler = profiler86;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertNull(profiler65);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(profiler68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(server80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(executor83);
    }

    @Test
    public void test01269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01269");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.Profiler profiler12 = null;
        builder8.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = builder8.build();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = null;
        restAdapter15.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = null;
        restAdapter15.converter = converter18;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter15.new RestHandler();
        java.util.concurrent.Executor executor21 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        builder29.logLevel = logLevel31;
        boolean boolean33 = logLevel31.log();
        builder22.logLevel = logLevel31;
        retrofit.RestAdapter.LogLevel logLevel35 = builder22.logLevel;
        retrofit.Profiler profiler36 = builder22.profiler;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.Profiler profiler39 = builder37.profiler;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("Retrofit-Idle");
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Builder builder52 = builder41.setServer(server51);
        retrofit.RestAdapter.Builder builder53 = builder22.setServer(server51);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = builder54.server;
        retrofit.RestAdapter.Log log56 = null;
        builder54.log = log56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel59 = builder58.logLevel;
        retrofit.RestAdapter.Builder builder60 = builder54.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder62 = builder60.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder62.setLog(log63);
        java.util.concurrent.Executor executor65 = builder62.httpExecutor;
        retrofit.RestAdapter.Builder builder67 = builder62.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter68 = null;
        builder67.converter = converter68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = builder70.server;
        retrofit.RestAdapter.Log log72 = null;
        builder70.log = log72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel75 = builder74.logLevel;
        retrofit.RestAdapter.Builder builder76 = builder70.setLogLevel(logLevel75);
        retrofit.RestAdapter.Builder builder78 = builder76.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder78.setLog(log79);
        java.util.concurrent.Executor executor81 = builder78.httpExecutor;
        retrofit.RestAdapter restAdapter82 = builder78.build();
        java.util.concurrent.Executor executor83 = restAdapter82.httpExecutor;
        builder67.callbackExecutor = executor83;
        builder22.callbackExecutor = executor83;
        restAdapter15.httpExecutor = executor83;
        restAdapter14.callbackExecutor = executor83;
        java.util.concurrent.Executor executor88 = restAdapter14.callbackExecutor;
        retrofit.client.Request request89 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request90 = restAdapter14.logAndReplaceRequest(request89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(executor83);
        org.junit.Assert.assertNotNull(executor88);
    }

    @Test
    public void test01270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01270");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        builder18.logLevel = logLevel20;
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel20);
        retrofit.Profiler profiler24 = null;
        restAdapter23.profiler = profiler24;
        retrofit.Server server26 = restAdapter23.server;
        java.lang.Throwable throwable27 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter23.logException(throwable27, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(server26);
    }

    @Test
    public void test01271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01271");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        retrofit.client.Client.Provider provider15 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("Retrofit-Idle");
        retrofit.Server server25 = builder24.server;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        builder34.logLevel = logLevel36;
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        retrofit.Profiler profiler40 = null;
        restAdapter39.profiler = profiler40;
        retrofit.Server server42 = restAdapter39.server;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = builder43.callbackExecutor;
        retrofit.Profiler profiler45 = builder43.profiler;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("Retrofit-Idle");
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Builder builder58 = builder47.setServer(server57);
        retrofit.RequestInterceptor requestInterceptor59 = builder58.requestInterceptor;
        retrofit.converter.Converter converter60 = null;
        builder58.converter = converter60;
        java.util.concurrent.Executor executor62 = builder58.callbackExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter63.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter63.logLevel;
        retrofit.ErrorHandler errorHandler66 = restAdapter63.errorHandler;
        retrofit.converter.Converter converter67 = null;
        restAdapter63.converter = converter67;
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter63.logLevel;
        java.util.concurrent.Executor executor70 = restAdapter63.httpExecutor;
        retrofit.RestAdapter.Log log71 = restAdapter63.log;
        retrofit.Profiler profiler72 = null;
        restAdapter63.profiler = profiler72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        builder74.logLevel = logLevel76;
        boolean boolean78 = logLevel76.log();
        restAdapter63.logLevel = logLevel76;
        builder58.logLevel = logLevel76;
        restAdapter39.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder82 = builder0.setLogLevel(logLevel76);
        java.util.concurrent.Executor executor83 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel84 = builder0.logLevel;
        boolean boolean85 = logLevel84.log();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(executor83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test01272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01272");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        retrofit.Profiler profiler11 = builder10.profiler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.Server server21 = builder20.server;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder10.setServer(server21);
        retrofit.converter.Converter converter39 = null;
        builder10.converter = converter39;
        retrofit.converter.Converter converter41 = null;
        builder10.converter = converter41;
        retrofit.RestAdapter.Log log43 = builder10.log;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("Retrofit-Idle");
        retrofit.Server server55 = builder54.server;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.client.Client.Provider provider71 = builder64.clientProvider;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        builder64.log = log72;
        retrofit.RestAdapter.Builder builder74 = builder63.setLog(log72);
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log72, logLevel75);
        retrofit.RestAdapter.Builder builder77 = builder44.setServer(server55);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.Server server79 = builder78.server;
        retrofit.RestAdapter.Log log80 = null;
        builder78.log = log80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        retrofit.RestAdapter.Builder builder84 = builder78.setLogLevel(logLevel83);
        retrofit.RestAdapter.Builder builder86 = builder84.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter87 = builder86.build();
        retrofit.RestAdapter.LogLevel logLevel88 = restAdapter87.logLevel;
        retrofit.RequestInterceptor requestInterceptor89 = restAdapter87.requestInterceptor;
        retrofit.RestAdapter.Builder builder90 = builder77.setRequestInterceptor(requestInterceptor89);
        retrofit.RestAdapter.Builder builder91 = builder10.setRequestInterceptor(requestInterceptor89);
        retrofit.RestAdapter restAdapter92 = builder91.build();
        retrofit.ErrorHandler errorHandler93 = restAdapter92.errorHandler;
        retrofit.client.Request request94 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request95 = restAdapter92.logAndReplaceRequest(request94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(server79);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertNotNull(errorHandler93);
    }

    @Test
    public void test01273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01273");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        java.util.concurrent.Executor executor12 = null;
        builder8.httpExecutor = executor12;
        java.util.concurrent.Executor executor14 = builder8.callbackExecutor;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder23.setLog(log24);
        java.util.concurrent.Executor executor26 = builder23.httpExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider38 = builder31.clientProvider;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        builder31.log = log39;
        retrofit.RestAdapter.Builder builder41 = builder27.setLog(log39);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.client.Client.Provider provider53 = builder46.clientProvider;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        builder46.log = log54;
        retrofit.RestAdapter.Builder builder56 = builder42.setLog(log54);
        retrofit.RestAdapter.Builder builder57 = builder27.setLog(log54);
        log54.log("");
        log54.log("Retrofit-");
        retrofit.RestAdapter.Builder builder62 = builder23.setLog(log54);
        builder8.log = log54;
        retrofit.client.Client.Provider provider64 = builder8.clientProvider;
        retrofit.client.Client.Provider provider65 = builder8.clientProvider;
        retrofit.client.Client.Provider provider66 = builder8.clientProvider;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertNull(provider65);
        org.junit.Assert.assertNull(provider66);
    }

    @Test
    public void test01274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01274");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.Server server4 = builder3.server;
        retrofit.RestAdapter.Log log5 = null;
        builder3.log = log5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel8 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.RestAdapter restAdapter13 = builder11.build();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        java.util.concurrent.Executor executor18 = restAdapter16.httpExecutor;
        java.util.concurrent.Executor executor19 = null;
        restAdapter16.callbackExecutor = executor19;
        retrofit.client.Client.Provider provider21 = null;
        restAdapter16.clientProvider = provider21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.Server server32 = builder31.server;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("Retrofit-Idle");
        retrofit.Server server50 = builder49.server;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = null;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = builder59.server;
        retrofit.RestAdapter.Log log61 = null;
        builder59.log = log61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        retrofit.RestAdapter.Builder builder65 = builder59.setLogLevel(logLevel64);
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel64);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel64);
        restAdapter16.log = log40;
        log40.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder71 = builder14.setLog(log40);
        builder11.log = log40;
        retrofit.RestAdapter.Log log73 = builder11.log;
        retrofit.client.Client.Provider provider74 = builder11.clientProvider;
        builder0.clientProvider = provider74;
        retrofit.RequestInterceptor requestInterceptor76 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel77 = builder0.logLevel;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(provider74);
        org.junit.Assert.assertNull(requestInterceptor76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01275");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        java.util.concurrent.Executor executor16 = null;
        builder0.callbackExecutor = executor16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        builder25.logLevel = logLevel27;
        boolean boolean29 = logLevel27.log();
        builder18.logLevel = logLevel27;
        retrofit.RestAdapter.LogLevel logLevel31 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder0.setLogLevel(logLevel31);
        retrofit.client.Client client33 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder34 = builder32.setClient(client33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test01276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01276");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor5 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor10 = restAdapter0.callbackExecutor;
        retrofit.client.Request request11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request12 = restAdapter0.logAndReplaceRequest(request11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor10);
    }

    @Test
    public void test01277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01277");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        java.util.concurrent.Executor executor8 = null;
        restAdapter0.callbackExecutor = executor8;
        java.util.concurrent.Executor executor10 = null;
        restAdapter0.callbackExecutor = executor10;
        retrofit.ErrorHandler errorHandler12 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(errorHandler12);
    }

    @Test
    public void test01278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01278");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor3 = builder2.callbackExecutor;
        retrofit.Profiler profiler4 = builder2.profiler;
        retrofit.RestAdapter.Builder builder6 = builder2.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Builder builder17 = builder6.setServer(server16);
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider32 = builder25.clientProvider;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        builder25.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("Retrofit-Idle");
        retrofit.Server server44 = builder43.server;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("Retrofit-Idle");
        retrofit.Server server62 = builder61.server;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = null;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel76);
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel76);
        builder25.log = log52;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel85 = builder84.logLevel;
        builder83.logLevel = logLevel85;
        builder81.logLevel = logLevel85;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server16, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log52, logLevel85);
        builder0.server = server16;
        retrofit.Profiler profiler90 = builder0.profiler;
        java.util.concurrent.Executor executor91 = null;
        builder0.callbackExecutor = executor91;
        retrofit.ErrorHandler errorHandler93 = null;
        builder0.errorHandler = errorHandler93;
        retrofit.RestAdapter.LogLevel logLevel95 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler96 = builder0.errorHandler;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Log log98 = null;
        builder0.log = log98;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler96);
    }

    @Test
    public void test01279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01279");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel2 = builder1.logLevel;
        builder0.logLevel = logLevel2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("Retrofit-Idle");
        retrofit.Server server13 = builder12.server;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.client.Client.Provider provider29 = builder22.clientProvider;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        builder22.log = log30;
        retrofit.RestAdapter.Builder builder32 = builder21.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log30, logLevel33);
        builder0.logLevel = logLevel33;
        retrofit.RestAdapter.LogLevel logLevel36 = builder0.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder38 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01280");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.RestAdapter.Log log6 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setLogLevel(logLevel7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log6);
    }

    @Test
    public void test01281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01281");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter10 = restAdapter0.converter;
        retrofit.client.Response response12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response14 = restAdapter0.logAndReplaceResponse("", response12, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(converter10);
    }

    @Test
    public void test01282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01282");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = null;
        restAdapter0.requestInterceptor = requestInterceptor1;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        java.lang.Throwable throwable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable5, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01283");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.Server server5 = restAdapter0.server;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(requestInterceptor7);
    }

    @Test
    public void test01284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01284");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler3 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log6 = null;
        restAdapter0.log = log6;
        retrofit.client.Request request8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request9 = restAdapter0.logAndReplaceRequest(request8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(executor5);
    }

    @Test
    public void test01285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01285");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log8 = restAdapter0.log;
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        builder11.logLevel = logLevel13;
        boolean boolean15 = logLevel13.log();
        restAdapter0.logLevel = logLevel13;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter0.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.Server server29 = builder28.server;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = null;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel43);
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.client.Client.Provider provider64 = builder57.clientProvider;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        builder57.log = log65;
        retrofit.RestAdapter.Builder builder67 = builder53.setLog(log65);
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server29, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log65, logLevel68);
        retrofit.converter.Converter converter70 = null;
        restAdapter69.converter = converter70;
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter69.new RestHandler();
        retrofit.Server server73 = restAdapter69.server;
        restAdapter0.server = server73;
        java.util.concurrent.Executor executor75 = restAdapter0.httpExecutor;
        retrofit.client.Response response77 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response79 = restAdapter0.logAndReplaceResponse("", response77, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertNull(executor75);
    }

    @Test
    public void test01286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01286");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.client.Response response6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response8 = restAdapter0.logAndReplaceResponse("", response6, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(profiler4);
    }

    @Test
    public void test01287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01287");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter0.requestInterceptor;
        retrofit.client.Request request11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request12 = restAdapter0.logAndReplaceRequest(request11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(requestInterceptor10);
    }

    @Test
    public void test01288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01288");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter18 = builder17.build();
        retrofit.Profiler profiler19 = null;
        builder17.profiler = profiler19;
        retrofit.RestAdapter restAdapter21 = builder17.build();
        retrofit.client.Client.Provider provider22 = builder17.clientProvider;
        retrofit.RestAdapter.Builder builder23 = builder0.setClient(provider22);
        retrofit.RestAdapter.Log log24 = builder23.log;
        retrofit.RestAdapter.Log log25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder26 = builder23.setLog(log25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(provider22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log24);
    }

    @Test
    public void test01289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01289");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = builder6.server;
        retrofit.RestAdapter.Log log8 = null;
        builder6.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel11 = builder10.logLevel;
        retrofit.RestAdapter.Builder builder12 = builder6.setLogLevel(logLevel11);
        retrofit.client.Client.Provider provider13 = builder6.clientProvider;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        builder6.log = log14;
        retrofit.RestAdapter.Builder builder16 = builder5.setLog(log14);
        retrofit.Profiler profiler17 = builder16.profiler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.RestAdapter restAdapter28 = builder26.build();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        java.util.concurrent.Executor executor33 = restAdapter31.httpExecutor;
        java.util.concurrent.Executor executor34 = null;
        restAdapter31.callbackExecutor = executor34;
        retrofit.client.Client.Provider provider36 = null;
        restAdapter31.clientProvider = provider36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder64 = builder62.setServer("Retrofit-Idle");
        retrofit.Server server65 = builder64.server;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = null;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = builder74.server;
        retrofit.RestAdapter.Log log76 = null;
        builder74.log = log76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel79 = builder78.logLevel;
        retrofit.RestAdapter.Builder builder80 = builder74.setLogLevel(logLevel79);
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server65, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel79);
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel79);
        restAdapter31.log = log55;
        log55.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder86 = builder29.setLog(log55);
        builder26.log = log55;
        retrofit.ErrorHandler errorHandler88 = builder26.errorHandler;
        retrofit.RestAdapter.Builder builder89 = builder16.setErrorHandler(errorHandler88);
        restAdapter0.errorHandler = errorHandler88;
        java.lang.Throwable throwable91 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable91, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertNull(server75);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(errorHandler88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test01290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01290");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel2 = builder1.logLevel;
        builder0.logLevel = logLevel2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("Retrofit-Idle");
        retrofit.Server server13 = builder12.server;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        builder22.logLevel = logLevel24;
        boolean boolean26 = logLevel24.log();
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel24);
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = builder39.server;
        retrofit.RestAdapter.Log log41 = null;
        builder39.log = log41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel44 = builder43.logLevel;
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider46 = builder39.clientProvider;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        builder39.log = log47;
        retrofit.RestAdapter.Builder builder49 = builder35.setLog(log47);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Log log52 = null;
        builder50.log = log52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = builder54.server;
        retrofit.RestAdapter.Log log56 = null;
        builder54.log = log56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel59 = builder58.logLevel;
        retrofit.RestAdapter.Builder builder60 = builder54.setLogLevel(logLevel59);
        retrofit.client.Client.Provider provider61 = builder54.clientProvider;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        builder54.log = log62;
        retrofit.RestAdapter.Builder builder64 = builder50.setLog(log62);
        retrofit.RestAdapter.Builder builder65 = builder35.setLog(log62);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = builder66.server;
        java.util.concurrent.Executor executor68 = null;
        builder66.httpExecutor = executor68;
        retrofit.Server server70 = builder66.server;
        retrofit.RestAdapter.LogLevel logLevel71 = builder66.logLevel;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server13, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log62, logLevel71);
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.client.Client.Provider provider74 = restAdapter72.clientProvider;
        retrofit.Server server75 = restAdapter72.server;
        retrofit.RestAdapter.Builder builder76 = builder0.setServer(server75);
        retrofit.RestAdapter.LogLevel logLevel77 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder78 = builder76.setLogLevel(logLevel77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertNotNull(server75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test01291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01291");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.Profiler profiler17 = builder15.profiler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter27 = builder26.build();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        builder26.logLevel = logLevel28;
        retrofit.RestAdapter.Log log30 = builder26.log;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.logLevel;
        retrofit.ErrorHandler errorHandler34 = restAdapter31.errorHandler;
        retrofit.converter.Converter converter35 = null;
        restAdapter31.converter = converter35;
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter31.logLevel;
        java.util.concurrent.Executor executor38 = restAdapter31.httpExecutor;
        retrofit.RestAdapter.Log log39 = restAdapter31.log;
        retrofit.Profiler profiler40 = null;
        restAdapter31.profiler = profiler40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel44 = builder43.logLevel;
        builder42.logLevel = logLevel44;
        boolean boolean46 = logLevel44.log();
        restAdapter31.logLevel = logLevel44;
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter31.logLevel;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter31.errorHandler = errorHandler49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        builder51.logLevel = logLevel53;
        boolean boolean55 = logLevel53.log();
        restAdapter31.setLogLevel(logLevel53);
        builder26.logLevel = logLevel53;
        retrofit.RestAdapter.Log log58 = builder26.log;
        retrofit.RestAdapter.Builder builder59 = builder15.setLog(log58);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = builder60.server;
        retrofit.RestAdapter.Log log62 = null;
        builder60.log = log62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel65 = builder64.logLevel;
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        builder67.logLevel = logLevel69;
        boolean boolean71 = logLevel69.log();
        builder60.logLevel = logLevel69;
        java.util.concurrent.Executor executor73 = null;
        builder60.httpExecutor = executor73;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor76 = null;
        restAdapter75.callbackExecutor = executor76;
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.converter.Converter converter79 = restAdapter75.converter;
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        restAdapter75.logLevel = logLevel82;
        builder60.logLevel = logLevel82;
        retrofit.RestAdapter.LogLevel logLevel85 = builder60.logLevel;
        builder15.logLevel = logLevel85;
        boolean boolean87 = logLevel85.log();
        boolean boolean88 = logLevel85.log();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertNull(converter79);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test01292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01292");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.client.Client.Provider provider17 = null;
        restAdapter16.clientProvider = provider17;
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.client.Client.Provider provider20 = null;
        restAdapter16.clientProvider = provider20;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter16.new RestHandler();
        retrofit.converter.Converter converter23 = restAdapter16.converter;
        java.lang.Throwable throwable24 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter16.logException(throwable24, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(converter23);
    }

    @Test
    public void test01293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01293");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.RestAdapter restAdapter10 = builder8.build();
        java.util.concurrent.Executor executor11 = null;
        restAdapter10.httpExecutor = executor11;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.client.Client.Provider provider14 = null;
        restAdapter10.clientProvider = provider14;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.converter.Converter converter17 = restAdapter10.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = builder18.clientProvider;
        retrofit.Profiler profiler21 = null;
        builder18.profiler = profiler21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter23.logLevel;
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.RestAdapter restAdapter38 = builder36.build();
        java.util.concurrent.Executor executor39 = null;
        restAdapter38.httpExecutor = executor39;
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter38.new RestHandler();
        retrofit.client.Client.Provider provider42 = null;
        restAdapter38.clientProvider = provider42;
        retrofit.Profiler profiler44 = null;
        restAdapter38.profiler = profiler44;
        java.util.concurrent.Executor executor46 = restAdapter38.httpExecutor;
        java.util.concurrent.Executor executor47 = restAdapter38.callbackExecutor;
        restAdapter23.httpExecutor = executor47;
        builder18.callbackExecutor = executor47;
        restAdapter10.httpExecutor = executor47;
        retrofit.client.Response response52 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response54 = restAdapter10.logAndReplaceResponse("Retrofit-", response52, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNotNull(converter16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNotNull(executor47);
    }

    @Test
    public void test01294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01294");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider10 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor12 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = null;
        builder13.converter = converter14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder26 = builder24.setLog(log25);
        retrofit.Profiler profiler27 = builder26.profiler;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder26.setServer(server37);
        retrofit.RestAdapter.Builder builder55 = builder13.setServer(server37);
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter57 = builder13.build();
        java.util.concurrent.Executor executor58 = builder13.httpExecutor;
        restAdapter0.callbackExecutor = executor58;
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable61 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable61, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNotNull(executor58);
    }

    @Test
    public void test01295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01295");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.Server server2 = builder1.server;
        retrofit.RestAdapter.Log log3 = null;
        builder1.log = log3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder7 = builder1.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder1.clientProvider;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder1.log = log9;
        retrofit.RestAdapter.Builder builder11 = builder0.setLog(log9);
        retrofit.Profiler profiler12 = builder11.profiler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.RestAdapter restAdapter23 = builder21.build();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter26.new RestHandler();
        java.util.concurrent.Executor executor28 = restAdapter26.httpExecutor;
        java.util.concurrent.Executor executor29 = null;
        restAdapter26.callbackExecutor = executor29;
        retrofit.client.Client.Provider provider31 = null;
        restAdapter26.clientProvider = provider31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("Retrofit-Idle");
        retrofit.Server server42 = builder41.server;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("Retrofit-Idle");
        retrofit.Server server60 = builder59.server;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = null;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = builder69.server;
        retrofit.RestAdapter.Log log71 = null;
        builder69.log = log71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel74 = builder73.logLevel;
        retrofit.RestAdapter.Builder builder75 = builder69.setLogLevel(logLevel74);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel74);
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel74);
        restAdapter26.log = log50;
        log50.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder81 = builder24.setLog(log50);
        builder21.log = log50;
        retrofit.ErrorHandler errorHandler83 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder84 = builder11.setErrorHandler(errorHandler83);
        retrofit.client.Client client85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder84.setClient(client85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(errorHandler83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test01296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01296");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.Server server4 = builder3.server;
        retrofit.RestAdapter.Log log5 = null;
        builder3.log = log5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel8 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.Profiler profiler14 = builder13.profiler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("Retrofit-Idle");
        retrofit.Server server24 = builder23.server;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder13.setServer(server24);
        retrofit.RestAdapter.Builder builder42 = builder0.setServer(server24);
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor51 = null;
        restAdapter50.callbackExecutor = executor51;
        retrofit.converter.Converter converter53 = restAdapter50.converter;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        restAdapter50.log = log54;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server24, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log54, logLevel56);
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter57.new RestHandler();
        retrofit.client.Response response60 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response62 = restAdapter57.logAndReplaceResponse("Retrofit-Idle", response60, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01297");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.Server server4 = builder3.server;
        retrofit.RestAdapter.Log log5 = null;
        builder3.log = log5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel8 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.Profiler profiler14 = builder13.profiler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("Retrofit-Idle");
        retrofit.Server server24 = builder23.server;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder13.setServer(server24);
        retrofit.RestAdapter.Builder builder42 = builder0.setServer(server24);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter44 = builder0.build();
        java.util.concurrent.Executor executor45 = builder0.httpExecutor;
        retrofit.Server server46 = builder0.server;
        retrofit.Profiler profiler47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder0.setProfiler(profiler47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(server46);
    }

    @Test
    public void test01298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01298");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter.Log log16 = builder15.log;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder15.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = builder27.setLog(log28);
        java.util.concurrent.Executor executor30 = builder27.httpExecutor;
        retrofit.RestAdapter.Builder builder32 = builder27.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel33 = builder27.logLevel;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor35 = null;
        restAdapter34.callbackExecutor = executor35;
        retrofit.converter.Converter converter37 = restAdapter34.converter;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter34.log;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("Retrofit-Idle");
        retrofit.Server server49 = builder48.server;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = null;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel63 = builder62.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel63);
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel63);
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Log log75 = null;
        builder73.log = log75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server78 = builder77.server;
        retrofit.RestAdapter.Log log79 = null;
        builder77.log = log79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        retrofit.RestAdapter.Builder builder83 = builder77.setLogLevel(logLevel82);
        retrofit.client.Client.Provider provider84 = builder77.clientProvider;
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        builder77.log = log85;
        retrofit.RestAdapter.Builder builder87 = builder73.setLog(log85);
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server49, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log85, logLevel88);
        restAdapter34.server = server49;
        retrofit.RestAdapter.Builder builder91 = builder27.setServer(server49);
        builder15.server = server49;
        retrofit.ErrorHandler errorHandler93 = builder15.errorHandler;
        retrofit.client.Client.Provider provider94 = builder15.clientProvider;
        retrofit.converter.Converter converter95 = builder15.converter;
        retrofit.Profiler profiler96 = null;
        builder15.profiler = profiler96;
        java.util.concurrent.Executor executor98 = null;
        builder15.callbackExecutor = executor98;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertNull(server78);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(provider84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(errorHandler93);
        org.junit.Assert.assertNull(provider94);
        org.junit.Assert.assertNull(converter95);
    }

    @Test
    public void test01299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01299");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log10 = restAdapter0.log;
        retrofit.RestAdapter.Log log11 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.Server server21 = builder20.server;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider37 = builder30.clientProvider;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        builder30.log = log38;
        retrofit.RestAdapter.Builder builder40 = builder29.setLog(log38);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log38, logLevel41);
        restAdapter0.logLevel = logLevel41;
        java.util.concurrent.Executor executor44 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor44);
    }

    @Test
    public void test01300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01300");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter5 = builder4.converter;
        retrofit.RestAdapter.LogLevel logLevel6 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.Profiler profiler9 = builder7.profiler;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Builder builder22 = builder11.setServer(server21);
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider37 = builder30.clientProvider;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        builder30.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("Retrofit-Idle");
        retrofit.Server server49 = builder48.server;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel63 = builder62.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder66 = builder64.setServer("Retrofit-Idle");
        retrofit.Server server67 = builder66.server;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = null;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        retrofit.RestAdapter.Log log78 = null;
        builder76.log = log78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel81 = builder80.logLevel;
        retrofit.RestAdapter.Builder builder82 = builder76.setLogLevel(logLevel81);
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel81);
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel81);
        builder30.log = log57;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel87 = builder86.logLevel;
        retrofit.RestAdapter.Builder builder88 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder89 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel90 = builder89.logLevel;
        builder88.logLevel = logLevel90;
        builder86.logLevel = logLevel90;
        retrofit.RestAdapter restAdapter93 = new retrofit.RestAdapter(server21, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log57, logLevel90);
        retrofit.RestAdapter.Builder builder94 = builder4.setLog(log57);
        retrofit.ErrorHandler errorHandler95 = null;
        builder4.errorHandler = errorHandler95;
        builder4.ensureSaneDefaults();
        retrofit.Profiler profiler98 = null;
        builder4.profiler = profiler98;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(server67);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test01301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01301");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.converter.Converter converter6 = null;
        restAdapter0.converter = converter6;
        retrofit.client.Response response9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response11 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response9, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel5);
    }

    @Test
    public void test01302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01302");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel2 = builder1.logLevel;
        builder0.logLevel = logLevel2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("Retrofit-Idle");
        retrofit.Server server13 = builder12.server;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.client.Client.Provider provider29 = builder22.clientProvider;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        builder22.log = log30;
        retrofit.RestAdapter.Builder builder32 = builder21.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log30, logLevel33);
        builder0.logLevel = logLevel33;
        retrofit.RestAdapter.LogLevel logLevel36 = builder0.logLevel;
        retrofit.Profiler profiler37 = builder0.profiler;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter39 = null;
        builder38.converter = converter39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = builder49.setLog(log50);
        retrofit.Profiler profiler52 = builder51.profiler;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("Retrofit-Idle");
        retrofit.Server server62 = builder61.server;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = null;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel76);
        retrofit.RestAdapter.Builder builder79 = builder51.setServer(server62);
        retrofit.RestAdapter.Builder builder80 = builder38.setServer(server62);
        retrofit.client.Client.Provider provider81 = null;
        java.util.concurrent.Executor executor82 = null;
        java.util.concurrent.Executor executor83 = null;
        retrofit.RequestInterceptor requestInterceptor84 = null;
        retrofit.converter.Converter converter85 = null;
        retrofit.Profiler profiler86 = null;
        retrofit.ErrorHandler errorHandler87 = null;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor89 = null;
        restAdapter88.callbackExecutor = executor89;
        retrofit.converter.Converter converter91 = restAdapter88.converter;
        retrofit.RestAdapter.Log log92 = retrofit.RestAdapter.Log.NONE;
        restAdapter88.log = log92;
        retrofit.RestAdapter.LogLevel logLevel94 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter95 = new retrofit.RestAdapter(server62, provider81, executor82, executor83, requestInterceptor84, converter85, profiler86, errorHandler87, log92, logLevel94);
        retrofit.RestAdapter.Builder builder96 = builder0.setServer(server62);
        java.util.concurrent.Executor executor97 = builder96.callbackExecutor;
        retrofit.RestAdapter.Builder builder99 = builder96.setServer("Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(converter91);
        org.junit.Assert.assertNotNull(log92);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNull(executor97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01303");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = null;
        restAdapter7.callbackExecutor = executor8;
        retrofit.converter.Converter converter10 = restAdapter7.converter;
        java.util.concurrent.Executor executor11 = restAdapter7.httpExecutor;
        retrofit.converter.Converter converter12 = restAdapter7.converter;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter7.logLevel;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder20 = builder14.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider23 = null;
        builder20.clientProvider = provider23;
        retrofit.Server server25 = builder20.server;
        restAdapter7.server = server25;
        retrofit.RestAdapter.Builder builder27 = builder0.setServer(server25);
        retrofit.Profiler profiler28 = builder27.profiler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(profiler28);
    }

    @Test
    public void test01304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01304");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.converter.Converter converter14 = null;
        builder0.converter = converter14;
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor17 = builder0.httpExecutor;
        java.lang.Class<?> wildcardClass18 = builder0.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test01305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01305");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = builder8.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter14 = null;
        builder13.converter = converter14;
        java.util.concurrent.Executor executor16 = builder13.httpExecutor;
        retrofit.client.Client client17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder13.setClient(client17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor16);
    }

    @Test
    public void test01306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01306");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder0.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.Server server18 = builder17.server;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("Retrofit-Idle");
        retrofit.Server server36 = builder35.server;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel50);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel50);
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = builder61.server;
        retrofit.RestAdapter.Log log63 = null;
        builder61.log = log63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.client.Client.Provider provider72 = builder65.clientProvider;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        builder65.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder61.setLog(log73);
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        retrofit.RestAdapter.Log log78 = null;
        builder76.log = log78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel81 = builder80.logLevel;
        retrofit.RestAdapter.Builder builder82 = builder76.setLogLevel(logLevel81);
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server18, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log73, logLevel81);
        builder0.log = log73;
        retrofit.RestAdapter.LogLevel logLevel85 = null;
        builder0.logLevel = logLevel85;
        retrofit.Profiler profiler87 = builder0.profiler;
        retrofit.Profiler profiler88 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder89 = builder0.setProfiler(profiler88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(provider72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(profiler87);
    }

    @Test
    public void test01307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01307");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.RestAdapter.LogLevel logLevel12 = builder8.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder8.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01308");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.client.Client.Provider provider30 = builder23.clientProvider;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        builder23.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("Retrofit-Idle");
        retrofit.Server server42 = builder41.server;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("Retrofit-Idle");
        retrofit.Server server60 = builder59.server;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = null;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = builder69.server;
        retrofit.RestAdapter.Log log71 = null;
        builder69.log = log71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel74 = builder73.logLevel;
        retrofit.RestAdapter.Builder builder75 = builder69.setLogLevel(logLevel74);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel74);
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel74);
        builder23.log = log50;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel80 = builder79.logLevel;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        builder81.logLevel = logLevel83;
        builder79.logLevel = logLevel83;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server14, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log50, logLevel83);
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder88 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel89 = builder88.logLevel;
        builder87.logLevel = logLevel89;
        restAdapter86.logLevel = logLevel89;
        retrofit.RestAdapter.LogLevel logLevel92 = restAdapter86.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler93 = restAdapter86.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel94 = null;
        restAdapter86.setLogLevel(logLevel94);
        retrofit.converter.Converter converter96 = null;
        restAdapter86.converter = converter96;
        retrofit.RestAdapter.RestHandler restHandler98 = restAdapter86.new RestHandler();
        retrofit.ErrorHandler errorHandler99 = restAdapter86.errorHandler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler99);
    }

    @Test
    public void test01309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01309");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter6 = null;
        restAdapter0.converter = converter6;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler9 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        retrofit.Profiler profiler23 = builder22.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel29 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("Retrofit-Idle");
        retrofit.Server server33 = builder32.server;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = null;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder22.setServer(server33);
        retrofit.converter.Converter converter51 = null;
        builder22.converter = converter51;
        retrofit.converter.Converter converter53 = null;
        builder22.converter = converter53;
        retrofit.RestAdapter.Log log55 = builder22.log;
        retrofit.RestAdapter.LogLevel logLevel56 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = builder65.setLog(log66);
        java.util.concurrent.Executor executor68 = builder65.httpExecutor;
        java.util.concurrent.Executor executor69 = null;
        builder65.httpExecutor = executor69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder79 = builder77.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter80 = builder79.build();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.logLevel;
        builder65.logLevel = logLevel81;
        builder65.ensureSaneDefaults();
        retrofit.client.Client.Provider provider84 = builder65.clientProvider;
        builder22.clientProvider = provider84;
        restAdapter0.clientProvider = provider84;
        retrofit.client.Response response88 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response90 = restAdapter0.logAndReplaceResponse("", response88, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider84);
    }

    @Test
    public void test01310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01310");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter0.clientProvider = provider9;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor12 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter0.new RestHandler();
        retrofit.client.Response response16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response18 = restAdapter0.logAndReplaceResponse("hi!", response16, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(logLevel13);
    }

    @Test
    public void test01311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01311");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.Server server27 = builder26.server;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel41 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder42 = builder36.setLogLevel(logLevel41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel41);
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel41);
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider60 = builder53.clientProvider;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        builder53.log = log61;
        retrofit.RestAdapter.Builder builder63 = builder52.setLog(log61);
        retrofit.converter.Converter converter64 = null;
        builder52.converter = converter64;
        retrofit.RestAdapter.Log log66 = builder52.log;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = builder67.callbackExecutor;
        retrofit.Profiler profiler69 = builder67.profiler;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel72 = builder67.logLevel;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server9, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log66, logLevel72);
        retrofit.Server server74 = restAdapter73.server;
        retrofit.converter.Converter converter75 = restAdapter73.converter;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(profiler69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNull(converter75);
    }

    @Test
    public void test01312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01312");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.Profiler profiler12 = null;
        builder8.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = builder8.build();
        retrofit.client.Client client15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder8.setClient(client15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(restAdapter14);
    }

    @Test
    public void test01313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01313");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel6 = null;
        restAdapter0.logLevel = logLevel6;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.client.Client.Provider provider9 = restAdapter0.clientProvider;
        java.lang.Throwable throwable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable10, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(provider9);
    }

    @Test
    public void test01314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01314");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.RestAdapter restAdapter10 = builder8.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter13.new RestHandler();
        java.util.concurrent.Executor executor15 = restAdapter13.httpExecutor;
        java.util.concurrent.Executor executor16 = null;
        restAdapter13.callbackExecutor = executor16;
        retrofit.client.Client.Provider provider18 = null;
        restAdapter13.clientProvider = provider18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.Server server29 = builder28.server;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = null;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel61);
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel61);
        restAdapter13.log = log37;
        log37.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder68 = builder11.setLog(log37);
        builder8.log = log37;
        retrofit.RestAdapter.Log log70 = builder8.log;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        builder8.requestInterceptor = requestInterceptor71;
        retrofit.RestAdapter.Log log73 = null;
        builder8.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor76 = builder75.callbackExecutor;
        retrofit.Profiler profiler77 = builder75.profiler;
        retrofit.RestAdapter.Builder builder79 = builder75.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter80 = builder79.converter;
        retrofit.RestAdapter.Builder builder82 = builder79.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server84 = builder83.server;
        retrofit.RestAdapter.Log log85 = null;
        builder83.log = log85;
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel88 = builder87.logLevel;
        retrofit.RestAdapter.Builder builder89 = builder83.setLogLevel(logLevel88);
        retrofit.RestAdapter.Builder builder90 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder91 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel92 = builder91.logLevel;
        builder90.logLevel = logLevel92;
        boolean boolean94 = logLevel92.log();
        builder83.logLevel = logLevel92;
        boolean boolean96 = logLevel92.log();
        retrofit.RestAdapter.Builder builder97 = builder82.setLogLevel(logLevel92);
        builder8.logLevel = logLevel92;
        retrofit.Profiler profiler99 = builder8.profiler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNull(profiler77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(converter80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(server84);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNull(profiler99);
    }

    @Test
    public void test01315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01315");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.Profiler profiler12 = null;
        builder8.profiler = profiler12;
        retrofit.RestAdapter.LogLevel logLevel14 = builder8.logLevel;
        builder8.ensureSaneDefaults();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01316");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        java.util.concurrent.Executor executor16 = null;
        builder0.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = builder0.converter;
        retrofit.RestAdapter.Log log19 = builder0.log;
        retrofit.RestAdapter.Log log20 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("Retrofit-Idle");
        retrofit.Server server31 = builder30.server;
        java.util.concurrent.Executor executor32 = builder30.httpExecutor;
        java.util.concurrent.Executor executor33 = builder30.httpExecutor;
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter35.logLevel;
        retrofit.ErrorHandler errorHandler38 = restAdapter35.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter35.logLevel;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("Retrofit-Idle");
        retrofit.Server server49 = builder48.server;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel63 = builder62.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder66 = builder64.setServer("Retrofit-Idle");
        retrofit.Server server67 = builder66.server;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = null;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        retrofit.RestAdapter.Log log78 = null;
        builder76.log = log78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel81 = builder80.logLevel;
        retrofit.RestAdapter.Builder builder82 = builder76.setLogLevel(logLevel81);
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel81);
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel81);
        restAdapter35.server = server49;
        builder30.server = server49;
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.Server server88 = builder87.server;
        retrofit.RestAdapter.Log log89 = null;
        builder87.log = log89;
        retrofit.RestAdapter.Builder builder91 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel92 = builder91.logLevel;
        retrofit.RestAdapter.Builder builder93 = builder87.setLogLevel(logLevel92);
        retrofit.RestAdapter.Builder builder95 = builder93.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter96 = builder95.build();
        retrofit.converter.Converter converter97 = restAdapter96.converter;
        builder30.converter = converter97;
        retrofit.RestAdapter.Builder builder99 = builder0.setConverter(converter97);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(server67);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(server88);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(restAdapter96);
        org.junit.Assert.assertNotNull(converter97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01317");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter8.logLevel;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        retrofit.client.Client.Provider provider20 = builder13.clientProvider;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder12.setLog(log21);
        retrofit.converter.Converter converter24 = null;
        builder12.converter = converter24;
        retrofit.RestAdapter.Log log26 = builder12.log;
        restAdapter8.log = log26;
        builder0.log = log26;
        retrofit.client.Client client29 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder30 = builder0.setClient(client29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log26);
    }

    @Test
    public void test01318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01318");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        java.util.concurrent.Executor executor5 = null;
        restAdapter0.callbackExecutor = executor5;
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.httpExecutor = executor7;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler10 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor12 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(executor12);
    }

    @Test
    public void test01319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01319");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = builder3.callbackExecutor;
        retrofit.Profiler profiler5 = builder3.profiler;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = builder8.server;
        retrofit.RestAdapter.Log log10 = null;
        builder8.log = log10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        retrofit.RestAdapter.Builder builder14 = builder8.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("Retrofit-Idle");
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Builder builder18 = builder7.setServer(server17);
        retrofit.RestAdapter restAdapter19 = builder18.build();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        builder0.httpExecutor = executor20;
        java.lang.Class<?> wildcardClass22 = executor20.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test01320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01320");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.client.Client.Provider provider26 = builder19.clientProvider;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder19.log = log27;
        retrofit.RestAdapter.Builder builder29 = builder15.setLog(log27);
        retrofit.RestAdapter.Builder builder30 = builder0.setLog(log27);
        retrofit.RequestInterceptor requestInterceptor31 = null;
        builder0.requestInterceptor = requestInterceptor31;
        java.util.concurrent.Executor executor33 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        builder0.requestInterceptor = requestInterceptor34;
        java.util.concurrent.Executor executor36 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel37 = builder0.logLevel;
        retrofit.Profiler profiler38 = builder0.profiler;
        retrofit.ErrorHandler errorHandler39 = builder0.errorHandler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(errorHandler39);
    }

    @Test
    public void test01321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01321");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = builder9.callbackExecutor;
        retrofit.Profiler profiler11 = builder9.profiler;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder20 = builder14.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("Retrofit-Idle");
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Builder builder24 = builder13.setServer(server23);
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Log log34 = null;
        builder32.log = log34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel37);
        retrofit.client.Client.Provider provider39 = builder32.clientProvider;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        builder32.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("Retrofit-Idle");
        retrofit.Server server51 = builder50.server;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = builder60.server;
        retrofit.RestAdapter.Log log62 = null;
        builder60.log = log62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel65 = builder64.logLevel;
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder68 = builder66.setServer("Retrofit-Idle");
        retrofit.Server server69 = builder68.server;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = null;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.Server server79 = builder78.server;
        retrofit.RestAdapter.Log log80 = null;
        builder78.log = log80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        retrofit.RestAdapter.Builder builder84 = builder78.setLogLevel(logLevel83);
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel83);
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel83);
        builder32.log = log59;
        retrofit.RestAdapter.Builder builder88 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel89 = builder88.logLevel;
        retrofit.RestAdapter.Builder builder90 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder91 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel92 = builder91.logLevel;
        builder90.logLevel = logLevel92;
        builder88.logLevel = logLevel92;
        retrofit.RestAdapter restAdapter95 = new retrofit.RestAdapter(server23, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log59, logLevel92);
        retrofit.RestAdapter restAdapter96 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel92);
        retrofit.RestAdapter.LogLevel logLevel97 = null;
        restAdapter96.logLevel = logLevel97;
        retrofit.RestAdapter.RestHandler restHandler99 = restAdapter96.new RestHandler();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(server69);
        org.junit.Assert.assertNull(server79);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01322");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.httpExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        retrofit.Server server8 = restAdapter0.server;
        java.lang.Throwable throwable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable9, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(server8);
    }

    @Test
    public void test01323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01323");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        builder4.logLevel = logLevel6;
        java.util.concurrent.Executor executor8 = null;
        builder4.callbackExecutor = executor8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = null;
        restAdapter10.callbackExecutor = executor11;
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter10.log = log14;
        builder4.log = log14;
        builder0.log = log14;
        retrofit.Profiler profiler18 = builder0.profiler;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = null;
        restAdapter19.callbackExecutor = executor20;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter19.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter19.requestInterceptor;
        retrofit.converter.Converter converter24 = null;
        restAdapter19.converter = converter24;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter19.new RestHandler();
        retrofit.converter.Converter converter27 = restAdapter19.converter;
        retrofit.ErrorHandler errorHandler28 = restAdapter19.errorHandler;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.callbackExecutor;
        retrofit.Profiler profiler31 = builder29.profiler;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = builder34.server;
        retrofit.RestAdapter.Log log36 = null;
        builder34.log = log36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel39 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("Retrofit-Idle");
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Builder builder44 = builder33.setServer(server43);
        retrofit.RestAdapter restAdapter45 = builder44.build();
        java.util.concurrent.Executor executor46 = restAdapter45.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.ErrorHandler errorHandler48 = restAdapter45.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter45.logLevel;
        java.util.concurrent.Executor executor50 = restAdapter45.httpExecutor;
        restAdapter19.callbackExecutor = executor50;
        builder0.callbackExecutor = executor50;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(executor46);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor50);
    }

    @Test
    public void test01324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01324");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        builder23.logLevel = logLevel25;
        boolean boolean27 = logLevel25.log();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.client.Client.Provider provider47 = builder40.clientProvider;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        builder40.log = log48;
        retrofit.RestAdapter.Builder builder50 = builder36.setLog(log48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider62 = builder55.clientProvider;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        builder55.log = log63;
        retrofit.RestAdapter.Builder builder65 = builder51.setLog(log63);
        retrofit.RestAdapter.Builder builder66 = builder36.setLog(log63);
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        java.util.concurrent.Executor executor69 = null;
        builder67.httpExecutor = executor69;
        retrofit.Server server71 = builder67.server;
        retrofit.RestAdapter.LogLevel logLevel72 = builder67.logLevel;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server14, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log63, logLevel72);
        restAdapter0.server = server14;
        retrofit.RequestInterceptor requestInterceptor75 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter76 = restAdapter0.converter;
        retrofit.converter.Converter converter77 = restAdapter0.converter;
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor75);
        org.junit.Assert.assertNull(converter76);
        org.junit.Assert.assertNull(converter77);
    }

    @Test
    public void test01325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01325");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.Server server6 = restAdapter0.server;
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        java.lang.Throwable throwable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable8, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test01326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01326");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = builder4.callbackExecutor;
        retrofit.Profiler profiler6 = builder4.profiler;
        java.util.concurrent.Executor executor7 = builder4.callbackExecutor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = builder8.server;
        retrofit.RestAdapter.Log log10 = null;
        builder8.log = log10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        retrofit.RestAdapter.Builder builder14 = builder8.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = builder16.setLog(log17);
        retrofit.Profiler profiler19 = builder18.profiler;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.Server server29 = builder28.server;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = null;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder18.setServer(server29);
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.Server server48 = builder46.server;
        builder46.ensureSaneDefaults();
        retrofit.converter.Converter converter50 = builder46.converter;
        builder4.converter = converter50;
        retrofit.RestAdapter.Builder builder52 = builder0.setConverter(converter50);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter53.logLevel;
        retrofit.ErrorHandler errorHandler56 = null;
        restAdapter53.errorHandler = errorHandler56;
        java.util.concurrent.Executor executor58 = restAdapter53.httpExecutor;
        java.util.concurrent.Executor executor59 = null;
        restAdapter53.httpExecutor = executor59;
        retrofit.ErrorHandler errorHandler61 = restAdapter53.errorHandler;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor63 = null;
        restAdapter62.requestInterceptor = requestInterceptor63;
        retrofit.Profiler profiler65 = null;
        restAdapter62.profiler = profiler65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = builder67.callbackExecutor;
        retrofit.Profiler profiler69 = builder67.profiler;
        retrofit.RestAdapter.Builder builder71 = builder67.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        retrofit.RestAdapter.Builder builder78 = builder72.setLogLevel(logLevel77);
        retrofit.RestAdapter.Builder builder80 = builder78.setServer("Retrofit-Idle");
        retrofit.Server server81 = builder80.server;
        retrofit.RestAdapter.Builder builder82 = builder71.setServer(server81);
        retrofit.RestAdapter restAdapter83 = builder82.build();
        java.util.concurrent.Executor executor84 = restAdapter83.callbackExecutor;
        restAdapter62.callbackExecutor = executor84;
        restAdapter53.httpExecutor = executor84;
        builder0.httpExecutor = executor84;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server48);
        org.junit.Assert.assertNotNull(converter50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(profiler69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(server81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(executor84);
    }

    @Test
    public void test01327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01327");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel2 = builder1.logLevel;
        builder0.logLevel = logLevel2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.callbackExecutor;
        retrofit.Profiler profiler16 = builder14.profiler;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("Retrofit-Idle");
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Builder builder29 = builder18.setServer(server28);
        retrofit.RestAdapter restAdapter30 = builder29.build();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        builder12.callbackExecutor = executor31;
        builder0.callbackExecutor = executor31;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = builder34.server;
        retrofit.RestAdapter.Log log36 = null;
        builder34.log = log36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel39 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("Retrofit-Idle");
        retrofit.Server server43 = builder42.server;
        retrofit.Profiler profiler44 = null;
        builder42.profiler = profiler44;
        retrofit.Profiler profiler46 = null;
        builder42.profiler = profiler46;
        retrofit.RestAdapter restAdapter48 = builder42.build();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder57 = builder55.setServer("Retrofit-Idle");
        retrofit.Server server58 = builder57.server;
        java.util.concurrent.Executor executor59 = builder57.httpExecutor;
        java.util.concurrent.Executor executor60 = builder57.callbackExecutor;
        retrofit.ErrorHandler errorHandler61 = null;
        builder57.errorHandler = errorHandler61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel68);
        java.util.concurrent.Executor executor70 = builder69.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor71 = builder69.requestInterceptor;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        retrofit.RestAdapter.Builder builder78 = builder72.setLogLevel(logLevel77);
        retrofit.RestAdapter.Builder builder80 = builder78.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter81 = builder80.build();
        retrofit.Profiler profiler82 = null;
        builder80.profiler = profiler82;
        retrofit.Profiler profiler84 = null;
        builder80.profiler = profiler84;
        retrofit.converter.Converter converter86 = builder80.converter;
        retrofit.RestAdapter.Builder builder87 = builder69.setConverter(converter86);
        retrofit.RestAdapter.Builder builder88 = builder57.setConverter(converter86);
        restAdapter48.converter = converter86;
        retrofit.RestAdapter.Builder builder90 = builder0.setConverter(converter86);
        retrofit.Profiler profiler91 = builder90.profiler;
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(server58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(converter86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(profiler91);
    }

    @Test
    public void test01328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01328");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.Server server4 = builder3.server;
        retrofit.RestAdapter.Log log5 = null;
        builder3.log = log5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel8 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder9 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = builder11.setLog(log12);
        retrofit.Profiler profiler14 = builder13.profiler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("Retrofit-Idle");
        retrofit.Server server24 = builder23.server;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder13.setServer(server24);
        retrofit.RestAdapter.Builder builder42 = builder0.setServer(server24);
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor51 = null;
        restAdapter50.callbackExecutor = executor51;
        retrofit.converter.Converter converter53 = restAdapter50.converter;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        restAdapter50.log = log54;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server24, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log54, logLevel56);
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter57.new RestHandler();
        java.lang.Throwable throwable59 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter57.logException(throwable59, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01329");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.Server server16 = builder15.server;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        builder25.logLevel = logLevel27;
        boolean boolean29 = logLevel27.log();
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel27);
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider49 = builder42.clientProvider;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        builder42.log = log50;
        retrofit.RestAdapter.Builder builder52 = builder38.setLog(log50);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.client.Client.Provider provider64 = builder57.clientProvider;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        builder57.log = log65;
        retrofit.RestAdapter.Builder builder67 = builder53.setLog(log65);
        retrofit.RestAdapter.Builder builder68 = builder38.setLog(log65);
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = builder69.server;
        java.util.concurrent.Executor executor71 = null;
        builder69.httpExecutor = executor71;
        retrofit.Server server73 = builder69.server;
        retrofit.RestAdapter.LogLevel logLevel74 = builder69.logLevel;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server16, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log65, logLevel74);
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter75.new RestHandler();
        retrofit.Server server77 = restAdapter75.server;
        java.util.concurrent.Executor executor78 = restAdapter75.callbackExecutor;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = builder79.server;
        retrofit.RestAdapter.Log log81 = null;
        builder79.log = log81;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel84 = builder83.logLevel;
        retrofit.RestAdapter.Builder builder85 = builder79.setLogLevel(logLevel84);
        retrofit.RestAdapter.Builder builder87 = builder85.setServer("Retrofit-Idle");
        retrofit.Server server88 = builder87.server;
        retrofit.Profiler profiler89 = null;
        builder87.profiler = profiler89;
        retrofit.Profiler profiler91 = null;
        builder87.profiler = profiler91;
        retrofit.RestAdapter restAdapter93 = builder87.build();
        retrofit.ErrorHandler errorHandler94 = builder87.errorHandler;
        retrofit.Server server95 = builder87.server;
        restAdapter75.server = server95;
        restAdapter0.server = server95;
        java.lang.Class<?> wildcardClass98 = restAdapter0.getClass();
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNull(server80);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(server88);
        org.junit.Assert.assertNotNull(restAdapter93);
        org.junit.Assert.assertNotNull(errorHandler94);
        org.junit.Assert.assertNotNull(server95);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test01330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01330");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        java.util.concurrent.Executor executor16 = null;
        builder0.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = builder0.converter;
        retrofit.Profiler profiler19 = builder0.profiler;
        retrofit.client.Client.Provider provider20 = builder0.clientProvider;
        retrofit.client.Client.Provider provider21 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = builder22.callbackExecutor;
        retrofit.client.Client.Provider provider24 = null;
        builder22.clientProvider = provider24;
        java.util.concurrent.Executor executor26 = builder22.callbackExecutor;
        retrofit.client.Client.Provider provider27 = builder22.clientProvider;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        java.util.concurrent.Executor executor30 = null;
        builder28.httpExecutor = executor30;
        retrofit.Server server32 = builder28.server;
        retrofit.RestAdapter.LogLevel logLevel33 = builder28.logLevel;
        retrofit.client.Client.Provider provider34 = null;
        builder28.clientProvider = provider34;
        retrofit.Server server36 = builder28.server;
        retrofit.RequestInterceptor requestInterceptor37 = builder28.requestInterceptor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = null;
        restAdapter38.callbackExecutor = executor39;
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.converter.Converter converter42 = restAdapter38.converter;
        java.util.concurrent.Executor executor43 = null;
        restAdapter38.callbackExecutor = executor43;
        java.util.concurrent.Executor executor45 = null;
        restAdapter38.httpExecutor = executor45;
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter38.new RestHandler();
        retrofit.converter.Converter converter48 = restAdapter38.converter;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder57 = builder55.setServer("Retrofit-Idle");
        retrofit.Server server58 = builder57.server;
        retrofit.Profiler profiler59 = null;
        builder57.profiler = profiler59;
        retrofit.Profiler profiler61 = null;
        builder57.profiler = profiler61;
        retrofit.RestAdapter restAdapter63 = builder57.build();
        retrofit.ErrorHandler errorHandler64 = builder57.errorHandler;
        restAdapter38.errorHandler = errorHandler64;
        builder28.errorHandler = errorHandler64;
        builder22.errorHandler = errorHandler64;
        retrofit.RestAdapter.Builder builder68 = builder0.setErrorHandler(errorHandler64);
        retrofit.Profiler profiler69 = null;
        builder0.profiler = profiler69;
        retrofit.client.Client client71 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder72 = builder0.setClient(client71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(converter48);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(server58);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(errorHandler64);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test01331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01331");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter.Log log16 = builder15.log;
        java.util.concurrent.Executor executor17 = builder15.httpExecutor;
        retrofit.Profiler profiler18 = null;
        builder15.profiler = profiler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder28.setLog(log29);
        java.util.concurrent.Executor executor31 = builder28.httpExecutor;
        retrofit.RestAdapter.Builder builder33 = builder28.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider34 = null;
        builder28.clientProvider = provider34;
        retrofit.ErrorHandler errorHandler36 = null;
        builder28.errorHandler = errorHandler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder48 = builder46.setLog(log47);
        retrofit.Profiler profiler49 = builder48.profiler;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Log log52 = null;
        builder50.log = log52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel55 = builder54.logLevel;
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder58 = builder56.setServer("Retrofit-Idle");
        retrofit.Server server59 = builder58.server;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = null;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = builder68.server;
        retrofit.RestAdapter.Log log70 = null;
        builder68.log = log70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel73 = builder72.logLevel;
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel73);
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel73);
        retrofit.RestAdapter.Builder builder76 = builder48.setServer(server59);
        retrofit.converter.Converter converter77 = null;
        builder48.converter = converter77;
        retrofit.converter.Converter converter79 = null;
        builder48.converter = converter79;
        retrofit.RestAdapter.Log log81 = builder48.log;
        builder28.log = log81;
        retrofit.RestAdapter.Builder builder83 = builder15.setLog(log81);
        java.lang.Class<?> wildcardClass84 = builder83.getClass();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test01332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01332");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.client.Client.Provider provider30 = builder23.clientProvider;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        builder23.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("Retrofit-Idle");
        retrofit.Server server42 = builder41.server;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("Retrofit-Idle");
        retrofit.Server server60 = builder59.server;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = null;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = builder69.server;
        retrofit.RestAdapter.Log log71 = null;
        builder69.log = log71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel74 = builder73.logLevel;
        retrofit.RestAdapter.Builder builder75 = builder69.setLogLevel(logLevel74);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel74);
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel74);
        builder23.log = log50;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel80 = builder79.logLevel;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        builder81.logLevel = logLevel83;
        builder79.logLevel = logLevel83;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server14, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log50, logLevel83);
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder88 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel89 = builder88.logLevel;
        builder87.logLevel = logLevel89;
        restAdapter86.logLevel = logLevel89;
        retrofit.RestAdapter.LogLevel logLevel92 = restAdapter86.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler93 = restAdapter86.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler94 = restAdapter86.new RestHandler();
        retrofit.ErrorHandler errorHandler95 = restAdapter86.errorHandler;
        retrofit.client.Response response97 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response99 = restAdapter86.logAndReplaceResponse("Retrofit-Idle", response97, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler95);
    }

    @Test
    public void test01333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01333");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = builder6.server;
        retrofit.RestAdapter.Log log8 = null;
        builder6.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel11 = builder10.logLevel;
        retrofit.RestAdapter.Builder builder12 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("Retrofit-Idle");
        retrofit.Server server15 = builder14.server;
        java.util.concurrent.Executor executor16 = builder14.httpExecutor;
        java.util.concurrent.Executor executor17 = builder14.callbackExecutor;
        retrofit.ErrorHandler errorHandler18 = null;
        builder14.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        java.util.concurrent.Executor executor27 = builder26.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor28 = builder26.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter38 = builder37.build();
        retrofit.Profiler profiler39 = null;
        builder37.profiler = profiler39;
        retrofit.Profiler profiler41 = null;
        builder37.profiler = profiler41;
        retrofit.converter.Converter converter43 = builder37.converter;
        retrofit.RestAdapter.Builder builder44 = builder26.setConverter(converter43);
        retrofit.RestAdapter.Builder builder45 = builder14.setConverter(converter43);
        builder0.converter = converter43;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder47.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter56 = builder55.build();
        retrofit.Profiler profiler57 = null;
        builder55.profiler = profiler57;
        retrofit.Profiler profiler59 = null;
        builder55.profiler = profiler59;
        retrofit.converter.Converter converter61 = builder55.converter;
        retrofit.RestAdapter.Builder builder62 = builder0.setConverter(converter61);
        retrofit.Profiler profiler63 = null;
        builder62.profiler = profiler63;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(converter43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(converter61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test01334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01334");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter7.new RestHandler();
        java.util.concurrent.Executor executor9 = restAdapter7.httpExecutor;
        java.util.concurrent.Executor executor10 = null;
        restAdapter7.callbackExecutor = executor10;
        retrofit.client.Client.Provider provider12 = null;
        restAdapter7.clientProvider = provider12;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter7.logLevel;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        builder15.logLevel = logLevel17;
        java.util.concurrent.Executor executor19 = null;
        builder15.callbackExecutor = executor19;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor22 = null;
        restAdapter21.callbackExecutor = executor22;
        retrofit.converter.Converter converter24 = restAdapter21.converter;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        restAdapter21.log = log25;
        builder15.log = log25;
        restAdapter7.log = log25;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter38 = builder37.build();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.logLevel;
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter38.requestInterceptor;
        restAdapter7.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter.Builder builder42 = builder0.setRequestInterceptor(requestInterceptor40);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        builder43.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder47.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("Retrofit-Idle");
        retrofit.Server server56 = builder55.server;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.client.Client.Provider provider72 = builder65.clientProvider;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        builder65.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder64.setLog(log73);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log73, logLevel76);
        builder43.logLevel = logLevel76;
        retrofit.RestAdapter.LogLevel logLevel79 = builder43.logLevel;
        retrofit.RestAdapter.Builder builder81 = builder43.setServer("Retrofit-Idle");
        retrofit.Server server82 = builder43.server;
        retrofit.RestAdapter.Builder builder83 = builder0.setServer(server82);
        java.util.concurrent.Executor executor84 = builder83.callbackExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(provider72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(executor84);
    }

    @Test
    public void test01335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01335");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = builder15.setLog(log16);
        java.util.concurrent.Executor executor18 = builder15.httpExecutor;
        retrofit.RestAdapter.Builder builder20 = builder15.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter21 = null;
        builder20.converter = converter21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = builder31.setLog(log32);
        java.util.concurrent.Executor executor34 = builder31.httpExecutor;
        retrofit.RestAdapter restAdapter35 = builder31.build();
        java.util.concurrent.Executor executor36 = restAdapter35.httpExecutor;
        builder20.callbackExecutor = executor36;
        restAdapter0.httpExecutor = executor36;
        retrofit.Server server39 = restAdapter0.server;
        retrofit.client.Request request40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request41 = restAdapter0.logAndReplaceRequest(request40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNull(server39);
    }

    @Test
    public void test01336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01336");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = builder8.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel20);
        retrofit.client.Client.Provider provider22 = builder15.clientProvider;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder15.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder14.setLog(log23);
        retrofit.Profiler profiler26 = builder14.profiler;
        java.util.concurrent.Executor executor27 = null;
        builder14.callbackExecutor = executor27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.client.Client.Provider provider36 = builder29.clientProvider;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        builder29.log = log37;
        builder14.log = log37;
        retrofit.RestAdapter.Builder builder40 = builder13.setLog(log37);
        java.util.concurrent.Executor executor41 = builder13.httpExecutor;
        retrofit.client.Client client42 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder43 = builder13.setClient(client42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(provider22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(executor41);
    }

    @Test
    public void test01337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01337");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        retrofit.Profiler profiler11 = builder10.profiler;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider25 = builder18.clientProvider;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        builder18.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder14.setLog(log26);
        retrofit.Server server29 = builder14.server;
        java.util.concurrent.Executor executor30 = null;
        builder14.callbackExecutor = executor30;
        retrofit.converter.Converter converter32 = builder14.converter;
        retrofit.Profiler profiler33 = builder14.profiler;
        retrofit.client.Client.Provider provider34 = builder14.clientProvider;
        retrofit.client.Client.Provider provider35 = builder14.clientProvider;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = builder36.callbackExecutor;
        retrofit.client.Client.Provider provider38 = null;
        builder36.clientProvider = provider38;
        java.util.concurrent.Executor executor40 = builder36.callbackExecutor;
        retrofit.client.Client.Provider provider41 = builder36.clientProvider;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        java.util.concurrent.Executor executor44 = null;
        builder42.httpExecutor = executor44;
        retrofit.Server server46 = builder42.server;
        retrofit.RestAdapter.LogLevel logLevel47 = builder42.logLevel;
        retrofit.client.Client.Provider provider48 = null;
        builder42.clientProvider = provider48;
        retrofit.Server server50 = builder42.server;
        retrofit.RequestInterceptor requestInterceptor51 = builder42.requestInterceptor;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor53 = null;
        restAdapter52.callbackExecutor = executor53;
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        retrofit.converter.Converter converter56 = restAdapter52.converter;
        java.util.concurrent.Executor executor57 = null;
        restAdapter52.callbackExecutor = executor57;
        java.util.concurrent.Executor executor59 = null;
        restAdapter52.httpExecutor = executor59;
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter52.new RestHandler();
        retrofit.converter.Converter converter62 = restAdapter52.converter;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder71 = builder69.setServer("Retrofit-Idle");
        retrofit.Server server72 = builder71.server;
        retrofit.Profiler profiler73 = null;
        builder71.profiler = profiler73;
        retrofit.Profiler profiler75 = null;
        builder71.profiler = profiler75;
        retrofit.RestAdapter restAdapter77 = builder71.build();
        retrofit.ErrorHandler errorHandler78 = builder71.errorHandler;
        restAdapter52.errorHandler = errorHandler78;
        builder42.errorHandler = errorHandler78;
        builder36.errorHandler = errorHandler78;
        retrofit.RestAdapter.Builder builder82 = builder14.setErrorHandler(errorHandler78);
        builder10.errorHandler = errorHandler78;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.Server server85 = builder84.server;
        retrofit.RestAdapter.Log log86 = null;
        builder84.log = log86;
        retrofit.RestAdapter.Builder builder88 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel89 = builder88.logLevel;
        retrofit.RestAdapter.Builder builder90 = builder84.setLogLevel(logLevel89);
        retrofit.RestAdapter.Builder builder92 = builder90.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log93 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder94 = builder92.setLog(log93);
        java.util.concurrent.Executor executor95 = builder92.httpExecutor;
        retrofit.RestAdapter restAdapter96 = builder92.build();
        java.util.concurrent.Executor executor97 = restAdapter96.httpExecutor;
        retrofit.converter.Converter converter98 = restAdapter96.converter;
        builder10.converter = converter98;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNull(converter62);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(errorHandler78);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(server85);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(log93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(executor95);
        org.junit.Assert.assertNotNull(restAdapter96);
        org.junit.Assert.assertNotNull(executor97);
        org.junit.Assert.assertNotNull(converter98);
    }

    @Test
    public void test01338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01338");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel7 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter0.logLevel = logLevel7;
        retrofit.converter.Converter converter9 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = builder10.callbackExecutor;
        retrofit.Profiler profiler12 = builder10.profiler;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("Retrofit-Idle");
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Builder builder25 = builder14.setServer(server24);
        retrofit.RestAdapter restAdapter26 = builder25.build();
        retrofit.Profiler profiler27 = builder25.profiler;
        retrofit.RestAdapter.LogLevel logLevel28 = builder25.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder25.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        builder38.logLevel = logLevel40;
        boolean boolean42 = logLevel40.log();
        builder31.logLevel = logLevel40;
        retrofit.RestAdapter.LogLevel logLevel44 = builder31.logLevel;
        retrofit.Profiler profiler45 = builder31.profiler;
        java.util.concurrent.Executor executor46 = null;
        builder31.httpExecutor = executor46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter48.new RestHandler();
        java.util.concurrent.Executor executor50 = restAdapter48.httpExecutor;
        java.util.concurrent.Executor executor51 = null;
        restAdapter48.callbackExecutor = executor51;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter48.errorHandler = errorHandler53;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter48.logLevel = logLevel55;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter48.logLevel = logLevel57;
        boolean boolean59 = logLevel57.log();
        retrofit.RestAdapter.Builder builder60 = builder31.setLogLevel(logLevel57);
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        boolean boolean62 = logLevel61.log();
        retrofit.RestAdapter.Builder builder63 = builder30.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = builder64.callbackExecutor;
        retrofit.Profiler profiler66 = builder64.profiler;
        retrofit.RestAdapter.Builder builder68 = builder64.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = builder69.server;
        retrofit.RestAdapter.Log log71 = null;
        builder69.log = log71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel74 = builder73.logLevel;
        retrofit.RestAdapter.Builder builder75 = builder69.setLogLevel(logLevel74);
        retrofit.RestAdapter.Builder builder77 = builder75.setServer("Retrofit-Idle");
        retrofit.Server server78 = builder77.server;
        retrofit.RestAdapter.Builder builder79 = builder68.setServer(server78);
        retrofit.RestAdapter restAdapter80 = builder79.build();
        java.util.concurrent.Executor executor81 = restAdapter80.callbackExecutor;
        retrofit.client.Client.Provider provider82 = restAdapter80.clientProvider;
        builder30.clientProvider = provider82;
        restAdapter0.clientProvider = provider82;
        retrofit.RequestInterceptor requestInterceptor85 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(profiler66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNotNull(provider82);
        org.junit.Assert.assertNull(requestInterceptor85);
    }

    @Test
    public void test01339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01339");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        builder18.logLevel = logLevel20;
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel20);
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.client.Client.Provider provider42 = builder35.clientProvider;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        builder35.log = log43;
        retrofit.RestAdapter.Builder builder45 = builder31.setLog(log43);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Log log52 = null;
        builder50.log = log52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel55 = builder54.logLevel;
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel55);
        retrofit.client.Client.Provider provider57 = builder50.clientProvider;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        builder50.log = log58;
        retrofit.RestAdapter.Builder builder60 = builder46.setLog(log58);
        retrofit.RestAdapter.Builder builder61 = builder31.setLog(log58);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        java.util.concurrent.Executor executor64 = null;
        builder62.httpExecutor = executor64;
        retrofit.Server server66 = builder62.server;
        retrofit.RestAdapter.LogLevel logLevel67 = builder62.logLevel;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server9, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log58, logLevel67);
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.Profiler profiler70 = null;
        restAdapter68.profiler = profiler70;
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = null;
        restAdapter68.logLevel = logLevel73;
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter68.logLevel;
        retrofit.client.Response response77 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response79 = restAdapter68.logAndReplaceResponse("", response77, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel75);
    }

    @Test
    public void test01340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01340");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.callbackExecutor = executor7;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("Retrofit-Idle");
        retrofit.Server server22 = builder21.server;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        builder30.logLevel = logLevel32;
        boolean boolean34 = logLevel32.log();
        builder23.logLevel = logLevel32;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder23.requestInterceptor = requestInterceptor36;
        retrofit.converter.Converter converter38 = null;
        builder23.converter = converter38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = builder40.callbackExecutor;
        retrofit.Profiler profiler42 = builder40.profiler;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("Retrofit-Idle");
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Builder builder55 = builder44.setServer(server54);
        retrofit.RestAdapter restAdapter56 = builder55.build();
        java.util.concurrent.Executor executor57 = restAdapter56.callbackExecutor;
        builder23.httpExecutor = executor57;
        builder21.callbackExecutor = executor57;
        builder11.callbackExecutor = executor57;
        restAdapter0.callbackExecutor = executor57;
        java.util.concurrent.Executor executor62 = restAdapter0.callbackExecutor;
        retrofit.client.Client.Provider provider63 = restAdapter0.clientProvider;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor65 = null;
        restAdapter64.callbackExecutor = executor65;
        retrofit.client.Client.Provider provider67 = restAdapter64.clientProvider;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = builder68.callbackExecutor;
        retrofit.Profiler profiler70 = builder68.profiler;
        retrofit.RestAdapter.Builder builder72 = builder68.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Log log75 = null;
        builder73.log = log75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel78 = builder77.logLevel;
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder81 = builder79.setServer("Retrofit-Idle");
        retrofit.Server server82 = builder81.server;
        retrofit.RestAdapter.Builder builder83 = builder72.setServer(server82);
        retrofit.RestAdapter restAdapter84 = builder83.build();
        retrofit.Profiler profiler85 = builder83.profiler;
        retrofit.RestAdapter.LogLevel logLevel86 = builder83.logLevel;
        retrofit.RestAdapter.Builder builder88 = builder83.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor89 = builder88.callbackExecutor;
        restAdapter64.httpExecutor = executor89;
        restAdapter0.httpExecutor = executor89;
        java.lang.Throwable throwable92 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable92, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(profiler70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNull(profiler85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(executor89);
    }

    @Test
    public void test01341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01341");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = builder2.server;
        retrofit.RestAdapter.Log log4 = null;
        builder2.log = log4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel7 = builder6.logLevel;
        retrofit.RestAdapter.Builder builder8 = builder2.setLogLevel(logLevel7);
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("Retrofit-Idle");
        retrofit.Server server11 = builder10.server;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        builder20.logLevel = logLevel22;
        boolean boolean24 = logLevel22.log();
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel22);
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.client.Client.Provider provider44 = builder37.clientProvider;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        builder37.log = log45;
        retrofit.RestAdapter.Builder builder47 = builder33.setLog(log45);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = builder52.server;
        retrofit.RestAdapter.Log log54 = null;
        builder52.log = log54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel57 = builder56.logLevel;
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel57);
        retrofit.client.Client.Provider provider59 = builder52.clientProvider;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        builder52.log = log60;
        retrofit.RestAdapter.Builder builder62 = builder48.setLog(log60);
        retrofit.RestAdapter.Builder builder63 = builder33.setLog(log60);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        java.util.concurrent.Executor executor66 = null;
        builder64.httpExecutor = executor66;
        retrofit.Server server68 = builder64.server;
        retrofit.RestAdapter.LogLevel logLevel69 = builder64.logLevel;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server11, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log60, logLevel69);
        builder0.server = server11;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = builder72.callbackExecutor;
        retrofit.Profiler profiler74 = builder72.profiler;
        retrofit.RestAdapter.Builder builder76 = builder72.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter77 = builder76.converter;
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("Retrofit-Idle");
        retrofit.Server server80 = builder76.server;
        builder0.server = server80;
        java.util.concurrent.Executor executor82 = builder0.httpExecutor;
        retrofit.Server server83 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder84 = builder0.setServer(server83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(profiler74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(server80);
        org.junit.Assert.assertNull(executor82);
    }

    @Test
    public void test01342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01342");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = builder8.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel14 = builder8.logLevel;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        builder8.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        retrofit.Server server21 = builder17.server;
        retrofit.RestAdapter.LogLevel logLevel22 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        java.util.concurrent.Executor executor30 = builder29.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor31 = builder29.requestInterceptor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Log log34 = null;
        builder32.log = log34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder40 = builder38.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter41 = builder40.build();
        retrofit.Profiler profiler42 = null;
        builder40.profiler = profiler42;
        retrofit.Profiler profiler44 = null;
        builder40.profiler = profiler44;
        retrofit.converter.Converter converter46 = builder40.converter;
        retrofit.RestAdapter.Builder builder47 = builder29.setConverter(converter46);
        builder17.converter = converter46;
        retrofit.RestAdapter.Builder builder49 = builder8.setConverter(converter46);
        java.lang.Class<?> wildcardClass50 = builder8.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(restAdapter41);
        org.junit.Assert.assertNotNull(converter46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test01343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01343");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = builder8.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider14 = null;
        builder8.clientProvider = provider14;
        retrofit.ErrorHandler errorHandler16 = null;
        builder8.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = builder8.converter;
        java.lang.Class<?> wildcardClass19 = builder8.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test01344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01344");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.converter.Converter converter10 = null;
        builder8.converter = converter10;
        java.util.concurrent.Executor executor12 = null;
        builder8.httpExecutor = executor12;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler9);
    }

    @Test
    public void test01345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01345");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        java.util.concurrent.Executor executor9 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test01346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01346");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.client.Response response8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response10 = restAdapter0.logAndReplaceResponse("Retrofit-", response8, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(requestInterceptor6);
    }

    @Test
    public void test01347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01347");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        retrofit.converter.Converter converter15 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor16 = builder0.requestInterceptor;
        retrofit.RestAdapter.Log log17 = builder0.log;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(log17);
    }

    @Test
    public void test01348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01348");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel51);
        builder0.log = log27;
        java.util.concurrent.Executor executor56 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("Retrofit-Idle");
        retrofit.Server server66 = builder65.server;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.Server server76 = builder75.server;
        retrofit.RestAdapter.Log log77 = null;
        builder75.log = log77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel80 = builder79.logLevel;
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel80);
        retrofit.client.Client.Provider provider82 = builder75.clientProvider;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        builder75.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder74.setLog(log83);
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log83, logLevel86);
        retrofit.RestAdapter.Builder builder88 = builder0.setServer(server66);
        builder88.ensureSaneDefaults();
        retrofit.Profiler profiler90 = builder88.profiler;
        retrofit.RestAdapter.LogLevel logLevel91 = builder88.logLevel;
        boolean boolean92 = logLevel91.log();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(provider82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test01349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01349");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel2 = builder1.logLevel;
        builder0.logLevel = logLevel2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("Retrofit-Idle");
        retrofit.Server server13 = builder12.server;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.client.Client.Provider provider29 = builder22.clientProvider;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        builder22.log = log30;
        retrofit.RestAdapter.Builder builder32 = builder21.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log30, logLevel33);
        builder0.logLevel = logLevel33;
        retrofit.RestAdapter.LogLevel logLevel36 = builder0.logLevel;
        retrofit.Profiler profiler37 = builder0.profiler;
        retrofit.RestAdapter.Builder builder39 = builder0.setServer("Retrofit-");
        java.util.concurrent.Executor executor40 = null;
        builder39.callbackExecutor = executor40;
        retrofit.Server server42 = builder39.server;
        retrofit.client.Client client43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder44 = builder39.setClient(client43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(server42);
    }

    @Test
    public void test01350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01350");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.callbackExecutor;
        retrofit.Profiler profiler7 = builder5.profiler;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Builder builder20 = builder9.setServer(server19);
        retrofit.RestAdapter restAdapter21 = builder20.build();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        builder29.logLevel = logLevel31;
        boolean boolean33 = logLevel31.log();
        builder22.logLevel = logLevel31;
        retrofit.RestAdapter.LogLevel logLevel35 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder20.setLogLevel(logLevel35);
        restAdapter0.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        builder38.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("Retrofit-Idle");
        retrofit.Server server51 = builder50.server;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = builder60.server;
        retrofit.RestAdapter.Log log62 = null;
        builder60.log = log62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel65 = builder64.logLevel;
        retrofit.RestAdapter.Builder builder66 = builder60.setLogLevel(logLevel65);
        retrofit.client.Client.Provider provider67 = builder60.clientProvider;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        builder60.log = log68;
        retrofit.RestAdapter.Builder builder70 = builder59.setLog(log68);
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log68, logLevel71);
        builder38.logLevel = logLevel71;
        retrofit.RestAdapter.LogLevel logLevel74 = builder38.logLevel;
        boolean boolean75 = logLevel74.log();
        restAdapter0.logLevel = logLevel74;
        retrofit.RestAdapter.Log log77 = null;
        restAdapter0.log = log77;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test01351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01351");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.httpExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.client.Client.Provider provider7 = restAdapter0.clientProvider;
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter0.requestInterceptor;
        java.lang.Throwable throwable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable10, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(requestInterceptor9);
    }

    @Test
    public void test01352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01352");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = builder0.converter;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.RestAdapter restAdapter14 = builder12.build();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("Retrofit-Idle");
        retrofit.Server server24 = builder23.server;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel38);
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = builder52.server;
        retrofit.RestAdapter.Log log54 = null;
        builder52.log = log54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel57 = builder56.logLevel;
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel57);
        retrofit.client.Client.Provider provider59 = builder52.clientProvider;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        builder52.log = log60;
        retrofit.RestAdapter.Builder builder62 = builder48.setLog(log60);
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server24, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log60, logLevel63);
        restAdapter14.server = server24;
        retrofit.RestAdapter.Builder builder66 = builder0.setServer(server24);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder68 = builder66.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test01353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01353");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.RestAdapter restAdapter22 = builder20.build();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter25.new RestHandler();
        java.util.concurrent.Executor executor27 = restAdapter25.httpExecutor;
        java.util.concurrent.Executor executor28 = null;
        restAdapter25.callbackExecutor = executor28;
        retrofit.client.Client.Provider provider30 = null;
        restAdapter25.clientProvider = provider30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Log log34 = null;
        builder32.log = log34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder40 = builder38.setServer("Retrofit-Idle");
        retrofit.Server server41 = builder40.server;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Log log52 = null;
        builder50.log = log52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel55 = builder54.logLevel;
        retrofit.RestAdapter.Builder builder56 = builder50.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder58 = builder56.setServer("Retrofit-Idle");
        retrofit.Server server59 = builder58.server;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = null;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = builder68.server;
        retrofit.RestAdapter.Log log70 = null;
        builder68.log = log70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel73 = builder72.logLevel;
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel73);
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel73);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel73);
        restAdapter25.log = log49;
        log49.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder80 = builder23.setLog(log49);
        builder20.log = log49;
        retrofit.RestAdapter.Log log82 = builder20.log;
        retrofit.client.Client.Provider provider83 = builder20.clientProvider;
        builder8.clientProvider = provider83;
        retrofit.RequestInterceptor requestInterceptor85 = builder8.requestInterceptor;
        retrofit.converter.Converter converter86 = builder8.converter;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(provider83);
        org.junit.Assert.assertNull(requestInterceptor85);
        org.junit.Assert.assertNull(converter86);
    }

    @Test
    public void test01354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01354");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.RestAdapter.Log log17 = builder15.log;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.RestAdapter restAdapter28 = builder26.build();
        java.util.concurrent.Executor executor29 = null;
        restAdapter28.httpExecutor = executor29;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter28.new RestHandler();
        retrofit.client.Client.Provider provider32 = null;
        restAdapter28.clientProvider = provider32;
        retrofit.converter.Converter converter34 = restAdapter28.converter;
        retrofit.RestAdapter.Builder builder35 = builder15.setConverter(converter34);
        retrofit.client.Client client36 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder37 = builder35.setClient(client36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(converter34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test01355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01355");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder0.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.Log log9 = builder0.log;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        builder17.logLevel = logLevel19;
        boolean boolean21 = logLevel19.log();
        builder10.logLevel = logLevel19;
        retrofit.RestAdapter.Builder builder23 = builder0.setLogLevel(logLevel19);
        java.util.concurrent.Executor executor24 = builder23.callbackExecutor;
        builder23.ensureSaneDefaults();
        java.util.concurrent.Executor executor26 = builder23.httpExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        java.util.concurrent.Executor executor38 = builder35.httpExecutor;
        retrofit.RestAdapter.Builder builder40 = builder35.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider49 = builder42.clientProvider;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        builder42.log = log50;
        retrofit.RestAdapter.Builder builder52 = builder41.setLog(log50);
        retrofit.Profiler profiler53 = builder41.profiler;
        java.util.concurrent.Executor executor54 = null;
        builder41.callbackExecutor = executor54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.client.Client.Provider provider63 = builder56.clientProvider;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        builder56.log = log64;
        builder41.log = log64;
        retrofit.RestAdapter.Builder builder67 = builder40.setLog(log64);
        retrofit.RestAdapter.Builder builder68 = builder23.setLog(log64);
        retrofit.client.Client client69 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder70 = builder23.setClient(client69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test01356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01356");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.client.Request request8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request9 = restAdapter0.logAndReplaceRequest(request8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel7);
    }

    @Test
    public void test01357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01357");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.Profiler profiler17 = builder15.profiler;
        retrofit.RestAdapter.LogLevel logLevel18 = builder15.logLevel;
        java.util.concurrent.Executor executor19 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        java.util.concurrent.Executor executor22 = null;
        builder20.httpExecutor = executor22;
        retrofit.Server server24 = builder20.server;
        retrofit.RestAdapter.LogLevel logLevel25 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = builder26.server;
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel31);
        java.util.concurrent.Executor executor33 = builder32.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor34 = builder32.requestInterceptor;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter44 = builder43.build();
        retrofit.Profiler profiler45 = null;
        builder43.profiler = profiler45;
        retrofit.Profiler profiler47 = null;
        builder43.profiler = profiler47;
        retrofit.converter.Converter converter49 = builder43.converter;
        retrofit.RestAdapter.Builder builder50 = builder32.setConverter(converter49);
        builder20.converter = converter49;
        retrofit.RestAdapter.Builder builder52 = builder15.setConverter(converter49);
        retrofit.client.Client client53 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder54 = builder52.setClient(client53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(converter49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test01358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01358");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter0.clientProvider = provider9;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = builder12.callbackExecutor;
        retrofit.Profiler profiler14 = builder12.profiler;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("Retrofit-Idle");
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Builder builder27 = builder16.setServer(server26);
        retrofit.RestAdapter.Log log28 = builder27.log;
        retrofit.RestAdapter.LogLevel logLevel29 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel39 = builder38.logLevel;
        builder37.logLevel = logLevel39;
        boolean boolean41 = logLevel39.log();
        builder30.logLevel = logLevel39;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        builder30.requestInterceptor = requestInterceptor43;
        retrofit.converter.Converter converter45 = null;
        builder30.converter = converter45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = builder47.callbackExecutor;
        retrofit.Profiler profiler49 = builder47.profiler;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = builder52.server;
        retrofit.RestAdapter.Log log54 = null;
        builder52.log = log54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel57 = builder56.logLevel;
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel57);
        retrofit.RestAdapter.Builder builder60 = builder58.setServer("Retrofit-Idle");
        retrofit.Server server61 = builder60.server;
        retrofit.RestAdapter.Builder builder62 = builder51.setServer(server61);
        retrofit.RestAdapter restAdapter63 = builder62.build();
        java.util.concurrent.Executor executor64 = restAdapter63.callbackExecutor;
        builder30.httpExecutor = executor64;
        builder27.httpExecutor = executor64;
        restAdapter0.callbackExecutor = executor64;
        retrofit.client.Response response69 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response71 = restAdapter0.logAndReplaceResponse("hi!", response69, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(executor64);
    }

    @Test
    public void test01359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01359");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.converter.Converter converter14 = null;
        builder0.converter = converter14;
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor17 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel48 = builder47.logLevel;
        builder46.logLevel = logLevel48;
        boolean boolean50 = logLevel48.log();
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.Profiler profiler52 = null;
        restAdapter51.profiler = profiler52;
        retrofit.Server server54 = restAdapter51.server;
        retrofit.RestAdapter.Builder builder55 = builder26.setServer(server54);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        builder60.logLevel = logLevel62;
        java.util.concurrent.Executor executor64 = null;
        builder60.callbackExecutor = executor64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor67 = null;
        restAdapter66.callbackExecutor = executor67;
        retrofit.converter.Converter converter69 = restAdapter66.converter;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter66.log = log70;
        builder60.log = log70;
        builder56.log = log70;
        log70.log("Retrofit-Idle");
        log70.log("");
        log70.log("Retrofit-Idle");
        log70.log("");
        retrofit.RestAdapter.Builder builder82 = builder55.setLog(log70);
        retrofit.RestAdapter.Builder builder83 = builder0.setLog(log70);
        log70.log("");
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test01360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01360");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor3 = builder2.callbackExecutor;
        retrofit.Profiler profiler4 = builder2.profiler;
        retrofit.RestAdapter.Builder builder6 = builder2.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Builder builder17 = builder6.setServer(server16);
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider32 = builder25.clientProvider;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        builder25.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("Retrofit-Idle");
        retrofit.Server server44 = builder43.server;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("Retrofit-Idle");
        retrofit.Server server62 = builder61.server;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = null;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel76);
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel76);
        builder25.log = log52;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel85 = builder84.logLevel;
        builder83.logLevel = logLevel85;
        builder81.logLevel = logLevel85;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server16, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log52, logLevel85);
        builder0.server = server16;
        retrofit.Profiler profiler90 = builder0.profiler;
        java.util.concurrent.Executor executor91 = null;
        builder0.callbackExecutor = executor91;
        retrofit.RestAdapter.Builder builder94 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log95 = builder94.log;
        retrofit.client.Client.Provider provider96 = builder94.clientProvider;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(log95);
        org.junit.Assert.assertNull(provider96);
    }

    @Test
    public void test01361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01361");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter18 = builder17.build();
        retrofit.Profiler profiler19 = null;
        builder17.profiler = profiler19;
        retrofit.RestAdapter restAdapter21 = builder17.build();
        retrofit.client.Client.Provider provider22 = builder17.clientProvider;
        retrofit.RestAdapter.Builder builder23 = builder0.setClient(provider22);
        builder23.ensureSaneDefaults();
        retrofit.Profiler profiler25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder26 = builder23.setProfiler(profiler25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(provider22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test01362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01362");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        java.util.concurrent.Executor executor5 = null;
        restAdapter0.callbackExecutor = executor5;
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.httpExecutor = executor7;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        builder10.logLevel = logLevel12;
        java.util.concurrent.Executor executor14 = null;
        builder10.callbackExecutor = executor14;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = null;
        restAdapter16.callbackExecutor = executor17;
        retrofit.converter.Converter converter19 = restAdapter16.converter;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        restAdapter16.log = log20;
        builder10.log = log20;
        restAdapter0.log = log20;
        retrofit.Profiler profiler24 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter0.getLogLevel();
        retrofit.Server server26 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        java.util.concurrent.Executor executor38 = builder35.httpExecutor;
        retrofit.RestAdapter.Builder builder40 = builder35.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter41 = null;
        builder40.converter = converter41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel48 = builder47.logLevel;
        retrofit.RestAdapter.Builder builder49 = builder43.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder51.setLog(log52);
        java.util.concurrent.Executor executor54 = builder51.httpExecutor;
        retrofit.RestAdapter restAdapter55 = builder51.build();
        java.util.concurrent.Executor executor56 = restAdapter55.httpExecutor;
        builder40.callbackExecutor = executor56;
        restAdapter0.httpExecutor = executor56;
        retrofit.converter.Converter converter59 = restAdapter0.converter;
        java.util.concurrent.Executor executor60 = null;
        restAdapter0.httpExecutor = executor60;
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(converter59);
    }

    @Test
    public void test01363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01363");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder0.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider25 = builder18.clientProvider;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        builder18.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("Retrofit-Idle");
        retrofit.Server server55 = builder54.server;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = null;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel69);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel69);
        builder18.log = log45;
        builder0.log = log45;
        retrofit.Profiler profiler75 = builder0.profiler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(profiler75);
    }

    @Test
    public void test01364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01364");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.client.Client.Provider provider17 = null;
        restAdapter16.clientProvider = provider17;
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter16.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter16.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter16.new RestHandler();
        retrofit.client.Client.Provider provider23 = restAdapter16.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNull(provider23);
    }

    @Test
    public void test01365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01365");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = null;
        restAdapter7.callbackExecutor = executor8;
        retrofit.converter.Converter converter10 = restAdapter7.converter;
        java.util.concurrent.Executor executor11 = restAdapter7.httpExecutor;
        retrofit.converter.Converter converter12 = restAdapter7.converter;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter7.logLevel;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder20 = builder14.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider23 = null;
        builder20.clientProvider = provider23;
        retrofit.Server server25 = builder20.server;
        restAdapter7.server = server25;
        retrofit.RestAdapter.Builder builder27 = builder0.setServer(server25);
        retrofit.client.Client client28 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder29 = builder27.setClient(client28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test01366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01366");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        retrofit.RestAdapter.Log log11 = builder8.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = builder20.setLog(log21);
        builder8.log = log21;
        java.lang.Class<?> wildcardClass24 = log21.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test01367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01367");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.Profiler profiler12 = null;
        builder8.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = builder8.build();
        retrofit.ErrorHandler errorHandler15 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("Retrofit-Idle");
        retrofit.Server server25 = builder24.server;
        java.util.concurrent.Executor executor26 = builder24.httpExecutor;
        java.util.concurrent.Executor executor27 = builder24.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter30.new RestHandler();
        java.util.concurrent.Executor executor32 = restAdapter30.httpExecutor;
        java.util.concurrent.Executor executor33 = null;
        restAdapter30.callbackExecutor = executor33;
        retrofit.client.Client.Provider provider35 = null;
        restAdapter30.clientProvider = provider35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("Retrofit-Idle");
        retrofit.Server server46 = builder45.server;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder63 = builder61.setServer("Retrofit-Idle");
        retrofit.Server server64 = builder63.server;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = null;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Log log75 = null;
        builder73.log = log75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel78 = builder77.logLevel;
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel78);
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel78);
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel78);
        restAdapter30.log = log54;
        log54.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder85 = builder28.setLog(log54);
        retrofit.RestAdapter.Builder builder86 = builder24.setLog(log54);
        log54.log("hi!");
        builder8.log = log54;
        builder8.ensureSaneDefaults();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(errorHandler15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(server64);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test01368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01368");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.client.Client client5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setClient(client5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter4);
    }

    @Test
    public void test01369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01369");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        java.util.concurrent.Executor executor5 = null;
        restAdapter0.callbackExecutor = executor5;
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.httpExecutor = executor7;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter10 = null;
        restAdapter0.converter = converter10;
        retrofit.Server server12 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder20 = builder14.setLogLevel(logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder22.setLog(log23);
        java.util.concurrent.Executor executor25 = builder22.httpExecutor;
        retrofit.RestAdapter.Builder builder27 = builder22.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.client.Client.Provider provider36 = builder29.clientProvider;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        builder29.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder28.setLog(log37);
        retrofit.Profiler profiler40 = builder28.profiler;
        java.util.concurrent.Executor executor41 = null;
        builder28.callbackExecutor = executor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel48 = builder47.logLevel;
        retrofit.RestAdapter.Builder builder49 = builder43.setLogLevel(logLevel48);
        retrofit.client.Client.Provider provider50 = builder43.clientProvider;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        builder43.log = log51;
        builder28.log = log51;
        retrofit.RestAdapter.Builder builder54 = builder27.setLog(log51);
        retrofit.RequestInterceptor requestInterceptor55 = builder54.requestInterceptor;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel57 = builder56.logLevel;
        retrofit.RestAdapter.Builder builder58 = builder54.setLogLevel(logLevel57);
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(provider50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test01370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01370");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.Profiler profiler17 = builder15.profiler;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Builder builder30 = builder19.setServer(server29);
        retrofit.RestAdapter.Builder builder31 = builder0.setServer(server29);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Log log34 = null;
        builder32.log = log34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder40 = builder38.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        java.util.concurrent.Executor executor43 = builder40.httpExecutor;
        retrofit.RestAdapter.Builder builder45 = builder40.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter46 = null;
        builder45.converter = converter46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        java.util.concurrent.Executor executor59 = builder56.httpExecutor;
        retrofit.RestAdapter restAdapter60 = builder56.build();
        java.util.concurrent.Executor executor61 = restAdapter60.httpExecutor;
        builder45.callbackExecutor = executor61;
        builder0.callbackExecutor = executor61;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder74 = builder72.setLog(log73);
        java.util.concurrent.Executor executor75 = builder72.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel76 = builder72.logLevel;
        builder0.logLevel = logLevel76;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor79 = null;
        restAdapter78.httpExecutor = executor79;
        java.util.concurrent.Executor executor81 = null;
        restAdapter78.httpExecutor = executor81;
        retrofit.RestAdapter.RestHandler restHandler83 = restAdapter78.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor84 = null;
        restAdapter78.requestInterceptor = requestInterceptor84;
        java.util.concurrent.Executor executor86 = restAdapter78.httpExecutor;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler88 = restAdapter87.new RestHandler();
        java.util.concurrent.Executor executor89 = restAdapter87.httpExecutor;
        java.util.concurrent.Executor executor90 = null;
        restAdapter87.callbackExecutor = executor90;
        retrofit.ErrorHandler errorHandler92 = null;
        restAdapter87.errorHandler = errorHandler92;
        retrofit.RestAdapter.LogLevel logLevel94 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter87.logLevel = logLevel94;
        restAdapter78.logLevel = logLevel94;
        retrofit.RestAdapter.Builder builder97 = builder0.setLogLevel(logLevel94);
        retrofit.Profiler profiler98 = null;
        builder0.profiler = profiler98;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor86);
        org.junit.Assert.assertNull(executor89);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test01371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01371");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        java.util.concurrent.Executor executor8 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        builder16.logLevel = logLevel18;
        boolean boolean20 = logLevel18.log();
        builder9.logLevel = logLevel18;
        retrofit.RestAdapter.LogLevel logLevel22 = builder9.logLevel;
        retrofit.Profiler profiler23 = builder9.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.callbackExecutor;
        retrofit.Profiler profiler26 = builder24.profiler;
        retrofit.RestAdapter.Builder builder28 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Builder builder39 = builder28.setServer(server38);
        retrofit.RestAdapter.Builder builder40 = builder9.setServer(server38);
        retrofit.RestAdapter.Builder builder41 = builder6.setServer(server38);
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider60 = builder53.clientProvider;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        builder53.log = log61;
        retrofit.RestAdapter.Builder builder63 = builder49.setLog(log61);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel69 = builder68.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter73 = builder72.build();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.logLevel;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server38, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log61, logLevel74);
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.client.Client.Provider provider77 = null;
        restAdapter75.clientProvider = provider77;
        retrofit.RequestInterceptor requestInterceptor79 = restAdapter75.requestInterceptor;
        retrofit.RestAdapter.Log log80 = restAdapter75.log;
        log80.log("hi!");
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor79);
        org.junit.Assert.assertNotNull(log80);
    }

    @Test
    public void test01372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01372");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        java.util.concurrent.Executor executor12 = null;
        builder8.httpExecutor = executor12;
        java.util.concurrent.Executor executor14 = builder8.callbackExecutor;
        retrofit.converter.Converter converter15 = builder8.converter;
        retrofit.Profiler profiler16 = builder8.profiler;
        retrofit.Profiler profiler17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder8.setProfiler(profiler17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(profiler16);
    }

    @Test
    public void test01373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01373");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.Profiler profiler7 = null;
        builder0.profiler = profiler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        retrofit.client.Client.Provider provider20 = builder13.clientProvider;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder9.setLog(log21);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        java.util.concurrent.Executor executor26 = restAdapter24.httpExecutor;
        java.util.concurrent.Executor executor27 = null;
        restAdapter24.callbackExecutor = executor27;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter24.errorHandler = errorHandler29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter24.logLevel = logLevel31;
        builder9.logLevel = logLevel31;
        builder9.ensureSaneDefaults();
        java.util.concurrent.Executor executor35 = builder9.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.client.Client.Provider provider47 = builder40.clientProvider;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        builder40.log = log48;
        retrofit.RestAdapter.Builder builder50 = builder36.setLog(log48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider62 = builder55.clientProvider;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        builder55.log = log63;
        retrofit.RestAdapter.Builder builder65 = builder51.setLog(log63);
        retrofit.RestAdapter.Builder builder66 = builder36.setLog(log63);
        retrofit.ErrorHandler errorHandler67 = null;
        builder66.errorHandler = errorHandler67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = builder69.callbackExecutor;
        retrofit.Profiler profiler71 = builder69.profiler;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = builder74.server;
        retrofit.RestAdapter.Log log76 = null;
        builder74.log = log76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel79 = builder78.logLevel;
        retrofit.RestAdapter.Builder builder80 = builder74.setLogLevel(logLevel79);
        retrofit.RestAdapter.Builder builder82 = builder80.setServer("Retrofit-Idle");
        retrofit.Server server83 = builder82.server;
        retrofit.RestAdapter.Builder builder84 = builder73.setServer(server83);
        retrofit.RestAdapter restAdapter85 = builder84.build();
        java.util.concurrent.Executor executor86 = restAdapter85.callbackExecutor;
        builder66.httpExecutor = executor86;
        retrofit.RestAdapter.Builder builder88 = builder0.setExecutors(executor35, executor86);
        retrofit.client.Client.Provider provider89 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder90 = builder88.setClient(provider89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(server75);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test01374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01374");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.httpExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter8 = null;
        restAdapter0.converter = converter8;
        retrofit.RequestInterceptor requestInterceptor10 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = builder11.callbackExecutor;
        retrofit.Profiler profiler13 = builder11.profiler;
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter24 = builder23.build();
        retrofit.converter.Converter converter25 = restAdapter24.converter;
        builder11.converter = converter25;
        restAdapter0.converter = converter25;
        retrofit.Server server28 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(converter25);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(logLevel29);
    }

    @Test
    public void test01375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01375");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder13 = builder8.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel20);
        retrofit.client.Client.Provider provider22 = builder15.clientProvider;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder15.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder14.setLog(log23);
        retrofit.Profiler profiler26 = builder14.profiler;
        java.util.concurrent.Executor executor27 = null;
        builder14.callbackExecutor = executor27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.client.Client.Provider provider36 = builder29.clientProvider;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        builder29.log = log37;
        builder14.log = log37;
        retrofit.RestAdapter.Builder builder40 = builder13.setLog(log37);
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor42 = null;
        restAdapter41.callbackExecutor = executor42;
        retrofit.converter.Converter converter44 = null;
        restAdapter41.converter = converter44;
        java.util.concurrent.Executor executor46 = restAdapter41.callbackExecutor;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder47.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder55.setLog(log56);
        java.util.concurrent.Executor executor58 = builder55.httpExecutor;
        retrofit.RestAdapter.Builder builder60 = builder55.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel61 = builder55.logLevel;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        builder55.logLevel = logLevel62;
        restAdapter41.logLevel = logLevel62;
        builder40.logLevel = logLevel62;
        retrofit.Server server66 = builder40.server;
        retrofit.client.Client.Provider provider67 = builder40.clientProvider;
        retrofit.ErrorHandler errorHandler68 = builder40.errorHandler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(provider22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNull(errorHandler68);
    }

    @Test
    public void test01376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01376");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = builder6.server;
        retrofit.RestAdapter.Log log8 = null;
        builder6.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel11 = builder10.logLevel;
        retrofit.RestAdapter.Builder builder12 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("Retrofit-Idle");
        retrofit.Server server15 = builder14.server;
        java.util.concurrent.Executor executor16 = builder14.httpExecutor;
        java.util.concurrent.Executor executor17 = builder14.callbackExecutor;
        retrofit.ErrorHandler errorHandler18 = null;
        builder14.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        java.util.concurrent.Executor executor27 = builder26.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor28 = builder26.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter38 = builder37.build();
        retrofit.Profiler profiler39 = null;
        builder37.profiler = profiler39;
        retrofit.Profiler profiler41 = null;
        builder37.profiler = profiler41;
        retrofit.converter.Converter converter43 = builder37.converter;
        retrofit.RestAdapter.Builder builder44 = builder26.setConverter(converter43);
        retrofit.RestAdapter.Builder builder45 = builder14.setConverter(converter43);
        builder0.converter = converter43;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder47.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter56 = builder55.build();
        retrofit.Profiler profiler57 = null;
        builder55.profiler = profiler57;
        retrofit.Profiler profiler59 = null;
        builder55.profiler = profiler59;
        retrofit.converter.Converter converter61 = builder55.converter;
        retrofit.RestAdapter.Builder builder62 = builder0.setConverter(converter61);
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel68);
        java.util.concurrent.Executor executor70 = builder69.callbackExecutor;
        java.util.concurrent.Executor executor71 = builder69.callbackExecutor;
        retrofit.Profiler profiler72 = null;
        builder69.profiler = profiler72;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter74.new RestHandler();
        java.util.concurrent.Executor executor76 = restAdapter74.httpExecutor;
        java.util.concurrent.Executor executor77 = null;
        restAdapter74.callbackExecutor = executor77;
        retrofit.client.Client.Provider provider79 = null;
        restAdapter74.clientProvider = provider79;
        java.util.concurrent.Executor executor81 = null;
        restAdapter74.callbackExecutor = executor81;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server84 = builder83.server;
        retrofit.RestAdapter.Log log85 = null;
        builder83.log = log85;
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel88 = builder87.logLevel;
        retrofit.RestAdapter.Builder builder89 = builder83.setLogLevel(logLevel88);
        retrofit.RestAdapter.Builder builder91 = builder89.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter92 = builder91.build();
        retrofit.RestAdapter.LogLevel logLevel93 = restAdapter92.logLevel;
        retrofit.RequestInterceptor requestInterceptor94 = restAdapter92.requestInterceptor;
        restAdapter74.requestInterceptor = requestInterceptor94;
        retrofit.RestAdapter.Builder builder96 = builder69.setRequestInterceptor(requestInterceptor94);
        retrofit.RestAdapter.Builder builder97 = builder0.setRequestInterceptor(requestInterceptor94);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(converter43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(converter61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNull(server84);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor94);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test01377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01377");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder0.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter15.requestInterceptor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        retrofit.Server server21 = builder17.server;
        retrofit.RestAdapter.LogLevel logLevel22 = builder17.logLevel;
        retrofit.ErrorHandler errorHandler23 = builder17.errorHandler;
        retrofit.client.Client.Provider provider24 = builder17.clientProvider;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.callbackExecutor;
        retrofit.Profiler profiler27 = builder25.profiler;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder36.setServer("Retrofit-Idle");
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Builder builder40 = builder29.setServer(server39);
        retrofit.RestAdapter restAdapter41 = builder40.build();
        retrofit.RestAdapter.Log log42 = builder40.log;
        retrofit.Profiler profiler43 = builder40.profiler;
        retrofit.Server server44 = builder40.server;
        retrofit.client.Client.Provider provider45 = builder40.clientProvider;
        retrofit.RestAdapter.Builder builder46 = builder17.setClient(provider45);
        restAdapter15.clientProvider = provider45;
        builder0.clientProvider = provider45;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter49.new RestHandler();
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter49.errorHandler = errorHandler51;
        retrofit.RestAdapter.Log log53 = restAdapter49.log;
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        java.util.concurrent.Executor executor63 = builder62.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor64 = builder62.requestInterceptor;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder73 = builder71.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter74 = builder73.build();
        retrofit.Profiler profiler75 = null;
        builder73.profiler = profiler75;
        retrofit.Profiler profiler77 = null;
        builder73.profiler = profiler77;
        retrofit.converter.Converter converter79 = builder73.converter;
        retrofit.RestAdapter.Builder builder80 = builder62.setConverter(converter79);
        restAdapter49.converter = converter79;
        retrofit.converter.Converter converter82 = restAdapter49.converter;
        retrofit.RestAdapter.Builder builder83 = builder0.setConverter(converter82);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter84 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(server39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(restAdapter41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(provider45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(converter79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(converter82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test01378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01378");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter5 = builder4.converter;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        retrofit.client.Client.Provider provider8 = null;
        builder6.clientProvider = provider8;
        java.util.concurrent.Executor executor10 = builder6.callbackExecutor;
        retrofit.client.Client.Provider provider11 = builder6.clientProvider;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Builder builder23 = builder20.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        java.util.concurrent.Executor executor26 = restAdapter24.httpExecutor;
        java.util.concurrent.Executor executor27 = null;
        restAdapter24.callbackExecutor = executor27;
        retrofit.client.Client.Provider provider29 = null;
        restAdapter24.clientProvider = provider29;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter24.logLevel;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        builder32.logLevel = logLevel34;
        java.util.concurrent.Executor executor36 = null;
        builder32.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = null;
        restAdapter38.callbackExecutor = executor39;
        retrofit.converter.Converter converter41 = restAdapter38.converter;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        restAdapter38.log = log42;
        builder32.log = log42;
        restAdapter24.log = log42;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter55 = builder54.build();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.logLevel;
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter55.requestInterceptor;
        restAdapter24.requestInterceptor = requestInterceptor57;
        builder20.requestInterceptor = requestInterceptor57;
        builder6.requestInterceptor = requestInterceptor57;
        builder4.requestInterceptor = requestInterceptor57;
        java.util.concurrent.Executor executor62 = builder4.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNull(executor62);
    }

    @Test
    public void test01379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01379");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        java.util.concurrent.Executor executor16 = builder0.callbackExecutor;
        retrofit.Profiler profiler17 = builder0.profiler;
        retrofit.ErrorHandler errorHandler18 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.ErrorHandler errorHandler21 = null;
        builder19.errorHandler = errorHandler21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.Server server32 = builder31.server;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("Retrofit-Idle");
        retrofit.Server server50 = builder49.server;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = null;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = builder59.server;
        retrofit.RestAdapter.Log log61 = null;
        builder59.log = log61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        retrofit.RestAdapter.Builder builder65 = builder59.setLogLevel(logLevel64);
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel64);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel64);
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.Server server76 = builder75.server;
        retrofit.RestAdapter.Log log77 = null;
        builder75.log = log77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = builder79.server;
        retrofit.RestAdapter.Log log81 = null;
        builder79.log = log81;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel84 = builder83.logLevel;
        retrofit.RestAdapter.Builder builder85 = builder79.setLogLevel(logLevel84);
        retrofit.client.Client.Provider provider86 = builder79.clientProvider;
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        builder79.log = log87;
        retrofit.RestAdapter.Builder builder89 = builder75.setLog(log87);
        retrofit.RestAdapter.Builder builder90 = new retrofit.RestAdapter.Builder();
        retrofit.Server server91 = builder90.server;
        retrofit.RestAdapter.Log log92 = null;
        builder90.log = log92;
        retrofit.RestAdapter.Builder builder94 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel95 = builder94.logLevel;
        retrofit.RestAdapter.Builder builder96 = builder90.setLogLevel(logLevel95);
        retrofit.RestAdapter restAdapter97 = new retrofit.RestAdapter(server32, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log87, logLevel95);
        builder19.log = log87;
        builder0.log = log87;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertNull(server80);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(provider86);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(server91);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test01380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01380");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder0.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.Log log9 = builder0.log;
        retrofit.Profiler profiler10 = null;
        builder0.profiler = profiler10;
        java.util.concurrent.Executor executor12 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.client.Client.Provider provider24 = builder17.clientProvider;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log25;
        retrofit.RestAdapter.Builder builder27 = builder13.setLog(log25);
        retrofit.Server server28 = builder13.server;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        builder13.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider38 = builder31.clientProvider;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        builder31.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("Retrofit-Idle");
        retrofit.Server server50 = builder49.server;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = builder59.server;
        retrofit.RestAdapter.Log log61 = null;
        builder59.log = log61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        retrofit.RestAdapter.Builder builder65 = builder59.setLogLevel(logLevel64);
        retrofit.RestAdapter.Builder builder67 = builder65.setServer("Retrofit-Idle");
        retrofit.Server server68 = builder67.server;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = null;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server78 = builder77.server;
        retrofit.RestAdapter.Log log79 = null;
        builder77.log = log79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        retrofit.RestAdapter.Builder builder83 = builder77.setLogLevel(logLevel82);
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel82);
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel82);
        builder31.log = log58;
        builder13.log = log58;
        retrofit.RestAdapter.Builder builder88 = builder0.setLog(log58);
        java.util.concurrent.Executor executor89 = builder0.httpExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(server68);
        org.junit.Assert.assertNull(server78);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(executor89);
    }

    @Test
    public void test01381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01381");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder0.requestInterceptor = requestInterceptor13;
        java.util.concurrent.Executor executor15 = null;
        builder0.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider25 = builder18.clientProvider;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        builder18.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder17.setLog(log26);
        retrofit.converter.Converter converter29 = null;
        builder17.converter = converter29;
        retrofit.RestAdapter.Log log31 = builder17.log;
        retrofit.RestAdapter.Builder builder32 = builder0.setLog(log31);
        retrofit.Profiler profiler33 = null;
        builder32.profiler = profiler33;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test01382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01382");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.client.Client.Provider provider17 = null;
        restAdapter16.clientProvider = provider17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = builder19.callbackExecutor;
        retrofit.Profiler profiler21 = builder19.profiler;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        builder28.logLevel = logLevel30;
        java.util.concurrent.Executor executor32 = null;
        builder28.callbackExecutor = executor32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor35 = null;
        restAdapter34.callbackExecutor = executor35;
        retrofit.converter.Converter converter37 = restAdapter34.converter;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        restAdapter34.log = log38;
        builder28.log = log38;
        builder24.log = log38;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter42.new RestHandler();
        java.util.concurrent.Executor executor44 = restAdapter42.httpExecutor;
        java.util.concurrent.Executor executor45 = null;
        restAdapter42.callbackExecutor = executor45;
        retrofit.client.Client.Provider provider47 = null;
        restAdapter42.clientProvider = provider47;
        java.util.concurrent.Executor executor49 = null;
        restAdapter42.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter60 = builder59.build();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.logLevel;
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter60.requestInterceptor;
        restAdapter42.requestInterceptor = requestInterceptor62;
        builder24.requestInterceptor = requestInterceptor62;
        builder23.requestInterceptor = requestInterceptor62;
        restAdapter16.requestInterceptor = requestInterceptor62;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        retrofit.RestAdapter.Log log69 = null;
        builder67.log = log69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel73 = builder72.logLevel;
        builder71.logLevel = logLevel73;
        java.util.concurrent.Executor executor75 = null;
        builder71.callbackExecutor = executor75;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor78 = null;
        restAdapter77.callbackExecutor = executor78;
        retrofit.converter.Converter converter80 = restAdapter77.converter;
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        restAdapter77.log = log81;
        builder71.log = log81;
        builder67.log = log81;
        log81.log("Retrofit-Idle");
        log81.log("");
        log81.log("Retrofit-Idle");
        restAdapter16.log = log81;
        java.util.concurrent.Executor executor92 = restAdapter16.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(executor92);
    }

    @Test
    public void test01383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01383");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider10 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable12, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(provider10);
    }

    @Test
    public void test01384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01384");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.client.Client.Provider provider26 = builder19.clientProvider;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder19.log = log27;
        retrofit.RestAdapter.Builder builder29 = builder15.setLog(log27);
        retrofit.RestAdapter.Builder builder30 = builder0.setLog(log27);
        retrofit.RestAdapter.Log log31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder30.setLog(log31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test01385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01385");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter9.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter9.errorHandler;
        retrofit.converter.Converter converter13 = null;
        restAdapter9.converter = converter13;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter9.logLevel;
        java.util.concurrent.Executor executor16 = restAdapter9.httpExecutor;
        retrofit.RestAdapter.Log log17 = restAdapter9.log;
        retrofit.Profiler profiler18 = null;
        restAdapter9.profiler = profiler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        builder20.logLevel = logLevel22;
        boolean boolean24 = logLevel22.log();
        restAdapter9.logLevel = logLevel22;
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter9.logLevel;
        retrofit.ErrorHandler errorHandler27 = null;
        restAdapter9.errorHandler = errorHandler27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        builder29.logLevel = logLevel31;
        boolean boolean33 = logLevel31.log();
        restAdapter9.setLogLevel(logLevel31);
        boolean boolean35 = logLevel31.log();
        retrofit.RestAdapter.Builder builder36 = builder6.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.client.Client.Provider provider48 = builder41.clientProvider;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        builder41.log = log49;
        retrofit.RestAdapter.Builder builder51 = builder37.setLog(log49);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = builder52.server;
        retrofit.RestAdapter.Log log54 = null;
        builder52.log = log54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.client.Client.Provider provider63 = builder56.clientProvider;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        builder56.log = log64;
        retrofit.RestAdapter.Builder builder66 = builder52.setLog(log64);
        retrofit.RestAdapter.Builder builder67 = builder37.setLog(log64);
        retrofit.RequestInterceptor requestInterceptor68 = null;
        builder37.requestInterceptor = requestInterceptor68;
        java.util.concurrent.Executor executor70 = builder37.httpExecutor;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        builder75.logLevel = logLevel77;
        java.util.concurrent.Executor executor79 = null;
        builder75.callbackExecutor = executor79;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor82 = null;
        restAdapter81.callbackExecutor = executor82;
        retrofit.converter.Converter converter84 = restAdapter81.converter;
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        restAdapter81.log = log85;
        builder75.log = log85;
        builder71.log = log85;
        log85.log("Retrofit-Idle");
        log85.log("");
        builder37.log = log85;
        log85.log("Retrofit-Idle");
        log85.log("Retrofit-Idle");
        builder6.log = log85;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter84);
        org.junit.Assert.assertNotNull(log85);
    }

    @Test
    public void test01386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01386");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter6.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter6.logLevel;
        retrofit.ErrorHandler errorHandler9 = restAdapter6.errorHandler;
        retrofit.converter.Converter converter10 = null;
        restAdapter6.converter = converter10;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter6.logLevel;
        java.util.concurrent.Executor executor13 = restAdapter6.httpExecutor;
        retrofit.RestAdapter.Log log14 = restAdapter6.log;
        retrofit.Profiler profiler15 = null;
        restAdapter6.profiler = profiler15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        builder17.logLevel = logLevel19;
        boolean boolean21 = logLevel19.log();
        restAdapter6.logLevel = logLevel19;
        retrofit.Profiler profiler23 = restAdapter6.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel29 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.RestAdapter restAdapter34 = builder32.build();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter37.new RestHandler();
        java.util.concurrent.Executor executor39 = restAdapter37.httpExecutor;
        java.util.concurrent.Executor executor40 = null;
        restAdapter37.callbackExecutor = executor40;
        retrofit.client.Client.Provider provider42 = null;
        restAdapter37.clientProvider = provider42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("Retrofit-Idle");
        retrofit.Server server53 = builder52.server;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel67 = builder66.logLevel;
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder70 = builder68.setServer("Retrofit-Idle");
        retrofit.Server server71 = builder70.server;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = null;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.Server server81 = builder80.server;
        retrofit.RestAdapter.Log log82 = null;
        builder80.log = log82;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel85 = builder84.logLevel;
        retrofit.RestAdapter.Builder builder86 = builder80.setLogLevel(logLevel85);
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel85);
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel85);
        restAdapter37.log = log61;
        log61.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder92 = builder35.setLog(log61);
        builder32.log = log61;
        retrofit.RequestInterceptor requestInterceptor94 = builder32.requestInterceptor;
        restAdapter6.requestInterceptor = requestInterceptor94;
        builder0.requestInterceptor = requestInterceptor94;
        retrofit.RestAdapter.Log log97 = builder0.log;
        retrofit.ErrorHandler errorHandler98 = builder0.errorHandler;
        java.util.concurrent.Executor executor99 = builder0.httpExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNull(server81);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(requestInterceptor94);
        org.junit.Assert.assertNull(log97);
        org.junit.Assert.assertNull(errorHandler98);
        org.junit.Assert.assertNull(executor99);
    }

    @Test
    public void test01387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01387");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter5 = builder4.converter;
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = builder8.server;
        retrofit.RestAdapter.Log log10 = null;
        builder8.log = log10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        retrofit.RestAdapter.Builder builder14 = builder8.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        builder15.logLevel = logLevel17;
        boolean boolean19 = logLevel17.log();
        builder8.logLevel = logLevel17;
        boolean boolean21 = logLevel17.log();
        retrofit.RestAdapter.Builder builder22 = builder7.setLogLevel(logLevel17);
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel29 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel29);
        java.util.concurrent.Executor executor31 = builder30.callbackExecutor;
        retrofit.converter.Converter converter32 = null;
        builder30.converter = converter32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        builder34.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.client.Client.Provider provider63 = builder56.clientProvider;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        builder56.log = log64;
        retrofit.RestAdapter.Builder builder66 = builder55.setLog(log64);
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log64, logLevel67);
        builder34.logLevel = logLevel67;
        retrofit.RestAdapter.LogLevel logLevel70 = builder34.logLevel;
        builder30.logLevel = logLevel70;
        retrofit.Profiler profiler72 = builder30.profiler;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Log log75 = null;
        builder73.log = log75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel78 = builder77.logLevel;
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        builder80.logLevel = logLevel82;
        boolean boolean84 = logLevel82.log();
        builder73.logLevel = logLevel82;
        retrofit.RestAdapter.LogLevel logLevel86 = builder73.logLevel;
        retrofit.RestAdapter.Builder builder87 = builder30.setLogLevel(logLevel86);
        builder22.logLevel = logLevel86;
        java.util.concurrent.Executor executor89 = builder22.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler72);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(executor89);
    }

    @Test
    public void test01388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01388");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter9 = builder8.build();
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.NONE;
        builder8.logLevel = logLevel10;
        retrofit.RestAdapter.Log log12 = builder8.log;
        retrofit.converter.Converter converter13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder8.setConverter(converter13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log12);
    }

    @Test
    public void test01389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01389");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.client.Client.Provider provider30 = builder23.clientProvider;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        builder23.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("Retrofit-Idle");
        retrofit.Server server42 = builder41.server;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("Retrofit-Idle");
        retrofit.Server server60 = builder59.server;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = null;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = builder69.server;
        retrofit.RestAdapter.Log log71 = null;
        builder69.log = log71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel74 = builder73.logLevel;
        retrofit.RestAdapter.Builder builder75 = builder69.setLogLevel(logLevel74);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel74);
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel74);
        builder23.log = log50;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel80 = builder79.logLevel;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        builder81.logLevel = logLevel83;
        builder79.logLevel = logLevel83;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server14, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log50, logLevel83);
        retrofit.RestAdapter.LogLevel logLevel87 = restAdapter86.getLogLevel();
        retrofit.RestAdapter.Log log88 = restAdapter86.log;
        log88.log("hi!");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log88);
    }

    @Test
    public void test01390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01390");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.Profiler profiler12 = null;
        builder8.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = builder8.build();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = null;
        restAdapter15.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = null;
        restAdapter15.converter = converter18;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter15.new RestHandler();
        java.util.concurrent.Executor executor21 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        builder29.logLevel = logLevel31;
        boolean boolean33 = logLevel31.log();
        builder22.logLevel = logLevel31;
        retrofit.RestAdapter.LogLevel logLevel35 = builder22.logLevel;
        retrofit.Profiler profiler36 = builder22.profiler;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.Profiler profiler39 = builder37.profiler;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("Retrofit-Idle");
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Builder builder52 = builder41.setServer(server51);
        retrofit.RestAdapter.Builder builder53 = builder22.setServer(server51);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = builder54.server;
        retrofit.RestAdapter.Log log56 = null;
        builder54.log = log56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel59 = builder58.logLevel;
        retrofit.RestAdapter.Builder builder60 = builder54.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder62 = builder60.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder62.setLog(log63);
        java.util.concurrent.Executor executor65 = builder62.httpExecutor;
        retrofit.RestAdapter.Builder builder67 = builder62.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter68 = null;
        builder67.converter = converter68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = builder70.server;
        retrofit.RestAdapter.Log log72 = null;
        builder70.log = log72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel75 = builder74.logLevel;
        retrofit.RestAdapter.Builder builder76 = builder70.setLogLevel(logLevel75);
        retrofit.RestAdapter.Builder builder78 = builder76.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder80 = builder78.setLog(log79);
        java.util.concurrent.Executor executor81 = builder78.httpExecutor;
        retrofit.RestAdapter restAdapter82 = builder78.build();
        java.util.concurrent.Executor executor83 = restAdapter82.httpExecutor;
        builder67.callbackExecutor = executor83;
        builder22.callbackExecutor = executor83;
        restAdapter15.httpExecutor = executor83;
        restAdapter14.callbackExecutor = executor83;
        retrofit.Server server88 = restAdapter14.server;
        retrofit.Profiler profiler89 = null;
        restAdapter14.profiler = profiler89;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(executor83);
        org.junit.Assert.assertNotNull(server88);
    }

    @Test
    public void test01391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01391");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter15.new RestHandler();
        java.util.concurrent.Executor executor17 = restAdapter15.httpExecutor;
        java.util.concurrent.Executor executor18 = null;
        restAdapter15.callbackExecutor = executor18;
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter15.errorHandler = errorHandler20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel22;
        builder0.logLevel = logLevel22;
        retrofit.ErrorHandler errorHandler25 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder27 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter28 = null;
        builder0.converter = converter28;
        retrofit.Profiler profiler30 = null;
        builder0.profiler = profiler30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor33 = null;
        restAdapter32.httpExecutor = executor33;
        java.util.concurrent.Executor executor35 = null;
        restAdapter32.httpExecutor = executor35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = null;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel61);
        boolean boolean64 = logLevel61.log();
        restAdapter32.logLevel = logLevel61;
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter32.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder0.setLogLevel(logLevel66);
        retrofit.client.Client client68 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder69 = builder0.setClient(client68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test01392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01392");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = builder6.server;
        retrofit.RestAdapter.Log log8 = null;
        builder6.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel11 = builder10.logLevel;
        retrofit.RestAdapter.Builder builder12 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        retrofit.RestAdapter restAdapter16 = builder14.build();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter19.new RestHandler();
        java.util.concurrent.Executor executor21 = restAdapter19.httpExecutor;
        java.util.concurrent.Executor executor22 = null;
        restAdapter19.callbackExecutor = executor22;
        retrofit.client.Client.Provider provider24 = null;
        restAdapter19.clientProvider = provider24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = builder26.server;
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("Retrofit-Idle");
        retrofit.Server server35 = builder34.server;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("Retrofit-Idle");
        retrofit.Server server53 = builder52.server;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = null;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel67 = builder66.logLevel;
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel67);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel67);
        restAdapter19.log = log43;
        log43.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder74 = builder17.setLog(log43);
        builder14.log = log43;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        retrofit.RestAdapter.Log log78 = null;
        builder76.log = log78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel81 = builder80.logLevel;
        retrofit.RestAdapter.Builder builder82 = builder76.setLogLevel(logLevel81);
        retrofit.RestAdapter.Builder builder84 = builder82.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter85 = builder84.build();
        retrofit.Profiler profiler86 = null;
        builder84.profiler = profiler86;
        retrofit.RestAdapter restAdapter88 = builder84.build();
        retrofit.client.Client.Provider provider89 = builder84.clientProvider;
        retrofit.RestAdapter.Builder builder90 = builder14.setClient(provider89);
        retrofit.ErrorHandler errorHandler91 = builder14.errorHandler;
        restAdapter0.errorHandler = errorHandler91;
        java.util.concurrent.Executor executor93 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(server35);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNull(executor93);
    }

    @Test
    public void test01393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01393");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.Server server2 = builder1.server;
        retrofit.RestAdapter.Log log3 = null;
        builder1.log = log3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder7 = builder1.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder1.clientProvider;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder1.log = log9;
        retrofit.RestAdapter.Builder builder11 = builder0.setLog(log9);
        retrofit.Profiler profiler12 = builder11.profiler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.RestAdapter restAdapter23 = builder21.build();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter26.new RestHandler();
        java.util.concurrent.Executor executor28 = restAdapter26.httpExecutor;
        java.util.concurrent.Executor executor29 = null;
        restAdapter26.callbackExecutor = executor29;
        retrofit.client.Client.Provider provider31 = null;
        restAdapter26.clientProvider = provider31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("Retrofit-Idle");
        retrofit.Server server42 = builder41.server;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("Retrofit-Idle");
        retrofit.Server server60 = builder59.server;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = null;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = builder69.server;
        retrofit.RestAdapter.Log log71 = null;
        builder69.log = log71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel74 = builder73.logLevel;
        retrofit.RestAdapter.Builder builder75 = builder69.setLogLevel(logLevel74);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel74);
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel74);
        restAdapter26.log = log50;
        log50.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder81 = builder24.setLog(log50);
        builder21.log = log50;
        retrofit.ErrorHandler errorHandler83 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder84 = builder11.setErrorHandler(errorHandler83);
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor86 = null;
        restAdapter85.callbackExecutor = executor86;
        retrofit.converter.Converter converter88 = restAdapter85.converter;
        retrofit.RestAdapter.Log log89 = retrofit.RestAdapter.Log.NONE;
        restAdapter85.log = log89;
        retrofit.RestAdapter.Builder builder91 = builder11.setLog(log89);
        retrofit.converter.Converter converter92 = builder91.converter;
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(errorHandler83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(converter88);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(converter92);
    }

    @Test
    public void test01394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01394");
        java.util.List<retrofit.client.Header> headerList2 = null;
        retrofit.mime.TypedInput typedInput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response4 = new retrofit.client.Response((int) (short) -1, "", headerList2, typedInput3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01395");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter9 = builder8.build();
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.RestAdapter restAdapter12 = builder8.build();
        retrofit.RestAdapter.LogLevel logLevel13 = builder8.logLevel;
        boolean boolean14 = logLevel13.log();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01396");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        java.util.concurrent.Executor executor16 = null;
        builder0.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = builder0.converter;
        retrofit.ErrorHandler errorHandler19 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler20 = null;
        builder0.errorHandler = errorHandler20;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter23.logLevel;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter23.errorHandler = errorHandler26;
        java.util.concurrent.Executor executor28 = restAdapter23.httpExecutor;
        java.util.concurrent.Executor executor29 = null;
        restAdapter23.httpExecutor = executor29;
        retrofit.ErrorHandler errorHandler31 = restAdapter23.errorHandler;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor33 = null;
        restAdapter32.requestInterceptor = requestInterceptor33;
        retrofit.Profiler profiler35 = null;
        restAdapter32.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.Profiler profiler39 = builder37.profiler;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("Retrofit-Idle");
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Builder builder52 = builder41.setServer(server51);
        retrofit.RestAdapter restAdapter53 = builder52.build();
        java.util.concurrent.Executor executor54 = restAdapter53.callbackExecutor;
        restAdapter32.callbackExecutor = executor54;
        restAdapter23.httpExecutor = executor54;
        builder0.callbackExecutor = executor54;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        builder62.logLevel = logLevel64;
        java.util.concurrent.Executor executor66 = null;
        builder62.callbackExecutor = executor66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor69 = null;
        restAdapter68.callbackExecutor = executor69;
        retrofit.converter.Converter converter71 = restAdapter68.converter;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        restAdapter68.log = log72;
        builder62.log = log72;
        builder58.log = log72;
        log72.log("Retrofit-Idle");
        log72.log("Retrofit-");
        retrofit.RestAdapter.Builder builder80 = builder0.setLog(log72);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder82 = builder80.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test01397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01397");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("Retrofit-Idle");
        retrofit.Server server25 = builder24.server;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        builder34.logLevel = logLevel36;
        boolean boolean38 = logLevel36.log();
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel56);
        retrofit.client.Client.Provider provider58 = builder51.clientProvider;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        builder51.log = log59;
        retrofit.RestAdapter.Builder builder61 = builder47.setLog(log59);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = builder66.server;
        retrofit.RestAdapter.Log log68 = null;
        builder66.log = log68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel71 = builder70.logLevel;
        retrofit.RestAdapter.Builder builder72 = builder66.setLogLevel(logLevel71);
        retrofit.client.Client.Provider provider73 = builder66.clientProvider;
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        builder66.log = log74;
        retrofit.RestAdapter.Builder builder76 = builder62.setLog(log74);
        retrofit.RestAdapter.Builder builder77 = builder47.setLog(log74);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.Server server79 = builder78.server;
        java.util.concurrent.Executor executor80 = null;
        builder78.httpExecutor = executor80;
        retrofit.Server server82 = builder78.server;
        retrofit.RestAdapter.LogLevel logLevel83 = builder78.logLevel;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server25, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log74, logLevel83);
        builder14.server = server25;
        retrofit.RestAdapter.Builder builder86 = builder10.setServer(server25);
        restAdapter0.server = server25;
        retrofit.client.Response response89 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response91 = restAdapter0.logAndReplaceResponse("hi!", response89, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(provider73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(server79);
        org.junit.Assert.assertNull(server82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test01398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01398");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        java.util.concurrent.Executor executor5 = null;
        restAdapter0.callbackExecutor = executor5;
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.httpExecutor = executor7;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter10 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel16 = builder15.logLevel;
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel16);
        java.util.concurrent.Executor executor18 = builder17.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor19 = builder17.requestInterceptor;
        retrofit.converter.Converter converter20 = null;
        builder17.converter = converter20;
        java.util.concurrent.Executor executor22 = builder17.httpExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.client.Client.Provider provider34 = builder27.clientProvider;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        builder27.log = log35;
        retrofit.RestAdapter.Builder builder37 = builder23.setLog(log35);
        retrofit.Server server38 = builder23.server;
        java.util.concurrent.Executor executor39 = null;
        builder23.callbackExecutor = executor39;
        retrofit.converter.Converter converter41 = builder23.converter;
        retrofit.ErrorHandler errorHandler42 = builder23.errorHandler;
        retrofit.ErrorHandler errorHandler43 = null;
        builder23.errorHandler = errorHandler43;
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter46.logLevel;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter46.errorHandler = errorHandler49;
        java.util.concurrent.Executor executor51 = restAdapter46.httpExecutor;
        java.util.concurrent.Executor executor52 = null;
        restAdapter46.httpExecutor = executor52;
        retrofit.ErrorHandler errorHandler54 = restAdapter46.errorHandler;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor56 = null;
        restAdapter55.requestInterceptor = requestInterceptor56;
        retrofit.Profiler profiler58 = null;
        restAdapter55.profiler = profiler58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = builder60.callbackExecutor;
        retrofit.Profiler profiler62 = builder60.profiler;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder73 = builder71.setServer("Retrofit-Idle");
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Builder builder75 = builder64.setServer(server74);
        retrofit.RestAdapter restAdapter76 = builder75.build();
        java.util.concurrent.Executor executor77 = restAdapter76.callbackExecutor;
        restAdapter55.callbackExecutor = executor77;
        restAdapter46.httpExecutor = executor77;
        builder23.callbackExecutor = executor77;
        builder17.callbackExecutor = executor77;
        restAdapter0.callbackExecutor = executor77;
        retrofit.converter.Converter converter83 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler85 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNull(converter83);
        org.junit.Assert.assertNull(logLevel84);
        org.junit.Assert.assertNull(errorHandler85);
    }

    @Test
    public void test01399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01399");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        retrofit.converter.Converter converter15 = builder0.converter;
        retrofit.Profiler profiler16 = null;
        builder0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = builder0.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter19 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01400");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = builder6.server;
        retrofit.RestAdapter.Log log8 = null;
        builder6.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel11 = builder10.logLevel;
        retrofit.RestAdapter.Builder builder12 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("Retrofit-Idle");
        retrofit.Server server15 = builder14.server;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        builder24.logLevel = logLevel26;
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.client.Client.Provider provider48 = builder41.clientProvider;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        builder41.log = log49;
        retrofit.RestAdapter.Builder builder51 = builder37.setLog(log49);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = builder52.server;
        retrofit.RestAdapter.Log log54 = null;
        builder52.log = log54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.client.Client.Provider provider63 = builder56.clientProvider;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        builder56.log = log64;
        retrofit.RestAdapter.Builder builder66 = builder52.setLog(log64);
        retrofit.RestAdapter.Builder builder67 = builder37.setLog(log64);
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = builder68.server;
        java.util.concurrent.Executor executor70 = null;
        builder68.httpExecutor = executor70;
        retrofit.Server server72 = builder68.server;
        retrofit.RestAdapter.LogLevel logLevel73 = builder68.logLevel;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server15, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log64, logLevel73);
        builder4.server = server15;
        retrofit.RestAdapter.Builder builder76 = builder0.setServer(server15);
        java.util.concurrent.Executor executor77 = builder76.httpExecutor;
        retrofit.Profiler profiler78 = null;
        builder76.profiler = profiler78;
        retrofit.Server server80 = builder76.server;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNotNull(server80);
    }

    @Test
    public void test01401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01401");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log10 = restAdapter0.log;
        retrofit.RestAdapter.Log log11 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.Server server21 = builder20.server;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder36.setServer("Retrofit-Idle");
        retrofit.Server server39 = builder38.server;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = null;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel53);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel53);
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel53);
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = builder68.server;
        retrofit.RestAdapter.Log log70 = null;
        builder68.log = log70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel73 = builder72.logLevel;
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel73);
        retrofit.client.Client.Provider provider75 = builder68.clientProvider;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        builder68.log = log76;
        retrofit.RestAdapter.Builder builder78 = builder64.setLog(log76);
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = builder79.server;
        retrofit.RestAdapter.Log log81 = null;
        builder79.log = log81;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel84 = builder83.logLevel;
        retrofit.RestAdapter.Builder builder85 = builder79.setLogLevel(logLevel84);
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server21, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log76, logLevel84);
        restAdapter0.logLevel = logLevel84;
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(server39);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(provider75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(server80);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test01402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01402");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        retrofit.Profiler profiler11 = builder10.profiler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.Server server21 = builder20.server;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder10.setServer(server21);
        retrofit.converter.Converter converter39 = null;
        builder10.converter = converter39;
        java.util.concurrent.Executor executor41 = null;
        builder10.callbackExecutor = executor41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor44 = null;
        restAdapter43.callbackExecutor = executor44;
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.converter.Converter converter47 = restAdapter43.converter;
        java.util.concurrent.Executor executor48 = null;
        restAdapter43.callbackExecutor = executor48;
        java.util.concurrent.Executor executor50 = null;
        restAdapter43.httpExecutor = executor50;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter43.new RestHandler();
        retrofit.converter.Converter converter53 = restAdapter43.converter;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = builder54.server;
        retrofit.RestAdapter.Log log56 = null;
        builder54.log = log56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel59 = builder58.logLevel;
        retrofit.RestAdapter.Builder builder60 = builder54.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder62 = builder60.setServer("Retrofit-Idle");
        retrofit.Server server63 = builder62.server;
        retrofit.Profiler profiler64 = null;
        builder62.profiler = profiler64;
        retrofit.Profiler profiler66 = null;
        builder62.profiler = profiler66;
        retrofit.RestAdapter restAdapter68 = builder62.build();
        retrofit.ErrorHandler errorHandler69 = builder62.errorHandler;
        restAdapter43.errorHandler = errorHandler69;
        builder10.errorHandler = errorHandler69;
        java.util.concurrent.Executor executor72 = builder10.callbackExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(server63);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(errorHandler69);
        org.junit.Assert.assertNull(executor72);
    }

    @Test
    public void test01403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01403");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        builder8.logLevel = logLevel10;
        java.util.concurrent.Executor executor12 = null;
        builder8.callbackExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = null;
        restAdapter14.callbackExecutor = executor15;
        retrofit.converter.Converter converter17 = restAdapter14.converter;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        restAdapter14.log = log18;
        builder8.log = log18;
        restAdapter0.log = log18;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter31 = builder30.build();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.logLevel;
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter31.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter44 = builder43.build();
        retrofit.Profiler profiler45 = null;
        builder43.profiler = profiler45;
        retrofit.RestAdapter restAdapter47 = builder43.build();
        retrofit.RestAdapter.LogLevel logLevel48 = builder43.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01404");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter15.new RestHandler();
        java.util.concurrent.Executor executor17 = restAdapter15.httpExecutor;
        java.util.concurrent.Executor executor18 = null;
        restAdapter15.callbackExecutor = executor18;
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter15.errorHandler = errorHandler20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel22;
        builder0.logLevel = logLevel22;
        retrofit.ErrorHandler errorHandler25 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder27 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter28 = null;
        builder0.converter = converter28;
        retrofit.client.Client client30 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder31 = builder0.setClient(client30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test01405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01405");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        restAdapter0.log = log4;
        java.util.concurrent.Executor executor6 = null;
        restAdapter0.httpExecutor = executor6;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        java.util.concurrent.Executor executor17 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        builder25.logLevel = logLevel27;
        boolean boolean29 = logLevel27.log();
        builder18.logLevel = logLevel27;
        retrofit.RestAdapter.LogLevel logLevel31 = builder18.logLevel;
        retrofit.Profiler profiler32 = builder18.profiler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        retrofit.Profiler profiler35 = builder33.profiler;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = builder38.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("Retrofit-Idle");
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Builder builder48 = builder37.setServer(server47);
        retrofit.RestAdapter.Builder builder49 = builder18.setServer(server47);
        retrofit.RestAdapter.Builder builder50 = builder15.setServer(server47);
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel67 = builder66.logLevel;
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel67);
        retrofit.client.Client.Provider provider69 = builder62.clientProvider;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        builder62.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder58.setLog(log70);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Log log75 = null;
        builder73.log = log75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel78 = builder77.logLevel;
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder81 = builder79.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter82 = builder81.build();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.logLevel;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server47, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log70, logLevel83);
        restAdapter0.server = server47;
        retrofit.Profiler profiler86 = null;
        restAdapter0.profiler = profiler86;
        retrofit.RestAdapter.RestHandler restHandler88 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler89 = restAdapter0.new RestHandler();
        retrofit.client.Response response91 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response93 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response91, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(log4);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01406");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel2 = builder1.logLevel;
        builder0.logLevel = logLevel2;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        retrofit.converter.Converter converter6 = null;
        builder0.converter = converter6;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01407");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.Server server2 = builder1.server;
        retrofit.RestAdapter.Log log3 = null;
        builder1.log = log3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder7 = builder1.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder1.clientProvider;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder1.log = log9;
        retrofit.RestAdapter.Builder builder11 = builder0.setLog(log9);
        retrofit.converter.Converter converter12 = null;
        builder0.converter = converter12;
        retrofit.RestAdapter.Log log14 = builder0.log;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("Retrofit-Idle");
        retrofit.Server server24 = builder23.server;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel38);
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = builder52.server;
        retrofit.RestAdapter.Log log54 = null;
        builder52.log = log54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel57 = builder56.logLevel;
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel57);
        retrofit.client.Client.Provider provider59 = builder52.clientProvider;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        builder52.log = log60;
        retrofit.RestAdapter.Builder builder62 = builder48.setLog(log60);
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server24, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log60, logLevel63);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder73 = builder71.setServer("Retrofit-Idle");
        retrofit.Server server74 = builder73.server;
        retrofit.client.Client.Provider provider75 = null;
        java.util.concurrent.Executor executor76 = null;
        java.util.concurrent.Executor executor77 = null;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        retrofit.converter.Converter converter79 = null;
        retrofit.Profiler profiler80 = null;
        retrofit.ErrorHandler errorHandler81 = null;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server84 = builder83.server;
        retrofit.RestAdapter.Log log85 = null;
        builder83.log = log85;
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel88 = builder87.logLevel;
        retrofit.RestAdapter.Builder builder89 = builder83.setLogLevel(logLevel88);
        retrofit.client.Client.Provider provider90 = builder83.clientProvider;
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        builder83.log = log91;
        retrofit.RestAdapter.Builder builder93 = builder82.setLog(log91);
        retrofit.RestAdapter.LogLevel logLevel94 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter95 = new retrofit.RestAdapter(server74, provider75, executor76, executor77, requestInterceptor78, converter79, profiler80, errorHandler81, log91, logLevel94);
        restAdapter64.server = server74;
        retrofit.RestAdapter.Builder builder97 = builder0.setServer(server74);
        retrofit.Profiler profiler98 = builder0.profiler;
        retrofit.RestAdapter.Log log99 = builder0.log;
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNull(server84);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(provider90);
        org.junit.Assert.assertNotNull(log91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNull(profiler98);
        org.junit.Assert.assertNotNull(log99);
    }

    @Test
    public void test01408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01408");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter15.new RestHandler();
        java.util.concurrent.Executor executor17 = restAdapter15.httpExecutor;
        java.util.concurrent.Executor executor18 = null;
        restAdapter15.callbackExecutor = executor18;
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter15.errorHandler = errorHandler20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter15.logLevel = logLevel22;
        builder0.logLevel = logLevel22;
        retrofit.ErrorHandler errorHandler25 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = builder26.server;
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter35 = builder34.build();
        retrofit.Profiler profiler36 = null;
        builder34.profiler = profiler36;
        java.util.concurrent.Executor executor38 = builder34.httpExecutor;
        retrofit.Server server39 = builder34.server;
        retrofit.RestAdapter.Builder builder40 = builder0.setServer(server39);
        retrofit.Profiler profiler41 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder42 = builder40.setProfiler(profiler41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(server39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test01409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01409");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter4.logLevel;
        retrofit.ErrorHandler errorHandler7 = restAdapter4.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter4.logLevel;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.Server server18 = builder17.server;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("Retrofit-Idle");
        retrofit.Server server36 = builder35.server;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel50);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel50);
        restAdapter4.server = server18;
        restAdapter0.server = server18;
        retrofit.converter.Converter converter56 = restAdapter0.converter;
        retrofit.Server server57 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable59 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable59, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNotNull(server57);
    }

    @Test
    public void test01410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01410");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter0.clientProvider = provider9;
        retrofit.client.Client.Provider provider11 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter12 = restAdapter0.converter;
        java.lang.Throwable throwable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable13, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(converter12);
    }

    @Test
    public void test01411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01411");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.httpExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.client.Client.Provider provider7 = restAdapter0.clientProvider;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter9 = null;
        restAdapter8.converter = converter9;
        java.util.concurrent.Executor executor11 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = builder12.callbackExecutor;
        retrofit.Profiler profiler14 = builder12.profiler;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("Retrofit-Idle");
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Builder builder27 = builder16.setServer(server26);
        retrofit.RestAdapter restAdapter28 = builder27.build();
        java.util.concurrent.Executor executor29 = restAdapter28.callbackExecutor;
        retrofit.client.Client.Provider provider30 = restAdapter28.clientProvider;
        restAdapter8.clientProvider = provider30;
        restAdapter0.clientProvider = provider30;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = null;
        restAdapter33.httpExecutor = executor34;
        java.util.concurrent.Executor executor36 = null;
        restAdapter33.httpExecutor = executor36;
        retrofit.client.Client.Provider provider38 = null;
        restAdapter33.clientProvider = provider38;
        retrofit.ErrorHandler errorHandler40 = restAdapter33.errorHandler;
        retrofit.converter.Converter converter41 = null;
        restAdapter33.converter = converter41;
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter33.requestInterceptor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.callbackExecutor;
        retrofit.Profiler profiler46 = builder44.profiler;
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter57 = builder56.build();
        retrofit.converter.Converter converter58 = restAdapter57.converter;
        builder44.converter = converter58;
        restAdapter33.converter = converter58;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = builder61.server;
        retrofit.RestAdapter.Log log63 = null;
        builder61.log = log63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel66 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder61.setLogLevel(logLevel66);
        retrofit.RestAdapter.Builder builder69 = builder67.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder71 = builder69.setLog(log70);
        java.util.concurrent.Executor executor72 = builder69.httpExecutor;
        java.util.concurrent.Executor executor73 = null;
        builder69.httpExecutor = executor73;
        retrofit.RestAdapter.LogLevel logLevel75 = builder69.logLevel;
        retrofit.Profiler profiler76 = builder69.profiler;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = builder77.callbackExecutor;
        retrofit.Profiler profiler79 = builder77.profiler;
        retrofit.RestAdapter.Builder builder81 = builder77.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.Server server83 = builder82.server;
        retrofit.RestAdapter.Log log84 = null;
        builder82.log = log84;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel87 = builder86.logLevel;
        retrofit.RestAdapter.Builder builder88 = builder82.setLogLevel(logLevel87);
        retrofit.RestAdapter.Builder builder90 = builder88.setServer("Retrofit-Idle");
        retrofit.Server server91 = builder90.server;
        retrofit.RestAdapter.Builder builder92 = builder81.setServer(server91);
        retrofit.RestAdapter restAdapter93 = builder92.build();
        java.util.concurrent.Executor executor94 = restAdapter93.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler95 = restAdapter93.new RestHandler();
        retrofit.ErrorHandler errorHandler96 = restAdapter93.errorHandler;
        retrofit.RestAdapter.Builder builder97 = builder69.setErrorHandler(errorHandler96);
        restAdapter33.errorHandler = errorHandler96;
        restAdapter0.errorHandler = errorHandler96;
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(provider30);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNotNull(converter58);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler76);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNull(profiler79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(server91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(restAdapter93);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(errorHandler96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test01412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01412");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.LogLevel logLevel7 = builder6.logLevel;
        retrofit.RequestInterceptor requestInterceptor8 = builder6.requestInterceptor;
        retrofit.client.Client client9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder6.setClient(client9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor8);
    }

    @Test
    public void test01413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01413");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        retrofit.ErrorHandler errorHandler9 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = builder10.callbackExecutor;
        retrofit.Profiler profiler12 = builder10.profiler;
        java.util.concurrent.Executor executor13 = builder10.callbackExecutor;
        java.util.concurrent.Executor executor14 = builder10.httpExecutor;
        retrofit.converter.Converter converter15 = null;
        builder10.converter = converter15;
        retrofit.RestAdapter.LogLevel logLevel17 = builder10.logLevel;
        restAdapter0.logLevel = logLevel17;
        boolean boolean19 = logLevel17.log();
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01414");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        java.util.concurrent.Executor executor16 = null;
        builder0.callbackExecutor = executor16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        builder25.logLevel = logLevel27;
        boolean boolean29 = logLevel27.log();
        builder18.logLevel = logLevel27;
        retrofit.RestAdapter.LogLevel logLevel31 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder0.setLogLevel(logLevel31);
        java.util.concurrent.Executor executor33 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = builder34.server;
        retrofit.RestAdapter.Log log36 = null;
        builder34.log = log36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel39 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.callbackExecutor;
        retrofit.Profiler profiler46 = builder44.profiler;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder57 = builder55.setServer("Retrofit-Idle");
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Builder builder59 = builder48.setServer(server58);
        retrofit.RestAdapter restAdapter60 = builder59.build();
        java.util.concurrent.Executor executor61 = restAdapter60.callbackExecutor;
        builder42.callbackExecutor = executor61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = builder63.callbackExecutor;
        retrofit.Profiler profiler65 = builder63.profiler;
        retrofit.RestAdapter.Builder builder67 = builder63.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = builder68.server;
        retrofit.RestAdapter.Log log70 = null;
        builder68.log = log70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel73 = builder72.logLevel;
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder76 = builder74.setServer("Retrofit-Idle");
        retrofit.Server server77 = builder76.server;
        retrofit.RestAdapter.Builder builder78 = builder67.setServer(server77);
        retrofit.RestAdapter restAdapter79 = builder78.build();
        retrofit.client.Client.Provider provider80 = null;
        restAdapter79.clientProvider = provider80;
        retrofit.RestAdapter.Log log82 = restAdapter79.log;
        retrofit.client.Client.Provider provider83 = null;
        restAdapter79.clientProvider = provider83;
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter79.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler86 = restAdapter79.new RestHandler();
        retrofit.Server server87 = restAdapter79.server;
        retrofit.RestAdapter.Builder builder88 = builder42.setServer(server87);
        builder0.server = server87;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(server58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(profiler65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test01415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01415");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        restAdapter0.log = log4;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(log4);
        org.junit.Assert.assertNull(provider6);
    }

    @Test
    public void test01416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01416");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.Server server16 = builder15.server;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider32 = builder25.clientProvider;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        builder25.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder24.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log33, logLevel36);
        retrofit.RestAdapter.Builder builder38 = builder0.setLog(log33);
        retrofit.client.Client.Provider provider39 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter40.new RestHandler();
        java.util.concurrent.Executor executor42 = restAdapter40.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter40.new RestHandler();
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter44.logLevel;
        retrofit.ErrorHandler errorHandler47 = restAdapter44.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter44.logLevel;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder57 = builder55.setServer("Retrofit-Idle");
        retrofit.Server server58 = builder57.server;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        retrofit.RestAdapter.Log log69 = null;
        builder67.log = log69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel72 = builder71.logLevel;
        retrofit.RestAdapter.Builder builder73 = builder67.setLogLevel(logLevel72);
        retrofit.RestAdapter.Builder builder75 = builder73.setServer("Retrofit-Idle");
        retrofit.Server server76 = builder75.server;
        retrofit.client.Client.Provider provider77 = null;
        java.util.concurrent.Executor executor78 = null;
        java.util.concurrent.Executor executor79 = null;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        retrofit.converter.Converter converter81 = null;
        retrofit.Profiler profiler82 = null;
        retrofit.ErrorHandler errorHandler83 = null;
        retrofit.RestAdapter.Log log84 = null;
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        retrofit.Server server86 = builder85.server;
        retrofit.RestAdapter.Log log87 = null;
        builder85.log = log87;
        retrofit.RestAdapter.Builder builder89 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel90 = builder89.logLevel;
        retrofit.RestAdapter.Builder builder91 = builder85.setLogLevel(logLevel90);
        retrofit.RestAdapter restAdapter92 = new retrofit.RestAdapter(server76, provider77, executor78, executor79, requestInterceptor80, converter81, profiler82, errorHandler83, log84, logLevel90);
        retrofit.RestAdapter restAdapter93 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel90);
        restAdapter44.server = server58;
        restAdapter40.server = server58;
        builder0.server = server58;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(server58);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNull(server86);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test01417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01417");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel11 = builder10.logLevel;
        builder9.logLevel = logLevel11;
        java.util.concurrent.Executor executor13 = null;
        builder9.callbackExecutor = executor13;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = null;
        restAdapter15.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = restAdapter15.converter;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        restAdapter15.log = log19;
        builder9.log = log19;
        builder5.log = log19;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter23.new RestHandler();
        java.util.concurrent.Executor executor25 = restAdapter23.httpExecutor;
        java.util.concurrent.Executor executor26 = null;
        restAdapter23.callbackExecutor = executor26;
        retrofit.client.Client.Provider provider28 = null;
        restAdapter23.clientProvider = provider28;
        java.util.concurrent.Executor executor30 = null;
        restAdapter23.callbackExecutor = executor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Log log34 = null;
        builder32.log = log34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder40 = builder38.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter41 = builder40.build();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.logLevel;
        retrofit.RequestInterceptor requestInterceptor43 = restAdapter41.requestInterceptor;
        restAdapter23.requestInterceptor = requestInterceptor43;
        builder5.requestInterceptor = requestInterceptor43;
        builder4.requestInterceptor = requestInterceptor43;
        retrofit.converter.Converter converter47 = builder4.converter;
        retrofit.RestAdapter.Builder builder49 = builder4.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter50 = null;
        builder49.converter = converter50;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(restAdapter41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test01418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01418");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = null;
        restAdapter0.errorHandler = errorHandler3;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor6 = null;
        restAdapter0.httpExecutor = executor6;
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler11 = restAdapter0.profiler;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(profiler11);
    }

    @Test
    public void test01419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01419");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = builder2.server;
        retrofit.RestAdapter.Log log4 = null;
        builder2.log = log4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel7 = builder6.logLevel;
        retrofit.RestAdapter.Builder builder8 = builder2.setLogLevel(logLevel7);
        retrofit.RequestInterceptor requestInterceptor9 = null;
        builder2.requestInterceptor = requestInterceptor9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel16 = builder15.logLevel;
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel16);
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("Retrofit-Idle");
        retrofit.Server server20 = builder19.server;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.Server server38 = builder37.server;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = null;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder47.setLogLevel(logLevel52);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel52);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel52);
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        retrofit.RestAdapter.Log log69 = null;
        builder67.log = log69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel72 = builder71.logLevel;
        retrofit.RestAdapter.Builder builder73 = builder67.setLogLevel(logLevel72);
        retrofit.client.Client.Provider provider74 = builder67.clientProvider;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        builder67.log = log75;
        retrofit.RestAdapter.Builder builder77 = builder63.setLog(log75);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.Server server79 = builder78.server;
        retrofit.RestAdapter.Log log80 = null;
        builder78.log = log80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        retrofit.RestAdapter.Builder builder84 = builder78.setLogLevel(logLevel83);
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server20, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log75, logLevel83);
        builder2.log = log75;
        builder0.log = log75;
        retrofit.Server server88 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder89 = builder0.setServer(server88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(server79);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test01420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01420");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = null;
        restAdapter0.errorHandler = errorHandler3;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test01421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01421");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = null;
        restAdapter0.errorHandler = errorHandler3;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.ErrorHandler errorHandler6 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.RestAdapter restAdapter19 = builder17.build();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter22.new RestHandler();
        java.util.concurrent.Executor executor24 = restAdapter22.httpExecutor;
        java.util.concurrent.Executor executor25 = null;
        restAdapter22.callbackExecutor = executor25;
        retrofit.client.Client.Provider provider27 = null;
        restAdapter22.clientProvider = provider27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.Server server38 = builder37.server;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder47.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("Retrofit-Idle");
        retrofit.Server server56 = builder55.server;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = null;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel70);
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel70);
        restAdapter22.log = log46;
        log46.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder77 = builder20.setLog(log46);
        builder17.log = log46;
        restAdapter0.log = log46;
        retrofit.client.Client.Provider provider80 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(provider80);
    }

    @Test
    public void test01422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01422");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        java.util.concurrent.Executor executor15 = null;
        builder0.httpExecutor = executor15;
        retrofit.client.Client.Provider provider17 = null;
        builder0.clientProvider = provider17;
        retrofit.RestAdapter.LogLevel logLevel19 = builder0.logLevel;
        retrofit.client.Client client20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder0.setClient(client20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01423");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        builder24.logLevel = logLevel26;
        boolean boolean28 = logLevel26.log();
        builder17.logLevel = logLevel26;
        retrofit.RestAdapter.LogLevel logLevel30 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder15.setLogLevel(logLevel30);
        retrofit.RestAdapter restAdapter32 = builder31.build();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter32.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        java.lang.Throwable throwable35 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter32.logException(throwable35, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(requestInterceptor33);
    }

    @Test
    public void test01424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01424");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.Server server27 = builder26.server;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel41 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder42 = builder36.setLogLevel(logLevel41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel41);
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel41);
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("Retrofit-Idle");
        retrofit.Server server62 = builder61.server;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = null;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel76);
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = builder79.server;
        java.util.concurrent.Executor executor81 = null;
        builder79.httpExecutor = executor81;
        retrofit.Server server83 = builder79.server;
        retrofit.RestAdapter.LogLevel logLevel84 = builder79.logLevel;
        restAdapter78.logLevel = logLevel84;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server9, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel84);
        java.util.concurrent.Executor executor87 = restAdapter86.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel88 = restAdapter86.logLevel;
        boolean boolean89 = logLevel88.log();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(server80);
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test01425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01425");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log10 = restAdapter0.log;
        retrofit.RestAdapter.Log log11 = restAdapter0.log;
        java.lang.Throwable throwable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable12, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(log11);
    }

    @Test
    public void test01426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01426");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.client.Client.Provider provider30 = builder23.clientProvider;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        builder23.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("Retrofit-Idle");
        retrofit.Server server42 = builder41.server;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder51.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("Retrofit-Idle");
        retrofit.Server server60 = builder59.server;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = null;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = builder69.server;
        retrofit.RestAdapter.Log log71 = null;
        builder69.log = log71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel74 = builder73.logLevel;
        retrofit.RestAdapter.Builder builder75 = builder69.setLogLevel(logLevel74);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel74);
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel74);
        builder23.log = log50;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel80 = builder79.logLevel;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        builder81.logLevel = logLevel83;
        builder79.logLevel = logLevel83;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server14, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log50, logLevel83);
        boolean boolean87 = logLevel83.log();
        boolean boolean88 = logLevel83.log();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test01427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01427");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.callbackExecutor;
        retrofit.Profiler profiler7 = builder5.profiler;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Builder builder20 = builder9.setServer(server19);
        retrofit.RestAdapter restAdapter21 = builder20.build();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        builder29.logLevel = logLevel31;
        boolean boolean33 = logLevel31.log();
        builder22.logLevel = logLevel31;
        retrofit.RestAdapter.LogLevel logLevel35 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder20.setLogLevel(logLevel35);
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        retrofit.RestAdapter.Builder builder38 = builder0.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        retrofit.Profiler profiler41 = builder39.profiler;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel49 = builder48.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("Retrofit-Idle");
        retrofit.Server server53 = builder52.server;
        retrofit.RestAdapter.Builder builder54 = builder43.setServer(server53);
        java.util.concurrent.Executor executor55 = builder54.callbackExecutor;
        java.util.concurrent.Executor executor56 = null;
        builder54.callbackExecutor = executor56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = builder58.callbackExecutor;
        retrofit.Profiler profiler60 = builder58.profiler;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel68);
        retrofit.RestAdapter.Builder builder71 = builder69.setServer("Retrofit-Idle");
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Builder builder73 = builder62.setServer(server72);
        java.util.concurrent.Executor executor74 = builder73.callbackExecutor;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor76 = null;
        restAdapter75.callbackExecutor = executor76;
        retrofit.converter.Converter converter78 = restAdapter75.converter;
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter75.new RestHandler();
        retrofit.converter.Converter converter80 = restAdapter75.converter;
        java.util.concurrent.Executor executor81 = restAdapter75.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter75.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder73.setLogLevel(logLevel82);
        retrofit.RestAdapter.Builder builder85 = builder54.setLogLevel(logLevel82);
        retrofit.RestAdapter.Builder builder86 = builder38.setLogLevel(logLevel82);
        java.util.concurrent.Executor executor87 = builder86.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(converter78);
        org.junit.Assert.assertNull(converter80);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(executor87);
    }

    @Test
    public void test01428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01428");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel51);
        builder0.log = log27;
        retrofit.client.Client.Provider provider56 = null;
        builder0.clientProvider = provider56;
        retrofit.client.Client client58 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder59 = builder0.setClient(client58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test01429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01429");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider7 = restAdapter0.clientProvider;
        retrofit.client.Response response9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response11 = restAdapter0.logAndReplaceResponse("hi!", response9, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(provider7);
    }

    @Test
    public void test01430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01430");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel2 = builder1.logLevel;
        builder0.logLevel = logLevel2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.callbackExecutor;
        retrofit.Profiler profiler16 = builder14.profiler;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("Retrofit-Idle");
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Builder builder29 = builder18.setServer(server28);
        retrofit.RestAdapter restAdapter30 = builder29.build();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        builder12.callbackExecutor = executor31;
        builder0.callbackExecutor = executor31;
        retrofit.ErrorHandler errorHandler34 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder0.setLogLevel(logLevel35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNull(errorHandler34);
    }

    @Test
    public void test01431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01431");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.client.Client.Provider provider44 = builder37.clientProvider;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        builder37.log = log45;
        retrofit.RestAdapter.Builder builder47 = builder33.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server9, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log45, logLevel48);
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.converter.Converter converter52 = restAdapter49.converter;
        java.lang.Class<?> wildcardClass53 = restAdapter49.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test01432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01432");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        java.util.concurrent.Executor executor10 = builder8.httpExecutor;
        builder8.ensureSaneDefaults();
        java.util.concurrent.Executor executor12 = null;
        builder8.callbackExecutor = executor12;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(executor10);
    }

    @Test
    public void test01433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01433");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        java.util.concurrent.Executor executor15 = null;
        builder0.httpExecutor = executor15;
        retrofit.RestAdapter.LogLevel logLevel17 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        java.util.concurrent.Executor executor20 = null;
        builder18.httpExecutor = executor20;
        retrofit.Server server22 = builder18.server;
        retrofit.RestAdapter.LogLevel logLevel23 = builder18.logLevel;
        retrofit.ErrorHandler errorHandler24 = builder18.errorHandler;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        builder25.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("Retrofit-Idle");
        retrofit.Server server38 = builder37.server;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder47.setLogLevel(logLevel52);
        retrofit.client.Client.Provider provider54 = builder47.clientProvider;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        builder47.log = log55;
        retrofit.RestAdapter.Builder builder57 = builder46.setLog(log55);
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log55, logLevel58);
        builder25.logLevel = logLevel58;
        retrofit.RestAdapter.LogLevel logLevel61 = builder25.logLevel;
        retrofit.Profiler profiler62 = builder25.profiler;
        retrofit.RestAdapter.Builder builder64 = builder25.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel70 = builder69.logLevel;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder73 = builder71.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter74 = builder73.build();
        retrofit.Profiler profiler75 = null;
        builder73.profiler = profiler75;
        retrofit.Profiler profiler77 = null;
        builder73.profiler = profiler77;
        retrofit.converter.Converter converter79 = builder73.converter;
        builder64.converter = converter79;
        retrofit.RestAdapter.Builder builder81 = builder18.setConverter(converter79);
        retrofit.RestAdapter.Builder builder82 = builder0.setConverter(converter79);
        retrofit.Profiler profiler83 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder84 = builder0.setProfiler(profiler83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(converter79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test01434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01434");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        java.util.concurrent.Executor executor16 = null;
        builder0.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = builder0.converter;
        retrofit.Profiler profiler19 = builder0.profiler;
        retrofit.client.Client.Provider provider20 = builder0.clientProvider;
        retrofit.Profiler profiler21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder0.setProfiler(profiler21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(provider20);
    }

    @Test
    public void test01435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01435");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = null;
        restAdapter0.converter = converter3;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = builder8.server;
        retrofit.RequestInterceptor requestInterceptor10 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel16 = builder15.logLevel;
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel16);
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.RestAdapter restAdapter21 = builder19.build();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        java.util.concurrent.Executor executor26 = restAdapter24.httpExecutor;
        java.util.concurrent.Executor executor27 = null;
        restAdapter24.callbackExecutor = executor27;
        retrofit.client.Client.Provider provider29 = null;
        restAdapter24.clientProvider = provider29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("Retrofit-Idle");
        retrofit.Server server40 = builder39.server;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder57 = builder55.setServer("Retrofit-Idle");
        retrofit.Server server58 = builder57.server;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = null;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        retrofit.RestAdapter.Log log69 = null;
        builder67.log = log69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel72 = builder71.logLevel;
        retrofit.RestAdapter.Builder builder73 = builder67.setLogLevel(logLevel72);
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel72);
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel72);
        restAdapter24.log = log48;
        log48.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder79 = builder22.setLog(log48);
        builder19.log = log48;
        retrofit.RestAdapter.Log log81 = builder19.log;
        retrofit.client.Client.Provider provider82 = builder19.clientProvider;
        builder8.clientProvider = provider82;
        restAdapter0.clientProvider = provider82;
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(server40);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(server58);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(provider82);
    }

    @Test
    public void test01436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01436");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        builder18.logLevel = logLevel20;
        boolean boolean22 = logLevel20.log();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel20);
        retrofit.Profiler profiler24 = null;
        restAdapter23.profiler = profiler24;
        retrofit.converter.Converter converter26 = null;
        restAdapter23.converter = converter26;
        java.lang.Class<?> wildcardClass28 = restAdapter23.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test01437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01437");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.Server server11 = builder6.server;
        retrofit.client.Client.Provider provider12 = builder6.clientProvider;
        java.util.concurrent.Executor executor13 = builder6.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter14.new RestHandler();
        retrofit.ErrorHandler errorHandler18 = restAdapter14.errorHandler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("Retrofit-Idle");
        retrofit.Server server28 = builder27.server;
        restAdapter14.server = server28;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter14.logLevel;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter40 = builder39.build();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.logLevel;
        retrofit.RestAdapter.Log log42 = restAdapter40.log;
        restAdapter14.log = log42;
        log42.log("Retrofit-");
        builder6.log = log42;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor48 = null;
        restAdapter47.callbackExecutor = executor48;
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter47.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter47.requestInterceptor;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter52.logLevel;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.client.Client.Provider provider63 = builder56.clientProvider;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        builder56.log = log64;
        retrofit.RestAdapter.Builder builder66 = builder55.setLog(log64);
        retrofit.converter.Converter converter67 = null;
        builder55.converter = converter67;
        retrofit.RestAdapter.Log log69 = builder55.log;
        restAdapter52.log = log69;
        restAdapter47.log = log69;
        log69.log("");
        retrofit.RestAdapter.Builder builder74 = builder6.setLog(log69);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test01438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01438");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = builder2.server;
        retrofit.RestAdapter.Log log4 = null;
        builder2.log = log4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel7 = builder6.logLevel;
        retrofit.RestAdapter.Builder builder8 = builder2.setLogLevel(logLevel7);
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("Retrofit-Idle");
        retrofit.Server server11 = builder10.server;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.client.Client.Provider provider27 = builder20.clientProvider;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        builder20.log = log28;
        retrofit.RestAdapter.Builder builder30 = builder19.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log28, logLevel31);
        retrofit.RestAdapter.Builder builder33 = builder0.setServer(server11);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = builder34.server;
        retrofit.RestAdapter.Log log36 = null;
        builder34.log = log36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel39 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter43 = builder42.build();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.logLevel;
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter43.requestInterceptor;
        retrofit.RestAdapter.Builder builder46 = builder33.setRequestInterceptor(requestInterceptor45);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder47.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder55.setLog(log56);
        java.util.concurrent.Executor executor58 = builder55.httpExecutor;
        retrofit.RestAdapter restAdapter59 = builder55.build();
        java.util.concurrent.Executor executor60 = restAdapter59.httpExecutor;
        retrofit.converter.Converter converter61 = restAdapter59.converter;
        builder33.converter = converter61;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(converter61);
    }

    @Test
    public void test01439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01439");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder0.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.Log log9 = builder0.log;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        builder17.logLevel = logLevel19;
        boolean boolean21 = logLevel19.log();
        builder10.logLevel = logLevel19;
        retrofit.RestAdapter.Builder builder23 = builder0.setLogLevel(logLevel19);
        retrofit.Profiler profiler24 = builder23.profiler;
        builder23.ensureSaneDefaults();
        builder23.ensureSaneDefaults();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(profiler24);
    }

    @Test
    public void test01440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01440");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.client.Client.Provider provider14 = builder7.clientProvider;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        builder7.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder6.setLog(log15);
        retrofit.Profiler profiler18 = builder17.profiler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.RestAdapter restAdapter29 = builder27.build();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter32.new RestHandler();
        java.util.concurrent.Executor executor34 = restAdapter32.httpExecutor;
        java.util.concurrent.Executor executor35 = null;
        restAdapter32.callbackExecutor = executor35;
        retrofit.client.Client.Provider provider37 = null;
        restAdapter32.clientProvider = provider37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = builder39.server;
        retrofit.RestAdapter.Log log41 = null;
        builder39.log = log41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel44 = builder43.logLevel;
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder47 = builder45.setServer("Retrofit-Idle");
        retrofit.Server server48 = builder47.server;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("Retrofit-Idle");
        retrofit.Server server66 = builder65.server;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Log log74 = null;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.Server server76 = builder75.server;
        retrofit.RestAdapter.Log log77 = null;
        builder75.log = log77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel80 = builder79.logLevel;
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel80);
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log74, logLevel80);
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel80);
        restAdapter32.log = log56;
        log56.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder87 = builder30.setLog(log56);
        builder27.log = log56;
        retrofit.ErrorHandler errorHandler89 = builder27.errorHandler;
        retrofit.RestAdapter.Builder builder90 = builder17.setErrorHandler(errorHandler89);
        restAdapter0.errorHandler = errorHandler89;
        retrofit.Server server92 = restAdapter0.server;
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(server48);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(server92);
    }

    @Test
    public void test01441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01441");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.Server server32 = builder31.server;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel46);
        restAdapter0.server = server14;
        retrofit.Profiler profiler51 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler52 = null;
        restAdapter0.errorHandler = errorHandler52;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(profiler51);
    }

    @Test
    public void test01442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01442");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        builder8.logLevel = logLevel10;
        java.util.concurrent.Executor executor12 = null;
        builder8.callbackExecutor = executor12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = null;
        restAdapter14.callbackExecutor = executor15;
        retrofit.converter.Converter converter17 = restAdapter14.converter;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        restAdapter14.log = log18;
        builder8.log = log18;
        restAdapter0.log = log18;
        retrofit.Profiler profiler22 = null;
        restAdapter0.profiler = profiler22;
        java.lang.Throwable throwable24 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable24, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNotNull(log18);
    }

    @Test
    public void test01443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01443");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor12 = null;
        builder8.requestInterceptor = requestInterceptor12;
        retrofit.client.Client client14 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder15 = builder8.setClient(client14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test01444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01444");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.Server server32 = builder31.server;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel46);
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = builder61.server;
        retrofit.RestAdapter.Log log63 = null;
        builder61.log = log63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel66 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder61.setLogLevel(logLevel66);
        retrofit.client.Client.Provider provider68 = builder61.clientProvider;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        builder61.log = log69;
        retrofit.RestAdapter.Builder builder71 = builder57.setLog(log69);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        retrofit.RestAdapter.Builder builder78 = builder72.setLogLevel(logLevel77);
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server14, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log69, logLevel77);
        restAdapter0.server = server14;
        java.lang.Throwable throwable81 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable81, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(provider68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test01445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01445");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.httpExecutor = executor1;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.httpExecutor = executor3;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.Server server7 = restAdapter0.server;
        org.junit.Assert.assertNull(server7);
    }

    @Test
    public void test01446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01446");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel7 = builder6.logLevel;
        builder5.logLevel = logLevel7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.Server server18 = builder17.server;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.client.Client.Provider provider34 = builder27.clientProvider;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        builder27.log = log35;
        retrofit.RestAdapter.Builder builder37 = builder26.setLog(log35);
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log35, logLevel38);
        builder5.logLevel = logLevel38;
        retrofit.RestAdapter.LogLevel logLevel41 = builder5.logLevel;
        retrofit.Profiler profiler42 = builder5.profiler;
        retrofit.RestAdapter.Builder builder44 = builder5.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter54 = builder53.build();
        retrofit.Profiler profiler55 = null;
        builder53.profiler = profiler55;
        retrofit.Profiler profiler57 = null;
        builder53.profiler = profiler57;
        retrofit.converter.Converter converter59 = builder53.converter;
        builder44.converter = converter59;
        retrofit.RestAdapter.Builder builder61 = builder0.setConverter(converter59);
        java.util.concurrent.Executor executor62 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor64 = null;
        restAdapter63.callbackExecutor = executor64;
        retrofit.converter.Converter converter66 = null;
        restAdapter63.converter = converter66;
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter63.new RestHandler();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = builder69.callbackExecutor;
        retrofit.Profiler profiler71 = builder69.profiler;
        retrofit.RestAdapter.Builder builder73 = builder69.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = builder74.server;
        retrofit.RestAdapter.Log log76 = null;
        builder74.log = log76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel79 = builder78.logLevel;
        retrofit.RestAdapter.Builder builder80 = builder74.setLogLevel(logLevel79);
        retrofit.RestAdapter.Builder builder82 = builder80.setServer("Retrofit-Idle");
        retrofit.Server server83 = builder82.server;
        retrofit.RestAdapter.Builder builder84 = builder73.setServer(server83);
        retrofit.RestAdapter restAdapter85 = builder84.build();
        java.util.concurrent.Executor executor86 = restAdapter85.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler87 = restAdapter85.new RestHandler();
        retrofit.ErrorHandler errorHandler88 = restAdapter85.errorHandler;
        restAdapter63.errorHandler = errorHandler88;
        builder0.errorHandler = errorHandler88;
        retrofit.client.Client client91 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder92 = builder0.setClient(client91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(converter59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(server75);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNotNull(errorHandler88);
    }

    @Test
    public void test01447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01447");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.ErrorHandler errorHandler12 = null;
        restAdapter10.errorHandler = errorHandler12;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        java.util.concurrent.Executor executor24 = builder23.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor25 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = builder26.server;
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder26.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter35 = builder34.build();
        retrofit.Profiler profiler36 = null;
        builder34.profiler = profiler36;
        retrofit.Profiler profiler38 = null;
        builder34.profiler = profiler38;
        retrofit.converter.Converter converter40 = builder34.converter;
        retrofit.RestAdapter.Builder builder41 = builder23.setConverter(converter40);
        restAdapter10.converter = converter40;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor44 = null;
        restAdapter43.callbackExecutor = executor44;
        retrofit.converter.Converter converter46 = restAdapter43.converter;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        restAdapter43.log = log47;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel49;
        boolean boolean51 = logLevel49.log();
        restAdapter10.logLevel = logLevel49;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(converter40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test01448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01448");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        retrofit.Profiler profiler11 = builder10.profiler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.Server server21 = builder20.server;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder10.setServer(server21);
        retrofit.RestAdapter.Builder builder40 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder42 = builder10.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler43 = builder10.errorHandler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(errorHandler43);
    }

    @Test
    public void test01449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01449");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.RestAdapter.Log log8 = builder0.log;
        java.util.concurrent.Executor executor9 = null;
        builder0.callbackExecutor = executor9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel16 = builder15.logLevel;
        retrofit.RestAdapter.Builder builder17 = builder11.setLogLevel(logLevel16);
        retrofit.RequestInterceptor requestInterceptor18 = null;
        builder11.requestInterceptor = requestInterceptor18;
        retrofit.RestAdapter.Log log20 = builder11.log;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = builder21.server;
        retrofit.RestAdapter.Log log23 = null;
        builder21.log = log23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        retrofit.RestAdapter.Builder builder27 = builder21.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        builder28.logLevel = logLevel30;
        boolean boolean32 = logLevel30.log();
        builder21.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder34 = builder11.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider35 = builder34.clientProvider;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = restAdapter36.callbackExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = null;
        restAdapter38.callbackExecutor = executor39;
        retrofit.converter.Converter converter41 = null;
        restAdapter38.converter = converter41;
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.callbackExecutor;
        retrofit.Profiler profiler46 = builder44.profiler;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder57 = builder55.setServer("Retrofit-Idle");
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Builder builder59 = builder48.setServer(server58);
        retrofit.RestAdapter restAdapter60 = builder59.build();
        java.util.concurrent.Executor executor61 = restAdapter60.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.ErrorHandler errorHandler63 = restAdapter60.errorHandler;
        restAdapter38.errorHandler = errorHandler63;
        restAdapter36.errorHandler = errorHandler63;
        retrofit.RestAdapter.Builder builder66 = builder34.setErrorHandler(errorHandler63);
        retrofit.RestAdapter.Builder builder67 = builder0.setErrorHandler(errorHandler63);
        retrofit.client.Client.Provider provider68 = builder0.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(server58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNotNull(errorHandler63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(provider68);
    }

    @Test
    public void test01450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01450");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("Retrofit-Idle");
        retrofit.Server server26 = builder25.server;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("Retrofit-Idle");
        retrofit.Server server44 = builder43.server;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = null;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel58);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel58);
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = builder70.server;
        retrofit.RestAdapter.Log log72 = null;
        builder70.log = log72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel75 = builder74.logLevel;
        retrofit.RestAdapter.Builder builder76 = builder70.setLogLevel(logLevel75);
        retrofit.client.Client.Provider provider77 = builder70.clientProvider;
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        builder70.log = log78;
        retrofit.RestAdapter.Builder builder80 = builder69.setLog(log78);
        retrofit.converter.Converter converter81 = null;
        builder69.converter = converter81;
        retrofit.RestAdapter.Log log83 = builder69.log;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor85 = builder84.callbackExecutor;
        retrofit.Profiler profiler86 = builder84.profiler;
        retrofit.RestAdapter.Builder builder88 = builder84.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel89 = builder84.logLevel;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server26, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log83, logLevel89);
        retrofit.RestAdapter.Builder builder91 = builder15.setServer(server26);
        retrofit.RequestInterceptor requestInterceptor92 = builder91.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(provider77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNull(executor85);
        org.junit.Assert.assertNull(profiler86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(requestInterceptor92);
    }

    @Test
    public void test01451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01451");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel51);
        builder0.log = log27;
        java.util.concurrent.Executor executor56 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("Retrofit-Idle");
        retrofit.Server server66 = builder65.server;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.Server server76 = builder75.server;
        retrofit.RestAdapter.Log log77 = null;
        builder75.log = log77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel80 = builder79.logLevel;
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel80);
        retrofit.client.Client.Provider provider82 = builder75.clientProvider;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        builder75.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder74.setLog(log83);
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log83, logLevel86);
        retrofit.RestAdapter.Builder builder88 = builder0.setServer(server66);
        retrofit.RestAdapter.LogLevel logLevel89 = builder88.logLevel;
        retrofit.converter.Converter converter90 = null;
        builder88.converter = converter90;
        retrofit.converter.Converter converter92 = builder88.converter;
        retrofit.RestAdapter.LogLevel logLevel93 = builder88.logLevel;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(provider82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01452");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        java.util.concurrent.Executor executor8 = builder6.callbackExecutor;
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Profiler profiler11 = builder6.profiler;
        retrofit.Profiler profiler12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder13 = builder6.setProfiler(profiler12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(profiler11);
    }

    @Test
    public void test01453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01453");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = null;
        builder0.converter = converter1;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter3.new RestHandler();
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter3.errorHandler = errorHandler5;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter3.new RestHandler();
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter8.new RestHandler();
        java.util.concurrent.Executor executor10 = restAdapter8.httpExecutor;
        java.util.concurrent.Executor executor11 = null;
        restAdapter8.callbackExecutor = executor11;
        retrofit.ErrorHandler errorHandler13 = null;
        restAdapter8.errorHandler = errorHandler13;
        retrofit.client.Client.Provider provider15 = null;
        restAdapter8.clientProvider = provider15;
        java.util.concurrent.Executor executor17 = restAdapter8.httpExecutor;
        retrofit.RestAdapter.Log log18 = restAdapter8.log;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.RestAdapter restAdapter29 = builder27.build();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter32.new RestHandler();
        java.util.concurrent.Executor executor34 = restAdapter32.httpExecutor;
        java.util.concurrent.Executor executor35 = null;
        restAdapter32.callbackExecutor = executor35;
        retrofit.client.Client.Provider provider37 = null;
        restAdapter32.clientProvider = provider37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = builder39.server;
        retrofit.RestAdapter.Log log41 = null;
        builder39.log = log41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel44 = builder43.logLevel;
        retrofit.RestAdapter.Builder builder45 = builder39.setLogLevel(logLevel44);
        retrofit.RestAdapter.Builder builder47 = builder45.setServer("Retrofit-Idle");
        retrofit.Server server48 = builder47.server;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("Retrofit-Idle");
        retrofit.Server server66 = builder65.server;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Log log74 = null;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.Server server76 = builder75.server;
        retrofit.RestAdapter.Log log77 = null;
        builder75.log = log77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel80 = builder79.logLevel;
        retrofit.RestAdapter.Builder builder81 = builder75.setLogLevel(logLevel80);
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log74, logLevel80);
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel80);
        restAdapter32.log = log56;
        log56.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder87 = builder30.setLog(log56);
        builder27.log = log56;
        retrofit.RequestInterceptor requestInterceptor89 = builder27.requestInterceptor;
        restAdapter8.requestInterceptor = requestInterceptor89;
        restAdapter3.requestInterceptor = requestInterceptor89;
        retrofit.RestAdapter.Builder builder92 = builder0.setRequestInterceptor(requestInterceptor89);
        retrofit.client.Client client93 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder94 = builder0.setClient(client93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(server48);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(requestInterceptor89);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test01454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01454");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder10 = builder8.setLog(log9);
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider23 = builder16.clientProvider;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        builder16.log = log24;
        retrofit.RestAdapter.Builder builder26 = builder12.setLog(log24);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider38 = builder31.clientProvider;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        builder31.log = log39;
        retrofit.RestAdapter.Builder builder41 = builder27.setLog(log39);
        retrofit.RestAdapter.Builder builder42 = builder12.setLog(log39);
        log39.log("");
        log39.log("Retrofit-");
        retrofit.RestAdapter.Builder builder47 = builder8.setLog(log39);
        retrofit.RestAdapter restAdapter48 = builder8.build();
        retrofit.Profiler profiler49 = builder8.profiler;
        retrofit.Profiler profiler50 = null;
        builder8.profiler = profiler50;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNull(profiler49);
    }

    @Test
    public void test01455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01455");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("Retrofit-Idle");
        retrofit.Server server37 = builder36.server;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel51 = builder50.logLevel;
        retrofit.RestAdapter.Builder builder52 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel51);
        builder0.log = log27;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = builder0.setServer("Retrofit-Idle");
        builder58.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter60 = builder58.build();
        retrofit.RestAdapter.Log log61 = restAdapter60.log;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(log61);
    }

    @Test
    public void test01456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01456");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        builder24.logLevel = logLevel26;
        boolean boolean28 = logLevel26.log();
        builder17.logLevel = logLevel26;
        retrofit.RestAdapter.LogLevel logLevel30 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder15.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Log log34 = null;
        builder32.log = log34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder40 = builder38.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        java.util.concurrent.Executor executor43 = builder40.httpExecutor;
        retrofit.RestAdapter restAdapter44 = builder40.build();
        java.util.concurrent.Executor executor45 = restAdapter44.httpExecutor;
        retrofit.converter.Converter converter46 = restAdapter44.converter;
        retrofit.RestAdapter.Builder builder47 = builder31.setConverter(converter46);
        retrofit.Profiler profiler48 = null;
        builder31.profiler = profiler48;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(converter46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test01457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01457");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = builder19.callbackExecutor;
        retrofit.Profiler profiler21 = builder19.profiler;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel29 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("Retrofit-Idle");
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Builder builder34 = builder23.setServer(server33);
        java.util.concurrent.Executor executor35 = builder34.callbackExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = null;
        restAdapter36.callbackExecutor = executor37;
        retrofit.converter.Converter converter39 = restAdapter36.converter;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter36.new RestHandler();
        retrofit.converter.Converter converter41 = restAdapter36.converter;
        java.util.concurrent.Executor executor42 = restAdapter36.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter36.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = builder34.setLogLevel(logLevel43);
        retrofit.RestAdapter.Builder builder46 = builder15.setLogLevel(logLevel43);
        retrofit.RequestInterceptor requestInterceptor47 = builder15.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor47);
    }

    @Test
    public void test01458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01458");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        java.lang.Throwable throwable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable4, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(errorHandler3);
    }

    @Test
    public void test01459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01459");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        java.util.concurrent.Executor executor16 = builder4.callbackExecutor;
        retrofit.converter.Converter converter17 = builder4.converter;
        retrofit.Profiler profiler18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder19 = builder4.setProfiler(profiler18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter17);
    }

    @Test
    public void test01460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01460");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.Server server7 = restAdapter0.server;
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(server7);
    }

    @Test
    public void test01461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01461");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        retrofit.client.Client.Provider provider9 = null;
        restAdapter0.clientProvider = provider9;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor12 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter0.logLevel;
        java.lang.Throwable throwable14 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable14, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(logLevel13);
    }

    @Test
    public void test01462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01462");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        restAdapter0.server = server14;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider17 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log18 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(log18);
    }

    @Test
    public void test01463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01463");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = null;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        builder28.logLevel = logLevel30;
        boolean boolean32 = logLevel30.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel30);
        retrofit.Profiler profiler34 = null;
        restAdapter33.profiler = profiler34;
        retrofit.Server server36 = restAdapter33.server;
        retrofit.RestAdapter.Builder builder37 = builder8.setServer(server36);
        retrofit.RequestInterceptor requestInterceptor38 = builder37.requestInterceptor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(requestInterceptor38);
    }

    @Test
    public void test01464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01464");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        java.util.concurrent.Executor executor15 = null;
        builder0.httpExecutor = executor15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter17.new RestHandler();
        java.util.concurrent.Executor executor19 = restAdapter17.httpExecutor;
        java.util.concurrent.Executor executor20 = null;
        restAdapter17.callbackExecutor = executor20;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter17.errorHandler = errorHandler22;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter17.logLevel = logLevel24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter17.logLevel = logLevel26;
        boolean boolean28 = logLevel26.log();
        retrofit.RestAdapter.Builder builder29 = builder0.setLogLevel(logLevel26);
        retrofit.Profiler profiler30 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder31 = builder29.setProfiler(profiler30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test01465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01465");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("Retrofit-Idle");
        retrofit.Server server32 = builder31.server;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        retrofit.RestAdapter.Log log43 = null;
        builder41.log = log43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel46);
        restAdapter0.server = server14;
        retrofit.client.Client.Provider provider51 = null;
        restAdapter0.clientProvider = provider51;
        retrofit.converter.Converter converter53 = null;
        restAdapter0.converter = converter53;
        retrofit.ErrorHandler errorHandler55 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter0.new RestHandler();
        retrofit.Server server57 = restAdapter0.server;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNotNull(server57);
    }

    @Test
    public void test01466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01466");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(logLevel4);
    }

    @Test
    public void test01467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01467");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.client.Client.Provider provider44 = builder37.clientProvider;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        builder37.log = log45;
        retrofit.RestAdapter.Builder builder47 = builder33.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server9, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log45, logLevel48);
        retrofit.converter.Converter converter50 = null;
        restAdapter49.converter = converter50;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter49.new RestHandler();
        retrofit.Profiler profiler53 = null;
        restAdapter49.profiler = profiler53;
        retrofit.Profiler profiler55 = null;
        restAdapter49.profiler = profiler55;
        retrofit.ErrorHandler errorHandler57 = restAdapter49.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = builder59.server;
        retrofit.RestAdapter.Log log61 = null;
        builder59.log = log61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        retrofit.RestAdapter.Builder builder65 = builder59.setLogLevel(logLevel64);
        java.util.concurrent.Executor executor66 = builder65.callbackExecutor;
        java.util.concurrent.Executor executor67 = builder65.callbackExecutor;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = builder68.server;
        retrofit.RestAdapter.Log log70 = null;
        builder68.log = log70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel73 = builder72.logLevel;
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder76 = builder74.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder78 = builder76.setLog(log77);
        java.util.concurrent.Executor executor79 = builder76.httpExecutor;
        retrofit.RestAdapter restAdapter80 = builder76.build();
        java.util.concurrent.Executor executor81 = restAdapter80.httpExecutor;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.Server server83 = builder82.server;
        retrofit.RestAdapter.Log log84 = null;
        builder82.log = log84;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel87 = builder86.logLevel;
        retrofit.RestAdapter.Builder builder88 = builder82.setLogLevel(logLevel87);
        retrofit.RestAdapter.Builder builder90 = builder88.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder92 = builder90.setLog(log91);
        java.util.concurrent.Executor executor93 = builder90.httpExecutor;
        retrofit.RestAdapter restAdapter94 = builder90.build();
        java.util.concurrent.Executor executor95 = restAdapter94.httpExecutor;
        retrofit.RestAdapter.Builder builder96 = builder65.setExecutors(executor81, executor95);
        restAdapter49.httpExecutor = executor95;
        retrofit.ErrorHandler errorHandler98 = restAdapter49.errorHandler;
        retrofit.converter.Converter converter99 = restAdapter49.converter;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(executor79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(log91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(executor93);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertNotNull(executor95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNull(errorHandler98);
        org.junit.Assert.assertNull(converter99);
    }

    @Test
    public void test01468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01468");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder0.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter.Log log9 = builder0.log;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        builder17.logLevel = logLevel19;
        boolean boolean21 = logLevel19.log();
        builder10.logLevel = logLevel19;
        retrofit.RestAdapter.Builder builder23 = builder0.setLogLevel(logLevel19);
        java.util.concurrent.Executor executor24 = builder23.callbackExecutor;
        builder23.ensureSaneDefaults();
        java.util.concurrent.Executor executor26 = builder23.httpExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = builder35.setLog(log36);
        java.util.concurrent.Executor executor38 = builder35.httpExecutor;
        retrofit.RestAdapter.Builder builder40 = builder35.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider49 = builder42.clientProvider;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        builder42.log = log50;
        retrofit.RestAdapter.Builder builder52 = builder41.setLog(log50);
        retrofit.Profiler profiler53 = builder41.profiler;
        java.util.concurrent.Executor executor54 = null;
        builder41.callbackExecutor = executor54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder56.setLogLevel(logLevel61);
        retrofit.client.Client.Provider provider63 = builder56.clientProvider;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        builder56.log = log64;
        builder41.log = log64;
        retrofit.RestAdapter.Builder builder67 = builder40.setLog(log64);
        retrofit.RestAdapter.Builder builder68 = builder23.setLog(log64);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter69 = builder68.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test01469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01469");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel6 = null;
        restAdapter0.logLevel = logLevel6;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider10 = restAdapter0.clientProvider;
        retrofit.ErrorHandler errorHandler11 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(errorHandler11);
    }

    @Test
    public void test01470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01470");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.RequestInterceptor requestInterceptor26 = null;
        restAdapter25.requestInterceptor = requestInterceptor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel34 = builder33.logLevel;
        builder32.logLevel = logLevel34;
        java.util.concurrent.Executor executor36 = null;
        builder32.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = null;
        restAdapter38.callbackExecutor = executor39;
        retrofit.converter.Converter converter41 = restAdapter38.converter;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        restAdapter38.log = log42;
        builder32.log = log42;
        builder28.log = log42;
        log42.log("Retrofit-Idle");
        restAdapter25.log = log42;
        retrofit.RestAdapter.LogLevel logLevel49 = null;
        restAdapter25.logLevel = logLevel49;
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter25.new RestHandler();
        retrofit.client.Response response54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response56 = restAdapter25.logAndReplaceResponse("hi!", response54, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(logLevel51);
    }

    @Test
    public void test01471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01471");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = null;
        restAdapter15.callbackExecutor = executor16;
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.converter.Converter converter19 = restAdapter15.converter;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.callbackExecutor;
        retrofit.Profiler profiler22 = builder20.profiler;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("Retrofit-Idle");
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Builder builder35 = builder24.setServer(server34);
        restAdapter15.server = server34;
        retrofit.RestAdapter.Builder builder37 = builder0.setServer(server34);
        retrofit.ErrorHandler errorHandler38 = builder0.errorHandler;
        java.util.concurrent.Executor executor39 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(executor39);
    }

    @Test
    public void test01472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01472");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.RestAdapter restAdapter10 = builder8.build();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.Server server12 = restAdapter10.server;
        java.lang.Class<?> wildcardClass13 = restAdapter10.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test01473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01473");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.Server server16 = builder15.server;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("Retrofit-Idle");
        retrofit.Server server34 = builder33.server;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = null;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel48 = builder47.logLevel;
        retrofit.RestAdapter.Builder builder49 = builder43.setLogLevel(logLevel48);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel48);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel48);
        restAdapter0.log = log24;
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter0.logLevel;
        retrofit.Profiler profiler54 = null;
        restAdapter0.profiler = profiler54;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler57 = null;
        restAdapter0.profiler = profiler57;
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(logLevel53);
    }

    @Test
    public void test01474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01474");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        java.util.concurrent.Executor executor16 = null;
        builder0.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = builder0.converter;
        retrofit.ErrorHandler errorHandler19 = builder0.errorHandler;
        java.util.concurrent.Executor executor20 = null;
        builder0.callbackExecutor = executor20;
        retrofit.RestAdapter.Builder builder23 = builder0.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("Retrofit-");
        retrofit.Profiler profiler26 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder27 = builder0.setProfiler(profiler26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test01475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01475");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.converter.Converter converter1 = null;
        restAdapter0.converter = converter1;
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = builder4.callbackExecutor;
        retrofit.Profiler profiler6 = builder4.profiler;
        retrofit.RestAdapter.Builder builder8 = builder4.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Builder builder19 = builder8.setServer(server18);
        retrofit.RestAdapter restAdapter20 = builder19.build();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        retrofit.client.Client.Provider provider22 = restAdapter20.clientProvider;
        restAdapter0.clientProvider = provider22;
        retrofit.client.Response response25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response27 = restAdapter0.logAndReplaceResponse("", response25, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(provider22);
    }

    @Test
    public void test01476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01476");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel2 = builder1.logLevel;
        builder0.logLevel = logLevel2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("Retrofit-Idle");
        retrofit.Server server13 = builder12.server;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        retrofit.client.Client.Provider provider29 = builder22.clientProvider;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        builder22.log = log30;
        retrofit.RestAdapter.Builder builder32 = builder21.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log30, logLevel33);
        builder0.logLevel = logLevel33;
        retrofit.RestAdapter.LogLevel logLevel36 = builder0.logLevel;
        retrofit.Profiler profiler37 = null;
        builder0.profiler = profiler37;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder40 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01477");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.LogLevel logLevel13 = builder0.logLevel;
        retrofit.Profiler profiler14 = builder0.profiler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.Profiler profiler17 = builder15.profiler;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel25 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Builder builder30 = builder19.setServer(server29);
        retrofit.RestAdapter.Builder builder31 = builder0.setServer(server29);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Log log34 = null;
        builder32.log = log34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        retrofit.RestAdapter.Builder builder38 = builder32.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder40 = builder38.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = builder40.setLog(log41);
        java.util.concurrent.Executor executor43 = builder40.httpExecutor;
        retrofit.RestAdapter.Builder builder45 = builder40.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter46 = null;
        builder45.converter = converter46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder56.setLog(log57);
        java.util.concurrent.Executor executor59 = builder56.httpExecutor;
        retrofit.RestAdapter restAdapter60 = builder56.build();
        java.util.concurrent.Executor executor61 = restAdapter60.httpExecutor;
        builder45.callbackExecutor = executor61;
        builder0.callbackExecutor = executor61;
        retrofit.converter.Converter converter64 = builder0.converter;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNull(converter64);
    }

    @Test
    public void test01478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01478");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.client.Client.Provider provider5 = null;
        restAdapter0.clientProvider = provider5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.client.Response response9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response11 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response9, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(logLevel7);
    }

    @Test
    public void test01479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01479");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        java.util.concurrent.Executor executor5 = null;
        restAdapter0.callbackExecutor = executor5;
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.httpExecutor = executor7;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter10 = null;
        restAdapter0.converter = converter10;
        java.util.concurrent.Executor executor12 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RequestInterceptor requestInterceptor15 = builder13.requestInterceptor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        retrofit.RestAdapter restAdapter26 = builder24.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter29.new RestHandler();
        java.util.concurrent.Executor executor31 = restAdapter29.httpExecutor;
        java.util.concurrent.Executor executor32 = null;
        restAdapter29.callbackExecutor = executor32;
        retrofit.client.Client.Provider provider34 = null;
        restAdapter29.clientProvider = provider34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = builder36.server;
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel41 = builder40.logLevel;
        retrofit.RestAdapter.Builder builder42 = builder36.setLogLevel(logLevel41);
        retrofit.RestAdapter.Builder builder44 = builder42.setServer("Retrofit-Idle");
        retrofit.Server server45 = builder44.server;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = builder54.server;
        retrofit.RestAdapter.Log log56 = null;
        builder54.log = log56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel59 = builder58.logLevel;
        retrofit.RestAdapter.Builder builder60 = builder54.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder62 = builder60.setServer("Retrofit-Idle");
        retrofit.Server server63 = builder62.server;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = null;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        retrofit.RestAdapter.Builder builder78 = builder72.setLogLevel(logLevel77);
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel77);
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel77);
        restAdapter29.log = log53;
        log53.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder84 = builder27.setLog(log53);
        builder24.log = log53;
        retrofit.RestAdapter.Log log86 = builder24.log;
        retrofit.client.Client.Provider provider87 = builder24.clientProvider;
        builder13.clientProvider = provider87;
        restAdapter0.clientProvider = provider87;
        java.util.concurrent.Executor executor90 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(server63);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(provider87);
        org.junit.Assert.assertNull(executor90);
    }

    @Test
    public void test01480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01480");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.client.Client.Provider provider17 = null;
        restAdapter16.clientProvider = provider17;
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter16.getLogLevel();
        retrofit.ErrorHandler errorHandler21 = null;
        restAdapter16.errorHandler = errorHandler21;
        java.util.concurrent.Executor executor23 = null;
        restAdapter16.callbackExecutor = executor23;
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter16.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter16.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor25);
    }

    @Test
    public void test01481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01481");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider9 = null;
        builder6.clientProvider = provider9;
        retrofit.Server server11 = builder6.server;
        retrofit.client.Client.Provider provider12 = builder6.clientProvider;
        java.util.concurrent.Executor executor13 = builder6.callbackExecutor;
        retrofit.client.Client.Provider provider14 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder15 = builder6.setClient(provider14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test01482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01482");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor3 = builder2.callbackExecutor;
        retrofit.Profiler profiler4 = builder2.profiler;
        retrofit.RestAdapter.Builder builder6 = builder2.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel12 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder13 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("Retrofit-Idle");
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Builder builder17 = builder6.setServer(server16);
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider32 = builder25.clientProvider;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        builder25.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("Retrofit-Idle");
        retrofit.Server server44 = builder43.server;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("Retrofit-Idle");
        retrofit.Server server62 = builder61.server;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = null;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel76 = builder75.logLevel;
        retrofit.RestAdapter.Builder builder77 = builder71.setLogLevel(logLevel76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel76);
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel76);
        builder25.log = log52;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel85 = builder84.logLevel;
        builder83.logLevel = logLevel85;
        builder81.logLevel = logLevel85;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server16, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log52, logLevel85);
        builder0.server = server16;
        retrofit.ErrorHandler errorHandler90 = builder0.errorHandler;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder92 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler90);
    }

    @Test
    public void test01483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01483");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter5 = builder4.converter;
        retrofit.RestAdapter.LogLevel logLevel6 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.Profiler profiler9 = builder7.profiler;
        retrofit.RestAdapter.Builder builder11 = builder7.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.Server server21 = builder20.server;
        retrofit.RestAdapter.Builder builder22 = builder11.setServer(server21);
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider37 = builder30.clientProvider;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        builder30.log = log38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("Retrofit-Idle");
        retrofit.Server server49 = builder48.server;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel63 = builder62.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder58.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder66 = builder64.setServer("Retrofit-Idle");
        retrofit.Server server67 = builder66.server;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = null;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        retrofit.RestAdapter.Log log78 = null;
        builder76.log = log78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel81 = builder80.logLevel;
        retrofit.RestAdapter.Builder builder82 = builder76.setLogLevel(logLevel81);
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel81);
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel81);
        builder30.log = log57;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel87 = builder86.logLevel;
        retrofit.RestAdapter.Builder builder88 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder89 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel90 = builder89.logLevel;
        builder88.logLevel = logLevel90;
        builder86.logLevel = logLevel90;
        retrofit.RestAdapter restAdapter93 = new retrofit.RestAdapter(server21, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log57, logLevel90);
        retrofit.RestAdapter.Builder builder94 = builder4.setLog(log57);
        retrofit.ErrorHandler errorHandler95 = null;
        builder4.errorHandler = errorHandler95;
        java.util.concurrent.Executor executor97 = builder4.httpExecutor;
        retrofit.RestAdapter restAdapter98 = builder4.build();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(server67);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(executor97);
        org.junit.Assert.assertNotNull(restAdapter98);
    }

    @Test
    public void test01484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01484");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter4 = null;
        restAdapter0.converter = converter4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter8 = null;
        restAdapter0.converter = converter8;
        retrofit.ErrorHandler errorHandler10 = null;
        restAdapter0.errorHandler = errorHandler10;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(logLevel12);
    }

    @Test
    public void test01485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01485");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter6 = null;
        restAdapter0.converter = converter6;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler9 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter0.new RestHandler();
        retrofit.client.Request request13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request14 = restAdapter0.logAndReplaceRequest(request13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(profiler9);
    }

    @Test
    public void test01486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01486");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = builder0.server;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.Profiler profiler10 = builder8.profiler;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("Retrofit-Idle");
        retrofit.Server server22 = builder21.server;
        retrofit.RestAdapter.Builder builder23 = builder12.setServer(server22);
        java.util.concurrent.Executor executor24 = builder23.callbackExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = null;
        restAdapter25.callbackExecutor = executor26;
        retrofit.converter.Converter converter28 = restAdapter25.converter;
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter25.new RestHandler();
        retrofit.converter.Converter converter30 = restAdapter25.converter;
        java.util.concurrent.Executor executor31 = restAdapter25.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter25.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder23.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel44 = builder43.logLevel;
        builder42.logLevel = logLevel44;
        boolean boolean46 = logLevel44.log();
        builder35.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = builder48.callbackExecutor;
        retrofit.Profiler profiler50 = builder48.profiler;
        retrofit.RestAdapter.Builder builder52 = builder48.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log53 = builder48.log;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = builder54.server;
        retrofit.RestAdapter.Log log56 = null;
        builder54.log = log56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel59 = builder58.logLevel;
        retrofit.RestAdapter.Builder builder60 = builder54.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder62 = builder60.setServer("Retrofit-Idle");
        retrofit.Server server63 = builder62.server;
        java.util.concurrent.Executor executor64 = builder62.httpExecutor;
        java.util.concurrent.Executor executor65 = builder62.callbackExecutor;
        retrofit.ErrorHandler errorHandler66 = null;
        builder62.errorHandler = errorHandler66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = builder68.server;
        retrofit.RestAdapter.Log log70 = null;
        builder68.log = log70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel73 = builder72.logLevel;
        retrofit.RestAdapter.Builder builder74 = builder68.setLogLevel(logLevel73);
        java.util.concurrent.Executor executor75 = builder74.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor76 = builder74.requestInterceptor;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server78 = builder77.server;
        retrofit.RestAdapter.Log log79 = null;
        builder77.log = log79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        retrofit.RestAdapter.Builder builder83 = builder77.setLogLevel(logLevel82);
        retrofit.RestAdapter.Builder builder85 = builder83.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter86 = builder85.build();
        retrofit.Profiler profiler87 = null;
        builder85.profiler = profiler87;
        retrofit.Profiler profiler89 = null;
        builder85.profiler = profiler89;
        retrofit.converter.Converter converter91 = builder85.converter;
        retrofit.RestAdapter.Builder builder92 = builder74.setConverter(converter91);
        retrofit.RestAdapter.Builder builder93 = builder62.setConverter(converter91);
        builder48.converter = converter91;
        builder35.converter = converter91;
        builder34.converter = converter91;
        builder0.converter = converter91;
        retrofit.client.Client.Provider provider98 = builder0.clientProvider;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(server63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(requestInterceptor76);
        org.junit.Assert.assertNull(server78);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNull(provider98);
    }

    @Test
    public void test01487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01487");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Server server3 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        java.util.concurrent.Executor executor7 = null;
        builder5.httpExecutor = executor7;
        retrofit.Server server9 = builder5.server;
        retrofit.RestAdapter.LogLevel logLevel10 = builder5.logLevel;
        retrofit.ErrorHandler errorHandler11 = builder5.errorHandler;
        retrofit.ErrorHandler errorHandler12 = builder5.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.Profiler profiler15 = builder13.profiler;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("Retrofit-Idle");
        retrofit.Server server27 = builder26.server;
        retrofit.RestAdapter.Builder builder28 = builder17.setServer(server27);
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = null;
        restAdapter36.callbackExecutor = executor37;
        retrofit.converter.Converter converter39 = restAdapter36.converter;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        restAdapter36.log = log40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor43 = null;
        restAdapter42.httpExecutor = executor43;
        java.util.concurrent.Executor executor45 = null;
        restAdapter42.httpExecutor = executor45;
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel53);
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("Retrofit-Idle");
        retrofit.Server server57 = builder56.server;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = null;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = builder66.server;
        retrofit.RestAdapter.Log log68 = null;
        builder66.log = log68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel71 = builder70.logLevel;
        retrofit.RestAdapter.Builder builder72 = builder66.setLogLevel(logLevel71);
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel71);
        boolean boolean74 = logLevel71.log();
        restAdapter42.logLevel = logLevel71;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server27, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log40, logLevel71);
        retrofit.RestAdapter.Builder builder77 = builder5.setServer(server27);
        retrofit.RestAdapter restAdapter78 = builder5.build();
        retrofit.RequestInterceptor requestInterceptor79 = builder5.requestInterceptor;
        retrofit.RestAdapter.Builder builder80 = builder0.setRequestInterceptor(requestInterceptor79);
        retrofit.client.Client client81 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder82 = builder80.setClient(client81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(requestInterceptor79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test01488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01488");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("Retrofit-Idle");
        retrofit.Server server9 = builder8.server;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = builder10.callbackExecutor;
        retrofit.Profiler profiler12 = builder10.profiler;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder21 = builder15.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("Retrofit-Idle");
        retrofit.Server server24 = builder23.server;
        retrofit.RestAdapter.Builder builder25 = builder14.setServer(server24);
        retrofit.RestAdapter restAdapter26 = builder25.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        builder34.logLevel = logLevel36;
        boolean boolean38 = logLevel36.log();
        builder27.logLevel = logLevel36;
        retrofit.RestAdapter.LogLevel logLevel40 = builder27.logLevel;
        retrofit.Profiler profiler41 = builder27.profiler;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = builder42.callbackExecutor;
        retrofit.Profiler profiler44 = builder42.profiler;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.RestAdapter.Log log49 = null;
        builder47.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder47.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("Retrofit-Idle");
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Builder builder57 = builder46.setServer(server56);
        retrofit.RestAdapter.Builder builder58 = builder27.setServer(server56);
        retrofit.RestAdapter.Builder builder59 = builder25.setServer(server56);
        retrofit.ErrorHandler errorHandler60 = builder59.errorHandler;
        builder8.errorHandler = errorHandler60;
        retrofit.converter.Converter converter62 = builder8.converter;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(profiler44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(errorHandler60);
        org.junit.Assert.assertNull(converter62);
    }

    @Test
    public void test01489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01489");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        builder7.logLevel = logLevel9;
        boolean boolean11 = logLevel9.log();
        builder0.logLevel = logLevel9;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder0.requestInterceptor = requestInterceptor13;
        java.util.concurrent.Executor executor15 = null;
        builder0.httpExecutor = executor15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.client.Client.Provider provider24 = builder17.clientProvider;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log25;
        builder0.log = log25;
        retrofit.Profiler profiler28 = null;
        builder0.profiler = profiler28;
        retrofit.client.Client.Provider provider30 = builder0.clientProvider;
        java.util.concurrent.Executor executor31 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor32 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor33 = null;
        builder0.callbackExecutor = executor33;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(executor32);
    }

    @Test
    public void test01490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01490");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.Server server15 = builder0.server;
        java.util.concurrent.Executor executor16 = null;
        builder0.callbackExecutor = executor16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        builder25.logLevel = logLevel27;
        boolean boolean29 = logLevel27.log();
        builder18.logLevel = logLevel27;
        retrofit.RestAdapter.LogLevel logLevel31 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder0.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel38 = builder37.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = builder41.setLog(log42);
        retrofit.RestAdapter.Log log44 = builder41.log;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel50 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder55 = builder53.setLog(log54);
        builder41.log = log54;
        builder0.log = log54;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter58 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test01491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01491");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.ErrorHandler errorHandler4 = null;
        builder0.errorHandler = errorHandler4;
        org.junit.Assert.assertNull(executor1);
    }

    @Test
    public void test01492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01492");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = null;
        restAdapter0.callbackExecutor = executor1;
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel6 = null;
        restAdapter0.logLevel = logLevel6;
        java.util.concurrent.Executor executor8 = null;
        restAdapter0.httpExecutor = executor8;
        retrofit.converter.Converter converter10 = null;
        restAdapter0.converter = converter10;
        retrofit.Profiler profiler12 = null;
        restAdapter0.profiler = profiler12;
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel15 = null;
        restAdapter0.logLevel = logLevel15;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(requestInterceptor14);
    }

    @Test
    public void test01493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01493");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.Server server2 = builder1.server;
        retrofit.RestAdapter.Log log3 = null;
        builder1.log = log3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder7 = builder1.setLogLevel(logLevel6);
        retrofit.client.Client.Provider provider8 = builder1.clientProvider;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder1.log = log9;
        retrofit.RestAdapter.Builder builder11 = builder0.setLog(log9);
        retrofit.RestAdapter.Log log12 = builder0.log;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor15 = null;
        restAdapter14.requestInterceptor = requestInterceptor15;
        retrofit.Profiler profiler17 = null;
        restAdapter14.profiler = profiler17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = builder19.callbackExecutor;
        retrofit.Profiler profiler21 = builder19.profiler;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel29 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("Retrofit-Idle");
        retrofit.Server server33 = builder32.server;
        retrofit.RestAdapter.Builder builder34 = builder23.setServer(server33);
        retrofit.RestAdapter restAdapter35 = builder34.build();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        restAdapter14.callbackExecutor = executor36;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder38 = builder0.setExecutors(executor13, executor36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(executor36);
    }

    @Test
    public void test01494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01494");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RestAdapter.Log log6 = null;
        builder4.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder10 = builder4.setLogLevel(logLevel9);
        retrofit.client.Client.Provider provider11 = builder4.clientProvider;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder4.log = log12;
        retrofit.RestAdapter.Builder builder14 = builder0.setLog(log12);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel24 = builder23.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder19.setLogLevel(logLevel24);
        retrofit.client.Client.Provider provider26 = builder19.clientProvider;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder19.log = log27;
        retrofit.RestAdapter.Builder builder29 = builder15.setLog(log27);
        retrofit.RestAdapter.Builder builder30 = builder0.setLog(log27);
        builder30.ensureSaneDefaults();
        retrofit.client.Client.Provider provider32 = null;
        builder30.clientProvider = provider32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel40 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder35.setLogLevel(logLevel40);
        retrofit.client.Client.Provider provider42 = builder35.clientProvider;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        builder35.log = log43;
        retrofit.RestAdapter.Builder builder45 = builder34.setLog(log43);
        retrofit.Profiler profiler46 = builder34.profiler;
        java.util.concurrent.Executor executor47 = null;
        builder34.callbackExecutor = executor47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = builder49.server;
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder49.setLogLevel(logLevel54);
        retrofit.client.Client.Provider provider56 = builder49.clientProvider;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        builder49.log = log57;
        builder34.log = log57;
        builder30.log = log57;
        java.util.concurrent.Executor executor61 = builder30.httpExecutor;
        java.util.concurrent.Executor executor62 = builder30.httpExecutor;
        retrofit.RestAdapter.Log log63 = builder30.log;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNotNull(log63);
    }

    @Test
    public void test01495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01495");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor8 = builder6.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = builder9.server;
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter18 = builder17.build();
        retrofit.Profiler profiler19 = null;
        builder17.profiler = profiler19;
        retrofit.Profiler profiler21 = null;
        builder17.profiler = profiler21;
        retrofit.converter.Converter converter23 = builder17.converter;
        retrofit.RestAdapter.Builder builder24 = builder6.setConverter(converter23);
        retrofit.Profiler profiler25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder26 = builder6.setProfiler(profiler25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(converter23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test01496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01496");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor3 = null;
        restAdapter0.callbackExecutor = executor3;
        retrofit.ErrorHandler errorHandler5 = null;
        restAdapter0.errorHandler = errorHandler5;
        retrofit.client.Client.Provider provider7 = null;
        restAdapter0.clientProvider = provider7;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log10 = restAdapter0.log;
        retrofit.RestAdapter.Log log11 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel17 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("Retrofit-Idle");
        retrofit.Server server21 = builder20.server;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = builder30.server;
        retrofit.RestAdapter.Log log32 = null;
        builder30.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel35 = builder34.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder30.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider37 = builder30.clientProvider;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        builder30.log = log38;
        retrofit.RestAdapter.Builder builder40 = builder29.setLog(log38);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log38, logLevel41);
        restAdapter0.logLevel = logLevel41;
        boolean boolean44 = logLevel41.log();
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test01497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01497");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel8 = builder7.logLevel;
        builder6.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("Retrofit-Idle");
        retrofit.Server server19 = builder18.server;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel33 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        retrofit.client.Client.Provider provider35 = builder28.clientProvider;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        builder28.log = log36;
        retrofit.RestAdapter.Builder builder38 = builder27.setLog(log36);
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log36, logLevel39);
        builder6.logLevel = logLevel39;
        retrofit.RestAdapter.LogLevel logLevel42 = builder6.logLevel;
        restAdapter0.logLevel = logLevel42;
        boolean boolean44 = logLevel42.log();
        java.lang.Class<?> wildcardClass45 = logLevel42.getClass();
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test01498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01498");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        builder24.logLevel = logLevel26;
        boolean boolean28 = logLevel26.log();
        builder17.logLevel = logLevel26;
        retrofit.RestAdapter.LogLevel logLevel30 = builder17.logLevel;
        retrofit.Profiler profiler31 = builder17.profiler;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor33 = null;
        restAdapter32.callbackExecutor = executor33;
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.converter.Converter converter36 = restAdapter32.converter;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.Profiler profiler39 = builder37.profiler;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("Retrofit-Idle");
        retrofit.Server server51 = builder50.server;
        retrofit.RestAdapter.Builder builder52 = builder41.setServer(server51);
        restAdapter32.server = server51;
        retrofit.RestAdapter.Builder builder54 = builder17.setServer(server51);
        retrofit.RestAdapter.LogLevel logLevel55 = null;
        builder17.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        java.util.concurrent.Executor executor59 = null;
        builder57.httpExecutor = executor59;
        retrofit.Server server61 = builder57.server;
        retrofit.RestAdapter.LogLevel logLevel62 = builder57.logLevel;
        retrofit.client.Client.Provider provider63 = null;
        builder57.clientProvider = provider63;
        retrofit.Server server65 = builder57.server;
        retrofit.RequestInterceptor requestInterceptor66 = builder57.requestInterceptor;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor68 = null;
        restAdapter67.callbackExecutor = executor68;
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.converter.Converter converter71 = restAdapter67.converter;
        java.util.concurrent.Executor executor72 = null;
        restAdapter67.callbackExecutor = executor72;
        java.util.concurrent.Executor executor74 = null;
        restAdapter67.httpExecutor = executor74;
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter67.new RestHandler();
        retrofit.converter.Converter converter77 = restAdapter67.converter;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.Server server79 = builder78.server;
        retrofit.RestAdapter.Log log80 = null;
        builder78.log = log80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        retrofit.RestAdapter.Builder builder84 = builder78.setLogLevel(logLevel83);
        retrofit.RestAdapter.Builder builder86 = builder84.setServer("Retrofit-Idle");
        retrofit.Server server87 = builder86.server;
        retrofit.Profiler profiler88 = null;
        builder86.profiler = profiler88;
        retrofit.Profiler profiler90 = null;
        builder86.profiler = profiler90;
        retrofit.RestAdapter restAdapter92 = builder86.build();
        retrofit.ErrorHandler errorHandler93 = builder86.errorHandler;
        restAdapter67.errorHandler = errorHandler93;
        builder57.errorHandler = errorHandler93;
        retrofit.RestAdapter.Builder builder96 = builder17.setErrorHandler(errorHandler93);
        retrofit.RestAdapter.Builder builder97 = builder15.setErrorHandler(errorHandler93);
        retrofit.RestAdapter.Builder builder99 = builder15.setServer("Retrofit-");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertNull(converter71);
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNull(server79);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertNotNull(errorHandler93);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01499");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder15.build();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        builder24.logLevel = logLevel26;
        boolean boolean28 = logLevel26.log();
        builder17.logLevel = logLevel26;
        retrofit.RestAdapter.LogLevel logLevel30 = builder17.logLevel;
        retrofit.RestAdapter.Builder builder31 = builder15.setLogLevel(logLevel30);
        retrofit.ErrorHandler errorHandler32 = null;
        builder31.errorHandler = errorHandler32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor36 = builder35.httpExecutor;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder37.setLogLevel(logLevel42);
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("Retrofit-Idle");
        retrofit.Server server46 = builder45.server;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = null;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel60 = builder59.logLevel;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel60);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel60);
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = builder70.server;
        retrofit.RestAdapter.Log log72 = null;
        builder70.log = log72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = builder74.server;
        retrofit.RestAdapter.Log log76 = null;
        builder74.log = log76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel79 = builder78.logLevel;
        retrofit.RestAdapter.Builder builder80 = builder74.setLogLevel(logLevel79);
        retrofit.client.Client.Provider provider81 = builder74.clientProvider;
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        builder74.log = log82;
        retrofit.RestAdapter.Builder builder84 = builder70.setLog(log82);
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server46, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log82, logLevel85);
        retrofit.converter.Converter converter87 = null;
        restAdapter86.converter = converter87;
        retrofit.RestAdapter.RestHandler restHandler89 = restAdapter86.new RestHandler();
        retrofit.Server server90 = restAdapter86.server;
        retrofit.RestAdapter.Builder builder91 = builder35.setServer(server90);
        retrofit.Profiler profiler92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder93 = builder35.setProfiler(profiler92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertNull(server75);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(provider81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server90);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test01500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01500");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler3 = null;
        restAdapter0.errorHandler = errorHandler3;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor6 = null;
        restAdapter0.httpExecutor = executor6;
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter0.getLogLevel();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = null;
        restAdapter10.callbackExecutor = executor11;
        retrofit.converter.Converter converter13 = null;
        restAdapter10.converter = converter13;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.callbackExecutor;
        retrofit.Profiler profiler18 = builder16.profiler;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = builder21.server;
        retrofit.RestAdapter.Log log23 = null;
        builder21.log = log23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        retrofit.RestAdapter.Builder builder27 = builder21.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("Retrofit-Idle");
        retrofit.Server server30 = builder29.server;
        retrofit.RestAdapter.Builder builder31 = builder20.setServer(server30);
        retrofit.RestAdapter restAdapter32 = builder31.build();
        java.util.concurrent.Executor executor33 = restAdapter32.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.ErrorHandler errorHandler35 = restAdapter32.errorHandler;
        restAdapter10.errorHandler = errorHandler35;
        restAdapter0.errorHandler = errorHandler35;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler39 = restAdapter0.profiler;
        java.util.concurrent.Executor executor40 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(executor40);
    }
}

