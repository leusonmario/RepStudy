/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 20:05:29 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.graphics.drawable.AnimationDrawable;
import android.view.DragEvent;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.node.TextNode;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.squareup.okhttp.OkHttpClient;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import org.apache.http.client.HttpClient;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.DefaultedHttpParams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestBuilder;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.RestMethodInfo;
import retrofit.Server;
import retrofit.android.AndroidLog;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.Request;
import retrofit.client.Response;
import retrofit.client.UrlConnectionClient;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.converter.JacksonConverter;
import retrofit.converter.ProtoConverter;
import retrofit.converter.WireConverter;
import retrofit.mime.FormUrlEncodedTypedOutput;
import retrofit.mime.MultipartTypedOutput;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedInput;
import retrofit.mime.TypedOutput;
import retrofit.mime.TypedString;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setExecutors(restAdapter_Builder1.httpExecutor, restAdapter_Builder1.httpExecutor);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<JsonTypeInfo.Id> profiler0 = (Profiler<JsonTypeInfo.Id>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "retrofit.RestAdapter$Log";
      Server server0 = new Server(string0);
      assertEquals("retrofit.RestAdapter$Log", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0);
      assertEquals("retrofit.RestAdapter$Log", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "cy.y{c7[+H!";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setClient(restAdapter_Builder2.clientProvider);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      
      SQLException sQLException0 = new SQLException();
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      restAdapter0.logException(sQLException0, string0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel0.log());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(delayed0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      
      int int0 = 52;
      Random.setNextRandom(int0);
      Class<JsonTypeInfo.Id> class1 = JsonTypeInfo.Id.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      String string1 = "";
      Server server0 = new Server(string0, string1);
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_Builder1.logLevel);
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      String string2 = "H:,ItPc_O";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string2);
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertNotNull(restAdapter_Builder3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setExecutors(restAdapter_Builder0.httpExecutor, restAdapter_Builder1.httpExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "retofit.RestAdapte";
      restAdapter_Log0.log(string0);
      restAdapter_Log0.log(string0);
      restAdapter_Log0.log(string0);
      String string1 = "";
      restAdapter_Log0.log(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.server = restAdapter_Builder1.server;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLog(restAdapter_Builder1.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      long long0 = (-19L);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertNotNull(okHttpClient0);
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertNotNull(okClient0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Integer> profiler0 = null;
      Profiler<AnimationDrawable> profiler1 = (Profiler<AnimationDrawable>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      restAdapter_Builder0.ensureSaneDefaults();
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      restAdapter0.server = restAdapter_Builder0.server;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(restAdapter0.errorHandler);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter0.create(class0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(runnable0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel1);
      assertTrue(restAdapter_LogLevel1.log());
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(boolean0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_LogLevel0.log());
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      String string0 = "n";
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = ")M'vC|i";
      String string2 = null;
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertFalse(boolean0);
      assertFalse(restAdapter_LogLevel0.log());
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      String string0 = "";
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      String string1 = ")M'vC|i";
      String string2 = null;
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.)M'vC|i
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Method method0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      restAdapter0.requestInterceptor = requestInterceptor0;
      assertNull(restAdapter0.getLogLevel());
      
      Object[] objectArray0 = new Object[0];
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      restAdapter0.errorHandler = errorHandler0;
      assertNull(restAdapter0.getLogLevel());
      
      try { 
        restAdapter_RestHandler0.invoke(method0, method0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      // Undeclared exception!
      try { 
        restAdapter0.setLogLevel(restAdapter0.logLevel);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "[$^iyy";
      Server server0 = new Server(string0, string0);
      assertEquals("[$^iyy", server0.getUrl());
      assertEquals("[$^iyy", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("[$^iyy", server0.getUrl());
      assertEquals("[$^iyy", server0.getName());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertEquals("[$^iyy", server0.getUrl());
      assertEquals("[$^iyy", server0.getName());
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      int int0 = 3;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setExecutors(scheduledThreadPoolExecutor0, restAdapter_Builder1.httpExecutor);
      assertEquals("[$^iyy", server0.getUrl());
      assertEquals("[$^iyy", server0.getName());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setProfiler(restAdapter_Builder2.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      String string0 = "^Che{8v7V_1Nc/=&";
      Server server0 = new Server(string0);
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 572;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Converter converter0 = null;
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      scheduledThreadPoolExecutor0.setKeepAliveTime(long0, timeUnit0);
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TypedString typedString0 = new TypedString(restAdapter0.THREAD_PREFIX);
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(typedString0);
      
      Stream<Header> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      String string1 = "npYNQVCFu";
      Header header0 = new Header(string1, string1);
      assertEquals("npYNQVCFu", header0.getValue());
      assertEquals("npYNQVCFu", header0.getName());
      assertNotNull(header0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = header0.toString();
      assertEquals("npYNQVCFu: npYNQVCFu", string2);
      assertEquals("npYNQVCFu", header0.getValue());
      assertEquals("npYNQVCFu", header0.getName());
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      boolean boolean0 = linkedList0.offer(header0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("npYNQVCFu", header0.getValue());
      assertEquals("npYNQVCFu", header0.getName());
      assertTrue(linkedList0.contains(header0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      Request request0 = new Request(server0.DEFAULT_NAME, server0.DEFAULT_NAME, linkedList0, typedString0);
      assertEquals(1, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(1, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals(1, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request2.getMethod());
      assertEquals("default", request2.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request2, request0);
      assertSame(request2, request1);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel1);
      assertTrue(restAdapter_LogLevel1.log());
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      Request request3 = restAdapter0.logAndReplaceRequest(request2);
      assertEquals(1, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request2.getMethod());
      assertEquals("default", request2.getUrl());
      assertEquals("default", request3.getUrl());
      assertEquals("default", request3.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(request0, request3);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request1, request3);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertSame(request2, request3);
      assertSame(request3, request0);
      assertSame(request3, request2);
      assertSame(request3, request1);
      
      String string3 = "^Y_I|7V$lea37KD)f5L";
      Response response0 = new Response(int0, string3, linkedList0, typedString0);
      assertEquals(1, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("^Y_I|7V$lea37KD)f5L", response0.getReason());
      assertEquals(572, response0.getStatus());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(response0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      
      long long1 = 0L;
      Response response1 = restAdapter0.logAndReplaceResponse(string3, response0, long1);
      assertEquals(1, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("^Y_I|7V$lea37KD)f5L", response0.getReason());
      assertEquals(572, response0.getStatus());
      assertEquals("^Y_I|7V$lea37KD)f5L", response1.getReason());
      assertEquals(572, response1.getStatus());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(response1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(response0, response1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(response1, response0);
      
      Request request4 = restAdapter0.logAndReplaceRequest(request3);
      assertEquals("default", request4.getMethod());
      assertEquals("default", request4.getUrl());
      assertEquals(1, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request2.getMethod());
      assertEquals("default", request2.getUrl());
      assertEquals("default", request3.getUrl());
      assertEquals("default", request3.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request4);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertSame(request4, request0);
      assertSame(request4, request1);
      assertSame(request4, request3);
      assertSame(request4, request2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(request0, request3);
      assertSame(request0, request1);
      assertSame(request0, request4);
      assertSame(request0, request2);
      assertSame(request1, request2);
      assertSame(request1, request4);
      assertSame(request1, request0);
      assertSame(request1, request3);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertSame(request2, request3);
      assertSame(request2, request4);
      assertSame(request3, request0);
      assertSame(request3, request4);
      assertSame(request3, request2);
      assertSame(request3, request1);
      
      String string4 = "";
      List<Header> list0 = request0.getHeaders();
      assertEquals(1, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertTrue(list0.contains(header0));
      assertNotNull(list0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(request0, request3);
      assertSame(request0, request1);
      assertSame(request0, request4);
      assertSame(request0, request2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      
      Response response2 = new Response(int0, string4, list0, typedString0);
      assertEquals(1, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", response2.getReason());
      assertEquals(572, response2.getStatus());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertTrue(list0.contains(header0));
      assertNotNull(response2);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(response2.equals((Object)response0));
      assertFalse(response2.equals((Object)response1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      
      long long2 = (-689L);
      Response response3 = restAdapter0.logAndReplaceResponse(server0.DEFAULT_NAME, response2, long2);
      assertEquals(1, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", response2.getReason());
      assertEquals(572, response2.getStatus());
      assertEquals(572, response3.getStatus());
      assertEquals("", response3.getReason());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertTrue(list0.contains(header0));
      assertNotNull(response3);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(response2.equals((Object)response0));
      assertFalse(response2.equals((Object)response1));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(response3.equals((Object)response1));
      assertFalse(response3.equals((Object)response0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(response2, response0);
      assertSame(response2, response3);
      assertNotSame(response2, response1);
      assertSame(response3, response2);
      assertNotSame(response3, response1);
      assertNotSame(response3, response0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(request0, request3);
      assertSame(request0, request1);
      assertSame(request0, request4);
      assertSame(request0, request2);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = ".\"";
      Client client0 = null;
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      ClientConnectionManager clientConnectionManager0 = null;
      BasicHttpParams basicHttpParams0 = new BasicHttpParams();
      assertNotNull(basicHttpParams0);
      
      DefaultedHttpParams defaultedHttpParams0 = new DefaultedHttpParams(basicHttpParams0, basicHttpParams0);
      assertNotNull(defaultedHttpParams0);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient(clientConnectionManager0, defaultedHttpParams0);
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      RestMethodInfo restMethodInfo0 = null;
      long long0 = (-1140L);
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(restAdapter0.requestInterceptor, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "android.os.WorkSource";
      String string1 = "";
      RestMethodInfo restMethodInfo0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      String string2 = "Fe9";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      assertFalse(boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      Request request0 = null;
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string1, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      long long0 = (-3162L);
      System.setCurrentTimeMillis(long0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "Interface definitions must not extend other interfaces.";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setProfiler(restAdapter_Builder1.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      String string0 = "^Che{8v7V_1Nc/=&";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 572;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Converter converter0 = null;
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      scheduledThreadPoolExecutor0.setKeepAliveTime(long0, timeUnit0);
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string1 = "; expected Class<ValueInstantiator>";
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string2 = "Asynchronous invocation requires calling setExecutors.";
      TypedString typedString0 = new TypedString(string2);
      assertEquals(54L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertNotNull(typedString0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Request request0 = new Request(string1, server0.DEFAULT_NAME, linkedList0, typedString0);
      assertEquals(0, linkedList0.size());
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals(54L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("default", request0.getUrl());
      assertEquals("; expected Class<ValueInstantiator>", request0.getMethod());
      assertNotNull(request0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(0, linkedList0.size());
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals(54L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("default", request0.getUrl());
      assertEquals("; expected Class<ValueInstantiator>", request0.getMethod());
      assertEquals("; expected Class<ValueInstantiator>", request1.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertNotNull(request1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals(0, linkedList0.size());
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals(54L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("default", request0.getUrl());
      assertEquals("; expected Class<ValueInstantiator>", request0.getMethod());
      assertEquals("; expected Class<ValueInstantiator>", request1.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request2.getUrl());
      assertEquals("; expected Class<ValueInstantiator>", request2.getMethod());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertNotNull(request2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request1);
      assertSame(request2, request0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      String string0 = "^CJe{8v7V_Nc/=&";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 572;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Converter converter0 = null;
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      scheduledThreadPoolExecutor0.setKeepAliveTime(long0, timeUnit0);
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TypedString typedString0 = new TypedString(restAdapter0.THREAD_PREFIX);
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(typedString0);
      
      Stream<Header> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      String string1 = "npYNQVCFu";
      Header header0 = new Header(string1, string1);
      assertEquals("npYNQVCFu", header0.getName());
      assertEquals("npYNQVCFu", header0.getValue());
      assertNotNull(header0);
      assertFalse(string1.equals((Object)string0));
      
      Boolean boolean0 = new Boolean(string0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      assertFalse(string0.equals((Object)string1));
      
      Request request0 = new Request(server0.DEFAULT_NAME, server0.DEFAULT_NAME, linkedList0, typedString0);
      assertEquals(0, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string1));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(0, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(request1);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals(0, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request2.getUrl());
      assertEquals("default", request2.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(request2);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request2, request1);
      assertSame(request2, request0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel1);
      assertTrue(restAdapter_LogLevel1.log());
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      Request request3 = restAdapter0.logAndReplaceRequest(request2);
      assertEquals(0, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request2.getUrl());
      assertEquals("default", request2.getMethod());
      assertEquals("default", request3.getUrl());
      assertEquals("default", request3.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(request3);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request0, request3);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request1, request3);
      assertSame(request2, request1);
      assertSame(request2, request3);
      assertSame(request2, request0);
      assertSame(request3, request0);
      assertSame(request3, request2);
      assertSame(request3, request1);
      
      String string2 = "^Y_I|7V$lea37KD)f5L";
      Response response0 = new Response(int0, string2, linkedList0, typedString0);
      assertEquals(0, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertEquals(572, response0.getStatus());
      assertEquals("^Y_I|7V$lea37KD)f5L", response0.getReason());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(response0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      long long1 = 0L;
      Response response1 = restAdapter0.logAndReplaceResponse(string2, response0, long1);
      assertEquals(0, linkedList0.size());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertEquals(572, response0.getStatus());
      assertEquals("^Y_I|7V$lea37KD)f5L", response0.getReason());
      assertEquals("^Y_I|7V$lea37KD)f5L", response1.getReason());
      assertEquals(572, response1.getStatus());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(response1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "lgu-&FH";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder1.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      restAdapter0.getLogLevel();
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      // Undeclared exception!
      try { 
        restAdapter0.setLogLevel(restAdapter_LogLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "cy.y{c7[+H!";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setClient(restAdapter_Builder2.clientProvider);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      
      SQLException sQLException0 = new SQLException();
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      restAdapter0.logException(sQLException0, string0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel0.log());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "---> HTTP %s %s";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.IDLE_THREAD_NAME = restAdapter0.THREAD_PREFIX;
      assertNull(restAdapter0.getLogLevel());
      
      restAdapter0.getLogLevel();
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setErrorHandler(restAdapter0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setExecutors(forkJoinPool0, restAdapter_Builder0.httpExecutor);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      restAdapter0.getLogLevel();
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(restAdapter0.IDLE_THREAD_NAME);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      AndroidLog androidLog0 = new AndroidLog(restAdapter0.THREAD_PREFIX);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(androidLog0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLogLevel(restAdapter0.logLevel);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<AnimationDrawable> profiler0 = (Profiler<AnimationDrawable>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string0 = "android.os.Parcel";
      Vector<Header> vector0 = new Vector<Header>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      FormUrlEncodedTypedOutput formUrlEncodedTypedOutput0 = new FormUrlEncodedTypedOutput();
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertNotNull(formUrlEncodedTypedOutput0);
      
      Request request0 = new Request(string0, restAdapter0.IDLE_THREAD_NAME, vector0, formUrlEncodedTypedOutput0);
      assertNull(restAdapter0.getLogLevel());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("android.os.Parcel", request0.getMethod());
      assertEquals("Retrofit-Idle", request0.getUrl());
      assertNotNull(request0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Stack<Header> stack0 = new Stack<Header>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      FormUrlEncodedTypedOutput formUrlEncodedTypedOutput0 = new FormUrlEncodedTypedOutput();
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertNotNull(formUrlEncodedTypedOutput0);
      
      Request request0 = new Request(restAdapter0.THREAD_PREFIX, restAdapter0.IDLE_THREAD_NAME, stack0, formUrlEncodedTypedOutput0);
      assertNull(restAdapter0.getLogLevel());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("Retrofit-Idle", request0.getUrl());
      assertNotNull(request0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "ooox";
      Server server0 = new Server(string0);
      assertEquals("ooox", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("ooox", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertEquals("ooox", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertEquals("ooox", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      String string1 = ".";
      String string2 = "android.intent.action.ANSWER";
      SQLTransientException sQLTransientException0 = new SQLTransientException(string1, string2);
      assertEquals("android.intent.action.ANSWER", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: .", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(".", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(restAdapter0.THREAD_PREFIX, string1, sQLTransientException0);
      assertEquals("ooox", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("android.intent.action.ANSWER", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: .", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(".", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Retrofit-", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Retrofit-", sQLSyntaxErrorException0.getMessage());
      assertEquals(".", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "iSJO{LJ06pHDl$p[T8";
      restAdapter0.logException(sQLSyntaxErrorException0, string3);
      assertEquals("ooox", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("android.intent.action.ANSWER", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: .", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(".", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Retrofit-", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Retrofit-", sQLSyntaxErrorException0.getMessage());
      assertEquals(".", sQLSyntaxErrorException0.getSQLState());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string0);
      assertEquals("ooox", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      restAdapter0.setLogLevel(restAdapter_Builder2.logLevel);
      assertEquals("ooox", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "";
      String string1 = "u@;eDjxr^+,ONN'.7K";
      Server server0 = new Server(string0, string1);
      assertEquals("u@;eDjxr^+,ONN'.7K", server0.getName());
      assertEquals("", server0.getUrl());
      assertNotNull(server0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 1684;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      WireConverter wireConverter0 = new WireConverter();
      assertNotNull(wireConverter0);
      
      Profiler<TypedByteArray> profiler0 = null;
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, wireConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("u@;eDjxr^+,ONN'.7K", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("u@;eDjxr^+,ONN'.7K", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<TypedByteArray> class0 = TypedByteArray.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      restAdapter0.clientProvider = client_Provider0;
      assertNull(restAdapter0.getLogLevel());
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "f@V6Y_jv7zt|`]s";
      Server server0 = new Server(string0);
      assertEquals("f@V6Y_jv7zt|`]s", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("f@V6Y_jv7zt|`]s", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      assertEquals("f@V6Y_jv7zt|`]s", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.log = restAdapter0.log;
      assertEquals("f@V6Y_jv7zt|`]s", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      restAdapter0.clientProvider = restAdapter_Builder1.clientProvider;
      assertEquals("f@V6Y_jv7zt|`]s", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setErrorHandler(restAdapter0.errorHandler);
      assertEquals("f@V6Y_jv7zt|`]s", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestMethodInfo restMethodInfo0 = null;
      RequestBuilder requestBuilder0 = null;
      try {
        requestBuilder0 = new RequestBuilder(restAdapter_Builder1.converter, restMethodInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "android.intent.action.MANAGE_PACKAGE_STORAGE";
      restAdapter_Log0.log(string0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.profiler = restAdapter_Builder0.profiler;
      Executor executor0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(executor0, executor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(protoConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "Server may not be blank.";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      // Undeclared exception!
      try { 
        protoConverter0.toBody(restAdapter_Builder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a protobuf message but was retrofit.RestAdapter$Builder
         //
         verifyException("retrofit.converter.ProtoConverter", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string0 = "T\"gU8I%YA*zbz7";
      String string1 = "com.fasterxml.jackson.databind.node.NumericNode";
      RestAdapter.THREAD_PREFIX = string1;
      SQLException sQLException0 = new SQLException(restAdapter0.IDLE_THREAD_NAME, string0);
      assertNull(restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: Retrofit-Idle", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("T\"gU8I%YA*zbz7", sQLException0.getSQLState());
      assertNotNull(sQLException0);
      assertFalse(string0.equals((Object)string1));
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLException0);
      assertNull(restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: Retrofit-Idle", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("T\"gU8I%YA*zbz7", sQLException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLException: Retrofit-Idle", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLException: Retrofit-Idle", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      assertFalse(string0.equals((Object)string1));
      
      String string2 = "#h)G.";
      // Undeclared exception!
      try { 
        restAdapter0.logException(sQLTransientConnectionException0, string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(restAdapter_Builder0.httpExecutor, restAdapter_Builder0.httpExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = " $j7=Zvbg&bslKy}(l:";
      String string1 = "^Vj{pDa~5KvAV\\~trt";
      Server server0 = new Server(string0, string1);
      assertEquals("^Vj{pDa~5KvAV\\~trt", server0.getName());
      assertEquals(" $j7=Zvbg&bslKy}(l:", server0.getUrl());
      assertNotNull(server0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      restAdapter_Builder0.server = server0;
      assertEquals("^Vj{pDa~5KvAV\\~trt", server0.getName());
      assertEquals(" $j7=Zvbg&bslKy}(l:", server0.getUrl());
      assertEquals("^Vj{pDa~5KvAV\\~trt", restAdapter_Builder0.server.getName());
      assertEquals(" $j7=Zvbg&bslKy}(l:", restAdapter_Builder0.server.getUrl());
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      restAdapter0.requestInterceptor = restAdapter_Builder0.requestInterceptor;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      restAdapter0.errorHandler = restAdapter_Builder0.errorHandler;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      restAdapter0.setLogLevel(restAdapter_Builder0.logLevel);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel0.log());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      RestAdapter restAdapter1 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertNotNull(restAdapter1);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertNotSame(restAdapter1, restAdapter0);
      
      restAdapter1.clientProvider = restAdapter_Builder0.clientProvider;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "N5fo<\"+GLPr)29Qe 3";
      Server server0 = new Server(string0);
      assertEquals("N5fo<\"+GLPr)29Qe 3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      int int1 = 2522;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      assertNotNull(priorityBlockingQueue0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int1, int1, timeUnit0, priorityBlockingQueue0);
      assertNotNull(threadPoolExecutor0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, threadPoolExecutor0, threadPoolExecutor0, requestInterceptorTape0, protoConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("N5fo<\"+GLPr)29Qe 3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("N5fo<\"+GLPr)29Qe 3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      
      Method method0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) restAdapter_RestHandler0;
      objectArray0[1] = (Object) profiler0;
      objectArray0[2] = (Object) androidLog0;
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      assertEquals(JsonTypeInfo.Id.NONE, jsonTypeInfo_Id0);
      assertNull(jsonTypeInfo_Id0.getDefaultPropertyName());
      
      try { 
        restAdapter_RestHandler0.invoke(jsonTypeInfo_Id0, method0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string0 = "retrofit.RestAdapter$RestHandler$1";
      Response response0 = null;
      long long0 = 466L;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string0, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "FLO3(D?HbO|f6aqK";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("FLO3(D?HbO|f6aqK", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = null;
      ObjectCodec objectCodec0 = null;
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JacksonConverter jacksonConverter0 = new JacksonConverter(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(jacksonConverter0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, jacksonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("FLO3(D?HbO|f6aqK", server0.getUrl());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(server0.DEFAULT_NAME, restAdapter0.THREAD_PREFIX, sQLDataException0);
      assertEquals("java.sql.SQLNonTransientException: default", sQLNonTransientException0.toString());
      assertEquals("Retrofit-", sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("default", sQLNonTransientException0.getMessage());
      assertEquals("default", server0.getName());
      assertEquals("FLO3(D?HbO|f6aqK", server0.getUrl());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(sQLNonTransientException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        restAdapter0.logException(sQLNonTransientException0, string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Integer> profiler0 = null;
      restAdapter_Builder0.profiler = profiler0;
      Profiler<AnimationDrawable> profiler1 = (Profiler<AnimationDrawable>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler1);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder1.callbackExecutor, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      restAdapter_Builder0.server = restAdapter0.server;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      restAdapter0.server = restAdapter_Builder1.server;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setErrorHandler(restAdapter0.errorHandler);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter0.create(class0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(runnable0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(restAdapter0.IDLE_THREAD_NAME);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.Retrofit-Idle
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(restAdapter0.logLevel.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel1);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(restAdapter_LogLevel1.log());
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setErrorHandler(restAdapter0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      String string0 = "22[C\\`#E{W/Ot5h4";
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(boolean0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_LogLevel0.log());
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      assertFalse(string1.equals((Object)string0));
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      restAdapter_Builder0.clientProvider = client_Provider0;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(androidLog0);
      assertNotNull(restAdapter_Builder1);
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string2 = ")M'vC|i";
      // Undeclared exception!
      try { 
        androidLog0.log(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertFalse(boolean0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = ".\"";
      Client client0 = null;
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      ClientConnectionManager clientConnectionManager0 = null;
      BasicHttpParams basicHttpParams0 = new BasicHttpParams();
      assertNotNull(basicHttpParams0);
      
      DefaultedHttpParams defaultedHttpParams0 = new DefaultedHttpParams(basicHttpParams0, basicHttpParams0);
      assertNotNull(defaultedHttpParams0);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient(clientConnectionManager0, defaultedHttpParams0);
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      RestMethodInfo restMethodInfo0 = null;
      long long0 = (-1109L);
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(restAdapter0.requestInterceptor, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string0 = "57&]rw";
      int int0 = 2474;
      String string1 = "";
      String string2 = "";
      Stack<Header> stack0 = new Stack<Header>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      MultipartTypedOutput multipartTypedOutput0 = new MultipartTypedOutput();
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      assertNotNull(multipartTypedOutput0);
      
      Request request0 = new Request(string2, string1, stack0, multipartTypedOutput0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals("", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertNotNull(request0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      List<Header> list0 = request0.getHeaders();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals("", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "38|S(%f@?c`h9j\"0";
      TypedString typedString0 = new TypedString(string3);
      assertEquals(16L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(typedString0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Response response0 = new Response(int0, string1, list0, typedString0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals("", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(16L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("", response0.getReason());
      assertEquals(2474, response0.getStatus());
      assertNotNull(response0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string0, response0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      int int0 = 136;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder1.callbackExecutor, scheduledThreadPoolExecutor0, restAdapter_Builder0.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder1.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string0 = "8T7Wm}#u/P~e>'3&9~";
      Stack<Header> stack0 = new Stack<Header>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      FormUrlEncodedTypedOutput formUrlEncodedTypedOutput0 = new FormUrlEncodedTypedOutput();
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNotNull(formUrlEncodedTypedOutput0);
      
      Request request0 = new Request(string0, restAdapter0.THREAD_PREFIX, stack0, formUrlEncodedTypedOutput0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertEquals("Retrofit-", request0.getUrl());
      assertEquals("8T7Wm}#u/P~e>'3&9~", request0.getMethod());
      assertNotNull(request0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertEquals("Retrofit-", request0.getUrl());
      assertEquals("8T7Wm}#u/P~e>'3&9~", request0.getMethod());
      assertEquals("8T7Wm}#u/P~e>'3&9~", request1.getMethod());
      assertEquals("Retrofit-", request1.getUrl());
      assertNotNull(request1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      restAdapter_Builder0.log = restAdapter_Builder2.log;
      try { 
        urlConnectionClient0.execute(request1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: Retrofit-
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      String string0 = "MIME-NO-LINEFEEDS";
      Server server0 = new Server(string0);
      assertEquals("MIME-NO-LINEFEEDS", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = null;
      int int0 = 39;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertFalse(boolean0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      String string2 = "zXnQGGz'";
      AndroidLog androidLog0 = new AndroidLog(string2);
      assertNotNull(androidLog0);
      assertFalse(string2.equals((Object)string0));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, forkJoinPool0, requestInterceptorTape0, protoConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("MIME-NO-LINEFEEDS", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = ".2'@^<Fj%+lT/nd|x";
      requestInterceptorTape0.addEncodedPathParam(string2, string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      
      int int1 = 200;
      Vector<Header> vector0 = new Vector<Header>(int0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(39, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(int0 == int1);
      
      TypedString typedString0 = new TypedString(restAdapter0.IDLE_THREAD_NAME);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("MIME-NO-LINEFEEDS", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(13L, typedString0.length());
      assertNotNull(typedString0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      
      Response response0 = new Response(int1, string0, vector0, typedString0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("MIME-NO-LINEFEEDS", server0.getUrl());
      assertEquals("default", server0.getName());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(39, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(13L, typedString0.length());
      assertEquals(200, response0.getStatus());
      assertEquals("MIME-NO-LINEFEEDS", response0.getReason());
      assertNotNull(response0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(int1 == int0);
      
      long long0 = (-3753L);
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(server0.DEFAULT_NAME, response0, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Integer> profiler0 = null;
      restAdapter_Builder0.profiler = profiler0;
      Profiler<AnimationDrawable> profiler1 = (Profiler<AnimationDrawable>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler1);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder1.callbackExecutor, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      restAdapter0.server = restAdapter_Builder1.server;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      restAdapter_Builder0.server = restAdapter0.server;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      restAdapter_Builder0.clientProvider = restAdapter_Builder1.clientProvider;
      restAdapter0.server = restAdapter_Builder1.server;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setErrorHandler(restAdapter0.errorHandler);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      Class<Runnable> class0 = Runnable.class;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setRequestInterceptor(restAdapter0.requestInterceptor);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      Class<Runnable> class1 = null;
      // Undeclared exception!
      try { 
        restAdapter0.create(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      String string0 = "^Che{8v7V_1Nc/=&";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 572;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Converter converter0 = null;
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      scheduledThreadPoolExecutor0.setKeepAliveTime(long0, timeUnit0);
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string1 = "; expected Class<ValueInstantiator>";
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string2 = "Asynchronous invocation requires calling setExecutors.";
      TypedString typedString0 = new TypedString(string2);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(54L, typedString0.length());
      assertNull(typedString0.fileName());
      assertNotNull(typedString0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Stream<Header> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      Request request0 = new Request(string1, server0.DEFAULT_NAME, linkedList0, typedString0);
      assertEquals(0, linkedList0.size());
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(54L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("; expected Class<ValueInstantiator>", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertNotNull(request0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(0, linkedList0.size());
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(54L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("; expected Class<ValueInstantiator>", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals("; expected Class<ValueInstantiator>", request1.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotNull(request1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals(0, linkedList0.size());
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(54L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("; expected Class<ValueInstantiator>", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals("; expected Class<ValueInstantiator>", request1.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request2.getUrl());
      assertEquals("; expected Class<ValueInstantiator>", request2.getMethod());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotNull(request2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request2, request0);
      assertSame(request2, request1);
      
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.; expected Class<ValueInstantiator>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      String string0 = "\\0XMmX,H38wWU_@@j*";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("\\0XMmX,H38wWU_@@j*", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 4;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      WireConverter wireConverter0 = new WireConverter();
      assertNotNull(wireConverter0);
      
      Profiler<TextNode> profiler0 = (Profiler<TextNode>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      AndroidLog androidLog0 = new AndroidLog(server0.DEFAULT_NAME);
      assertEquals("default", server0.getName());
      assertEquals("\\0XMmX,H38wWU_@@j*", server0.getUrl());
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, wireConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("\\0XMmX,H38wWU_@@j*", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string1 = "!9Mz";
      String string2 = "ce=4WQ\\QG9@D*1";
      Vector<Header> vector0 = new Vector<Header>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JacksonConverter jacksonConverter0 = new JacksonConverter(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(jacksonConverter0);
      
      int int1 = 1345;
      Integer integer0 = new Integer(int1);
      assertEquals(1345, (int)integer0);
      assertNotNull(integer0);
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      TypedOutput typedOutput0 = jacksonConverter0.toBody(integer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(typedOutput0.fileName());
      assertEquals("application/json; charset=UTF-8", typedOutput0.mimeType());
      assertEquals(4L, typedOutput0.length());
      assertNotNull(typedOutput0);
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      Request request0 = new Request(string1, string2, vector0, typedOutput0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(typedOutput0.fileName());
      assertEquals("application/json; charset=UTF-8", typedOutput0.mimeType());
      assertEquals(4L, typedOutput0.length());
      assertEquals("ce=4WQ\\QG9@D*1", request0.getUrl());
      assertEquals("!9Mz", request0.getMethod());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(request0);
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "android.os.WorkSource";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      String string1 = "";
      RestMethodInfo restMethodInfo0 = null;
      EvoSuiteFile evoSuiteFile1 = null;
      String string2 = "Fe9";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string2);
      assertFalse(boolean1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      Request request0 = null;
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string1, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      String string0 = "^Che{8v7V_1Nc/=&";
      Server server0 = new Server(string0);
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 572;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Converter converter0 = null;
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      scheduledThreadPoolExecutor0.setKeepAliveTime(long0, timeUnit0);
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TypedString typedString0 = new TypedString(restAdapter0.THREAD_PREFIX);
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotNull(typedString0);
      
      Stream<Header> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      String string1 = "npYNQVCFu";
      Header header0 = new Header(string1, string1);
      assertEquals("npYNQVCFu", header0.getValue());
      assertEquals("npYNQVCFu", header0.getName());
      assertNotNull(header0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = linkedList0.offer(header0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("npYNQVCFu", header0.getValue());
      assertEquals("npYNQVCFu", header0.getName());
      assertTrue(linkedList0.contains(header0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      Request request0 = new Request(server0.DEFAULT_NAME, server0.DEFAULT_NAME, linkedList0, typedString0);
      assertEquals(1, linkedList0.size());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string1));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(1, linkedList0.size());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request1);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals(1, linkedList0.size());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request2.getUrl());
      assertEquals("default", request2.getMethod());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request2);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request0);
      assertSame(request2, request1);
      
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.^Che{8v7V_1Nc/=&
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      String string0 = "^Che{8v7V_1Nc/=&";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 572;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Converter converter0 = null;
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      scheduledThreadPoolExecutor0.setKeepAliveTime(long0, timeUnit0);
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TypedString typedString0 = new TypedString(restAdapter0.THREAD_PREFIX);
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(typedString0);
      
      Stream<Header> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      String string1 = "npYNQVCFu";
      Header header0 = new Header(string1, string1);
      assertEquals("npYNQVCFu", header0.getValue());
      assertEquals("npYNQVCFu", header0.getName());
      assertNotNull(header0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = linkedList0.offer(header0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("npYNQVCFu", header0.getValue());
      assertEquals("npYNQVCFu", header0.getName());
      assertTrue(linkedList0.contains(header0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      Request request0 = new Request(server0.DEFAULT_NAME, server0.DEFAULT_NAME, linkedList0, typedString0);
      assertEquals(1, linkedList0.size());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string1));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(1, linkedList0.size());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request1);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals(1, linkedList0.size());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("default", server0.getName());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request2.getUrl());
      assertEquals("default", request2.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request2);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request0);
      assertSame(request2, request1);
      
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.^Che{8v7V_1Nc/=&
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      String string0 = "^Che{8v7V_1Nc/=&";
      Server server0 = new Server(string0);
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 572;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Converter converter0 = null;
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      scheduledThreadPoolExecutor0.setKeepAliveTime(long0, timeUnit0);
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TypedString typedString0 = new TypedString(restAdapter0.THREAD_PREFIX);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(typedString0);
      
      Stream<Header> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      String string1 = "npYNQVCFu";
      Header header0 = new Header(string1, string1);
      assertEquals("npYNQVCFu", header0.getValue());
      assertEquals("npYNQVCFu", header0.getName());
      assertNotNull(header0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = linkedList0.offer(header0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("npYNQVCFu", header0.getValue());
      assertEquals("npYNQVCFu", header0.getName());
      assertTrue(linkedList0.contains(header0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      Request request0 = new Request(server0.DEFAULT_NAME, server0.DEFAULT_NAME, linkedList0, typedString0);
      assertEquals(1, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string1));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(1, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request1);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals(1, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request2.getMethod());
      assertEquals("default", request2.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request2);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request1);
      assertSame(request2, request0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel1);
      assertTrue(restAdapter_LogLevel1.log());
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      Request request3 = restAdapter0.logAndReplaceRequest(request2);
      assertEquals(1, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request2.getMethod());
      assertEquals("default", request2.getUrl());
      assertEquals("default", request3.getMethod());
      assertEquals("default", request3.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(request3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertNotSame(string0, string1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request0, request3);
      assertSame(request1, request0);
      assertSame(request1, request3);
      assertSame(request1, request2);
      assertSame(request2, request1);
      assertSame(request2, request3);
      assertSame(request2, request0);
      assertSame(request3, request1);
      assertSame(request3, request0);
      assertSame(request3, request2);
      
      String string2 = "^Y_I|7V$lea37KD)f5L";
      Response response0 = new Response(int0, string2, linkedList0, typedString0);
      assertEquals(1, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("^Y_I|7V$lea37KD)f5L", response0.getReason());
      assertEquals(572, response0.getStatus());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(response0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      
      long long1 = 0L;
      Response response1 = restAdapter0.logAndReplaceResponse(string2, response0, long1);
      assertEquals(1, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("^Y_I|7V$lea37KD)f5L", response0.getReason());
      assertEquals(572, response0.getStatus());
      assertEquals("^Y_I|7V$lea37KD)f5L", response1.getReason());
      assertEquals(572, response1.getStatus());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertTrue(linkedList0.contains(header0));
      assertNotNull(response1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      String string0 = "^CJe{8v7V_Nc/=&";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 572;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Converter converter0 = null;
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      scheduledThreadPoolExecutor0.setKeepAliveTime(long0, timeUnit0);
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TypedString typedString0 = new TypedString(restAdapter0.THREAD_PREFIX);
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(typedString0);
      
      Stream<Header> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      String string1 = "npYNQVCFu";
      Header header0 = new Header(string1, string1);
      assertEquals("npYNQVCFu", header0.getName());
      assertEquals("npYNQVCFu", header0.getValue());
      assertNotNull(header0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = new Boolean(string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      
      Request request0 = new Request(server0.DEFAULT_NAME, server0.DEFAULT_NAME, linkedList0, typedString0);
      assertEquals(0, linkedList0.size());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string1));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(0, linkedList0.size());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(request1);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals(0, linkedList0.size());
      assertEquals(9L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("default", server0.getName());
      assertEquals("^CJe{8v7V_Nc/=&", server0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request2.getMethod());
      assertEquals("default", request2.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(request2);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request0);
      assertSame(request2, request1);
      
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.^CJe{8v7V_Nc/=&
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      String string0 = "^Che{8v7V_1Nc/=&";
      Server server0 = new Server(string0);
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 572;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Converter converter0 = null;
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      scheduledThreadPoolExecutor0.setKeepAliveTime(long0, timeUnit0);
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TypedString typedString0 = new TypedString(restAdapter0.THREAD_PREFIX);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(typedString0);
      
      Stream<Header> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      String string1 = "npYNQVCFu";
      Header header0 = new Header(string1, string1);
      assertEquals("npYNQVCFu", header0.getName());
      assertEquals("npYNQVCFu", header0.getValue());
      assertNotNull(header0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = header0.toString();
      assertEquals("npYNQVCFu: npYNQVCFu", string2);
      assertEquals("npYNQVCFu", header0.getName());
      assertEquals("npYNQVCFu", header0.getValue());
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      boolean boolean0 = restAdapter0.logLevel.log();
      assertTrue(boolean0);
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      Request request0 = new Request(server0.DEFAULT_NAME, server0.DEFAULT_NAME, linkedList0, typedString0);
      assertEquals(0, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(0, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(request1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals(0, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request2.getMethod());
      assertEquals("default", request2.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(request2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request0);
      assertSame(request2, request1);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel1);
      assertTrue(restAdapter_LogLevel1.log());
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      Request request3 = restAdapter0.logAndReplaceRequest(request2);
      assertEquals(0, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request2.getMethod());
      assertEquals("default", request2.getUrl());
      assertEquals("default", request3.getUrl());
      assertEquals("default", request3.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(request3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(request0, request1);
      assertSame(request0, request3);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request3);
      assertSame(request1, request2);
      assertSame(request2, request3);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertSame(request3, request0);
      assertSame(request3, request2);
      assertSame(request3, request1);
      
      String string3 = "^Y_I|7V$lea37KD)f5L";
      Response response0 = new Response(int0, string3, linkedList0, typedString0);
      assertEquals(0, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("^Y_I|7V$lea37KD)f5L", response0.getReason());
      assertEquals(572, response0.getStatus());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(response0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      
      long long1 = 0L;
      Response response1 = restAdapter0.logAndReplaceResponse(string3, response0, long1);
      assertEquals(0, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("^Y_I|7V$lea37KD)f5L", response0.getReason());
      assertEquals(572, response0.getStatus());
      assertEquals("^Y_I|7V$lea37KD)f5L", response1.getReason());
      assertEquals(572, response1.getStatus());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(response1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(response0, response1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(response1, response0);
      
      Request request4 = restAdapter0.logAndReplaceRequest(request3);
      assertEquals("default", request4.getMethod());
      assertEquals("default", request4.getUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("default", request2.getMethod());
      assertEquals("default", request2.getUrl());
      assertEquals("default", request3.getUrl());
      assertEquals("default", request3.getMethod());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertNotNull(request4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertSame(request4, request3);
      assertSame(request4, request1);
      assertSame(request4, request2);
      assertSame(request4, request0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(request0, request1);
      assertSame(request0, request4);
      assertSame(request0, request3);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request3);
      assertSame(request1, request4);
      assertSame(request1, request2);
      assertSame(request2, request3);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertSame(request2, request4);
      assertSame(request3, request0);
      assertSame(request3, request2);
      assertSame(request3, request4);
      assertSame(request3, request1);
      
      String string4 = "";
      List<Header> list0 = request0.getHeaders();
      assertEquals(0, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertFalse(list0.contains(header0));
      assertNotNull(list0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(request0, request1);
      assertSame(request0, request4);
      assertSame(request0, request3);
      assertSame(request0, request2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      
      Response response2 = new Response(int0, string4, list0, typedString0);
      assertEquals(0, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", response2.getReason());
      assertEquals(572, response2.getStatus());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertFalse(list0.contains(header0));
      assertNotNull(response2);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      
      long long2 = (-689L);
      Response response3 = restAdapter0.logAndReplaceResponse(server0.DEFAULT_NAME, response2, long2);
      assertEquals(0, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(9L, typedString0.length());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", response2.getReason());
      assertEquals(572, response2.getStatus());
      assertEquals("", response3.getReason());
      assertEquals(572, response3.getStatus());
      assertEquals("default", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(linkedList0.contains(header0));
      assertFalse(list0.contains(header0));
      assertNotNull(response3);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(response2.equals((Object)response1));
      assertFalse(response2.equals((Object)response0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(response3.equals((Object)response0));
      assertFalse(response3.equals((Object)response1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(response2, response3);
      assertNotSame(response2, response1);
      assertNotSame(response2, response0);
      assertSame(response3, response2);
      assertNotSame(response3, response0);
      assertNotSame(response3, response1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(request0, request1);
      assertSame(request0, request4);
      assertSame(request0, request3);
      assertSame(request0, request2);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("^Che{8v7V_1Nc/=&", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
  }
}
